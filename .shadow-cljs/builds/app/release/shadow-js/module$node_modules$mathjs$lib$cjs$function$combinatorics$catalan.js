["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js"],"~:js","shadow$provide[560]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCatalan=void 0;c=b(25);c=(0,c.factory)(\"catalan\",\"typed addScalar divideScalar multiplyScalar combinations isNegative isInteger\".split(\" \"),function(q){var f=q.typed,u=q.addScalar,k=q.divideScalar,t=q.multiplyScalar,p=q.combinations,g=q.isNegative,d=q.isInteger;return f(\"catalan\",{\"number | BigNumber\":function(l){if(!d(l)||g(l))throw new TypeError(\"Non-negative integer value expected in function catalan\");\nreturn k(p(t(l,2),l),u(l,1))}})});a.createCatalan=c}","~:source","shadow$provide[560] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCatalan = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'catalan';\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\nvar createCatalan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger;\n\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\n    }\n  });\n});\nexports.createCatalan = createCatalan;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createCatalan"]],"~:compiled-at",1619135724032,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$combinatorics$catalan.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA+B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,+EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAAYF,CAAKE,CAAAA,SAFsE,CAGvFC,EAAeH,CAAKG,CAAAA,YAHmE,CAIvFC,EAAiBJ,CAAKI,CAAAA,cAJiE,CAKvFC,EAAeL,CAAKK,CAAAA,YALmE,CAMvFC,EAAaN,CAAKM,CAAAA,UANqE,CAOvFC,EAAYP,CAAKO,CAAAA,SAuBrB,OAAON,EAAA,CAhCEH,SAgCF,CAAY,CACjB,qBAAsBU,QAAwB,CAACC,CAAD,CAAI,CAChD,GAAI,CAACF,CAAA,CAAUE,CAAV,CAAL,EAAqBH,CAAA,CAAWG,CAAX,CAArB,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN;AAGF,MAAOP,EAAA,CAAaE,CAAA,CAAaD,CAAA,CAAeK,CAAf,CAAkB,CAAlB,CAAb,CAAmCA,CAAnC,CAAb,CAAoDP,CAAA,CAAUO,CAAV,CAAa,CAAb,CAApD,CALyC,CADjC,CAAZ,CA9BoF,CAA1D,CAwCnClB,EAAQI,CAAAA,aAAR,CAAwBA,CApDsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js\"],\n\"sourcesContent\":[\"shadow$provide[560] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCatalan = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'catalan';\\nvar dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];\\nvar createCatalan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      addScalar = _ref.addScalar,\\n      divideScalar = _ref.divideScalar,\\n      multiplyScalar = _ref.multiplyScalar,\\n      combinations = _ref.combinations,\\n      isNegative = _ref.isNegative,\\n      isInteger = _ref.isInteger;\\n\\n  /**\\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\\n   * catalan only takes integer arguments.\\n   * The following condition must be enforced: n >= 0\\n   *\\n   * Syntax:\\n   *\\n   *   math.catalan(n)\\n   *\\n   * Examples:\\n   *\\n   *    math.catalan(3) // returns 5\\n   *    math.catalan(8) // returns 1430\\n   *\\n   * See also:\\n   *\\n   *    bellNumbers\\n   *\\n   * @param {Number | BigNumber} n    nth Catalan number\\n   * @return {Number | BigNumber}     Cn(n)\\n   */\\n  return typed(name, {\\n    'number | BigNumber': function numberBigNumber(n) {\\n      if (!isInteger(n) || isNegative(n)) {\\n        throw new TypeError('Non-negative integer value expected in function catalan');\\n      }\\n\\n      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));\\n    }\\n  });\\n});\\nexports.createCatalan = createCatalan;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCatalan\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"addScalar\",\"divideScalar\",\"multiplyScalar\",\"combinations\",\"isNegative\",\"isInteger\",\"numberBigNumber\",\"n\",\"TypeError\"]\n}\n"]