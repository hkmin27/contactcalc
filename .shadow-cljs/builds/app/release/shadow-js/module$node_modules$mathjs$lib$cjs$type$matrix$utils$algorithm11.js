["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js"],"~:js","shadow$provide[76]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm11=void 0;c=b(25);c=(0,c.factory)(\"algorithm11\",[\"typed\",\"equalScalar\"],function(q){var f=q.typed,u=q.equalScalar;return function(k,t,p,g){var d=k._values,l=k._index,h=k._ptr,n=k._size,r=k._datatype;if(!d)throw Error(\"Cannot perform operation on Pattern Sparse Matrix and Scalar value\");var v=n[0];n=n[1];var C=u,z=0,w=p;if(\"string\"===typeof r){var B=r;C=f.find(u,[B,B]);z=f.convert(0,B);t=f.convert(t,\nB);w=f.find(p,[B,B])}p=[];r=[];for(var x=[],D=0;D<n;D++){x[D]=r.length;for(var F=h[D+1],E=h[D];E<F;E++){var G=l[E],I=g?w(t,d[E]):w(d[E],t);C(I,z)||(r.push(G),p.push(I))}}x[n]=r.length;return k.createSparseMatrix({values:p,index:r,ptr:x,size:[v,n],datatype:B})}});a.createAlgorithm11=c}","~:source","shadow$provide[76] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm11 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'algorithm11';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm11 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm11 = createAlgorithm11;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["values","index","__esModule","createAlgorithm11","value","datatype","size","ptr"]],"~:compiled-at",1619135723769,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm11.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js\"],\n\"sourcesContent\":[\"shadow$provide[76] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm11 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar name = 'algorithm11';\\nvar dependencies = ['typed', 'equalScalar'];\\nvar createAlgorithm11 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equalScalar = _ref.equalScalar;\\n\\n  /**\\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\\n   * Callback function invoked NZ times (number of nonzero items in S).\\n   *\\n   *\\n   *          \\u250c  f(Sij, b)  ; S(i,j) !== 0\\n   * C(i,j) = \\u2524\\n   *          \\u2514  0          ; otherwise\\n   *\\n   *\\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\\n   * @param {Scalar}   b                 The Scalar value\\n   * @param {Function} callback          The f(Aij,b) operation to invoke\\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\\n   *\\n   * @return {Matrix}                    SparseMatrix (C)\\n   *\\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\\n   */\\n  return function algorithm11(s, b, callback, inverse) {\\n    // sparse matrix arrays\\n    var avalues = s._values;\\n    var aindex = s._index;\\n    var aptr = s._ptr;\\n    var asize = s._size;\\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\\n\\n    if (!avalues) {\\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // equal signature to use\\n\\n    var eq = equalScalar; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string') {\\n      // datatype\\n      dt = adt; // find signature that matches (dt, dt)\\n\\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // convert b to the same datatype\\n\\n      b = typed.convert(b, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result arrays\\n\\n\\n    var cvalues = [];\\n    var cindex = [];\\n    var cptr = []; // loop columns\\n\\n    for (var j = 0; j < columns; j++) {\\n      // initialize ptr\\n      cptr[j] = cindex.length; // values in j\\n\\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        var i = aindex[k]; // invoke callback\\n\\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\\n\\n        if (!eq(v, zero)) {\\n          // push index & value\\n          cindex.push(i);\\n          cvalues.push(v);\\n        }\\n      }\\n    } // update ptr\\n\\n\\n    cptr[columns] = cindex.length; // return sparse matrix\\n\\n    return s.createSparseMatrix({\\n      values: cvalues,\\n      index: cindex,\\n      ptr: cptr,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm11 = createAlgorithm11;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm11\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"equalScalar\",\"algorithm11\",\"s\",\"b\",\"callback\",\"inverse\",\"avalues\",\"_values\",\"aindex\",\"_index\",\"aptr\",\"_ptr\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"Error\",\"rows\",\"columns\",\"eq\",\"zero\",\"cf\",\"dt\",\"find\",\"convert\",\"cvalues\",\"cindex\",\"cptr\",\"j\",\"length\",\"k1\",\"k\",\"k0\",\"i\",\"v\",\"push\",\"createSparseMatrix\",\"values\",\"index\",\"ptr\",\"size\",\"datatype\"]\n}\n"]