["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/boolean.js"],"~:js","shadow$provide[64]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createBoolean=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"boolean\",[\"typed\"],function(f){f=f.typed;return f(\"boolean\",{\"\":function(){return!1},\"boolean\":function(u){return u},number:function(u){return!!u},\"null\":function(u){return!1},BigNumber:function(u){return!u.isZero()},string:function(u){var k=u.toLowerCase();if(\"true\"===k)return!0;if(\"false\"===k)return!1;k=Number(u);if(\"\"!==u&&!isNaN(k))return!!k;throw Error('Cannot convert \"'+\nu+'\" to a boolean');},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this)}})});a.createBoolean=b}","~:source","shadow$provide[64] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBoolean = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _collection = require(\"../utils/collection.js\");\n\nvar name = 'boolean';\nvar dependencies = ['typed'];\nvar createBoolean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    \"boolean\": function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    \"null\": function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      var num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBoolean = createBoolean;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","createBoolean","__esModule","value","number","BigNumber"]],"~:compiled-at",1619135723763,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$boolean.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA+B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACvFC,CAAAA,CAAQD,CAAKC,CAAAA,KA6BjB,OAAOA,EAAA,CAhCEH,SAgCF,CAAY,CACjB,GAAII,QAAU,EAAG,CACf,MAAO,CAAA,CADQ,CADA,CAIjB,UAAWC,QAAgB,CAACC,CAAD,CAAI,CAC7B,MAAOA,EADsB,CAJd,CAOjBC,OAAQA,QAAe,CAACD,CAAD,CAAI,CACzB,MAAO,CAAC,CAACA,CADgB,CAPV,CAUjB,OAAQE,QAAc,CAACF,CAAD,CAAI,CACxB,MAAO,CAAA,CADiB,CAVT,CAajBG,UAAWA,QAAkB,CAACH,CAAD,CAAI,CAC/B,MAAO,CAACA,CAAEI,CAAAA,MAAF,EADuB,CAbhB,CAgBjBC,OAAQA,QAAe,CAACL,CAAD,CAAI,CAEzB,IAAIM,EAAQN,CAAEO,CAAAA,WAAF,EAEZ,IAAc,MAAd,GAAID,CAAJ,CACE,MAAO,CAAA,CACF,IAAc,OAAd,GAAIA,CAAJ,CACL,MAAO,CAAA,CAILE,EAAAA,CAAMC,MAAA,CAAOT,CAAP,CAEV,IAAU,EAAV,GAAIA,CAAJ,EAAgB,CAACU,KAAA,CAAMF,CAAN,CAAjB,CACE,MAAO,CAAC,CAACA,CAGX,MAAUG,MAAJ,CAAU,kBAAV;AAA+BX,CAA/B,CAAmC,gBAAnC,CAAN,CAjByB,CAhBV,CAmCjB,iBAAkBY,QAAoB,CAACZ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGR,CAAYqB,CAAAA,OAAhB,EAAyBb,CAAzB,CAA4B,IAA5B,CADiC,CAnCzB,CAAZ,CA9BoF,CAA1D,CAsEnCd,EAAQI,CAAAA,aAAR,CAAwBA,CApFqC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/boolean.js\"],\n\"sourcesContent\":[\"shadow$provide[64] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBoolean = void 0;\\n\\nvar _factory = require(\\\"../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../utils/collection.js\\\");\\n\\nvar name = 'boolean';\\nvar dependencies = ['typed'];\\nvar createBoolean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Create a boolean or convert a string or number to a boolean.\\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\\n   * case of zero.\\n   * Strings can be `'true'` or `'false'`, or can contain a number.\\n   * When value is a matrix, all elements will be converted to boolean.\\n   *\\n   * Syntax:\\n   *\\n   *    math.boolean(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.boolean(0)     // returns false\\n   *    math.boolean(1)     // returns true\\n   *    math.boolean(-3)     // returns true\\n   *    math.boolean('true')     // returns true\\n   *    math.boolean('false')     // returns false\\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\\n   *\\n   * See also:\\n   *\\n   *    bignumber, complex, index, matrix, string, unit\\n   *\\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\\n   * @return {boolean | Array | Matrix} The boolean value\\n   */\\n  return typed(name, {\\n    '': function _() {\\n      return false;\\n    },\\n    \\\"boolean\\\": function boolean(x) {\\n      return x;\\n    },\\n    number: function number(x) {\\n      return !!x;\\n    },\\n    \\\"null\\\": function _null(x) {\\n      return false;\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return !x.isZero();\\n    },\\n    string: function string(x) {\\n      // try case insensitive\\n      var lcase = x.toLowerCase();\\n\\n      if (lcase === 'true') {\\n        return true;\\n      } else if (lcase === 'false') {\\n        return false;\\n      } // test whether value is a valid number\\n\\n\\n      var num = Number(x);\\n\\n      if (x !== '' && !isNaN(num)) {\\n        return !!num;\\n      }\\n\\n      throw new Error('Cannot convert \\\"' + x + '\\\" to a boolean');\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createBoolean = createBoolean;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBoolean\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"_\",\"boolean\",\"x\",\"number\",\"_null\",\"BigNumber\",\"isZero\",\"string\",\"lcase\",\"toLowerCase\",\"num\",\"Number\",\"isNaN\",\"Error\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]