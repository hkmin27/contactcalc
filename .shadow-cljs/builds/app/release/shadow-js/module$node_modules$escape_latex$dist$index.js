["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/escape-latex/dist/index.js"],"~:js","shadow$provide[259]=function(c,b,y,a){var q=Object.assign||function(t){for(var p=1;p<arguments.length;p++){var g=arguments[p],d;for(d in g)Object.prototype.hasOwnProperty.call(g,d)&&(t[d]=g[d])}return t},f={\"{\":\"\\\\{\",\"}\":\"\\\\}\",\"\\\\\":\"\\\\textbackslash{}\",\"#\":\"\\\\#\",$:\"\\\\$\",\"%\":\"\\\\%\",\"\\x26\":\"\\\\\\x26\",\"^\":\"\\\\textasciicircum{}\",_:\"\\\\_\",\"~\":\"\\\\textasciitilde{}\"},u={\"–\":\"\\\\--\",\"—\":\"\\\\---\",\" \":\"~\",\"\\t\":\"\\\\qquad{}\",\"\\r\\n\":\"\\\\newline{}\",\"\\n\":\"\\\\newline{}\"},k=function(t,p){return q({},t,p)};y.exports=function(t){var p=\n1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},g=p.preserveFormatting;g=void 0===g?!1:g;p=p.escapeMapFn;var d=String(t),l=\"\",h=(void 0===p?k:p)(q({},f),g?q({},u):{}),n=Object.keys(h);for(p=function(){var r=!1;n.forEach(function(v,C){!r&&d.length>=v.length&&d.slice(0,v.length)===v&&(l+=h[n[C]],d=d.slice(v.length,d.length),r=!0)});r||(l+=d.slice(0,1),d=d.slice(1,d.length))};d;)p();return l}}","~:source","shadow$provide[259] = function(global,require,module,exports) {\n\"use strict\";\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"\\u2013\": \"\\\\--\",\n  \"\\u2014\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["_","$"]],"~:compiled-at",1619135723961,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$escape_latex$dist$index.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/escape-latex/dist/index.js\"],\n\"sourcesContent\":[\"shadow$provide[259] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\n// Map the characters to escape to their escaped values. The list is derived\\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\\n\\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar defaultEscapes = {\\n  \\\"{\\\": \\\"\\\\\\\\{\\\",\\n  \\\"}\\\": \\\"\\\\\\\\}\\\",\\n  \\\"\\\\\\\\\\\": \\\"\\\\\\\\textbackslash{}\\\",\\n  \\\"#\\\": \\\"\\\\\\\\#\\\",\\n  $: \\\"\\\\\\\\$\\\",\\n  \\\"%\\\": \\\"\\\\\\\\%\\\",\\n  \\\"&\\\": \\\"\\\\\\\\&\\\",\\n  \\\"^\\\": \\\"\\\\\\\\textasciicircum{}\\\",\\n  _: \\\"\\\\\\\\_\\\",\\n  \\\"~\\\": \\\"\\\\\\\\textasciitilde{}\\\"\\n};\\nvar formatEscapes = {\\n  \\\"\\\\u2013\\\": \\\"\\\\\\\\--\\\",\\n  \\\"\\\\u2014\\\": \\\"\\\\\\\\---\\\",\\n  \\\" \\\": \\\"~\\\",\\n  \\\"\\\\t\\\": \\\"\\\\\\\\qquad{}\\\",\\n  \\\"\\\\r\\\\n\\\": \\\"\\\\\\\\newline{}\\\",\\n  \\\"\\\\n\\\": \\\"\\\\\\\\newline{}\\\"\\n};\\n\\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\\n  return _extends({}, defaultEscapes, formatEscapes);\\n};\\n\\n/**\\n * Escape a string to be used in LaTeX documents.\\n * @param {string} str the string to be escaped.\\n * @param {boolean} params.preserveFormatting whether formatting escapes should\\n *  be performed (default: false).\\n * @param {function} params.escapeMapFn the function to modify the escape maps.\\n * @return {string} the escaped string, ready to be used in LaTeX.\\n */\\nmodule.exports = function (str) {\\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n      _ref$preserveFormatti = _ref.preserveFormatting,\\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\\n      _ref$escapeMapFn = _ref.escapeMapFn,\\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\\n\\n  var runningStr = String(str);\\n  var result = \\\"\\\";\\n\\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\\n\\n  // Algorithm: Go through the string character by character, if it matches\\n  // with one of the special characters then we'll replace it with the escaped\\n  // version.\\n\\n  var _loop = function _loop() {\\n    var specialCharFound = false;\\n    escapeKeys.forEach(function (key, index) {\\n      if (specialCharFound) {\\n        return;\\n      }\\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\\n        result += escapes[escapeKeys[index]];\\n        runningStr = runningStr.slice(key.length, runningStr.length);\\n        specialCharFound = true;\\n      }\\n    });\\n    if (!specialCharFound) {\\n      result += runningStr.slice(0, 1);\\n      runningStr = runningStr.slice(1, runningStr.length);\\n    }\\n  };\\n\\n  while (runningStr) {\\n    _loop();\\n  }\\n  return result;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_extends\",\"Object\",\"assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"prototype\",\"hasOwnProperty\",\"call\",\"defaultEscapes\",\"$\",\"_\",\"formatEscapes\",\"defaultEscapeMapFn\",\"module.exports\",\"str\",\"_ref\",\"undefined\",\"_ref$preserveFormatti\",\"preserveFormatting\",\"_ref$escapeMapFn\",\"escapeMapFn\",\"runningStr\",\"String\",\"result\",\"escapes\",\"escapeKeys\",\"keys\",\"_loop\",\"specialCharFound\",\"forEach\",\"index\",\"slice\"]\n}\n"]