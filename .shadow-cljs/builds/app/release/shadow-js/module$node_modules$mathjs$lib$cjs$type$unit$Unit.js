["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/unit/Unit.js"],"~:js","shadow$provide[203]=function(c,b,y,a){function q(h){\"@babel/helpers - typeof\";q=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&\"function\"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":typeof n};return q(h)}function f(){f=Object.assign||function(h){for(var n=1;n<arguments.length;n++){var r=arguments[n],v;for(v in r)Object.prototype.hasOwnProperty.call(r,v)&&(h[v]=r[v])}return h};return f.apply(this,arguments)}\nfunction u(h,n){var r=Object.keys(h);if(Object.getOwnPropertySymbols){var v=Object.getOwnPropertySymbols(h);n&&(v=v.filter(function(C){return Object.getOwnPropertyDescriptor(h,C).enumerable}));r.push.apply(r,v)}return r}function k(h){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach(function(v){var C=r[v];v in h?Object.defineProperty(h,v,{value:C,enumerable:!0,configurable:!0,writable:!0}):h[v]=C}):Object.getOwnPropertyDescriptors?Object.defineProperties(h,\nObject.getOwnPropertyDescriptors(r)):u(Object(r)).forEach(function(v){Object.defineProperty(h,v,Object.getOwnPropertyDescriptor(r,v))})}return h}Object.defineProperty(a,\"__esModule\",{value:!0});a.createUnitClass=void 0;var t=b(14);c=b(25);var p=b(127),g=b(21),d=b(15),l=b(202);b=(0,c.factory)(\"Unit\",\"?on config addScalar subtract multiplyScalar divideScalar pow abs fix round equal isNumeric format number Complex BigNumber Fraction\".split(\" \"),function(h){function n(ea,qa){if(!(this instanceof n))throw Error(\"Constructor must be called with the new operator\");\nif(null!==ea&&void 0!==ea&&!T(ea)&&!(0,t.isComplex)(ea))throw new TypeError(\"First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined\");if(void 0!==qa&&(\"string\"!==typeof qa||\"\"===qa))throw new TypeError(\"Second parameter in Unit constructor must be a string\");if(void 0!==qa)qa=n.parse(qa),this.units=qa.units,this.dimensions=qa.dimensions;else for(this.units=[{unit:na,prefix:fa.NONE,power:0}],this.dimensions=[],qa=0;qa<va.length;qa++)this.dimensions[qa]=0;this.value=\nvoid 0!==ea&&null!==ea?this._normalize(ea):null;this.fixPrefix=!1;this.skipAutomaticSimplification=!0}function r(){for(;\" \"===oa||\"\\t\"===oa;)C()}function v(ea){return\"0\"<=ea&&\"9\">=ea}function C(){Ha++;oa=Ia.charAt(Ha)}function z(ea){Ha=ea;oa=Ia.charAt(Ha)}function w(){var ea=\"\",qa=Ha;\"+\"===oa?C():\"-\"===oa&&(ea+=oa,C());if(!(\"0\"<=oa&&\"9\">=oa||\".\"===oa))return z(qa),null;if(\".\"===oa){if(ea+=oa,C(),!v(oa))return z(qa),null}else{for(;v(oa);)ea+=oa,C();\".\"===oa&&(ea+=oa,C())}for(;v(oa);)ea+=oa,C();if(\"E\"===\noa||\"e\"===oa){var ya=Ha;qa=\"\"+oa;C();if(\"+\"===oa||\"-\"===oa)qa+=oa,C();if(!v(oa))return z(ya),ea;for(ea+=qa;v(oa);)ea+=oa,C()}return ea}function B(ea){return oa===ea?(C(),ea):null}function x(ea){return ea.equalBase(da.NONE)&&null!==ea.value&&!E.predictable?ea.value:ea}function D(ea){\"BigNumber\"===ea.number?(ea=(0,l.createBigNumberPi)(ka),la.rad.value=new ka(1),la.deg.value=ea.div(180),la.grad.value=ea.div(200),la.cycle.value=ea.times(2),la.arcsec.value=ea.div(648E3),la.arcmin.value=ea.div(10800)):\n(la.rad.value=1,la.deg.value=Math.PI/180,la.grad.value=Math.PI/200,la.cycle.value=2*Math.PI,la.arcsec.value=Math.PI/648E3,la.arcmin.value=Math.PI/10800);la.radian.value=la.rad.value;la.degree.value=la.deg.value;la.gradian.value=la.grad.value}var F=h.on,E=h.config,G=h.addScalar,I=h.subtract,L=h.multiplyScalar,M=h.divideScalar,S=h.pow,P=h.abs,R=h.fix,ba=h.round,Q=h.equal,T=h.isNumeric,Y=h.format,ca=h.Complex,ka=h.BigNumber,ha=h.Fraction,wa=h.number;n.prototype.type=\"Unit\";n.prototype.isUnit=!0;var Ia,\nHa,oa;n.parse=function(ea,qa){qa=qa||{};Ia=ea;Ha=-1;oa=\"\";if(\"string\"!==typeof Ia)throw new TypeError(\"Invalid argument in Unit.parse, string expected\");var ya=new n;ya.units=[];var Da=1,Ea=!1;C();r();var ab=w(),fb=null;if(ab){if(\"BigNumber\"===E.number)fb=new ka(ab);else if(\"Fraction\"===E.number)try{fb=new ha(ab)}catch(ma){fb=parseFloat(ab)}else fb=parseFloat(ab);r();B(\"*\")?(Da=1,Ea=!0):B(\"/\")&&(Da=-1,Ea=!0)}ab=[];for(var hb=1;;){for(r();\"(\"===oa;)ab.push(Da),hb*=Da,Da=1,C(),r();if(oa){var gb=oa;\nfor(Ea=\"\";v(oa)||n.isValidAlpha(oa);)Ea+=oa,C();var O=Ea.charAt(0);Ea=n.isValidAlpha(O)?Ea:null;if(null===Ea)throw new SyntaxError('Unexpected \"'+gb+'\" in \"'+Ia+'\" at index '+Ha.toString());}else break;gb=Ka(Ea);if(null===gb)throw new SyntaxError('Unit \"'+Ea+'\" not found.');Da*=hb;r();if(B(\"^\")){r();Ea=w();if(null===Ea)throw new SyntaxError('In \"'+ea+'\", \"^\" must be followed by a floating-point number');Da*=Ea}ya.units.push({unit:gb.unit,prefix:gb.prefix,power:Da});for(Ea=0;Ea<va.length;Ea++)ya.dimensions[Ea]+=\n(gb.unit.dimensions[Ea]||0)*Da;for(r();\")\"===oa;){if(0===ab.length)throw new SyntaxError('Unmatched \")\" in \"'+Ia+'\" at index '+Ha.toString());hb/=ab.pop();C();r()}Ea=!1;B(\"*\")?(Da=1,Ea=!0):B(\"/\")?(Da=-1,Ea=!0):Da=1;gb.unit.base&&(ta.auto[gb.unit.base.key]={unit:gb.unit,prefix:gb.prefix})}r();if(oa)throw new SyntaxError('Could not parse: \"'+ea+'\"');if(Ea)throw new SyntaxError('Trailing characters: \"'+ea+'\"');if(0!==ab.length)throw new SyntaxError('Unmatched \"(\" in \"'+Ia+'\"');if(0===ya.units.length&&\n!qa.allowNoUnits)throw new SyntaxError('\"'+ea+'\" contains no units');ya.value=void 0!==fb?ya._normalize(fb):null;return ya};n.prototype.clone=function(){var ea=new n;ea.fixPrefix=this.fixPrefix;ea.skipAutomaticSimplification=this.skipAutomaticSimplification;ea.value=(0,d.clone)(this.value);ea.dimensions=this.dimensions.slice(0);ea.units=[];for(var qa=0;qa<this.units.length;qa++){ea.units[qa]={};for(var ya in this.units[qa])(0,d.hasOwnProperty)(this.units[qa],ya)&&(ea.units[qa][ya]=this.units[qa][ya])}return ea};\nn.prototype._isDerived=function(){return 0===this.units.length?!1:1<this.units.length||1E-15<Math.abs(this.units[0].power-1)};n.prototype._normalize=function(ea){if(null===ea||void 0===ea||0===this.units.length)return ea;if(this._isDerived()){var qa=ea;var ya=n._getNumberConverter((0,t.typeOf)(ea));for(var Da=0;Da<this.units.length;Da++){var Ea=ya(this.units[Da].unit.value);var ab=ya(this.units[Da].prefix.value);ea=ya(this.units[Da].power);qa=L(qa,S(L(Ea,ab),ea))}return qa}ya=n._getNumberConverter((0,\nt.typeOf)(ea));Ea=ya(this.units[0].unit.value);qa=ya(this.units[0].unit.offset);ab=ya(this.units[0].prefix.value);return L(G(ea,qa),L(Ea,ab))};n.prototype._denormalize=function(ea,qa){if(null===ea||void 0===ea||0===this.units.length)return ea;if(this._isDerived()){qa=ea;var ya=n._getNumberConverter((0,t.typeOf)(ea));for(var Da=0;Da<this.units.length;Da++){var Ea=ya(this.units[Da].unit.value);var ab=ya(this.units[Da].prefix.value);ea=ya(this.units[Da].power);qa=M(qa,S(L(Ea,ab),ea))}return qa}ya=n._getNumberConverter((0,\nt.typeOf)(ea));Ea=ya(this.units[0].unit.value);ab=ya(this.units[0].prefix.value);ya=ya(this.units[0].unit.offset);return void 0===qa||null===qa?I(M(M(ea,Ea),ab),ya):I(M(M(ea,Ea),qa),ya)};var Ka=(0,p.memoize)(function(ea){if((0,d.hasOwnProperty)(la,ea))return ea=la[ea],{unit:ea,prefix:ea.prefixes[\"\"]};for(var qa in la)if((0,d.hasOwnProperty)(la,qa)&&(0,g.endsWith)(ea,qa)){var ya=la[qa],Da=ea.substring(0,ea.length-qa.length);Da=(0,d.hasOwnProperty)(ya.prefixes,Da)?ya.prefixes[Da]:void 0;if(void 0!==\nDa)return{unit:ya,prefix:Da}}return null},{hasher:function(ea){return ea[0]},limit:100});n.isValuelessUnit=function(ea){return null!==Ka(ea)};n.prototype.hasBase=function(ea){\"string\"===typeof ea&&(ea=da[ea]);if(!ea)return!1;for(var qa=0;qa<va.length;qa++)if(1E-12<Math.abs((this.dimensions[qa]||0)-(ea.dimensions[qa]||0)))return!1;return!0};n.prototype.equalBase=function(ea){for(var qa=0;qa<va.length;qa++)if(1E-12<Math.abs((this.dimensions[qa]||0)-(ea.dimensions[qa]||0)))return!1;return!0};n.prototype.equals=\nfunction(ea){return this.equalBase(ea)&&Q(this.value,ea.value)};n.prototype.multiply=function(ea){for(var qa=this.clone(),ya=0;ya<va.length;ya++)qa.dimensions[ya]=(this.dimensions[ya]||0)+(ea.dimensions[ya]||0);for(ya=0;ya<ea.units.length;ya++){var Da=k({},ea.units[ya]);qa.units.push(Da)}null!==this.value||null!==ea.value?(ya=null===this.value?this._normalize(1):this.value,ea=null===ea.value?ea._normalize(1):ea.value,qa.value=L(ya,ea)):qa.value=null;qa.skipAutomaticSimplification=!1;return x(qa)};\nn.prototype.divide=function(ea){for(var qa=this.clone(),ya=0;ya<va.length;ya++)qa.dimensions[ya]=(this.dimensions[ya]||0)-(ea.dimensions[ya]||0);for(ya=0;ya<ea.units.length;ya++){var Da=k(k({},ea.units[ya]),{},{power:-ea.units[ya].power});qa.units.push(Da)}null!==this.value||null!==ea.value?(ya=null===this.value?this._normalize(1):this.value,ea=null===ea.value?ea._normalize(1):ea.value,qa.value=M(ya,ea)):qa.value=null;qa.skipAutomaticSimplification=!1;return x(qa)};n.prototype.pow=function(ea){for(var qa=\nthis.clone(),ya=0;ya<va.length;ya++)qa.dimensions[ya]=(this.dimensions[ya]||0)*ea;for(ya=0;ya<qa.units.length;ya++)qa.units[ya].power*=ea;qa.value=null!==qa.value?S(qa.value,ea):null;qa.skipAutomaticSimplification=!1;return x(qa)};n.prototype.abs=function(){var ea=this.clone();ea.value=null!==ea.value?P(ea.value):null;for(var qa in ea.units)if(\"VA\"===ea.units[qa].unit.name||\"VAR\"===ea.units[qa].unit.name)ea.units[qa].unit=la.W;return ea};n.prototype.to=function(ea){var qa=null===this.value?this._normalize(1):\nthis.value;if(\"string\"===typeof ea){ea=n.parse(ea);if(!this.equalBase(ea))throw Error(\"Units do not match ('\".concat(ea.toString(),\"' !\\x3d '\").concat(this.toString(),\"')\"));if(null!==ea.value)throw Error(\"Cannot convert to a unit with a value\");ea.value=(0,d.clone)(qa);ea.fixPrefix=!0;ea.skipAutomaticSimplification=!0;return ea}if((0,t.isUnit)(ea)){if(!this.equalBase(ea))throw Error(\"Units do not match ('\".concat(ea.toString(),\"' !\\x3d '\").concat(this.toString(),\"')\"));if(null!==ea.value)throw Error(\"Cannot convert to a unit with a value\");\nea=ea.clone();ea.value=(0,d.clone)(qa);ea.fixPrefix=!0;ea.skipAutomaticSimplification=!0;return ea}throw Error(\"String or Unit expected as parameter\");};n.prototype.toNumber=function(ea){return wa(this.toNumeric(ea))};n.prototype.toNumeric=function(ea){ea=ea?this.to(ea):this.clone();return ea._isDerived()||0===ea.units.length?ea._denormalize(ea.value):ea._denormalize(ea.value,ea.units[0].prefix.value)};n.prototype.toString=function(){return this.format()};n.prototype.toJSON=function(){return{mathjs:\"Unit\",\nvalue:this._denormalize(this.value),unit:this.formatUnits(),fixPrefix:this.fixPrefix}};n.fromJSON=function(ea){var qa=new n(ea.value,ea.unit);qa.fixPrefix=ea.fixPrefix||!1;return qa};n.prototype.valueOf=n.prototype.toString;n.prototype.simplify=function(){var ea=this.clone(),qa=[],ya;for(ya in Fa)if((0,d.hasOwnProperty)(Fa,ya)&&ea.hasBase(da[ya])){var Da=ya;break}if(\"NONE\"===Da)ea.units=[];else{var Ea;Da&&(0,d.hasOwnProperty)(Fa,Da)&&(Ea=Fa[Da]);if(Ea)ea.units=[{unit:Ea.unit,prefix:Ea.prefix,power:1}];\nelse{Da=!1;for(ya=0;ya<va.length;ya++)Ea=va[ya],1E-12<Math.abs(ea.dimensions[ya]||0)&&((0,d.hasOwnProperty)(Fa,Ea)?qa.push({unit:Fa[Ea].unit,prefix:Fa[Ea].prefix,power:ea.dimensions[ya]||0}):Da=!0);qa.length<ea.units.length&&!Da&&(ea.units=qa)}}return ea};n.prototype.toSI=function(){for(var ea=this.clone(),qa=[],ya=0;ya<va.length;ya++){var Da=va[ya];if(1E-12<Math.abs(ea.dimensions[ya]||0))if((0,d.hasOwnProperty)(ta.si,Da))qa.push({unit:ta.si[Da].unit,prefix:ta.si[Da].prefix,power:ea.dimensions[ya]||\n0});else throw Error(\"Cannot express custom unit \"+Da+\" in SI units\");}ea.units=qa;ea.fixPrefix=!0;ea.skipAutomaticSimplification=!0;return ea};n.prototype.formatUnits=function(){for(var ea=\"\",qa=\"\",ya=0,Da=0,Ea=0;Ea<this.units.length;Ea++)0<this.units[Ea].power?(ya++,ea+=\" \"+this.units[Ea].prefix.name+this.units[Ea].unit.name,1E-15<Math.abs(this.units[Ea].power-1)&&(ea+=\"^\"+this.units[Ea].power)):0>this.units[Ea].power&&Da++;if(0<Da)for(Ea=0;Ea<this.units.length;Ea++)0>this.units[Ea].power&&(0<ya?\n(qa+=\" \"+this.units[Ea].prefix.name+this.units[Ea].unit.name,1E-15<Math.abs(this.units[Ea].power+1)&&(qa+=\"^\"+-this.units[Ea].power)):(qa+=\" \"+this.units[Ea].prefix.name+this.units[Ea].unit.name,qa+=\"^\"+this.units[Ea].power));ea=ea.substr(1);qa=qa.substr(1);1<ya&&0<Da&&(ea=\"(\"+ea+\")\");1<Da&&0<ya&&(qa=\"(\"+qa+\")\");0<ya&&0<Da&&(ea+=\" / \");return ea+qa};n.prototype.format=function(ea){var qa=this.skipAutomaticSimplification||null===this.value?this.clone():this.simplify(),ya=!1;\"undefined\"!==typeof qa.value&&\nnull!==qa.value&&(0,t.isComplex)(qa.value)&&(ya=1E-14>Math.abs(qa.value.re));for(var Da in qa.units)(0,d.hasOwnProperty)(qa.units,Da)&&qa.units[Da].unit&&(\"VA\"===qa.units[Da].unit.name&&ya?qa.units[Da].unit=la.VAR:\"VAR\"!==qa.units[Da].unit.name||ya||(qa.units[Da].unit=la.VA));1===qa.units.length&&!qa.fixPrefix&&1E-14>Math.abs(qa.units[0].power-Math.round(qa.units[0].power))&&(qa.units[0].prefix=qa._bestPrefix());ya=qa._denormalize(qa.value);ea=null!==qa.value?Y(ya,ea||{}):\"\";ya=qa.formatUnits();qa.value&&\n(0,t.isComplex)(qa.value)&&(ea=\"(\"+ea+\")\");0<ya.length&&0<ea.length&&(ea+=\" \");return ea+ya};n.prototype._bestPrefix=function(){if(1!==this.units.length)throw Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");if(1E-14<=Math.abs(this.units[0].power-Math.round(this.units[0].power)))throw Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");var ea=null!==this.value?P(this.value):\n0,qa=P(this.units[0].unit.value),ya=this.units[0].prefix;if(0===ea)return ya;var Da=this.units[0].power,Ea=Math.log(ea/Math.pow(ya.value*qa,Da))/Math.LN10-1.2;if(-2.200001<Ea&&1.800001>Ea)return ya;Ea=Math.abs(Ea);var ab=this.units[0].unit.prefixes,fb;for(fb in ab)if((0,d.hasOwnProperty)(ab,fb)){var hb=ab[fb];if(hb.scientific){var gb=Math.abs(Math.log(ea/Math.pow(hb.value*qa,Da))/Math.LN10-1.2);if(gb<Ea||gb===Ea&&hb.name.length<ya.name.length)ya=hb,Ea=gb}}return ya};n.prototype.splitUnit=function(ea){for(var qa=\nthis.clone(),ya=[],Da=0;Da<ea.length;Da++){qa=qa.to(ea[Da]);if(Da===ea.length-1)break;var Ea=qa.toNumeric(),ab=ba(Ea);Ea=Q(ab,Ea)?ab:R(qa.toNumeric());Ea=new n(Ea,ea[Da].toString());ya.push(Ea);qa=I(qa,Ea)}for(Da=ea=0;Da<ya.length;Da++)ea=G(ea,ya[Da].value);Q(ea,this.value)&&(qa.value=0);ya.push(qa);return ya};var fa={NONE:{\"\":{name:\"\",value:1,scientific:!0}},SHORT:{\"\":{name:\"\",value:1,scientific:!0},da:{name:\"da\",value:10,scientific:!1},h:{name:\"h\",value:100,scientific:!1},k:{name:\"k\",value:1E3,\nscientific:!0},M:{name:\"M\",value:1E6,scientific:!0},G:{name:\"G\",value:1E9,scientific:!0},T:{name:\"T\",value:1E12,scientific:!0},P:{name:\"P\",value:1E15,scientific:!0},E:{name:\"E\",value:1E18,scientific:!0},Z:{name:\"Z\",value:1E21,scientific:!0},Y:{name:\"Y\",value:1E24,scientific:!0},d:{name:\"d\",value:.1,scientific:!1},c:{name:\"c\",value:.01,scientific:!1},m:{name:\"m\",value:.001,scientific:!0},u:{name:\"u\",value:1E-6,scientific:!0},n:{name:\"n\",value:1E-9,scientific:!0},p:{name:\"p\",value:1E-12,scientific:!0},\nf:{name:\"f\",value:1E-15,scientific:!0},a:{name:\"a\",value:1E-18,scientific:!0},z:{name:\"z\",value:1E-21,scientific:!0},y:{name:\"y\",value:1E-24,scientific:!0}},LONG:{\"\":{name:\"\",value:1,scientific:!0},deca:{name:\"deca\",value:10,scientific:!1},hecto:{name:\"hecto\",value:100,scientific:!1},kilo:{name:\"kilo\",value:1E3,scientific:!0},mega:{name:\"mega\",value:1E6,scientific:!0},giga:{name:\"giga\",value:1E9,scientific:!0},tera:{name:\"tera\",value:1E12,scientific:!0},peta:{name:\"peta\",value:1E15,scientific:!0},\nexa:{name:\"exa\",value:1E18,scientific:!0},zetta:{name:\"zetta\",value:1E21,scientific:!0},yotta:{name:\"yotta\",value:1E24,scientific:!0},deci:{name:\"deci\",value:.1,scientific:!1},centi:{name:\"centi\",value:.01,scientific:!1},milli:{name:\"milli\",value:.001,scientific:!0},micro:{name:\"micro\",value:1E-6,scientific:!0},nano:{name:\"nano\",value:1E-9,scientific:!0},pico:{name:\"pico\",value:1E-12,scientific:!0},femto:{name:\"femto\",value:1E-15,scientific:!0},atto:{name:\"atto\",value:1E-18,scientific:!0},zepto:{name:\"zepto\",\nvalue:1E-21,scientific:!0},yocto:{name:\"yocto\",value:1E-24,scientific:!0}},SQUARED:{\"\":{name:\"\",value:1,scientific:!0},da:{name:\"da\",value:100,scientific:!1},h:{name:\"h\",value:1E4,scientific:!1},k:{name:\"k\",value:1E6,scientific:!0},M:{name:\"M\",value:1E12,scientific:!0},G:{name:\"G\",value:1E18,scientific:!0},T:{name:\"T\",value:1E24,scientific:!0},P:{name:\"P\",value:1E30,scientific:!0},E:{name:\"E\",value:1E36,scientific:!0},Z:{name:\"Z\",value:1E42,scientific:!0},Y:{name:\"Y\",value:1E48,scientific:!0},d:{name:\"d\",\nvalue:.01,scientific:!1},c:{name:\"c\",value:1E-4,scientific:!1},m:{name:\"m\",value:1E-6,scientific:!0},u:{name:\"u\",value:1E-12,scientific:!0},n:{name:\"n\",value:1E-18,scientific:!0},p:{name:\"p\",value:1E-24,scientific:!0},f:{name:\"f\",value:1E-30,scientific:!0},a:{name:\"a\",value:1E-36,scientific:!0},z:{name:\"z\",value:1E-42,scientific:!0},y:{name:\"y\",value:1E-48,scientific:!0}},CUBIC:{\"\":{name:\"\",value:1,scientific:!0},da:{name:\"da\",value:1E3,scientific:!1},h:{name:\"h\",value:1E6,scientific:!1},k:{name:\"k\",\nvalue:1E9,scientific:!0},M:{name:\"M\",value:1E18,scientific:!0},G:{name:\"G\",value:1E27,scientific:!0},T:{name:\"T\",value:1E36,scientific:!0},P:{name:\"P\",value:1E45,scientific:!0},E:{name:\"E\",value:1E54,scientific:!0},Z:{name:\"Z\",value:1E63,scientific:!0},Y:{name:\"Y\",value:1E72,scientific:!0},d:{name:\"d\",value:.001,scientific:!1},c:{name:\"c\",value:1E-6,scientific:!1},m:{name:\"m\",value:1E-9,scientific:!0},u:{name:\"u\",value:1E-18,scientific:!0},n:{name:\"n\",value:1E-27,scientific:!0},p:{name:\"p\",value:1E-36,\nscientific:!0},f:{name:\"f\",value:1E-45,scientific:!0},a:{name:\"a\",value:1E-54,scientific:!0},z:{name:\"z\",value:1E-63,scientific:!0},y:{name:\"y\",value:1E-72,scientific:!0}},BINARY_SHORT_SI:{\"\":{name:\"\",value:1,scientific:!0},k:{name:\"k\",value:1E3,scientific:!0},M:{name:\"M\",value:1E6,scientific:!0},G:{name:\"G\",value:1E9,scientific:!0},T:{name:\"T\",value:1E12,scientific:!0},P:{name:\"P\",value:1E15,scientific:!0},E:{name:\"E\",value:1E18,scientific:!0},Z:{name:\"Z\",value:1E21,scientific:!0},Y:{name:\"Y\",value:1E24,\nscientific:!0}},BINARY_SHORT_IEC:{\"\":{name:\"\",value:1,scientific:!0},Ki:{name:\"Ki\",value:1024,scientific:!0},Mi:{name:\"Mi\",value:Math.pow(1024,2),scientific:!0},Gi:{name:\"Gi\",value:Math.pow(1024,3),scientific:!0},Ti:{name:\"Ti\",value:Math.pow(1024,4),scientific:!0},Pi:{name:\"Pi\",value:Math.pow(1024,5),scientific:!0},Ei:{name:\"Ei\",value:Math.pow(1024,6),scientific:!0},Zi:{name:\"Zi\",value:Math.pow(1024,7),scientific:!0},Yi:{name:\"Yi\",value:Math.pow(1024,8),scientific:!0}},BINARY_LONG_SI:{\"\":{name:\"\",\nvalue:1,scientific:!0},kilo:{name:\"kilo\",value:1E3,scientific:!0},mega:{name:\"mega\",value:1E6,scientific:!0},giga:{name:\"giga\",value:1E9,scientific:!0},tera:{name:\"tera\",value:1E12,scientific:!0},peta:{name:\"peta\",value:1E15,scientific:!0},exa:{name:\"exa\",value:1E18,scientific:!0},zetta:{name:\"zetta\",value:1E21,scientific:!0},yotta:{name:\"yotta\",value:1E24,scientific:!0}},BINARY_LONG_IEC:{\"\":{name:\"\",value:1,scientific:!0},kibi:{name:\"kibi\",value:1024,scientific:!0},mebi:{name:\"mebi\",value:Math.pow(1024,\n2),scientific:!0},gibi:{name:\"gibi\",value:Math.pow(1024,3),scientific:!0},tebi:{name:\"tebi\",value:Math.pow(1024,4),scientific:!0},pebi:{name:\"pebi\",value:Math.pow(1024,5),scientific:!0},exi:{name:\"exi\",value:Math.pow(1024,6),scientific:!0},zebi:{name:\"zebi\",value:Math.pow(1024,7),scientific:!0},yobi:{name:\"yobi\",value:Math.pow(1024,8),scientific:!0}},BTU:{\"\":{name:\"\",value:1,scientific:!0},MM:{name:\"MM\",value:1E6,scientific:!0}}};fa.SHORTLONG=f({},fa.SHORT,fa.LONG);fa.BINARY_SHORT=f({},fa.BINARY_SHORT_SI,\nfa.BINARY_SHORT_IEC);fa.BINARY_LONG=f({},fa.BINARY_LONG_SI,fa.BINARY_LONG_IEC);var va=\"MASS LENGTH TIME CURRENT TEMPERATURE LUMINOUS_INTENSITY AMOUNT_OF_SUBSTANCE ANGLE BIT\".split(\" \"),da={NONE:{dimensions:[0,0,0,0,0,0,0,0,0]},MASS:{dimensions:[1,0,0,0,0,0,0,0,0]},LENGTH:{dimensions:[0,1,0,0,0,0,0,0,0]},TIME:{dimensions:[0,0,1,0,0,0,0,0,0]},CURRENT:{dimensions:[0,0,0,1,0,0,0,0,0]},TEMPERATURE:{dimensions:[0,0,0,0,1,0,0,0,0]},LUMINOUS_INTENSITY:{dimensions:[0,0,0,0,0,1,0,0,0]},AMOUNT_OF_SUBSTANCE:{dimensions:[0,\n0,0,0,0,0,1,0,0]},FORCE:{dimensions:[1,1,-2,0,0,0,0,0,0]},SURFACE:{dimensions:[0,2,0,0,0,0,0,0,0]},VOLUME:{dimensions:[0,3,0,0,0,0,0,0,0]},ENERGY:{dimensions:[1,2,-2,0,0,0,0,0,0]},POWER:{dimensions:[1,2,-3,0,0,0,0,0,0]},PRESSURE:{dimensions:[1,-1,-2,0,0,0,0,0,0]},ELECTRIC_CHARGE:{dimensions:[0,0,1,1,0,0,0,0,0]},ELECTRIC_CAPACITANCE:{dimensions:[-1,-2,4,2,0,0,0,0,0]},ELECTRIC_POTENTIAL:{dimensions:[1,2,-3,-1,0,0,0,0,0]},ELECTRIC_RESISTANCE:{dimensions:[1,2,-3,-2,0,0,0,0,0]},ELECTRIC_INDUCTANCE:{dimensions:[1,\n2,-2,-2,0,0,0,0,0]},ELECTRIC_CONDUCTANCE:{dimensions:[-1,-2,3,2,0,0,0,0,0]},MAGNETIC_FLUX:{dimensions:[1,2,-2,-1,0,0,0,0,0]},MAGNETIC_FLUX_DENSITY:{dimensions:[1,0,-2,-1,0,0,0,0,0]},FREQUENCY:{dimensions:[0,0,-1,0,0,0,0,0,0]},ANGLE:{dimensions:[0,0,0,0,0,0,0,1,0]},BIT:{dimensions:[0,0,0,0,0,0,0,0,1]}},ja;for(ja in da)(0,d.hasOwnProperty)(da,ja)&&(da[ja].key=ja);var na={name:\"\",base:{},value:1,offset:0,dimensions:va.map(function(ea){return 0})},la={meter:{name:\"meter\",base:da.LENGTH,prefixes:fa.LONG,\nvalue:1,offset:0},inch:{name:\"inch\",base:da.LENGTH,prefixes:fa.NONE,value:.0254,offset:0},foot:{name:\"foot\",base:da.LENGTH,prefixes:fa.NONE,value:.3048,offset:0},yard:{name:\"yard\",base:da.LENGTH,prefixes:fa.NONE,value:.9144,offset:0},mile:{name:\"mile\",base:da.LENGTH,prefixes:fa.NONE,value:1609.344,offset:0},link:{name:\"link\",base:da.LENGTH,prefixes:fa.NONE,value:.201168,offset:0},rod:{name:\"rod\",base:da.LENGTH,prefixes:fa.NONE,value:5.0292,offset:0},chain:{name:\"chain\",base:da.LENGTH,prefixes:fa.NONE,\nvalue:20.1168,offset:0},angstrom:{name:\"angstrom\",base:da.LENGTH,prefixes:fa.NONE,value:1E-10,offset:0},m:{name:\"m\",base:da.LENGTH,prefixes:fa.SHORT,value:1,offset:0},\"in\":{name:\"in\",base:da.LENGTH,prefixes:fa.NONE,value:.0254,offset:0},ft:{name:\"ft\",base:da.LENGTH,prefixes:fa.NONE,value:.3048,offset:0},yd:{name:\"yd\",base:da.LENGTH,prefixes:fa.NONE,value:.9144,offset:0},mi:{name:\"mi\",base:da.LENGTH,prefixes:fa.NONE,value:1609.344,offset:0},li:{name:\"li\",base:da.LENGTH,prefixes:fa.NONE,value:.201168,\noffset:0},rd:{name:\"rd\",base:da.LENGTH,prefixes:fa.NONE,value:5.02921,offset:0},ch:{name:\"ch\",base:da.LENGTH,prefixes:fa.NONE,value:20.1168,offset:0},mil:{name:\"mil\",base:da.LENGTH,prefixes:fa.NONE,value:2.54E-5,offset:0},m2:{name:\"m2\",base:da.SURFACE,prefixes:fa.SQUARED,value:1,offset:0},sqin:{name:\"sqin\",base:da.SURFACE,prefixes:fa.NONE,value:6.4516E-4,offset:0},sqft:{name:\"sqft\",base:da.SURFACE,prefixes:fa.NONE,value:.09290304,offset:0},sqyd:{name:\"sqyd\",base:da.SURFACE,prefixes:fa.NONE,value:.83612736,\noffset:0},sqmi:{name:\"sqmi\",base:da.SURFACE,prefixes:fa.NONE,value:2589988.110336,offset:0},sqrd:{name:\"sqrd\",base:da.SURFACE,prefixes:fa.NONE,value:25.29295,offset:0},sqch:{name:\"sqch\",base:da.SURFACE,prefixes:fa.NONE,value:404.6873,offset:0},sqmil:{name:\"sqmil\",base:da.SURFACE,prefixes:fa.NONE,value:6.4516E-10,offset:0},acre:{name:\"acre\",base:da.SURFACE,prefixes:fa.NONE,value:4046.86,offset:0},hectare:{name:\"hectare\",base:da.SURFACE,prefixes:fa.NONE,value:1E4,offset:0},m3:{name:\"m3\",base:da.VOLUME,\nprefixes:fa.CUBIC,value:1,offset:0},L:{name:\"L\",base:da.VOLUME,prefixes:fa.SHORT,value:.001,offset:0},l:{name:\"l\",base:da.VOLUME,prefixes:fa.SHORT,value:.001,offset:0},litre:{name:\"litre\",base:da.VOLUME,prefixes:fa.LONG,value:.001,offset:0},cuin:{name:\"cuin\",base:da.VOLUME,prefixes:fa.NONE,value:1.6387064E-5,offset:0},cuft:{name:\"cuft\",base:da.VOLUME,prefixes:fa.NONE,value:.028316846592,offset:0},cuyd:{name:\"cuyd\",base:da.VOLUME,prefixes:fa.NONE,value:.764554857984,offset:0},teaspoon:{name:\"teaspoon\",\nbase:da.VOLUME,prefixes:fa.NONE,value:5E-6,offset:0},tablespoon:{name:\"tablespoon\",base:da.VOLUME,prefixes:fa.NONE,value:1.5E-5,offset:0},drop:{name:\"drop\",base:da.VOLUME,prefixes:fa.NONE,value:5E-8,offset:0},gtt:{name:\"gtt\",base:da.VOLUME,prefixes:fa.NONE,value:5E-8,offset:0},minim:{name:\"minim\",base:da.VOLUME,prefixes:fa.NONE,value:6.161152E-8,offset:0},fluiddram:{name:\"fluiddram\",base:da.VOLUME,prefixes:fa.NONE,value:3.6966911E-6,offset:0},fluidounce:{name:\"fluidounce\",base:da.VOLUME,prefixes:fa.NONE,\nvalue:2.957353E-5,offset:0},gill:{name:\"gill\",base:da.VOLUME,prefixes:fa.NONE,value:1.182941E-4,offset:0},cc:{name:\"cc\",base:da.VOLUME,prefixes:fa.NONE,value:1E-6,offset:0},cup:{name:\"cup\",base:da.VOLUME,prefixes:fa.NONE,value:2.365882E-4,offset:0},pint:{name:\"pint\",base:da.VOLUME,prefixes:fa.NONE,value:4.731765E-4,offset:0},quart:{name:\"quart\",base:da.VOLUME,prefixes:fa.NONE,value:9.463529E-4,offset:0},gallon:{name:\"gallon\",base:da.VOLUME,prefixes:fa.NONE,value:.003785412,offset:0},beerbarrel:{name:\"beerbarrel\",\nbase:da.VOLUME,prefixes:fa.NONE,value:.1173478,offset:0},oilbarrel:{name:\"oilbarrel\",base:da.VOLUME,prefixes:fa.NONE,value:.1589873,offset:0},hogshead:{name:\"hogshead\",base:da.VOLUME,prefixes:fa.NONE,value:.238481,offset:0},fldr:{name:\"fldr\",base:da.VOLUME,prefixes:fa.NONE,value:3.6966911E-6,offset:0},floz:{name:\"floz\",base:da.VOLUME,prefixes:fa.NONE,value:2.957353E-5,offset:0},gi:{name:\"gi\",base:da.VOLUME,prefixes:fa.NONE,value:1.182941E-4,offset:0},cp:{name:\"cp\",base:da.VOLUME,prefixes:fa.NONE,\nvalue:2.365882E-4,offset:0},pt:{name:\"pt\",base:da.VOLUME,prefixes:fa.NONE,value:4.731765E-4,offset:0},qt:{name:\"qt\",base:da.VOLUME,prefixes:fa.NONE,value:9.463529E-4,offset:0},gal:{name:\"gal\",base:da.VOLUME,prefixes:fa.NONE,value:.003785412,offset:0},bbl:{name:\"bbl\",base:da.VOLUME,prefixes:fa.NONE,value:.1173478,offset:0},obl:{name:\"obl\",base:da.VOLUME,prefixes:fa.NONE,value:.1589873,offset:0},g:{name:\"g\",base:da.MASS,prefixes:fa.SHORT,value:.001,offset:0},gram:{name:\"gram\",base:da.MASS,prefixes:fa.LONG,\nvalue:.001,offset:0},ton:{name:\"ton\",base:da.MASS,prefixes:fa.SHORT,value:907.18474,offset:0},t:{name:\"t\",base:da.MASS,prefixes:fa.SHORT,value:1E3,offset:0},tonne:{name:\"tonne\",base:da.MASS,prefixes:fa.LONG,value:1E3,offset:0},grain:{name:\"grain\",base:da.MASS,prefixes:fa.NONE,value:6.479891E-5,offset:0},dram:{name:\"dram\",base:da.MASS,prefixes:fa.NONE,value:.0017718451953125,offset:0},ounce:{name:\"ounce\",base:da.MASS,prefixes:fa.NONE,value:.028349523125,offset:0},poundmass:{name:\"poundmass\",base:da.MASS,\nprefixes:fa.NONE,value:.45359237,offset:0},hundredweight:{name:\"hundredweight\",base:da.MASS,prefixes:fa.NONE,value:45.359237,offset:0},stick:{name:\"stick\",base:da.MASS,prefixes:fa.NONE,value:.115,offset:0},stone:{name:\"stone\",base:da.MASS,prefixes:fa.NONE,value:6.35029318,offset:0},gr:{name:\"gr\",base:da.MASS,prefixes:fa.NONE,value:6.479891E-5,offset:0},dr:{name:\"dr\",base:da.MASS,prefixes:fa.NONE,value:.0017718451953125,offset:0},oz:{name:\"oz\",base:da.MASS,prefixes:fa.NONE,value:.028349523125,offset:0},\nlbm:{name:\"lbm\",base:da.MASS,prefixes:fa.NONE,value:.45359237,offset:0},cwt:{name:\"cwt\",base:da.MASS,prefixes:fa.NONE,value:45.359237,offset:0},s:{name:\"s\",base:da.TIME,prefixes:fa.SHORT,value:1,offset:0},min:{name:\"min\",base:da.TIME,prefixes:fa.NONE,value:60,offset:0},h:{name:\"h\",base:da.TIME,prefixes:fa.NONE,value:3600,offset:0},second:{name:\"second\",base:da.TIME,prefixes:fa.LONG,value:1,offset:0},sec:{name:\"sec\",base:da.TIME,prefixes:fa.LONG,value:1,offset:0},minute:{name:\"minute\",base:da.TIME,\nprefixes:fa.NONE,value:60,offset:0},hour:{name:\"hour\",base:da.TIME,prefixes:fa.NONE,value:3600,offset:0},day:{name:\"day\",base:da.TIME,prefixes:fa.NONE,value:86400,offset:0},week:{name:\"week\",base:da.TIME,prefixes:fa.NONE,value:604800,offset:0},month:{name:\"month\",base:da.TIME,prefixes:fa.NONE,value:2629800,offset:0},year:{name:\"year\",base:da.TIME,prefixes:fa.NONE,value:31557600,offset:0},decade:{name:\"decade\",base:da.TIME,prefixes:fa.NONE,value:315576E3,offset:0},century:{name:\"century\",base:da.TIME,\nprefixes:fa.NONE,value:315576E4,offset:0},millennium:{name:\"millennium\",base:da.TIME,prefixes:fa.NONE,value:315576E5,offset:0},hertz:{name:\"Hertz\",base:da.FREQUENCY,prefixes:fa.LONG,value:1,offset:0,reciprocal:!0},Hz:{name:\"Hz\",base:da.FREQUENCY,prefixes:fa.SHORT,value:1,offset:0,reciprocal:!0},rad:{name:\"rad\",base:da.ANGLE,prefixes:fa.SHORT,value:1,offset:0},radian:{name:\"radian\",base:da.ANGLE,prefixes:fa.LONG,value:1,offset:0},deg:{name:\"deg\",base:da.ANGLE,prefixes:fa.SHORT,value:null,offset:0},\ndegree:{name:\"degree\",base:da.ANGLE,prefixes:fa.LONG,value:null,offset:0},grad:{name:\"grad\",base:da.ANGLE,prefixes:fa.SHORT,value:null,offset:0},gradian:{name:\"gradian\",base:da.ANGLE,prefixes:fa.LONG,value:null,offset:0},cycle:{name:\"cycle\",base:da.ANGLE,prefixes:fa.NONE,value:null,offset:0},arcsec:{name:\"arcsec\",base:da.ANGLE,prefixes:fa.NONE,value:null,offset:0},arcmin:{name:\"arcmin\",base:da.ANGLE,prefixes:fa.NONE,value:null,offset:0},A:{name:\"A\",base:da.CURRENT,prefixes:fa.SHORT,value:1,offset:0},\nampere:{name:\"ampere\",base:da.CURRENT,prefixes:fa.LONG,value:1,offset:0},K:{name:\"K\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1,offset:0},degC:{name:\"degC\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1,offset:273.15},degF:{name:\"degF\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1/1.8,offset:459.67},degR:{name:\"degR\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1/1.8,offset:0},kelvin:{name:\"kelvin\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1,offset:0},celsius:{name:\"celsius\",base:da.TEMPERATURE,prefixes:fa.NONE,\nvalue:1,offset:273.15},fahrenheit:{name:\"fahrenheit\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1/1.8,offset:459.67},rankine:{name:\"rankine\",base:da.TEMPERATURE,prefixes:fa.NONE,value:1/1.8,offset:0},mol:{name:\"mol\",base:da.AMOUNT_OF_SUBSTANCE,prefixes:fa.SHORT,value:1,offset:0},mole:{name:\"mole\",base:da.AMOUNT_OF_SUBSTANCE,prefixes:fa.LONG,value:1,offset:0},cd:{name:\"cd\",base:da.LUMINOUS_INTENSITY,prefixes:fa.SHORT,value:1,offset:0},candela:{name:\"candela\",base:da.LUMINOUS_INTENSITY,prefixes:fa.LONG,\nvalue:1,offset:0},N:{name:\"N\",base:da.FORCE,prefixes:fa.SHORT,value:1,offset:0},newton:{name:\"newton\",base:da.FORCE,prefixes:fa.LONG,value:1,offset:0},dyn:{name:\"dyn\",base:da.FORCE,prefixes:fa.SHORT,value:1E-5,offset:0},dyne:{name:\"dyne\",base:da.FORCE,prefixes:fa.LONG,value:1E-5,offset:0},lbf:{name:\"lbf\",base:da.FORCE,prefixes:fa.NONE,value:4.4482216152605,offset:0},poundforce:{name:\"poundforce\",base:da.FORCE,prefixes:fa.NONE,value:4.4482216152605,offset:0},kip:{name:\"kip\",base:da.FORCE,prefixes:fa.LONG,\nvalue:4448.2216,offset:0},kilogramforce:{name:\"kilogramforce\",base:da.FORCE,prefixes:fa.NONE,value:9.80665,offset:0},J:{name:\"J\",base:da.ENERGY,prefixes:fa.SHORT,value:1,offset:0},joule:{name:\"joule\",base:da.ENERGY,prefixes:fa.SHORT,value:1,offset:0},erg:{name:\"erg\",base:da.ENERGY,prefixes:fa.NONE,value:1E-7,offset:0},Wh:{name:\"Wh\",base:da.ENERGY,prefixes:fa.SHORT,value:3600,offset:0},BTU:{name:\"BTU\",base:da.ENERGY,prefixes:fa.BTU,value:1055.05585262,offset:0},eV:{name:\"eV\",base:da.ENERGY,prefixes:fa.SHORT,\nvalue:1.602176565E-19,offset:0},electronvolt:{name:\"electronvolt\",base:da.ENERGY,prefixes:fa.LONG,value:1.602176565E-19,offset:0},W:{name:\"W\",base:da.POWER,prefixes:fa.SHORT,value:1,offset:0},watt:{name:\"watt\",base:da.POWER,prefixes:fa.LONG,value:1,offset:0},hp:{name:\"hp\",base:da.POWER,prefixes:fa.NONE,value:745.6998715386,offset:0},VAR:{name:\"VAR\",base:da.POWER,prefixes:fa.SHORT,value:ca.I,offset:0},VA:{name:\"VA\",base:da.POWER,prefixes:fa.SHORT,value:1,offset:0},Pa:{name:\"Pa\",base:da.PRESSURE,prefixes:fa.SHORT,\nvalue:1,offset:0},psi:{name:\"psi\",base:da.PRESSURE,prefixes:fa.NONE,value:6894.75729276459,offset:0},atm:{name:\"atm\",base:da.PRESSURE,prefixes:fa.NONE,value:101325,offset:0},bar:{name:\"bar\",base:da.PRESSURE,prefixes:fa.SHORTLONG,value:1E5,offset:0},torr:{name:\"torr\",base:da.PRESSURE,prefixes:fa.NONE,value:133.322,offset:0},mmHg:{name:\"mmHg\",base:da.PRESSURE,prefixes:fa.NONE,value:133.322,offset:0},mmH2O:{name:\"mmH2O\",base:da.PRESSURE,prefixes:fa.NONE,value:9.80665,offset:0},cmH2O:{name:\"cmH2O\",base:da.PRESSURE,\nprefixes:fa.NONE,value:98.0665,offset:0},coulomb:{name:\"coulomb\",base:da.ELECTRIC_CHARGE,prefixes:fa.LONG,value:1,offset:0},C:{name:\"C\",base:da.ELECTRIC_CHARGE,prefixes:fa.SHORT,value:1,offset:0},farad:{name:\"farad\",base:da.ELECTRIC_CAPACITANCE,prefixes:fa.LONG,value:1,offset:0},F:{name:\"F\",base:da.ELECTRIC_CAPACITANCE,prefixes:fa.SHORT,value:1,offset:0},volt:{name:\"volt\",base:da.ELECTRIC_POTENTIAL,prefixes:fa.LONG,value:1,offset:0},V:{name:\"V\",base:da.ELECTRIC_POTENTIAL,prefixes:fa.SHORT,value:1,\noffset:0},ohm:{name:\"ohm\",base:da.ELECTRIC_RESISTANCE,prefixes:fa.SHORTLONG,value:1,offset:0},henry:{name:\"henry\",base:da.ELECTRIC_INDUCTANCE,prefixes:fa.LONG,value:1,offset:0},H:{name:\"H\",base:da.ELECTRIC_INDUCTANCE,prefixes:fa.SHORT,value:1,offset:0},siemens:{name:\"siemens\",base:da.ELECTRIC_CONDUCTANCE,prefixes:fa.LONG,value:1,offset:0},S:{name:\"S\",base:da.ELECTRIC_CONDUCTANCE,prefixes:fa.SHORT,value:1,offset:0},weber:{name:\"weber\",base:da.MAGNETIC_FLUX,prefixes:fa.LONG,value:1,offset:0},Wb:{name:\"Wb\",\nbase:da.MAGNETIC_FLUX,prefixes:fa.SHORT,value:1,offset:0},tesla:{name:\"tesla\",base:da.MAGNETIC_FLUX_DENSITY,prefixes:fa.LONG,value:1,offset:0},T:{name:\"T\",base:da.MAGNETIC_FLUX_DENSITY,prefixes:fa.SHORT,value:1,offset:0},b:{name:\"b\",base:da.BIT,prefixes:fa.BINARY_SHORT,value:1,offset:0},bits:{name:\"bits\",base:da.BIT,prefixes:fa.BINARY_LONG,value:1,offset:0},B:{name:\"B\",base:da.BIT,prefixes:fa.BINARY_SHORT,value:8,offset:0},bytes:{name:\"bytes\",base:da.BIT,prefixes:fa.BINARY_LONG,value:8,offset:0}};\nh={meters:\"meter\",inches:\"inch\",feet:\"foot\",yards:\"yard\",miles:\"mile\",links:\"link\",rods:\"rod\",chains:\"chain\",angstroms:\"angstrom\",lt:\"l\",litres:\"litre\",liter:\"litre\",liters:\"litre\",teaspoons:\"teaspoon\",tablespoons:\"tablespoon\",minims:\"minim\",fluiddrams:\"fluiddram\",fluidounces:\"fluidounce\",gills:\"gill\",cups:\"cup\",pints:\"pint\",quarts:\"quart\",gallons:\"gallon\",beerbarrels:\"beerbarrel\",oilbarrels:\"oilbarrel\",hogsheads:\"hogshead\",gtts:\"gtt\",grams:\"gram\",tons:\"ton\",tonnes:\"tonne\",grains:\"grain\",drams:\"dram\",\nounces:\"ounce\",poundmasses:\"poundmass\",hundredweights:\"hundredweight\",sticks:\"stick\",lb:\"lbm\",lbs:\"lbm\",kips:\"kip\",kgf:\"kilogramforce\",acres:\"acre\",hectares:\"hectare\",sqfeet:\"sqft\",sqyard:\"sqyd\",sqmile:\"sqmi\",sqmiles:\"sqmi\",mmhg:\"mmHg\",mmh2o:\"mmH2O\",cmh2o:\"cmH2O\",seconds:\"second\",secs:\"second\",minutes:\"minute\",mins:\"minute\",hours:\"hour\",hr:\"hour\",hrs:\"hour\",days:\"day\",weeks:\"week\",months:\"month\",years:\"year\",decades:\"decade\",centuries:\"century\",millennia:\"millennium\",hertz:\"hertz\",radians:\"radian\",\ndegrees:\"degree\",gradians:\"gradian\",cycles:\"cycle\",arcsecond:\"arcsec\",arcseconds:\"arcsec\",arcminute:\"arcmin\",arcminutes:\"arcmin\",BTUs:\"BTU\",watts:\"watt\",joules:\"joule\",amperes:\"ampere\",coulombs:\"coulomb\",volts:\"volt\",ohms:\"ohm\",farads:\"farad\",webers:\"weber\",teslas:\"tesla\",electronvolts:\"electronvolt\",moles:\"mole\",bit:\"bits\",\"byte\":\"bytes\"};D(E);F&&F(\"config\",function(ea,qa){ea.number!==qa.number&&D(ea)});var ta={si:{NONE:{unit:na,prefix:fa.NONE[\"\"]},LENGTH:{unit:la.m,prefix:fa.SHORT[\"\"]},MASS:{unit:la.g,\nprefix:fa.SHORT.k},TIME:{unit:la.s,prefix:fa.SHORT[\"\"]},CURRENT:{unit:la.A,prefix:fa.SHORT[\"\"]},TEMPERATURE:{unit:la.K,prefix:fa.SHORT[\"\"]},LUMINOUS_INTENSITY:{unit:la.cd,prefix:fa.SHORT[\"\"]},AMOUNT_OF_SUBSTANCE:{unit:la.mol,prefix:fa.SHORT[\"\"]},ANGLE:{unit:la.rad,prefix:fa.SHORT[\"\"]},BIT:{unit:la.bits,prefix:fa.SHORT[\"\"]},FORCE:{unit:la.N,prefix:fa.SHORT[\"\"]},ENERGY:{unit:la.J,prefix:fa.SHORT[\"\"]},POWER:{unit:la.W,prefix:fa.SHORT[\"\"]},PRESSURE:{unit:la.Pa,prefix:fa.SHORT[\"\"]},ELECTRIC_CHARGE:{unit:la.C,\nprefix:fa.SHORT[\"\"]},ELECTRIC_CAPACITANCE:{unit:la.F,prefix:fa.SHORT[\"\"]},ELECTRIC_POTENTIAL:{unit:la.V,prefix:fa.SHORT[\"\"]},ELECTRIC_RESISTANCE:{unit:la.ohm,prefix:fa.SHORT[\"\"]},ELECTRIC_INDUCTANCE:{unit:la.H,prefix:fa.SHORT[\"\"]},ELECTRIC_CONDUCTANCE:{unit:la.S,prefix:fa.SHORT[\"\"]},MAGNETIC_FLUX:{unit:la.Wb,prefix:fa.SHORT[\"\"]},MAGNETIC_FLUX_DENSITY:{unit:la.T,prefix:fa.SHORT[\"\"]},FREQUENCY:{unit:la.Hz,prefix:fa.SHORT[\"\"]}}};ta.cgs=JSON.parse(JSON.stringify(ta.si));ta.cgs.LENGTH={unit:la.m,prefix:fa.SHORT.c};\nta.cgs.MASS={unit:la.g,prefix:fa.SHORT[\"\"]};ta.cgs.FORCE={unit:la.dyn,prefix:fa.SHORT[\"\"]};ta.cgs.ENERGY={unit:la.erg,prefix:fa.NONE[\"\"]};ta.us=JSON.parse(JSON.stringify(ta.si));ta.us.LENGTH={unit:la.ft,prefix:fa.NONE[\"\"]};ta.us.MASS={unit:la.lbm,prefix:fa.NONE[\"\"]};ta.us.TEMPERATURE={unit:la.degF,prefix:fa.NONE[\"\"]};ta.us.FORCE={unit:la.lbf,prefix:fa.NONE[\"\"]};ta.us.ENERGY={unit:la.BTU,prefix:fa.BTU[\"\"]};ta.us.POWER={unit:la.hp,prefix:fa.NONE[\"\"]};ta.us.PRESSURE={unit:la.psi,prefix:fa.NONE[\"\"]};\nta.auto=JSON.parse(JSON.stringify(ta.si));var Fa=ta.auto;n.setUnitSystem=function(ea){if((0,d.hasOwnProperty)(ta,ea))Fa=ta[ea];else throw Error(\"Unit system \"+ea+\" does not exist. Choices are: \"+Object.keys(ta).join(\", \"));};n.getUnitSystem=function(){for(var ea in ta)if((0,d.hasOwnProperty)(ta,ea)&&ta[ea]===Fa)return ea};n.typeConverters={BigNumber:function(ea){return new ka(ea+\"\")},Fraction:function(ea){return new ha(ea)},Complex:function(ea){return ea},number:function(ea){return ea}};n._getNumberConverter=\nfunction(ea){if(!n.typeConverters[ea])throw new TypeError('Unsupported type \"'+ea+'\"');return n.typeConverters[ea]};for(var Sa in la)(0,d.hasOwnProperty)(la,Sa)&&(F=la[Sa],F.dimensions=F.base.dimensions);for(var Qa in h)if((0,d.hasOwnProperty)(h,Qa)){Sa=la[h[Qa]];F={};for(var Ua in Sa)(0,d.hasOwnProperty)(Sa,Ua)&&(F[Ua]=Sa[Ua]);F.name=Qa;la[Qa]=F}n.isValidAlpha=function(ea){return/^[a-zA-Z]$/.test(ea)};n.createUnit=function(ea,qa){if(\"object\"!==q(ea))throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\nif(qa&&qa.override)for(var ya in ea)if((0,d.hasOwnProperty)(ea,ya)&&n.deleteUnit(ya),ea[ya].aliases)for(qa=0;qa<ea[ya].aliases.length;qa++)n.deleteUnit(ea[ya].aliases[qa]);var Da,Ea;for(Ea in ea)(0,d.hasOwnProperty)(ea,Ea)&&(Da=n.createUnitSingle(Ea,ea[Ea]));return Da};n.createUnitSingle=function(ea,qa,ya){if(\"undefined\"===typeof qa||null===qa)qa={};if(\"string\"!==typeof ea)throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");if((0,d.hasOwnProperty)(la,ea))throw Error('Cannot create unit \"'+\nea+'\": a unit with that name already exists');for(ya=0;ya<ea.length;ya++){oa=ea.charAt(ya);if(0===ya&&!n.isValidAlpha(oa))throw Error('Invalid unit name (must begin with alpha character): \"'+ea+'\"');if(0<ya&&!n.isValidAlpha(oa)&&!v(oa))throw Error('Invalid unit name (only alphanumeric characters are allowed): \"'+ea+'\"');}var Da=null;ya=[];var Ea=0,ab;if(qa&&\"Unit\"===qa.type)Da=qa.clone();else if(\"string\"===typeof qa)\"\"!==qa&&(ab=qa);else if(\"object\"===q(qa)){ab=qa.definition;var fb=qa.prefixes;Ea=\nqa.offset;var hb=qa.baseName;qa.aliases&&(ya=qa.aliases.valueOf())}else throw new TypeError('Cannot create unit \"'+ea+'\" from \"'+qa.toString()+'\": expecting \"string\" or \"Unit\" or \"Object\"');if(ya)for(qa=0;qa<ya.length;qa++)if((0,d.hasOwnProperty)(la,ya[qa]))throw Error('Cannot create alias \"'+ya[qa]+'\": a unit with that name already exists');if(ab&&\"string\"===typeof ab&&!Da)try{Da=n.parse(ab,{allowNoUnits:!0})}catch(Ja){throw Ja.message='Could not create unit \"'+ea+'\" from \"'+ab+'\": '+Ja.message,\nJa;}else ab&&\"Unit\"===ab.type&&(Da=ab.clone());ya=ya||[];Ea=Ea||0;fb=fb&&fb.toUpperCase?fa[fb.toUpperCase()]||fa.NONE:fa.NONE;if(Da){fb={name:ea,value:Da.value,dimensions:Da.dimensions.slice(0),prefixes:fb,offset:Ea};Ea=!1;for(var gb in da)if((0,d.hasOwnProperty)(da,gb)){ab=!0;for(var O=0;O<va.length;O++)if(1E-12<Math.abs((fb.dimensions[O]||0)-(da[gb].dimensions[O]||0))){ab=!1;break}if(ab){Ea=!0;fb.base=da[gb];break}}Ea||(hb=hb||ea+\"_STUFF\",gb={dimensions:Da.dimensions.slice(0)},gb.key=hb,da[hb]=\ngb,Fa[hb]={unit:fb,prefix:fa.NONE[\"\"]},fb.base=da[hb])}else{hb=hb||ea+\"_STUFF\";if(0<=va.indexOf(hb))throw Error('Cannot create new base unit \"'+ea+'\": a base unit with that name already exists (and cannot be overridden)');va.push(hb);for(O in da)(0,d.hasOwnProperty)(da,O)&&(da[O].dimensions[va.length-1]=0);gb={dimensions:[]};for(Da=0;Da<va.length;Da++)gb.dimensions[Da]=0;gb.dimensions[va.length-1]=1;gb.key=hb;da[hb]=gb;fb={name:ea,value:1,dimensions:da[hb].dimensions.slice(0),prefixes:fb,offset:Ea,\nbase:da[hb]};Fa[hb]={unit:fb,prefix:fa.NONE[\"\"]}}n.UNITS[ea]=fb;for(hb=0;hb<ya.length;hb++){gb=ya[hb];Da={};for(var ma in fb)(0,d.hasOwnProperty)(fb,ma)&&(Da[ma]=fb[ma]);Da.name=gb;n.UNITS[gb]=Da}delete Ka.cache;return new n(null,ea)};n.deleteUnit=function(ea){delete n.UNITS[ea]};n.PREFIXES=fa;n.BASE_DIMENSIONS=va;n.BASE_UNITS=da;n.UNIT_SYSTEMS=ta;n.UNITS=la;return n},{isClass:!0});a.createUnitClass=b}","~:source","shadow$provide[203] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnitClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _constants = require(\"../../utils/bignumber/constants.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nvar createUnitClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      abs = _ref.abs,\n      fix = _ref.fix,\n      round = _ref.round,\n      equal = _ref.equal,\n      isNumeric = _ref.isNumeric,\n      format = _ref.format,\n      number = _ref.number,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber,\n      _Fraction = _ref.Fraction;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || (0, _is.isComplex)(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = (0, _object.clone)(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if ((0, _object.hasOwnProperty)(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = (0, _function.memoize)(function (str) {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if ((0, _object.hasOwnProperty)(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if ((0, _object.hasOwnProperty)(UNITS, _name)) {\n        if ((0, _string.endsWith)(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = (0, _object.hasOwnProperty)(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: function hasher(args) {\n      return args[0];\n    },\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = (0, _object.clone)(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if ((0, _is.isUnit)(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = (0, _object.clone)(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if ((0, _object.hasOwnProperty)(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if ((0, _object.hasOwnProperty)(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if ((0, _object.hasOwnProperty)(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && (0, _is.isComplex)(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if ((0, _object.hasOwnProperty)(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && (0, _is.isComplex)(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if ((0, _object.hasOwnProperty)(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if ((0, _object.hasOwnProperty)(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(function (x) {\n      return 0;\n    })\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    \"in\": {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    \"byte\": 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = (0, _constants.createBigNumberPi)(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if ((0, _object.hasOwnProperty)(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if ((0, _object.hasOwnProperty)(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if ((0, _object.hasOwnProperty)(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (_typeof(obj) !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if ((0, _object.hasOwnProperty)(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if ((0, _object.hasOwnProperty)(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if ((0, _object.hasOwnProperty)(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (_typeof(obj) === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if ((0, _object.hasOwnProperty)(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if ((0, _object.hasOwnProperty)(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if ((0, _object.hasOwnProperty)(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if ((0, _object.hasOwnProperty)(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});\nexports.createUnitClass = createUnitClass;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$module$node_modules$mathjs$lib$cjs$utils$bignumber$constants","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$utils$function"]],"~:properties",["^5",["T","hrs","isValidAlpha","d","angstrom","n","rad","us","Yi","message","splitUnit","bar","femto","K","milli","z","millennium","toNumeric","degree","fluiddrams","weber","ELECTRIC_POTENTIAL","min","ELECTRIC_CAPACITANCE","pt","sqin","SHORTLONG","qt","s","rods","nano","tera","ELECTRIC_INDUCTANCE","BTU","gram","secs","inches","yocto","torr","oilbarrels","sqmi","valueOf","Pa","m3","lt","ELECTRIC_RESISTANCE","kilogramforce","hogshead","SQUARED","gtt","cmh2o","fromJSON","prefixes","hundredweights","f","mmhg","isClass","lbf","micro","floz","offset","drams","eV","bit","multiply","volts","yards","prefix","Complex","mole","simplify","ch","mmH2O","meter","cp","hours","webers","ELECTRIC_CHARGE","Wb","degF","quarts","L","dyne","allowNoUnits","kelvin","p","fluidounce","gibi","mil","_normalize","yard","CURRENT","watt","CUBIC","sqmiles","siemens","celsius","gallon","ohms","pico","farad","key","Hz","VAR","Ti","months","dr","teaspoon","second","__esModule","LENGTH","G","deca","liters","decades","grain","cycle","J","ANGLE","coulomb","mile","ounce","sqyard","giga","reciprocal","formatUnits","tablespoon","pow","beerbarrel","M","fldr","teslas","cuft","toString","tons","degrees","liter","yotta","cup","base","poundmass","BINARY_SHORT","arcminute","S","MM","BINARY_LONG_SI","MASS","Y","tablespoons","hour","oz","MAGNETIC_FLUX","UNITS","hectares","decade","Z","kibi","si","H","cmH2O","mi","ENERGY","cups","createUnitClass","getUnitSystem","VA","fluiddram","SURFACE","amperes","millennia","exi","hr","psi","atto","ohm","ampere","POWER","joule","grams","gills","sqmile","Gi","gradians","grad","deci","name","configurable","tonnes","Pi","litres","limit","foot","power","oilbarrel","dram","value","E","rankine","sqyd","poundmasses","Wh","cwt","radians","Zi","dimensions","zetta","joules","mebi","drop","sqrd","C","electronvolt","auto","gradian","enumerable","cd","obl","AMOUNT_OF_SUBSTANCE","FREQUENCY","F","pints","skipAutomaticSimplification","TIME","lbs","yd","NONE","arcsecond","Ei","bits","minutes","BINARY_SHORT_IEC","SHORT","da","stone","cycles","createUnitSingle","hertz","B","miles","a","seconds","writable","mega","setUnitSystem","farads","number","cuin","fahrenheit","coulombs","week","century","degC","bytes","chains","hp","units","kip","isValuelessUnit","BTUs","exa","years","_isDerived","lbm","meters","arcsec","P","rd","feet","links","t","hasher","BigNumber","hasBase","Fraction","V","kilo","mmHg","BASE_UNITS","teaspoons","mathjs","link","year","days","LONG","candela","lb","ELECTRIC_CONDUCTANCE","k","tonne","gill","gal","type","zepto","b","moles","abs","sqfeet","y","erg","TEMPERATURE","BIT","BINARY_LONG","Ki","newton","stick","quart","toSI","gr","deleteUnit","UNIT_SYSTEMS","arcminutes","fluidounces","m2","typeConverters","sticks","PREFIXES","henry","g","tebi","MAGNETIC_FLUX_DENSITY","_bestPrefix","hundredweight","divide","pebi","clone","l","minute","FORCE","BINARY_LONG_IEC","N","minim","sqch","grains","hecto","unit","parse","u","A","gallons","scientific","kips","fixPrefix","deg","toNumber","PRESSURE","zebi","ounces","hogsheads","pint","arcmin","cgs","poundforce","month","weeks","gi","kgf","LUMINOUS_INTENSITY","volt","angstroms","h","radian","BASE_DIMENSIONS","isUnit","centi","sqft","VOLUME","mmh2o","day","_denormalize","peta","to","minims","sec","watts","bbl","centuries","m","BINARY_SHORT_SI","ton","W","inch","equals","gtts","sqmil","mol","tesla","yobi","litre","degR","createUnit","arcseconds","chain","c","equalBase","li","mins","cc","rod","electronvolts","acre","format","acres","cuyd","hectare","beerbarrels","Mi","dyn","_getNumberConverter","atm","toJSON","ft"]],"~:compiled-at",1619135723935,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$unit$Unit.js\",\n\"lineCount\":79,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/unit/Unit.js\"],\n\"sourcesContent\":[\"shadow$provide[203] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createUnitClass = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _function = require(\\\"../../utils/function.js\\\");\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _constants = require(\\\"../../utils/bignumber/constants.js\\\");\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar name = 'Unit';\\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\\nvar createUnitClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var on = _ref.on,\\n      config = _ref.config,\\n      addScalar = _ref.addScalar,\\n      subtract = _ref.subtract,\\n      multiplyScalar = _ref.multiplyScalar,\\n      divideScalar = _ref.divideScalar,\\n      pow = _ref.pow,\\n      abs = _ref.abs,\\n      fix = _ref.fix,\\n      round = _ref.round,\\n      equal = _ref.equal,\\n      isNumeric = _ref.isNumeric,\\n      format = _ref.format,\\n      number = _ref.number,\\n      Complex = _ref.Complex,\\n      _BigNumber = _ref.BigNumber,\\n      _Fraction = _ref.Fraction;\\n  var toNumber = number;\\n  /**\\n   * A unit can be constructed in the following ways:\\n   *\\n   *     const a = new Unit(value, name)\\n   *     const b = new Unit(null, name)\\n   *     const c = Unit.parse(str)\\n   *\\n   * Example usage:\\n   *\\n   *     const a = new Unit(5, 'cm')               // 50 mm\\n   *     const b = Unit.parse('23 kg')             // 23 kg\\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\\n   *     const d = new Unit(9.81, \\\"m/s^2\\\")         // 9.81 m/s^2\\n   *\\n   * @class Unit\\n   * @constructor Unit\\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\\n   * @param {string} [name]   A unit name like \\\"cm\\\" or \\\"inch\\\", or a derived unit of the form: \\\"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\\\", such as \\\"kg m^2/s^2\\\", where each unit appearing after the forward slash is taken to be in the denominator. \\\"kg m^2 s^-2\\\" is a synonym and is also acceptable. Any of the units can include a prefix.\\n   */\\n\\n  function Unit(value, name) {\\n    if (!(this instanceof Unit)) {\\n      throw new Error('Constructor must be called with the new operator');\\n    }\\n\\n    if (!(value === null || value === undefined || isNumeric(value) || (0, _is.isComplex)(value))) {\\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\\n    }\\n\\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\\n      throw new TypeError('Second parameter in Unit constructor must be a string');\\n    }\\n\\n    if (name !== undefined) {\\n      var u = Unit.parse(name);\\n      this.units = u.units;\\n      this.dimensions = u.dimensions;\\n    } else {\\n      this.units = [{\\n        unit: UNIT_NONE,\\n        prefix: PREFIXES.NONE,\\n        // link to a list with supported prefixes\\n        power: 0\\n      }];\\n      this.dimensions = [];\\n\\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n        this.dimensions[i] = 0;\\n      }\\n    }\\n\\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\\n    this.fixPrefix = false; // if true, function format will not search for the\\n    // best prefix but leave it as initially provided.\\n    // fixPrefix is set true by the method Unit.to\\n    // The justification behind this is that if the constructor is explicitly called,\\n    // the caller wishes the units to be returned exactly as he supplied.\\n\\n    this.skipAutomaticSimplification = true;\\n  }\\n  /**\\n   * Attach type information\\n   */\\n\\n\\n  Unit.prototype.type = 'Unit';\\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\\n\\n  var text, index, c;\\n\\n  function skipWhitespace() {\\n    while (c === ' ' || c === '\\\\t') {\\n      next();\\n    }\\n  }\\n\\n  function isDigitDot(c) {\\n    return c >= '0' && c <= '9' || c === '.';\\n  }\\n\\n  function isDigit(c) {\\n    return c >= '0' && c <= '9';\\n  }\\n\\n  function next() {\\n    index++;\\n    c = text.charAt(index);\\n  }\\n\\n  function revert(oldIndex) {\\n    index = oldIndex;\\n    c = text.charAt(index);\\n  }\\n\\n  function parseNumber() {\\n    var number = '';\\n    var oldIndex = index;\\n\\n    if (c === '+') {\\n      next();\\n    } else if (c === '-') {\\n      number += c;\\n      next();\\n    }\\n\\n    if (!isDigitDot(c)) {\\n      // a + or - must be followed by a digit\\n      revert(oldIndex);\\n      return null;\\n    } // get number, can have a single dot\\n\\n\\n    if (c === '.') {\\n      number += c;\\n      next();\\n\\n      if (!isDigit(c)) {\\n        // this is no legal number, it is just a dot\\n        revert(oldIndex);\\n        return null;\\n      }\\n    } else {\\n      while (isDigit(c)) {\\n        number += c;\\n        next();\\n      }\\n\\n      if (c === '.') {\\n        number += c;\\n        next();\\n      }\\n    }\\n\\n    while (isDigit(c)) {\\n      number += c;\\n      next();\\n    } // check for exponential notation like \\\"2.3e-4\\\" or \\\"1.23e50\\\"\\n\\n\\n    if (c === 'E' || c === 'e') {\\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \\\"4exabytes\\\"\\n      var tentativeNumber = '';\\n      var tentativeIndex = index;\\n      tentativeNumber += c;\\n      next();\\n\\n      if (c === '+' || c === '-') {\\n        tentativeNumber += c;\\n        next();\\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\\n\\n\\n      if (!isDigit(c)) {\\n        // The e or E must belong to something else, so return the number without the e or E.\\n        revert(tentativeIndex);\\n        return number;\\n      } // We can now safely say that this is scientific notation.\\n\\n\\n      number = number + tentativeNumber;\\n\\n      while (isDigit(c)) {\\n        number += c;\\n        next();\\n      }\\n    }\\n\\n    return number;\\n  }\\n\\n  function parseUnit() {\\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\\n\\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\\n      unitName += c;\\n      next();\\n    } // Must begin with [a-zA-Z]\\n\\n\\n    var firstC = unitName.charAt(0);\\n\\n    if (Unit.isValidAlpha(firstC)) {\\n      return unitName;\\n    } else {\\n      return null;\\n    }\\n  }\\n\\n  function parseCharacter(toFind) {\\n    if (c === toFind) {\\n      next();\\n      return toFind;\\n    } else {\\n      return null;\\n    }\\n  }\\n  /**\\n   * Parse a string into a unit. The value of the unit is parsed as number,\\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\\n   *\\n   * Throws an exception if the provided string does not contain a valid unit or\\n   * cannot be parsed.\\n   * @memberof Unit\\n   * @param {string} str        A string like \\\"5.2 inch\\\", \\\"4e2 cm/s^2\\\"\\n   * @return {Unit} unit\\n   */\\n\\n\\n  Unit.parse = function (str, options) {\\n    options = options || {};\\n    text = str;\\n    index = -1;\\n    c = '';\\n\\n    if (typeof text !== 'string') {\\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\\n    }\\n\\n    var unit = new Unit();\\n    unit.units = [];\\n    var powerMultiplierCurrent = 1;\\n    var expectingUnit = false; // A unit should follow this pattern:\\n    // [number] ...[ [*/] unit[^number] ]\\n    // unit[^number] ... [ [*/] unit[^number] ]\\n    // Rules:\\n    // number is any floating point number.\\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\\n    // The string may optionally begin with a number.\\n    // Each unit may optionally be followed by ^number.\\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\\n    //   2m^2kg/s^2\\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\\n    //   4erg\\n\\n    next();\\n    skipWhitespace(); // Optional number at the start of the string\\n\\n    var valueStr = parseNumber();\\n    var value = null;\\n\\n    if (valueStr) {\\n      if (config.number === 'BigNumber') {\\n        value = new _BigNumber(valueStr);\\n      } else if (config.number === 'Fraction') {\\n        try {\\n          // not all numbers can be turned in Fractions, for example very small numbers not\\n          value = new _Fraction(valueStr);\\n        } catch (err) {\\n          value = parseFloat(valueStr);\\n        }\\n      } else {\\n        // number\\n        value = parseFloat(valueStr);\\n      }\\n\\n      skipWhitespace(); // Whitespace is not required here\\n      // handle multiplication or division right after the value, like '1/s'\\n\\n      if (parseCharacter('*')) {\\n        powerMultiplierCurrent = 1;\\n        expectingUnit = true;\\n      } else if (parseCharacter('/')) {\\n        powerMultiplierCurrent = -1;\\n        expectingUnit = true;\\n      }\\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\\n\\n\\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\\n\\n    var powerMultiplierStackProduct = 1;\\n\\n    while (true) {\\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\\n      // A '(' will always appear directly before a unit.\\n\\n      while (c === '(') {\\n        powerMultiplierStack.push(powerMultiplierCurrent);\\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\\n        powerMultiplierCurrent = 1;\\n        next();\\n        skipWhitespace();\\n      } // Is there something here?\\n\\n\\n      var uStr = void 0;\\n\\n      if (c) {\\n        var oldC = c;\\n        uStr = parseUnit();\\n\\n        if (uStr === null) {\\n          throw new SyntaxError('Unexpected \\\"' + oldC + '\\\" in \\\"' + text + '\\\" at index ' + index.toString());\\n        }\\n      } else {\\n        // End of input.\\n        break;\\n      } // Verify the unit exists and get the prefix (if any)\\n\\n\\n      var res = _findUnit(uStr);\\n\\n      if (res === null) {\\n        // Unit not found.\\n        throw new SyntaxError('Unit \\\"' + uStr + '\\\" not found.');\\n      }\\n\\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \\\"^ number\\\"?\\n\\n      skipWhitespace();\\n\\n      if (parseCharacter('^')) {\\n        skipWhitespace();\\n        var p = parseNumber();\\n\\n        if (p === null) {\\n          // No valid number found for the power!\\n          throw new SyntaxError('In \\\"' + str + '\\\", \\\"^\\\" must be followed by a floating-point number');\\n        }\\n\\n        power *= p;\\n      } // Add the unit to the list\\n\\n\\n      unit.units.push({\\n        unit: res.unit,\\n        prefix: res.prefix,\\n        power: power\\n      });\\n\\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\\n      } // Check for and consume closing parentheses, popping from the stack.\\n      // A ')' will always follow a unit.\\n\\n\\n      skipWhitespace();\\n\\n      while (c === ')') {\\n        if (powerMultiplierStack.length === 0) {\\n          throw new SyntaxError('Unmatched \\\")\\\" in \\\"' + text + '\\\" at index ' + index.toString());\\n        }\\n\\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\\n        next();\\n        skipWhitespace();\\n      } // \\\"*\\\" and \\\"/\\\" should mean we are expecting something to come next.\\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\\n\\n\\n      expectingUnit = false;\\n\\n      if (parseCharacter('*')) {\\n        // explicit multiplication\\n        powerMultiplierCurrent = 1;\\n        expectingUnit = true;\\n      } else if (parseCharacter('/')) {\\n        // division\\n        powerMultiplierCurrent = -1;\\n        expectingUnit = true;\\n      } else {\\n        // implicit multiplication\\n        powerMultiplierCurrent = 1;\\n      } // Replace the unit into the auto unit system\\n\\n\\n      if (res.unit.base) {\\n        var baseDim = res.unit.base.key;\\n        UNIT_SYSTEMS.auto[baseDim] = {\\n          unit: res.unit,\\n          prefix: res.prefix\\n        };\\n      }\\n    } // Has the string been entirely consumed?\\n\\n\\n    skipWhitespace();\\n\\n    if (c) {\\n      throw new SyntaxError('Could not parse: \\\"' + str + '\\\"');\\n    } // Is there a trailing slash?\\n\\n\\n    if (expectingUnit) {\\n      throw new SyntaxError('Trailing characters: \\\"' + str + '\\\"');\\n    } // Is the parentheses stack empty?\\n\\n\\n    if (powerMultiplierStack.length !== 0) {\\n      throw new SyntaxError('Unmatched \\\"(\\\" in \\\"' + text + '\\\"');\\n    } // Are there any units at all?\\n\\n\\n    if (unit.units.length === 0 && !options.allowNoUnits) {\\n      throw new SyntaxError('\\\"' + str + '\\\" contains no units');\\n    }\\n\\n    unit.value = value !== undefined ? unit._normalize(value) : null;\\n    return unit;\\n  };\\n  /**\\n   * create a copy of this unit\\n   * @memberof Unit\\n   * @return {Unit} Returns a cloned version of the unit\\n   */\\n\\n\\n  Unit.prototype.clone = function () {\\n    var unit = new Unit();\\n    unit.fixPrefix = this.fixPrefix;\\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\\n    unit.value = (0, _object.clone)(this.value);\\n    unit.dimensions = this.dimensions.slice(0);\\n    unit.units = [];\\n\\n    for (var i = 0; i < this.units.length; i++) {\\n      unit.units[i] = {};\\n\\n      for (var p in this.units[i]) {\\n        if ((0, _object.hasOwnProperty)(this.units[i], p)) {\\n          unit.units[i][p] = this.units[i][p];\\n        }\\n      }\\n    }\\n\\n    return unit;\\n  };\\n  /**\\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\\n   * @memberof Unit\\n   * @return {boolean} True if the unit is derived\\n   */\\n\\n\\n  Unit.prototype._isDerived = function () {\\n    if (this.units.length === 0) {\\n      return false;\\n    }\\n\\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\\n  };\\n  /**\\n   * Normalize a value, based on its currently set unit(s)\\n   * @memberof Unit\\n   * @param {number | BigNumber | Fraction | boolean} value\\n   * @return {number | BigNumber | Fraction | boolean} normalized value\\n   * @private\\n   */\\n\\n\\n  Unit.prototype._normalize = function (value) {\\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\\n    var convert;\\n\\n    if (value === null || value === undefined || this.units.length === 0) {\\n      return value;\\n    } else if (this._isDerived()) {\\n      // This is a derived unit, so do not apply offsets.\\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\\n      var res = value;\\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\\n\\n      for (var i = 0; i < this.units.length; i++) {\\n        unitValue = convert(this.units[i].unit.value);\\n        unitPrefixValue = convert(this.units[i].prefix.value);\\n        unitPower = convert(this.units[i].power);\\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\\n      }\\n\\n      return res;\\n    } else {\\n      // This is a single unit of power 1, like kg or degC\\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\\n\\n      unitValue = convert(this.units[0].unit.value);\\n      unitOffset = convert(this.units[0].unit.offset);\\n      unitPrefixValue = convert(this.units[0].prefix.value);\\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\\n    }\\n  };\\n  /**\\n   * Denormalize a value, based on its currently set unit(s)\\n   * @memberof Unit\\n   * @param {number} value\\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\\n   * @return {number} denormalized value\\n   * @private\\n   */\\n\\n\\n  Unit.prototype._denormalize = function (value, prefixValue) {\\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\\n    var convert;\\n\\n    if (value === null || value === undefined || this.units.length === 0) {\\n      return value;\\n    } else if (this._isDerived()) {\\n      // This is a derived unit, so do not apply offsets.\\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\\n      var res = value;\\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\\n\\n      for (var i = 0; i < this.units.length; i++) {\\n        unitValue = convert(this.units[i].unit.value);\\n        unitPrefixValue = convert(this.units[i].prefix.value);\\n        unitPower = convert(this.units[i].power);\\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\\n      }\\n\\n      return res;\\n    } else {\\n      // This is a single unit of power 1, like kg or degC\\n      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed\\n\\n      unitValue = convert(this.units[0].unit.value);\\n      unitPrefixValue = convert(this.units[0].prefix.value);\\n      unitOffset = convert(this.units[0].unit.offset);\\n\\n      if (prefixValue === undefined || prefixValue === null) {\\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\\n      } else {\\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\\n      }\\n    }\\n  };\\n  /**\\n   * Find a unit from a string\\n   * @memberof Unit\\n   * @param {string} str              A string like 'cm' or 'inch'\\n   * @returns {Object | null} result  When found, an object with fields unit and\\n   *                                  prefix is returned. Else, null is returned.\\n   * @private\\n   */\\n\\n\\n  var _findUnit = (0, _function.memoize)(function (str) {\\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\\n    if ((0, _object.hasOwnProperty)(UNITS, str)) {\\n      var unit = UNITS[str];\\n      var prefix = unit.prefixes[''];\\n      return {\\n        unit: unit,\\n        prefix: prefix\\n      };\\n    }\\n\\n    for (var _name in UNITS) {\\n      if ((0, _object.hasOwnProperty)(UNITS, _name)) {\\n        if ((0, _string.endsWith)(str, _name)) {\\n          var _unit = UNITS[_name];\\n          var prefixLen = str.length - _name.length;\\n          var prefixName = str.substring(0, prefixLen);\\n\\n          var _prefix = (0, _object.hasOwnProperty)(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\\n\\n          if (_prefix !== undefined) {\\n            // store unit, prefix, and value\\n            return {\\n              unit: _unit,\\n              prefix: _prefix\\n            };\\n          }\\n        }\\n      }\\n    }\\n\\n    return null;\\n  }, {\\n    hasher: function hasher(args) {\\n      return args[0];\\n    },\\n    limit: 100\\n  });\\n  /**\\n   * Test if the given expression is a unit.\\n   * The unit can have a prefix but cannot have a value.\\n   * @memberof Unit\\n   * @param {string} name   A string to be tested whether it is a value less unit.\\n   *                        The unit can have prefix, like \\\"cm\\\"\\n   * @return {boolean}      true if the given string is a unit\\n   */\\n\\n\\n  Unit.isValuelessUnit = function (name) {\\n    return _findUnit(name) !== null;\\n  };\\n  /**\\n   * check if this unit has given base unit\\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\\n   * @memberof Unit\\n   * @param {BASE_UNITS | string | undefined} base\\n   */\\n\\n\\n  Unit.prototype.hasBase = function (base) {\\n    if (typeof base === 'string') {\\n      base = BASE_UNITS[base];\\n    }\\n\\n    if (!base) {\\n      return false;\\n    } // All dimensions must be the same\\n\\n\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  };\\n  /**\\n   * Check if this unit has a base or bases equal to another base or bases\\n   * For derived units, the exponent on each base also must match\\n   * @memberof Unit\\n   * @param {Unit} other\\n   * @return {boolean} true if equal base\\n   */\\n\\n\\n  Unit.prototype.equalBase = function (other) {\\n    // All dimensions must be the same\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  };\\n  /**\\n   * Check if this unit equals another unit\\n   * @memberof Unit\\n   * @param {Unit} other\\n   * @return {boolean} true if both units are equal\\n   */\\n\\n\\n  Unit.prototype.equals = function (other) {\\n    return this.equalBase(other) && equal(this.value, other.value);\\n  };\\n  /**\\n   * Multiply this unit with another one\\n   * @memberof Unit\\n   * @param {Unit} other\\n   * @return {Unit} product of this unit and the other unit\\n   */\\n\\n\\n  Unit.prototype.multiply = function (other) {\\n    var res = this.clone();\\n\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      // Dimensions arrays may be of different lengths. Default to 0.\\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\\n    } // Append other's units list onto res\\n\\n\\n    for (var _i = 0; _i < other.units.length; _i++) {\\n      // Make a shallow copy of every unit\\n      var inverted = _objectSpread({}, other.units[_i]);\\n\\n      res.units.push(inverted);\\n    } // If at least one operand has a value, then the result should also have a value\\n\\n\\n    if (this.value !== null || other.value !== null) {\\n      var valThis = this.value === null ? this._normalize(1) : this.value;\\n      var valOther = other.value === null ? other._normalize(1) : other.value;\\n      res.value = multiplyScalar(valThis, valOther);\\n    } else {\\n      res.value = null;\\n    }\\n\\n    res.skipAutomaticSimplification = false;\\n    return getNumericIfUnitless(res);\\n  };\\n  /**\\n   * Divide this unit by another one\\n   * @memberof Unit\\n   * @param {Unit} other\\n   * @return {Unit} result of dividing this unit by the other unit\\n   */\\n\\n\\n  Unit.prototype.divide = function (other) {\\n    var res = this.clone();\\n\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      // Dimensions arrays may be of different lengths. Default to 0.\\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\\n    } // Invert and append other's units list onto res\\n\\n\\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\\n      // Make a shallow copy of every unit\\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\\n        power: -other.units[_i2].power\\n      });\\n\\n      res.units.push(inverted);\\n    } // If at least one operand has a value, the result should have a value\\n\\n\\n    if (this.value !== null || other.value !== null) {\\n      var valThis = this.value === null ? this._normalize(1) : this.value;\\n      var valOther = other.value === null ? other._normalize(1) : other.value;\\n      res.value = divideScalar(valThis, valOther);\\n    } else {\\n      res.value = null;\\n    }\\n\\n    res.skipAutomaticSimplification = false;\\n    return getNumericIfUnitless(res);\\n  };\\n  /**\\n   * Calculate the power of a unit\\n   * @memberof Unit\\n   * @param {number | Fraction | BigNumber} p\\n   * @returns {Unit}      The result: this^p\\n   */\\n\\n\\n  Unit.prototype.pow = function (p) {\\n    var res = this.clone();\\n\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      // Dimensions arrays may be of different lengths. Default to 0.\\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\\n    } // Adjust the power of each unit in the list\\n\\n\\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\\n      res.units[_i3].power *= p;\\n    }\\n\\n    if (res.value !== null) {\\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\\n      // if (!isNumeric(res.value)) {\\n      //  res.value = NaN\\n      // }\\n      // Update: Complex supported now\\n    } else {\\n      res.value = null;\\n    }\\n\\n    res.skipAutomaticSimplification = false;\\n    return getNumericIfUnitless(res);\\n  };\\n  /**\\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\\n   * @param {Unit} unit\\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\\n   */\\n\\n\\n  function getNumericIfUnitless(unit) {\\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\\n      return unit.value;\\n    } else {\\n      return unit;\\n    }\\n  }\\n  /**\\n   * Calculate the absolute value of a unit\\n   * @memberof Unit\\n   * @param {number | Fraction | BigNumber} x\\n   * @returns {Unit}      The result: |x|, absolute value of x\\n   */\\n\\n\\n  Unit.prototype.abs = function () {\\n    // This gives correct, but unexpected, results for units with an offset.\\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\\n    var ret = this.clone();\\n    ret.value = ret.value !== null ? abs(ret.value) : null;\\n\\n    for (var i in ret.units) {\\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\\n        ret.units[i].unit = UNITS.W;\\n      }\\n    }\\n\\n    return ret;\\n  };\\n  /**\\n   * Convert the unit to a specific unit name.\\n   * @memberof Unit\\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \\\"cm\\\"\\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\\n   */\\n\\n\\n  Unit.prototype.to = function (valuelessUnit) {\\n    var other;\\n    var value = this.value === null ? this._normalize(1) : this.value;\\n\\n    if (typeof valuelessUnit === 'string') {\\n      // other = new Unit(null, valuelessUnit)\\n      other = Unit.parse(valuelessUnit);\\n\\n      if (!this.equalBase(other)) {\\n        throw new Error(\\\"Units do not match ('\\\".concat(other.toString(), \\\"' != '\\\").concat(this.toString(), \\\"')\\\"));\\n      }\\n\\n      if (other.value !== null) {\\n        throw new Error('Cannot convert to a unit with a value');\\n      }\\n\\n      other.value = (0, _object.clone)(value);\\n      other.fixPrefix = true;\\n      other.skipAutomaticSimplification = true;\\n      return other;\\n    } else if ((0, _is.isUnit)(valuelessUnit)) {\\n      if (!this.equalBase(valuelessUnit)) {\\n        throw new Error(\\\"Units do not match ('\\\".concat(valuelessUnit.toString(), \\\"' != '\\\").concat(this.toString(), \\\"')\\\"));\\n      }\\n\\n      if (valuelessUnit.value !== null) {\\n        throw new Error('Cannot convert to a unit with a value');\\n      }\\n\\n      other = valuelessUnit.clone();\\n      other.value = (0, _object.clone)(value);\\n      other.fixPrefix = true;\\n      other.skipAutomaticSimplification = true;\\n      return other;\\n    } else {\\n      throw new Error('String or Unit expected as parameter');\\n    }\\n  };\\n  /**\\n   * Return the value of the unit when represented with given valueless unit\\n   * @memberof Unit\\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\\n   * @return {number} Returns the unit value as number.\\n   */\\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\\n\\n\\n  Unit.prototype.toNumber = function (valuelessUnit) {\\n    return toNumber(this.toNumeric(valuelessUnit));\\n  };\\n  /**\\n   * Return the value of the unit in the original numeric type\\n   * @memberof Unit\\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\\n   * @return {number | BigNumber | Fraction} Returns the unit value\\n   */\\n\\n\\n  Unit.prototype.toNumeric = function (valuelessUnit) {\\n    var other;\\n\\n    if (valuelessUnit) {\\n      // Allow getting the numeric value without converting to a different unit\\n      other = this.to(valuelessUnit);\\n    } else {\\n      other = this.clone();\\n    }\\n\\n    if (other._isDerived() || other.units.length === 0) {\\n      return other._denormalize(other.value);\\n    } else {\\n      return other._denormalize(other.value, other.units[0].prefix.value);\\n    }\\n  };\\n  /**\\n   * Get a string representation of the unit.\\n   * @memberof Unit\\n   * @return {string}\\n   */\\n\\n\\n  Unit.prototype.toString = function () {\\n    return this.format();\\n  };\\n  /**\\n   * Get a JSON representation of the unit\\n   * @memberof Unit\\n   * @returns {Object} Returns a JSON object structured as:\\n   *                   `{\\\"mathjs\\\": \\\"Unit\\\", \\\"value\\\": 2, \\\"unit\\\": \\\"cm\\\", \\\"fixPrefix\\\": false}`\\n   */\\n\\n\\n  Unit.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'Unit',\\n      value: this._denormalize(this.value),\\n      unit: this.formatUnits(),\\n      fixPrefix: this.fixPrefix\\n    };\\n  };\\n  /**\\n   * Instantiate a Unit from a JSON object\\n   * @memberof Unit\\n   * @param {Object} json  A JSON object structured as:\\n   *                       `{\\\"mathjs\\\": \\\"Unit\\\", \\\"value\\\": 2, \\\"unit\\\": \\\"cm\\\", \\\"fixPrefix\\\": false}`\\n   * @return {Unit}\\n   */\\n\\n\\n  Unit.fromJSON = function (json) {\\n    var unit = new Unit(json.value, json.unit);\\n    unit.fixPrefix = json.fixPrefix || false;\\n    return unit;\\n  };\\n  /**\\n   * Returns the string representation of the unit.\\n   * @memberof Unit\\n   * @return {string}\\n   */\\n\\n\\n  Unit.prototype.valueOf = Unit.prototype.toString;\\n  /**\\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\\n   * The returned Unit will contain a list of the \\\"best\\\" units for formatting.\\n   */\\n\\n  Unit.prototype.simplify = function () {\\n    var ret = this.clone();\\n    var proposedUnitList = []; // Search for a matching base\\n\\n    var matchingBase;\\n\\n    for (var key in currentUnitSystem) {\\n      if ((0, _object.hasOwnProperty)(currentUnitSystem, key)) {\\n        if (ret.hasBase(BASE_UNITS[key])) {\\n          matchingBase = key;\\n          break;\\n        }\\n      }\\n    }\\n\\n    if (matchingBase === 'NONE') {\\n      ret.units = [];\\n    } else {\\n      var matchingUnit;\\n\\n      if (matchingBase) {\\n        // Does the unit system have a matching unit?\\n        if ((0, _object.hasOwnProperty)(currentUnitSystem, matchingBase)) {\\n          matchingUnit = currentUnitSystem[matchingBase];\\n        }\\n      }\\n\\n      if (matchingUnit) {\\n        ret.units = [{\\n          unit: matchingUnit.unit,\\n          prefix: matchingUnit.prefix,\\n          power: 1.0\\n        }];\\n      } else {\\n        // Multiple units or units with powers are formatted like this:\\n        // 5 (kg m^2) / (s^3 mol)\\n        // Build an representation from the base units of the current unit system\\n        var missingBaseDim = false;\\n\\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n          var baseDim = BASE_DIMENSIONS[i];\\n\\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\\n            if ((0, _object.hasOwnProperty)(currentUnitSystem, baseDim)) {\\n              proposedUnitList.push({\\n                unit: currentUnitSystem[baseDim].unit,\\n                prefix: currentUnitSystem[baseDim].prefix,\\n                power: ret.dimensions[i] || 0\\n              });\\n            } else {\\n              missingBaseDim = true;\\n            }\\n          }\\n        } // Is the proposed unit list \\\"simpler\\\" than the existing one?\\n\\n\\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\\n          // Replace this unit list with the proposed list\\n          ret.units = proposedUnitList;\\n        }\\n      }\\n    }\\n\\n    return ret;\\n  };\\n  /**\\n   * Returns a new Unit in the SI system with the same value as this one\\n   */\\n\\n\\n  Unit.prototype.toSI = function () {\\n    var ret = this.clone();\\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\\n    // 5 (kg m^2) / (s^3 mol)\\n    // Build an representation from the base units of the SI unit system\\n\\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\\n      var baseDim = BASE_DIMENSIONS[i];\\n\\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\\n        if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS.si, baseDim)) {\\n          proposedUnitList.push({\\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\\n            power: ret.dimensions[i] || 0\\n          });\\n        } else {\\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\\n        }\\n      }\\n    } // Replace this unit list with the proposed list\\n\\n\\n    ret.units = proposedUnitList;\\n    ret.fixPrefix = true;\\n    ret.skipAutomaticSimplification = true;\\n    return ret;\\n  };\\n  /**\\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\\n   * @memberof Unit\\n   * @return {string}\\n   */\\n\\n\\n  Unit.prototype.formatUnits = function () {\\n    var strNum = '';\\n    var strDen = '';\\n    var nNum = 0;\\n    var nDen = 0;\\n\\n    for (var i = 0; i < this.units.length; i++) {\\n      if (this.units[i].power > 0) {\\n        nNum++;\\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\\n\\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\\n          strNum += '^' + this.units[i].power;\\n        }\\n      } else if (this.units[i].power < 0) {\\n        nDen++;\\n      }\\n    }\\n\\n    if (nDen > 0) {\\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\\n        if (this.units[_i4].power < 0) {\\n          if (nNum > 0) {\\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\\n\\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\\n              strDen += '^' + -this.units[_i4].power;\\n            }\\n          } else {\\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\\n            strDen += '^' + this.units[_i4].power;\\n          }\\n        }\\n      }\\n    } // Remove leading \\\" \\\"\\n\\n\\n    strNum = strNum.substr(1);\\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\\n\\n    if (nNum > 1 && nDen > 0) {\\n      strNum = '(' + strNum + ')';\\n    }\\n\\n    if (nDen > 1 && nNum > 0) {\\n      strDen = '(' + strDen + ')';\\n    }\\n\\n    var str = strNum;\\n\\n    if (nNum > 0 && nDen > 0) {\\n      str += ' / ';\\n    }\\n\\n    str += strDen;\\n    return str;\\n  };\\n  /**\\n   * Get a string representation of the Unit, with optional formatting options.\\n   * @memberof Unit\\n   * @param {Object | number | Function} [options]  Formatting options. See\\n   *                                                lib/utils/number:format for a\\n   *                                                description of the available\\n   *                                                options.\\n   * @return {string}\\n   */\\n\\n\\n  Unit.prototype.format = function (options) {\\n    // Simplfy the unit list, unless it is valueless or was created directly in the\\n    // constructor or as the result of to or toSI\\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\\n\\n    var isImaginary = false;\\n\\n    if (typeof simp.value !== 'undefined' && simp.value !== null && (0, _is.isComplex)(simp.value)) {\\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\\n    }\\n\\n    for (var i in simp.units) {\\n      if ((0, _object.hasOwnProperty)(simp.units, i)) {\\n        if (simp.units[i].unit) {\\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\\n            simp.units[i].unit = UNITS.VAR;\\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\\n            simp.units[i].unit = UNITS.VA;\\n          }\\n        }\\n      }\\n    } // Now apply the best prefix\\n    // Units must have only one unit and not have the fixPrefix flag set\\n\\n\\n    if (simp.units.length === 1 && !simp.fixPrefix) {\\n      // Units must have integer powers, otherwise the prefix will change the\\n      // outputted value by not-an-integer-power-of-ten\\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\\n        // Apply the best prefix\\n        simp.units[0].prefix = simp._bestPrefix();\\n      }\\n    }\\n\\n    var value = simp._denormalize(simp.value);\\n\\n    var str = simp.value !== null ? format(value, options || {}) : '';\\n    var unitStr = simp.formatUnits();\\n\\n    if (simp.value && (0, _is.isComplex)(simp.value)) {\\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\\n    }\\n\\n    if (unitStr.length > 0 && str.length > 0) {\\n      str += ' ';\\n    }\\n\\n    str += unitStr;\\n    return str;\\n  };\\n  /**\\n   * Calculate the best prefix using current value.\\n   * @memberof Unit\\n   * @returns {Object} prefix\\n   * @private\\n   */\\n\\n\\n  Unit.prototype._bestPrefix = function () {\\n    if (this.units.length !== 1) {\\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\\n    }\\n\\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\\n    } // find the best prefix value (resulting in the value of which\\n    // the absolute value of the log10 is closest to zero,\\n    // though with a little offset of 1.2 for nicer values: you get a\\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\\n    // Note: the units value can be any numeric type, but to find the best\\n    // prefix it's enough to work with limited precision of a regular number\\n    // Update: using mathjs abs since we also allow complex numbers\\n\\n\\n    var absValue = this.value !== null ? abs(this.value) : 0;\\n    var absUnitValue = abs(this.units[0].unit.value);\\n    var bestPrefix = this.units[0].prefix;\\n\\n    if (absValue === 0) {\\n      return bestPrefix;\\n    }\\n\\n    var power = this.units[0].power;\\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\\n\\n    bestDiff = Math.abs(bestDiff);\\n    var prefixes = this.units[0].unit.prefixes;\\n\\n    for (var p in prefixes) {\\n      if ((0, _object.hasOwnProperty)(prefixes, p)) {\\n        var prefix = prefixes[p];\\n\\n        if (prefix.scientific) {\\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\\n\\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\\n            // choose the prefix with the smallest diff, or if equal, choose the one\\n            // with the shortest name (can happen with SHORTLONG for example)\\n            bestPrefix = prefix;\\n            bestDiff = diff;\\n          }\\n        }\\n      }\\n    }\\n\\n    return bestPrefix;\\n  };\\n  /**\\n   * Returns an array of units whose sum is equal to this unit\\n   * @memberof Unit\\n   * @param {Array} [parts] An array of strings or valueless units.\\n   *\\n   *   Example:\\n   *\\n   *   const u = new Unit(1, 'm')\\n   *   u.splitUnit(['feet', 'inch'])\\n   *     [ 3 feet, 3.3700787401575 inch ]\\n   *\\n   * @return {Array} An array of units.\\n   */\\n\\n\\n  Unit.prototype.splitUnit = function (parts) {\\n    var x = this.clone();\\n    var ret = [];\\n\\n    for (var i = 0; i < parts.length; i++) {\\n      // Convert x to the requested unit\\n      x = x.to(parts[i]);\\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\\n\\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\\n      // since fix can incorrectly round down if there is round-off error\\n\\n      var xRounded = round(xNumeric);\\n      var xFixed = void 0;\\n      var isNearlyEqual = equal(xRounded, xNumeric);\\n\\n      if (isNearlyEqual) {\\n        xFixed = xRounded;\\n      } else {\\n        xFixed = fix(x.toNumeric());\\n      }\\n\\n      var y = new Unit(xFixed, parts[i].toString());\\n      ret.push(y);\\n      x = subtract(x, y);\\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\\n    // all the parts so far with the original value. If they are nearly equal,\\n    // we set the remainder to 0.\\n\\n\\n    var testSum = 0;\\n\\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\\n      testSum = addScalar(testSum, ret[_i5].value);\\n    }\\n\\n    if (equal(testSum, this.value)) {\\n      x.value = 0;\\n    }\\n\\n    ret.push(x);\\n    return ret;\\n  };\\n\\n  var PREFIXES = {\\n    NONE: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      }\\n    },\\n    SHORT: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      da: {\\n        name: 'da',\\n        value: 1e1,\\n        scientific: false\\n      },\\n      h: {\\n        name: 'h',\\n        value: 1e2,\\n        scientific: false\\n      },\\n      k: {\\n        name: 'k',\\n        value: 1e3,\\n        scientific: true\\n      },\\n      M: {\\n        name: 'M',\\n        value: 1e6,\\n        scientific: true\\n      },\\n      G: {\\n        name: 'G',\\n        value: 1e9,\\n        scientific: true\\n      },\\n      T: {\\n        name: 'T',\\n        value: 1e12,\\n        scientific: true\\n      },\\n      P: {\\n        name: 'P',\\n        value: 1e15,\\n        scientific: true\\n      },\\n      E: {\\n        name: 'E',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      Z: {\\n        name: 'Z',\\n        value: 1e21,\\n        scientific: true\\n      },\\n      Y: {\\n        name: 'Y',\\n        value: 1e24,\\n        scientific: true\\n      },\\n      d: {\\n        name: 'd',\\n        value: 1e-1,\\n        scientific: false\\n      },\\n      c: {\\n        name: 'c',\\n        value: 1e-2,\\n        scientific: false\\n      },\\n      m: {\\n        name: 'm',\\n        value: 1e-3,\\n        scientific: true\\n      },\\n      u: {\\n        name: 'u',\\n        value: 1e-6,\\n        scientific: true\\n      },\\n      n: {\\n        name: 'n',\\n        value: 1e-9,\\n        scientific: true\\n      },\\n      p: {\\n        name: 'p',\\n        value: 1e-12,\\n        scientific: true\\n      },\\n      f: {\\n        name: 'f',\\n        value: 1e-15,\\n        scientific: true\\n      },\\n      a: {\\n        name: 'a',\\n        value: 1e-18,\\n        scientific: true\\n      },\\n      z: {\\n        name: 'z',\\n        value: 1e-21,\\n        scientific: true\\n      },\\n      y: {\\n        name: 'y',\\n        value: 1e-24,\\n        scientific: true\\n      }\\n    },\\n    LONG: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      deca: {\\n        name: 'deca',\\n        value: 1e1,\\n        scientific: false\\n      },\\n      hecto: {\\n        name: 'hecto',\\n        value: 1e2,\\n        scientific: false\\n      },\\n      kilo: {\\n        name: 'kilo',\\n        value: 1e3,\\n        scientific: true\\n      },\\n      mega: {\\n        name: 'mega',\\n        value: 1e6,\\n        scientific: true\\n      },\\n      giga: {\\n        name: 'giga',\\n        value: 1e9,\\n        scientific: true\\n      },\\n      tera: {\\n        name: 'tera',\\n        value: 1e12,\\n        scientific: true\\n      },\\n      peta: {\\n        name: 'peta',\\n        value: 1e15,\\n        scientific: true\\n      },\\n      exa: {\\n        name: 'exa',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      zetta: {\\n        name: 'zetta',\\n        value: 1e21,\\n        scientific: true\\n      },\\n      yotta: {\\n        name: 'yotta',\\n        value: 1e24,\\n        scientific: true\\n      },\\n      deci: {\\n        name: 'deci',\\n        value: 1e-1,\\n        scientific: false\\n      },\\n      centi: {\\n        name: 'centi',\\n        value: 1e-2,\\n        scientific: false\\n      },\\n      milli: {\\n        name: 'milli',\\n        value: 1e-3,\\n        scientific: true\\n      },\\n      micro: {\\n        name: 'micro',\\n        value: 1e-6,\\n        scientific: true\\n      },\\n      nano: {\\n        name: 'nano',\\n        value: 1e-9,\\n        scientific: true\\n      },\\n      pico: {\\n        name: 'pico',\\n        value: 1e-12,\\n        scientific: true\\n      },\\n      femto: {\\n        name: 'femto',\\n        value: 1e-15,\\n        scientific: true\\n      },\\n      atto: {\\n        name: 'atto',\\n        value: 1e-18,\\n        scientific: true\\n      },\\n      zepto: {\\n        name: 'zepto',\\n        value: 1e-21,\\n        scientific: true\\n      },\\n      yocto: {\\n        name: 'yocto',\\n        value: 1e-24,\\n        scientific: true\\n      }\\n    },\\n    SQUARED: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      da: {\\n        name: 'da',\\n        value: 1e2,\\n        scientific: false\\n      },\\n      h: {\\n        name: 'h',\\n        value: 1e4,\\n        scientific: false\\n      },\\n      k: {\\n        name: 'k',\\n        value: 1e6,\\n        scientific: true\\n      },\\n      M: {\\n        name: 'M',\\n        value: 1e12,\\n        scientific: true\\n      },\\n      G: {\\n        name: 'G',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      T: {\\n        name: 'T',\\n        value: 1e24,\\n        scientific: true\\n      },\\n      P: {\\n        name: 'P',\\n        value: 1e30,\\n        scientific: true\\n      },\\n      E: {\\n        name: 'E',\\n        value: 1e36,\\n        scientific: true\\n      },\\n      Z: {\\n        name: 'Z',\\n        value: 1e42,\\n        scientific: true\\n      },\\n      Y: {\\n        name: 'Y',\\n        value: 1e48,\\n        scientific: true\\n      },\\n      d: {\\n        name: 'd',\\n        value: 1e-2,\\n        scientific: false\\n      },\\n      c: {\\n        name: 'c',\\n        value: 1e-4,\\n        scientific: false\\n      },\\n      m: {\\n        name: 'm',\\n        value: 1e-6,\\n        scientific: true\\n      },\\n      u: {\\n        name: 'u',\\n        value: 1e-12,\\n        scientific: true\\n      },\\n      n: {\\n        name: 'n',\\n        value: 1e-18,\\n        scientific: true\\n      },\\n      p: {\\n        name: 'p',\\n        value: 1e-24,\\n        scientific: true\\n      },\\n      f: {\\n        name: 'f',\\n        value: 1e-30,\\n        scientific: true\\n      },\\n      a: {\\n        name: 'a',\\n        value: 1e-36,\\n        scientific: true\\n      },\\n      z: {\\n        name: 'z',\\n        value: 1e-42,\\n        scientific: true\\n      },\\n      y: {\\n        name: 'y',\\n        value: 1e-48,\\n        scientific: true\\n      }\\n    },\\n    CUBIC: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      da: {\\n        name: 'da',\\n        value: 1e3,\\n        scientific: false\\n      },\\n      h: {\\n        name: 'h',\\n        value: 1e6,\\n        scientific: false\\n      },\\n      k: {\\n        name: 'k',\\n        value: 1e9,\\n        scientific: true\\n      },\\n      M: {\\n        name: 'M',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      G: {\\n        name: 'G',\\n        value: 1e27,\\n        scientific: true\\n      },\\n      T: {\\n        name: 'T',\\n        value: 1e36,\\n        scientific: true\\n      },\\n      P: {\\n        name: 'P',\\n        value: 1e45,\\n        scientific: true\\n      },\\n      E: {\\n        name: 'E',\\n        value: 1e54,\\n        scientific: true\\n      },\\n      Z: {\\n        name: 'Z',\\n        value: 1e63,\\n        scientific: true\\n      },\\n      Y: {\\n        name: 'Y',\\n        value: 1e72,\\n        scientific: true\\n      },\\n      d: {\\n        name: 'd',\\n        value: 1e-3,\\n        scientific: false\\n      },\\n      c: {\\n        name: 'c',\\n        value: 1e-6,\\n        scientific: false\\n      },\\n      m: {\\n        name: 'm',\\n        value: 1e-9,\\n        scientific: true\\n      },\\n      u: {\\n        name: 'u',\\n        value: 1e-18,\\n        scientific: true\\n      },\\n      n: {\\n        name: 'n',\\n        value: 1e-27,\\n        scientific: true\\n      },\\n      p: {\\n        name: 'p',\\n        value: 1e-36,\\n        scientific: true\\n      },\\n      f: {\\n        name: 'f',\\n        value: 1e-45,\\n        scientific: true\\n      },\\n      a: {\\n        name: 'a',\\n        value: 1e-54,\\n        scientific: true\\n      },\\n      z: {\\n        name: 'z',\\n        value: 1e-63,\\n        scientific: true\\n      },\\n      y: {\\n        name: 'y',\\n        value: 1e-72,\\n        scientific: true\\n      }\\n    },\\n    BINARY_SHORT_SI: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      k: {\\n        name: 'k',\\n        value: 1e3,\\n        scientific: true\\n      },\\n      M: {\\n        name: 'M',\\n        value: 1e6,\\n        scientific: true\\n      },\\n      G: {\\n        name: 'G',\\n        value: 1e9,\\n        scientific: true\\n      },\\n      T: {\\n        name: 'T',\\n        value: 1e12,\\n        scientific: true\\n      },\\n      P: {\\n        name: 'P',\\n        value: 1e15,\\n        scientific: true\\n      },\\n      E: {\\n        name: 'E',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      Z: {\\n        name: 'Z',\\n        value: 1e21,\\n        scientific: true\\n      },\\n      Y: {\\n        name: 'Y',\\n        value: 1e24,\\n        scientific: true\\n      }\\n    },\\n    BINARY_SHORT_IEC: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      Ki: {\\n        name: 'Ki',\\n        value: 1024,\\n        scientific: true\\n      },\\n      Mi: {\\n        name: 'Mi',\\n        value: Math.pow(1024, 2),\\n        scientific: true\\n      },\\n      Gi: {\\n        name: 'Gi',\\n        value: Math.pow(1024, 3),\\n        scientific: true\\n      },\\n      Ti: {\\n        name: 'Ti',\\n        value: Math.pow(1024, 4),\\n        scientific: true\\n      },\\n      Pi: {\\n        name: 'Pi',\\n        value: Math.pow(1024, 5),\\n        scientific: true\\n      },\\n      Ei: {\\n        name: 'Ei',\\n        value: Math.pow(1024, 6),\\n        scientific: true\\n      },\\n      Zi: {\\n        name: 'Zi',\\n        value: Math.pow(1024, 7),\\n        scientific: true\\n      },\\n      Yi: {\\n        name: 'Yi',\\n        value: Math.pow(1024, 8),\\n        scientific: true\\n      }\\n    },\\n    BINARY_LONG_SI: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      kilo: {\\n        name: 'kilo',\\n        value: 1e3,\\n        scientific: true\\n      },\\n      mega: {\\n        name: 'mega',\\n        value: 1e6,\\n        scientific: true\\n      },\\n      giga: {\\n        name: 'giga',\\n        value: 1e9,\\n        scientific: true\\n      },\\n      tera: {\\n        name: 'tera',\\n        value: 1e12,\\n        scientific: true\\n      },\\n      peta: {\\n        name: 'peta',\\n        value: 1e15,\\n        scientific: true\\n      },\\n      exa: {\\n        name: 'exa',\\n        value: 1e18,\\n        scientific: true\\n      },\\n      zetta: {\\n        name: 'zetta',\\n        value: 1e21,\\n        scientific: true\\n      },\\n      yotta: {\\n        name: 'yotta',\\n        value: 1e24,\\n        scientific: true\\n      }\\n    },\\n    BINARY_LONG_IEC: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      kibi: {\\n        name: 'kibi',\\n        value: 1024,\\n        scientific: true\\n      },\\n      mebi: {\\n        name: 'mebi',\\n        value: Math.pow(1024, 2),\\n        scientific: true\\n      },\\n      gibi: {\\n        name: 'gibi',\\n        value: Math.pow(1024, 3),\\n        scientific: true\\n      },\\n      tebi: {\\n        name: 'tebi',\\n        value: Math.pow(1024, 4),\\n        scientific: true\\n      },\\n      pebi: {\\n        name: 'pebi',\\n        value: Math.pow(1024, 5),\\n        scientific: true\\n      },\\n      exi: {\\n        name: 'exi',\\n        value: Math.pow(1024, 6),\\n        scientific: true\\n      },\\n      zebi: {\\n        name: 'zebi',\\n        value: Math.pow(1024, 7),\\n        scientific: true\\n      },\\n      yobi: {\\n        name: 'yobi',\\n        value: Math.pow(1024, 8),\\n        scientific: true\\n      }\\n    },\\n    BTU: {\\n      '': {\\n        name: '',\\n        value: 1,\\n        scientific: true\\n      },\\n      MM: {\\n        name: 'MM',\\n        value: 1e6,\\n        scientific: true\\n      }\\n    }\\n  };\\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\\n   * Index  Dimension\\n   * -----  ---------\\n   *   0    Length\\n   *   1    Mass\\n   *   2    Time\\n   *   3    Current\\n   *   4    Temperature\\n   *   5    Luminous intensity\\n   *   6    Amount of substance\\n   *   7    Angle\\n   *   8    Bit (digital)\\n   * For example, the unit \\\"298.15 K\\\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \\\"1 cal / (gm \\u00b0C)\\\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\\n   *\\n   */\\n\\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\\n  var BASE_UNITS = {\\n    NONE: {\\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\\n    },\\n    MASS: {\\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\\n    },\\n    LENGTH: {\\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\\n    },\\n    TIME: {\\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\\n    },\\n    CURRENT: {\\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\\n    },\\n    TEMPERATURE: {\\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\\n    },\\n    LUMINOUS_INTENSITY: {\\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\\n    },\\n    AMOUNT_OF_SUBSTANCE: {\\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\\n    },\\n    FORCE: {\\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\\n    },\\n    SURFACE: {\\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\\n    },\\n    VOLUME: {\\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\\n    },\\n    ENERGY: {\\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\\n    },\\n    POWER: {\\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\\n    },\\n    PRESSURE: {\\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_CHARGE: {\\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_CAPACITANCE: {\\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_POTENTIAL: {\\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_RESISTANCE: {\\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_INDUCTANCE: {\\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\\n    },\\n    ELECTRIC_CONDUCTANCE: {\\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\\n    },\\n    MAGNETIC_FLUX: {\\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\\n    },\\n    MAGNETIC_FLUX_DENSITY: {\\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\\n    },\\n    FREQUENCY: {\\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\\n    },\\n    ANGLE: {\\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\\n    },\\n    BIT: {\\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\\n    }\\n  };\\n\\n  for (var key in BASE_UNITS) {\\n    if ((0, _object.hasOwnProperty)(BASE_UNITS, key)) {\\n      BASE_UNITS[key].key = key;\\n    }\\n  }\\n\\n  var BASE_UNIT_NONE = {};\\n  var UNIT_NONE = {\\n    name: '',\\n    base: BASE_UNIT_NONE,\\n    value: 1,\\n    offset: 0,\\n    dimensions: BASE_DIMENSIONS.map(function (x) {\\n      return 0;\\n    })\\n  };\\n  var UNITS = {\\n    // length\\n    meter: {\\n      name: 'meter',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    inch: {\\n      name: 'inch',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0254,\\n      offset: 0\\n    },\\n    foot: {\\n      name: 'foot',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.3048,\\n      offset: 0\\n    },\\n    yard: {\\n      name: 'yard',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.9144,\\n      offset: 0\\n    },\\n    mile: {\\n      name: 'mile',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 1609.344,\\n      offset: 0\\n    },\\n    link: {\\n      name: 'link',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.201168,\\n      offset: 0\\n    },\\n    rod: {\\n      name: 'rod',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 5.0292,\\n      offset: 0\\n    },\\n    chain: {\\n      name: 'chain',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 20.1168,\\n      offset: 0\\n    },\\n    angstrom: {\\n      name: 'angstrom',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 1e-10,\\n      offset: 0\\n    },\\n    m: {\\n      name: 'm',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    \\\"in\\\": {\\n      name: 'in',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0254,\\n      offset: 0\\n    },\\n    ft: {\\n      name: 'ft',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.3048,\\n      offset: 0\\n    },\\n    yd: {\\n      name: 'yd',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.9144,\\n      offset: 0\\n    },\\n    mi: {\\n      name: 'mi',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 1609.344,\\n      offset: 0\\n    },\\n    li: {\\n      name: 'li',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.201168,\\n      offset: 0\\n    },\\n    rd: {\\n      name: 'rd',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 5.029210,\\n      offset: 0\\n    },\\n    ch: {\\n      name: 'ch',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 20.1168,\\n      offset: 0\\n    },\\n    mil: {\\n      name: 'mil',\\n      base: BASE_UNITS.LENGTH,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0000254,\\n      offset: 0\\n    },\\n    // 1/1000 inch\\n    // Surface\\n    m2: {\\n      name: 'm2',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.SQUARED,\\n      value: 1,\\n      offset: 0\\n    },\\n    sqin: {\\n      name: 'sqin',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.00064516,\\n      offset: 0\\n    },\\n    // 645.16 mm2\\n    sqft: {\\n      name: 'sqft',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.09290304,\\n      offset: 0\\n    },\\n    // 0.09290304 m2\\n    sqyd: {\\n      name: 'sqyd',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.83612736,\\n      offset: 0\\n    },\\n    // 0.83612736 m2\\n    sqmi: {\\n      name: 'sqmi',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 2589988.110336,\\n      offset: 0\\n    },\\n    // 2.589988110336 km2\\n    sqrd: {\\n      name: 'sqrd',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 25.29295,\\n      offset: 0\\n    },\\n    // 25.29295 m2\\n    sqch: {\\n      name: 'sqch',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 404.6873,\\n      offset: 0\\n    },\\n    // 404.6873 m2\\n    sqmil: {\\n      name: 'sqmil',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 6.4516e-10,\\n      offset: 0\\n    },\\n    // 6.4516 * 10^-10 m2\\n    acre: {\\n      name: 'acre',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 4046.86,\\n      offset: 0\\n    },\\n    // 4046.86 m2\\n    hectare: {\\n      name: 'hectare',\\n      base: BASE_UNITS.SURFACE,\\n      prefixes: PREFIXES.NONE,\\n      value: 10000,\\n      offset: 0\\n    },\\n    // 10000 m2\\n    // Volume\\n    m3: {\\n      name: 'm3',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.CUBIC,\\n      value: 1,\\n      offset: 0\\n    },\\n    L: {\\n      name: 'L',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.SHORT,\\n      value: 0.001,\\n      offset: 0\\n    },\\n    // litre\\n    l: {\\n      name: 'l',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.SHORT,\\n      value: 0.001,\\n      offset: 0\\n    },\\n    // litre\\n    litre: {\\n      name: 'litre',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.LONG,\\n      value: 0.001,\\n      offset: 0\\n    },\\n    cuin: {\\n      name: 'cuin',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 1.6387064e-5,\\n      offset: 0\\n    },\\n    // 1.6387064e-5 m3\\n    cuft: {\\n      name: 'cuft',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.028316846592,\\n      offset: 0\\n    },\\n    // 28.316 846 592 L\\n    cuyd: {\\n      name: 'cuyd',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.764554857984,\\n      offset: 0\\n    },\\n    // 764.554 857 984 L\\n    teaspoon: {\\n      name: 'teaspoon',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.000005,\\n      offset: 0\\n    },\\n    // 5 mL\\n    tablespoon: {\\n      name: 'tablespoon',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.000015,\\n      offset: 0\\n    },\\n    // 15 mL\\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\\n    drop: {\\n      name: 'drop',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 5e-8,\\n      offset: 0\\n    },\\n    // 0.05 mL = 5e-8 m3\\n    gtt: {\\n      name: 'gtt',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 5e-8,\\n      offset: 0\\n    },\\n    // 0.05 mL = 5e-8 m3\\n    // Liquid volume\\n    minim: {\\n      name: 'minim',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.00000006161152,\\n      offset: 0\\n    },\\n    // 0.06161152 mL\\n    fluiddram: {\\n      name: 'fluiddram',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0000036966911,\\n      offset: 0\\n    },\\n    // 3.696691 mL\\n    fluidounce: {\\n      name: 'fluidounce',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.00002957353,\\n      offset: 0\\n    },\\n    // 29.57353 mL\\n    gill: {\\n      name: 'gill',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0001182941,\\n      offset: 0\\n    },\\n    // 118.2941 mL\\n    cc: {\\n      name: 'cc',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 1e-6,\\n      offset: 0\\n    },\\n    // 1e-6 L\\n    cup: {\\n      name: 'cup',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0002365882,\\n      offset: 0\\n    },\\n    // 236.5882 mL\\n    pint: {\\n      name: 'pint',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0004731765,\\n      offset: 0\\n    },\\n    // 473.1765 mL\\n    quart: {\\n      name: 'quart',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0009463529,\\n      offset: 0\\n    },\\n    // 946.3529 mL\\n    gallon: {\\n      name: 'gallon',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.003785412,\\n      offset: 0\\n    },\\n    // 3.785412 L\\n    beerbarrel: {\\n      name: 'beerbarrel',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.1173478,\\n      offset: 0\\n    },\\n    // 117.3478 L\\n    oilbarrel: {\\n      name: 'oilbarrel',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.1589873,\\n      offset: 0\\n    },\\n    // 158.9873 L\\n    hogshead: {\\n      name: 'hogshead',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.2384810,\\n      offset: 0\\n    },\\n    // 238.4810 L\\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\\n    fldr: {\\n      name: 'fldr',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0000036966911,\\n      offset: 0\\n    },\\n    // 3.696691 mL\\n    floz: {\\n      name: 'floz',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.00002957353,\\n      offset: 0\\n    },\\n    // 29.57353 mL\\n    gi: {\\n      name: 'gi',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0001182941,\\n      offset: 0\\n    },\\n    // 118.2941 mL\\n    cp: {\\n      name: 'cp',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0002365882,\\n      offset: 0\\n    },\\n    // 236.5882 mL\\n    pt: {\\n      name: 'pt',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0004731765,\\n      offset: 0\\n    },\\n    // 473.1765 mL\\n    qt: {\\n      name: 'qt',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.0009463529,\\n      offset: 0\\n    },\\n    // 946.3529 mL\\n    gal: {\\n      name: 'gal',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.003785412,\\n      offset: 0\\n    },\\n    // 3.785412 L\\n    bbl: {\\n      name: 'bbl',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.1173478,\\n      offset: 0\\n    },\\n    // 117.3478 L\\n    obl: {\\n      name: 'obl',\\n      base: BASE_UNITS.VOLUME,\\n      prefixes: PREFIXES.NONE,\\n      value: 0.1589873,\\n      offset: 0\\n    },\\n    // 158.9873 L\\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\\n    // Mass\\n    g: {\\n      name: 'g',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.SHORT,\\n      value: 0.001,\\n      offset: 0\\n    },\\n    gram: {\\n      name: 'gram',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.LONG,\\n      value: 0.001,\\n      offset: 0\\n    },\\n    ton: {\\n      name: 'ton',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.SHORT,\\n      value: 907.18474,\\n      offset: 0\\n    },\\n    t: {\\n      name: 't',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1000,\\n      offset: 0\\n    },\\n    tonne: {\\n      name: 'tonne',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.LONG,\\n      value: 1000,\\n      offset: 0\\n    },\\n    grain: {\\n      name: 'grain',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 64.79891e-6,\\n      offset: 0\\n    },\\n    dram: {\\n      name: 'dram',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 1.7718451953125e-3,\\n      offset: 0\\n    },\\n    ounce: {\\n      name: 'ounce',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 28.349523125e-3,\\n      offset: 0\\n    },\\n    poundmass: {\\n      name: 'poundmass',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 453.59237e-3,\\n      offset: 0\\n    },\\n    hundredweight: {\\n      name: 'hundredweight',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 45.359237,\\n      offset: 0\\n    },\\n    stick: {\\n      name: 'stick',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 115e-3,\\n      offset: 0\\n    },\\n    stone: {\\n      name: 'stone',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 6.35029318,\\n      offset: 0\\n    },\\n    gr: {\\n      name: 'gr',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 64.79891e-6,\\n      offset: 0\\n    },\\n    dr: {\\n      name: 'dr',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 1.7718451953125e-3,\\n      offset: 0\\n    },\\n    oz: {\\n      name: 'oz',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 28.349523125e-3,\\n      offset: 0\\n    },\\n    lbm: {\\n      name: 'lbm',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 453.59237e-3,\\n      offset: 0\\n    },\\n    cwt: {\\n      name: 'cwt',\\n      base: BASE_UNITS.MASS,\\n      prefixes: PREFIXES.NONE,\\n      value: 45.359237,\\n      offset: 0\\n    },\\n    // Time\\n    s: {\\n      name: 's',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    min: {\\n      name: 'min',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 60,\\n      offset: 0\\n    },\\n    h: {\\n      name: 'h',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 3600,\\n      offset: 0\\n    },\\n    second: {\\n      name: 'second',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    sec: {\\n      name: 'sec',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    minute: {\\n      name: 'minute',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 60,\\n      offset: 0\\n    },\\n    hour: {\\n      name: 'hour',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 3600,\\n      offset: 0\\n    },\\n    day: {\\n      name: 'day',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 86400,\\n      offset: 0\\n    },\\n    week: {\\n      name: 'week',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 7 * 86400,\\n      offset: 0\\n    },\\n    month: {\\n      name: 'month',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 2629800,\\n      // 1/12th of Julian year\\n      offset: 0\\n    },\\n    year: {\\n      name: 'year',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 31557600,\\n      // Julian year\\n      offset: 0\\n    },\\n    decade: {\\n      name: 'decade',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 315576000,\\n      // Julian decade\\n      offset: 0\\n    },\\n    century: {\\n      name: 'century',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 3155760000,\\n      // Julian century\\n      offset: 0\\n    },\\n    millennium: {\\n      name: 'millennium',\\n      base: BASE_UNITS.TIME,\\n      prefixes: PREFIXES.NONE,\\n      value: 31557600000,\\n      // Julian millennium\\n      offset: 0\\n    },\\n    // Frequency\\n    hertz: {\\n      name: 'Hertz',\\n      base: BASE_UNITS.FREQUENCY,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0,\\n      reciprocal: true\\n    },\\n    Hz: {\\n      name: 'Hz',\\n      base: BASE_UNITS.FREQUENCY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0,\\n      reciprocal: true\\n    },\\n    // Angle\\n    rad: {\\n      name: 'rad',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    radian: {\\n      name: 'radian',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\\n    deg: {\\n      name: 'deg',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.SHORT,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    degree: {\\n      name: 'degree',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.LONG,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\\n    grad: {\\n      name: 'grad',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.SHORT,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    gradian: {\\n      name: 'gradian',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.LONG,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\\n    cycle: {\\n      name: 'cycle',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.NONE,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\\n    arcsec: {\\n      name: 'arcsec',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.NONE,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\\n    arcmin: {\\n      name: 'arcmin',\\n      base: BASE_UNITS.ANGLE,\\n      prefixes: PREFIXES.NONE,\\n      value: null,\\n      // will be filled in by calculateAngleValues()\\n      offset: 0\\n    },\\n    // Electric current\\n    A: {\\n      name: 'A',\\n      base: BASE_UNITS.CURRENT,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    ampere: {\\n      name: 'ampere',\\n      base: BASE_UNITS.CURRENT,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Temperature\\n    // K(C) = \\u00b0C + 273.15\\n    // K(F) = (\\u00b0F + 459.67) / 1.8\\n    // K(R) = \\u00b0R / 1.8\\n    K: {\\n      name: 'K',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1,\\n      offset: 0\\n    },\\n    degC: {\\n      name: 'degC',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1,\\n      offset: 273.15\\n    },\\n    degF: {\\n      name: 'degF',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1 / 1.8,\\n      offset: 459.67\\n    },\\n    degR: {\\n      name: 'degR',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1 / 1.8,\\n      offset: 0\\n    },\\n    kelvin: {\\n      name: 'kelvin',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1,\\n      offset: 0\\n    },\\n    celsius: {\\n      name: 'celsius',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1,\\n      offset: 273.15\\n    },\\n    fahrenheit: {\\n      name: 'fahrenheit',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1 / 1.8,\\n      offset: 459.67\\n    },\\n    rankine: {\\n      name: 'rankine',\\n      base: BASE_UNITS.TEMPERATURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 1 / 1.8,\\n      offset: 0\\n    },\\n    // amount of substance\\n    mol: {\\n      name: 'mol',\\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    mole: {\\n      name: 'mole',\\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    // luminous intensity\\n    cd: {\\n      name: 'cd',\\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    candela: {\\n      name: 'candela',\\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    // TODO: units STERADIAN\\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\\n    // Force\\n    N: {\\n      name: 'N',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    newton: {\\n      name: 'newton',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    dyn: {\\n      name: 'dyn',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 0.00001,\\n      offset: 0\\n    },\\n    dyne: {\\n      name: 'dyne',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 0.00001,\\n      offset: 0\\n    },\\n    lbf: {\\n      name: 'lbf',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.NONE,\\n      value: 4.4482216152605,\\n      offset: 0\\n    },\\n    poundforce: {\\n      name: 'poundforce',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.NONE,\\n      value: 4.4482216152605,\\n      offset: 0\\n    },\\n    kip: {\\n      name: 'kip',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 4448.2216,\\n      offset: 0\\n    },\\n    kilogramforce: {\\n      name: 'kilogramforce',\\n      base: BASE_UNITS.FORCE,\\n      prefixes: PREFIXES.NONE,\\n      value: 9.80665,\\n      offset: 0\\n    },\\n    // Energy\\n    J: {\\n      name: 'J',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    joule: {\\n      name: 'joule',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    erg: {\\n      name: 'erg',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.NONE,\\n      value: 1e-7,\\n      offset: 0\\n    },\\n    Wh: {\\n      name: 'Wh',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 3600,\\n      offset: 0\\n    },\\n    BTU: {\\n      name: 'BTU',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.BTU,\\n      value: 1055.05585262,\\n      offset: 0\\n    },\\n    eV: {\\n      name: 'eV',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1.602176565e-19,\\n      offset: 0\\n    },\\n    electronvolt: {\\n      name: 'electronvolt',\\n      base: BASE_UNITS.ENERGY,\\n      prefixes: PREFIXES.LONG,\\n      value: 1.602176565e-19,\\n      offset: 0\\n    },\\n    // Power\\n    W: {\\n      name: 'W',\\n      base: BASE_UNITS.POWER,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    watt: {\\n      name: 'watt',\\n      base: BASE_UNITS.POWER,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    hp: {\\n      name: 'hp',\\n      base: BASE_UNITS.POWER,\\n      prefixes: PREFIXES.NONE,\\n      value: 745.6998715386,\\n      offset: 0\\n    },\\n    // Electrical power units\\n    VAR: {\\n      name: 'VAR',\\n      base: BASE_UNITS.POWER,\\n      prefixes: PREFIXES.SHORT,\\n      value: Complex.I,\\n      offset: 0\\n    },\\n    VA: {\\n      name: 'VA',\\n      base: BASE_UNITS.POWER,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Pressure\\n    Pa: {\\n      name: 'Pa',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    psi: {\\n      name: 'psi',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 6894.75729276459,\\n      offset: 0\\n    },\\n    atm: {\\n      name: 'atm',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 101325,\\n      offset: 0\\n    },\\n    bar: {\\n      name: 'bar',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.SHORTLONG,\\n      value: 100000,\\n      offset: 0\\n    },\\n    torr: {\\n      name: 'torr',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 133.322,\\n      offset: 0\\n    },\\n    mmHg: {\\n      name: 'mmHg',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 133.322,\\n      offset: 0\\n    },\\n    mmH2O: {\\n      name: 'mmH2O',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 9.80665,\\n      offset: 0\\n    },\\n    cmH2O: {\\n      name: 'cmH2O',\\n      base: BASE_UNITS.PRESSURE,\\n      prefixes: PREFIXES.NONE,\\n      value: 98.0665,\\n      offset: 0\\n    },\\n    // Electric charge\\n    coulomb: {\\n      name: 'coulomb',\\n      base: BASE_UNITS.ELECTRIC_CHARGE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    C: {\\n      name: 'C',\\n      base: BASE_UNITS.ELECTRIC_CHARGE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Electric capacitance\\n    farad: {\\n      name: 'farad',\\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    F: {\\n      name: 'F',\\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Electric potential\\n    volt: {\\n      name: 'volt',\\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    V: {\\n      name: 'V',\\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Electric resistance\\n    ohm: {\\n      name: 'ohm',\\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\\n      prefixes: PREFIXES.SHORTLONG,\\n      // Both Mohm and megaohm are acceptable\\n      value: 1,\\n      offset: 0\\n    },\\n\\n    /*\\n     * Unicode breaks in browsers if charset is not specified\\n    \\u03a9: {\\n      name: '\\u03a9',\\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    */\\n    // Electric inductance\\n    henry: {\\n      name: 'henry',\\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    H: {\\n      name: 'H',\\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Electric conductance\\n    siemens: {\\n      name: 'siemens',\\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    S: {\\n      name: 'S',\\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Magnetic flux\\n    weber: {\\n      name: 'weber',\\n      base: BASE_UNITS.MAGNETIC_FLUX,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    Wb: {\\n      name: 'Wb',\\n      base: BASE_UNITS.MAGNETIC_FLUX,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Magnetic flux density\\n    tesla: {\\n      name: 'tesla',\\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\\n      prefixes: PREFIXES.LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    T: {\\n      name: 'T',\\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\\n      prefixes: PREFIXES.SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    // Binary\\n    b: {\\n      name: 'b',\\n      base: BASE_UNITS.BIT,\\n      prefixes: PREFIXES.BINARY_SHORT,\\n      value: 1,\\n      offset: 0\\n    },\\n    bits: {\\n      name: 'bits',\\n      base: BASE_UNITS.BIT,\\n      prefixes: PREFIXES.BINARY_LONG,\\n      value: 1,\\n      offset: 0\\n    },\\n    B: {\\n      name: 'B',\\n      base: BASE_UNITS.BIT,\\n      prefixes: PREFIXES.BINARY_SHORT,\\n      value: 8,\\n      offset: 0\\n    },\\n    bytes: {\\n      name: 'bytes',\\n      base: BASE_UNITS.BIT,\\n      prefixes: PREFIXES.BINARY_LONG,\\n      value: 8,\\n      offset: 0\\n    }\\n  }; // aliases (formerly plurals)\\n\\n  var ALIASES = {\\n    meters: 'meter',\\n    inches: 'inch',\\n    feet: 'foot',\\n    yards: 'yard',\\n    miles: 'mile',\\n    links: 'link',\\n    rods: 'rod',\\n    chains: 'chain',\\n    angstroms: 'angstrom',\\n    lt: 'l',\\n    litres: 'litre',\\n    liter: 'litre',\\n    liters: 'litre',\\n    teaspoons: 'teaspoon',\\n    tablespoons: 'tablespoon',\\n    minims: 'minim',\\n    fluiddrams: 'fluiddram',\\n    fluidounces: 'fluidounce',\\n    gills: 'gill',\\n    cups: 'cup',\\n    pints: 'pint',\\n    quarts: 'quart',\\n    gallons: 'gallon',\\n    beerbarrels: 'beerbarrel',\\n    oilbarrels: 'oilbarrel',\\n    hogsheads: 'hogshead',\\n    gtts: 'gtt',\\n    grams: 'gram',\\n    tons: 'ton',\\n    tonnes: 'tonne',\\n    grains: 'grain',\\n    drams: 'dram',\\n    ounces: 'ounce',\\n    poundmasses: 'poundmass',\\n    hundredweights: 'hundredweight',\\n    sticks: 'stick',\\n    lb: 'lbm',\\n    lbs: 'lbm',\\n    kips: 'kip',\\n    kgf: 'kilogramforce',\\n    acres: 'acre',\\n    hectares: 'hectare',\\n    sqfeet: 'sqft',\\n    sqyard: 'sqyd',\\n    sqmile: 'sqmi',\\n    sqmiles: 'sqmi',\\n    mmhg: 'mmHg',\\n    mmh2o: 'mmH2O',\\n    cmh2o: 'cmH2O',\\n    seconds: 'second',\\n    secs: 'second',\\n    minutes: 'minute',\\n    mins: 'minute',\\n    hours: 'hour',\\n    hr: 'hour',\\n    hrs: 'hour',\\n    days: 'day',\\n    weeks: 'week',\\n    months: 'month',\\n    years: 'year',\\n    decades: 'decade',\\n    centuries: 'century',\\n    millennia: 'millennium',\\n    hertz: 'hertz',\\n    radians: 'radian',\\n    degrees: 'degree',\\n    gradians: 'gradian',\\n    cycles: 'cycle',\\n    arcsecond: 'arcsec',\\n    arcseconds: 'arcsec',\\n    arcminute: 'arcmin',\\n    arcminutes: 'arcmin',\\n    BTUs: 'BTU',\\n    watts: 'watt',\\n    joules: 'joule',\\n    amperes: 'ampere',\\n    coulombs: 'coulomb',\\n    volts: 'volt',\\n    ohms: 'ohm',\\n    farads: 'farad',\\n    webers: 'weber',\\n    teslas: 'tesla',\\n    electronvolts: 'electronvolt',\\n    moles: 'mole',\\n    bit: 'bits',\\n    \\\"byte\\\": 'bytes'\\n  };\\n  /**\\n   * Calculate the values for the angle units.\\n   * Value is calculated as number or BigNumber depending on the configuration\\n   * @param {{number: 'number' | 'BigNumber'}} config\\n   */\\n\\n  function calculateAngleValues(config) {\\n    if (config.number === 'BigNumber') {\\n      var pi = (0, _constants.createBigNumberPi)(_BigNumber);\\n      UNITS.rad.value = new _BigNumber(1);\\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\\n\\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\\n\\n      UNITS.cycle.value = pi.times(2); // 2 * pi\\n\\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\\n\\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\\n    } else {\\n      // number\\n      UNITS.rad.value = 1;\\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\\n\\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\\n\\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\\n\\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\\n\\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\\n    } // copy to the full names of the angles\\n\\n\\n    UNITS.radian.value = UNITS.rad.value;\\n    UNITS.degree.value = UNITS.deg.value;\\n    UNITS.gradian.value = UNITS.grad.value;\\n  } // apply the angle values now\\n\\n\\n  calculateAngleValues(config);\\n\\n  if (on) {\\n    // recalculate the values on change of configuration\\n    on('config', function (curr, prev) {\\n      if (curr.number !== prev.number) {\\n        calculateAngleValues(curr);\\n      }\\n    });\\n  }\\n  /**\\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\\n   */\\n\\n\\n  var UNIT_SYSTEMS = {\\n    si: {\\n      // Base units\\n      NONE: {\\n        unit: UNIT_NONE,\\n        prefix: PREFIXES.NONE['']\\n      },\\n      LENGTH: {\\n        unit: UNITS.m,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      MASS: {\\n        unit: UNITS.g,\\n        prefix: PREFIXES.SHORT.k\\n      },\\n      TIME: {\\n        unit: UNITS.s,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      CURRENT: {\\n        unit: UNITS.A,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      TEMPERATURE: {\\n        unit: UNITS.K,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      LUMINOUS_INTENSITY: {\\n        unit: UNITS.cd,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      AMOUNT_OF_SUBSTANCE: {\\n        unit: UNITS.mol,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ANGLE: {\\n        unit: UNITS.rad,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      BIT: {\\n        unit: UNITS.bits,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      // Derived units\\n      FORCE: {\\n        unit: UNITS.N,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ENERGY: {\\n        unit: UNITS.J,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      POWER: {\\n        unit: UNITS.W,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      PRESSURE: {\\n        unit: UNITS.Pa,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_CHARGE: {\\n        unit: UNITS.C,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_CAPACITANCE: {\\n        unit: UNITS.F,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_POTENTIAL: {\\n        unit: UNITS.V,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_RESISTANCE: {\\n        unit: UNITS.ohm,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_INDUCTANCE: {\\n        unit: UNITS.H,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      ELECTRIC_CONDUCTANCE: {\\n        unit: UNITS.S,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      MAGNETIC_FLUX: {\\n        unit: UNITS.Wb,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      MAGNETIC_FLUX_DENSITY: {\\n        unit: UNITS.T,\\n        prefix: PREFIXES.SHORT['']\\n      },\\n      FREQUENCY: {\\n        unit: UNITS.Hz,\\n        prefix: PREFIXES.SHORT['']\\n      }\\n    }\\n  }; // Clone to create the other unit systems\\n\\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\\n  UNIT_SYSTEMS.cgs.LENGTH = {\\n    unit: UNITS.m,\\n    prefix: PREFIXES.SHORT.c\\n  };\\n  UNIT_SYSTEMS.cgs.MASS = {\\n    unit: UNITS.g,\\n    prefix: PREFIXES.SHORT['']\\n  };\\n  UNIT_SYSTEMS.cgs.FORCE = {\\n    unit: UNITS.dyn,\\n    prefix: PREFIXES.SHORT['']\\n  };\\n  UNIT_SYSTEMS.cgs.ENERGY = {\\n    unit: UNITS.erg,\\n    prefix: PREFIXES.NONE['']\\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\\n  // so let's not worry about it unless somebody complains\\n\\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\\n  UNIT_SYSTEMS.us.LENGTH = {\\n    unit: UNITS.ft,\\n    prefix: PREFIXES.NONE['']\\n  };\\n  UNIT_SYSTEMS.us.MASS = {\\n    unit: UNITS.lbm,\\n    prefix: PREFIXES.NONE['']\\n  };\\n  UNIT_SYSTEMS.us.TEMPERATURE = {\\n    unit: UNITS.degF,\\n    prefix: PREFIXES.NONE['']\\n  };\\n  UNIT_SYSTEMS.us.FORCE = {\\n    unit: UNITS.lbf,\\n    prefix: PREFIXES.NONE['']\\n  };\\n  UNIT_SYSTEMS.us.ENERGY = {\\n    unit: UNITS.BTU,\\n    prefix: PREFIXES.BTU['']\\n  };\\n  UNIT_SYSTEMS.us.POWER = {\\n    unit: UNITS.hp,\\n    prefix: PREFIXES.NONE['']\\n  };\\n  UNIT_SYSTEMS.us.PRESSURE = {\\n    unit: UNITS.psi,\\n    prefix: PREFIXES.NONE['']\\n  }; // Add additional unit systems here.\\n  // Choose a unit system to seed the auto unit system.\\n\\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\\n\\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\\n  /**\\n   * Set a unit system for formatting derived units.\\n   * @param {string} [name] The name of the unit system.\\n   */\\n\\n  Unit.setUnitSystem = function (name) {\\n    if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, name)) {\\n      currentUnitSystem = UNIT_SYSTEMS[name];\\n    } else {\\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\\n    }\\n  };\\n  /**\\n   * Return the current unit system.\\n   * @return {string} The current unit system.\\n   */\\n\\n\\n  Unit.getUnitSystem = function () {\\n    for (var _key in UNIT_SYSTEMS) {\\n      if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, _key)) {\\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\\n          return _key;\\n        }\\n      }\\n    }\\n  };\\n  /**\\n   * Converters to convert from number to an other numeric type like BigNumber\\n   * or Fraction\\n   */\\n\\n\\n  Unit.typeConverters = {\\n    BigNumber: function BigNumber(x) {\\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\\n    },\\n    Fraction: function Fraction(x) {\\n      return new _Fraction(x);\\n    },\\n    Complex: function Complex(x) {\\n      return x;\\n    },\\n    number: function number(x) {\\n      return x;\\n    }\\n  };\\n  /**\\n   * Retrieve the right convertor function corresponding with the type\\n   * of provided exampleValue.\\n   *\\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\\n   *                        In case of an unknown type,\\n   * @return {Function}\\n   */\\n\\n  Unit._getNumberConverter = function (type) {\\n    if (!Unit.typeConverters[type]) {\\n      throw new TypeError('Unsupported type \\\"' + type + '\\\"');\\n    }\\n\\n    return Unit.typeConverters[type];\\n  }; // Add dimensions to each built-in unit\\n\\n\\n  for (var _key2 in UNITS) {\\n    if ((0, _object.hasOwnProperty)(UNITS, _key2)) {\\n      var unit = UNITS[_key2];\\n      unit.dimensions = unit.base.dimensions;\\n    }\\n  } // Create aliases\\n\\n\\n  for (var _name2 in ALIASES) {\\n    if ((0, _object.hasOwnProperty)(ALIASES, _name2)) {\\n      var _unit2 = UNITS[ALIASES[_name2]];\\n      var alias = {};\\n\\n      for (var _key3 in _unit2) {\\n        if ((0, _object.hasOwnProperty)(_unit2, _key3)) {\\n          alias[_key3] = _unit2[_key3];\\n        }\\n      }\\n\\n      alias.name = _name2;\\n      UNITS[_name2] = alias;\\n    }\\n  }\\n  /**\\n   * Checks if a character is a valid latin letter (upper or lower case).\\n   * Note that this function can be overridden, for example to allow support of other alphabets.\\n   * @param {string} c Tested character\\n   */\\n\\n\\n  Unit.isValidAlpha = function isValidAlpha(c) {\\n    return /^[a-zA-Z]$/.test(c);\\n  };\\n\\n  function assertUnitNameIsValid(name) {\\n    for (var i = 0; i < name.length; i++) {\\n      c = name.charAt(i);\\n\\n      if (i === 0 && !Unit.isValidAlpha(c)) {\\n        throw new Error('Invalid unit name (must begin with alpha character): \\\"' + name + '\\\"');\\n      }\\n\\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \\\"' + name + '\\\"');\\n      }\\n    }\\n  }\\n  /**\\n   * Wrapper around createUnitSingle.\\n   * Example:\\n   *  createUnit({\\n   *    foo: { },\\n   *    bar: {\\n   *      definition: 'kg/foo',\\n   *      aliases: ['ba', 'barr', 'bars'],\\n   *      offset: 200\\n   *    },\\n   *    baz: '4 bar'\\n   *  },\\n   *  {\\n   *    override: true\\n   *  })\\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\\n   * @param {object} options\\n   */\\n\\n\\n  Unit.createUnit = function (obj, options) {\\n    if (_typeof(obj) !== 'object') {\\n      throw new TypeError(\\\"createUnit expects first parameter to be of type 'Object'\\\");\\n    } // Remove all units and aliases we are overriding\\n\\n\\n    if (options && options.override) {\\n      for (var _key4 in obj) {\\n        if ((0, _object.hasOwnProperty)(obj, _key4)) {\\n          Unit.deleteUnit(_key4);\\n        }\\n\\n        if (obj[_key4].aliases) {\\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\\n            Unit.deleteUnit(obj[_key4].aliases[i]);\\n          }\\n        }\\n      }\\n    } // TODO: traverse multiple times until all units have been added\\n\\n\\n    var lastUnit;\\n\\n    for (var _key5 in obj) {\\n      if ((0, _object.hasOwnProperty)(obj, _key5)) {\\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\\n      }\\n    }\\n\\n    return lastUnit;\\n  };\\n  /**\\n   * Create a user-defined unit and register it with the Unit type.\\n   * Example:\\n   *  createUnitSingle('knot', '0.514444444 m/s')\\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\\n   *\\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\\n   * or an Object. If an Object, may have the following properties:\\n   *   - definition {string|Unit} The definition of this unit.\\n   *   - prefixes {string} \\\"none\\\", \\\"short\\\", \\\"long\\\", \\\"binary_short\\\", or \\\"binary_long\\\".\\n   *     The default is \\\"none\\\".\\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\\n   *     is 459.67. Default is 0.\\n   *   - baseName {string} If the unit's dimension does not match that of any other\\n   *     base unit, the name of the newly create base unit. Otherwise, this property\\n   *     has no effect.\\n   *\\n   * @param {Object} options   (optional) An object containing any of the following\\n   * properties:\\n   *   - override {boolean} Whether this unit should be allowed to override existing\\n   *     units.\\n   *\\n   * @return {Unit}\\n   */\\n\\n\\n  Unit.createUnitSingle = function (name, obj, options) {\\n    if (typeof obj === 'undefined' || obj === null) {\\n      obj = {};\\n    }\\n\\n    if (typeof name !== 'string') {\\n      throw new TypeError(\\\"createUnitSingle expects first parameter to be of type 'string'\\\");\\n    } // Check collisions with existing units\\n\\n\\n    if ((0, _object.hasOwnProperty)(UNITS, name)) {\\n      throw new Error('Cannot create unit \\\"' + name + '\\\": a unit with that name already exists');\\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\\n\\n\\n    assertUnitNameIsValid(name);\\n    var defUnit = null; // The Unit from which the new unit will be created.\\n\\n    var aliases = [];\\n    var offset = 0;\\n    var definition;\\n    var prefixes;\\n    var baseName;\\n\\n    if (obj && obj.type === 'Unit') {\\n      defUnit = obj.clone();\\n    } else if (typeof obj === 'string') {\\n      if (obj !== '') {\\n        definition = obj;\\n      }\\n    } else if (_typeof(obj) === 'object') {\\n      definition = obj.definition;\\n      prefixes = obj.prefixes;\\n      offset = obj.offset;\\n      baseName = obj.baseName;\\n\\n      if (obj.aliases) {\\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\\n      }\\n    } else {\\n      throw new TypeError('Cannot create unit \\\"' + name + '\\\" from \\\"' + obj.toString() + '\\\": expecting \\\"string\\\" or \\\"Unit\\\" or \\\"Object\\\"');\\n    }\\n\\n    if (aliases) {\\n      for (var i = 0; i < aliases.length; i++) {\\n        if ((0, _object.hasOwnProperty)(UNITS, aliases[i])) {\\n          throw new Error('Cannot create alias \\\"' + aliases[i] + '\\\": a unit with that name already exists');\\n        }\\n      }\\n    }\\n\\n    if (definition && typeof definition === 'string' && !defUnit) {\\n      try {\\n        defUnit = Unit.parse(definition, {\\n          allowNoUnits: true\\n        });\\n      } catch (ex) {\\n        ex.message = 'Could not create unit \\\"' + name + '\\\" from \\\"' + definition + '\\\": ' + ex.message;\\n        throw ex;\\n      }\\n    } else if (definition && definition.type === 'Unit') {\\n      defUnit = definition.clone();\\n    }\\n\\n    aliases = aliases || [];\\n    offset = offset || 0;\\n\\n    if (prefixes && prefixes.toUpperCase) {\\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\\n    } else {\\n      prefixes = PREFIXES.NONE;\\n    } // If defUnit is null, it is because the user did not\\n    // specify a defintion. So create a new base dimension.\\n\\n\\n    var newUnit = {};\\n\\n    if (!defUnit) {\\n      // Add a new base dimension\\n      baseName = baseName || name + '_STUFF'; // foo --\\u003e foo_STUFF, or the essence of foo\\n\\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\\n        throw new Error('Cannot create new base unit \\\"' + name + '\\\": a base unit with that name already exists (and cannot be overridden)');\\n      }\\n\\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\\n\\n      for (var b in BASE_UNITS) {\\n        if ((0, _object.hasOwnProperty)(BASE_UNITS, b)) {\\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\\n        }\\n      } // Add the new base unit\\n\\n\\n      var newBaseUnit = {\\n        dimensions: []\\n      };\\n\\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\\n        newBaseUnit.dimensions[_i6] = 0;\\n      }\\n\\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\\n      newBaseUnit.key = baseName;\\n      BASE_UNITS[baseName] = newBaseUnit;\\n      newUnit = {\\n        name: name,\\n        value: 1,\\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\\n        prefixes: prefixes,\\n        offset: offset,\\n        base: BASE_UNITS[baseName]\\n      };\\n      currentUnitSystem[baseName] = {\\n        unit: newUnit,\\n        prefix: PREFIXES.NONE['']\\n      };\\n    } else {\\n      newUnit = {\\n        name: name,\\n        value: defUnit.value,\\n        dimensions: defUnit.dimensions.slice(0),\\n        prefixes: prefixes,\\n        offset: offset\\n      }; // Create a new base if no matching base exists\\n\\n      var anyMatch = false;\\n\\n      for (var _i7 in BASE_UNITS) {\\n        if ((0, _object.hasOwnProperty)(BASE_UNITS, _i7)) {\\n          var match = true;\\n\\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\\n              match = false;\\n              break;\\n            }\\n          }\\n\\n          if (match) {\\n            anyMatch = true;\\n            newUnit.base = BASE_UNITS[_i7];\\n            break;\\n          }\\n        }\\n      }\\n\\n      if (!anyMatch) {\\n        baseName = baseName || name + '_STUFF'; // foo --\\u003e foo_STUFF, or the essence of foo\\n        // Add the new base unit\\n\\n        var _newBaseUnit = {\\n          dimensions: defUnit.dimensions.slice(0)\\n        };\\n        _newBaseUnit.key = baseName;\\n        BASE_UNITS[baseName] = _newBaseUnit;\\n        currentUnitSystem[baseName] = {\\n          unit: newUnit,\\n          prefix: PREFIXES.NONE['']\\n        };\\n        newUnit.base = BASE_UNITS[baseName];\\n      }\\n    }\\n\\n    Unit.UNITS[name] = newUnit;\\n\\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\\n      var aliasName = aliases[_i8];\\n      var _alias = {};\\n\\n      for (var _key6 in newUnit) {\\n        if ((0, _object.hasOwnProperty)(newUnit, _key6)) {\\n          _alias[_key6] = newUnit[_key6];\\n        }\\n      }\\n\\n      _alias.name = aliasName;\\n      Unit.UNITS[aliasName] = _alias;\\n    } // delete the memoization cache, since adding a new unit to the array\\n    // invalidates all old results\\n\\n\\n    delete _findUnit.cache;\\n    return new Unit(null, name);\\n  };\\n\\n  Unit.deleteUnit = function (name) {\\n    delete Unit.UNITS[name];\\n  }; // expose arrays with prefixes, dimensions, units, systems\\n\\n\\n  Unit.PREFIXES = PREFIXES;\\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\\n  Unit.BASE_UNITS = BASE_UNITS;\\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\\n  Unit.UNITS = UNITS;\\n  return Unit;\\n}, {\\n  isClass: true\\n});\\nexports.createUnitClass = createUnitClass;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_extends\",\"Object\",\"assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"hasOwnProperty\",\"call\",\"apply\",\"ownKeys\",\"object\",\"enumerableOnly\",\"keys\",\"getOwnPropertySymbols\",\"symbols\",\"filter\",\"sym\",\"getOwnPropertyDescriptor\",\"enumerable\",\"push\",\"_objectSpread\",\"forEach\",\"defineProperty\",\"value\",\"configurable\",\"writable\",\"getOwnPropertyDescriptors\",\"defineProperties\",\"createUnitClass\",\"_is\",\"_factory\",\"_function\",\"_string\",\"_object\",\"_constants\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"Unit\",\"Error\",\"undefined\",\"isNumeric\",\"isComplex\",\"TypeError\",\"u\",\"parse\",\"units\",\"dimensions\",\"unit\",\"UNIT_NONE\",\"prefix\",\"PREFIXES\",\"NONE\",\"power\",\"BASE_DIMENSIONS\",\"_normalize\",\"fixPrefix\",\"skipAutomaticSimplification\",\"skipWhitespace\",\"c\",\"next\",\"isDigit\",\"index\",\"text\",\"charAt\",\"revert\",\"oldIndex\",\"parseNumber\",\"number\",\"tentativeIndex\",\"tentativeNumber\",\"parseCharacter\",\"toFind\",\"getNumericIfUnitless\",\"equalBase\",\"BASE_UNITS\",\"config\",\"predictable\",\"calculateAngleValues\",\"pi\",\"createBigNumberPi\",\"_BigNumber\",\"UNITS\",\"rad\",\"deg\",\"div\",\"grad\",\"cycle\",\"times\",\"arcsec\",\"arcmin\",\"Math\",\"PI\",\"radian\",\"degree\",\"gradian\",\"on\",\"addScalar\",\"subtract\",\"multiplyScalar\",\"divideScalar\",\"pow\",\"abs\",\"fix\",\"round\",\"equal\",\"format\",\"Complex\",\"BigNumber\",\"_Fraction\",\"Fraction\",\"toNumber\",\"type\",\"isUnit\",\"Unit.parse\",\"str\",\"options\",\"powerMultiplierCurrent\",\"expectingUnit\",\"valueStr\",\"err\",\"parseFloat\",\"powerMultiplierStack\",\"powerMultiplierStackProduct\",\"oldC\",\"unitName\",\"isValidAlpha\",\"firstC\",\"uStr\",\"SyntaxError\",\"toString\",\"res\",\"_findUnit\",\"p\",\"pop\",\"base\",\"UNIT_SYSTEMS\",\"auto\",\"allowNoUnits\",\"clone\",\"Unit.prototype.clone\",\"slice\",\"_isDerived\",\"Unit.prototype._isDerived\",\"Unit.prototype._normalize\",\"convert\",\"_getNumberConverter\",\"typeOf\",\"unitValue\",\"unitPrefixValue\",\"unitPower\",\"unitOffset\",\"offset\",\"_denormalize\",\"Unit.prototype._denormalize\",\"prefixValue\",\"memoize\",\"prefixes\",\"_name\",\"endsWith\",\"_unit\",\"prefixName\",\"substring\",\"_prefix\",\"hasher\",\"args\",\"limit\",\"isValuelessUnit\",\"Unit.isValuelessUnit\",\"hasBase\",\"Unit.prototype.hasBase\",\"Unit.prototype.equalBase\",\"other\",\"equals\",\"Unit.prototype.equals\",\"multiply\",\"Unit.prototype.multiply\",\"_i\",\"inverted\",\"valThis\",\"valOther\",\"divide\",\"Unit.prototype.divide\",\"_i2\",\"Unit.prototype.pow\",\"_i3\",\"Unit.prototype.abs\",\"ret\",\"W\",\"to\",\"Unit.prototype.to\",\"valuelessUnit\",\"concat\",\"Unit.prototype.toNumber\",\"toNumeric\",\"Unit.prototype.toNumeric\",\"Unit.prototype.toString\",\"toJSON\",\"Unit.prototype.toJSON\",\"mathjs\",\"formatUnits\",\"fromJSON\",\"Unit.fromJSON\",\"json\",\"valueOf\",\"simplify\",\"Unit.prototype.simplify\",\"proposedUnitList\",\"currentUnitSystem\",\"matchingBase\",\"matchingUnit\",\"missingBaseDim\",\"baseDim\",\"toSI\",\"Unit.prototype.toSI\",\"si\",\"Unit.prototype.formatUnits\",\"strNum\",\"strDen\",\"nNum\",\"nDen\",\"_i4\",\"substr\",\"Unit.prototype.format\",\"simp\",\"isImaginary\",\"re\",\"VAR\",\"VA\",\"_bestPrefix\",\"unitStr\",\"Unit.prototype._bestPrefix\",\"absValue\",\"absUnitValue\",\"bestPrefix\",\"bestDiff\",\"log\",\"LN10\",\"scientific\",\"diff\",\"splitUnit\",\"Unit.prototype.splitUnit\",\"parts\",\"x\",\"xNumeric\",\"xRounded\",\"xFixed\",\"isNearlyEqual\",\"y\",\"_i5\",\"testSum\",\"SHORT\",\"da\",\"h\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\",\"d\",\"m\",\"n\",\"f\",\"a\",\"z\",\"LONG\",\"deca\",\"hecto\",\"kilo\",\"mega\",\"giga\",\"tera\",\"peta\",\"exa\",\"zetta\",\"yotta\",\"deci\",\"centi\",\"milli\",\"micro\",\"nano\",\"pico\",\"femto\",\"atto\",\"zepto\",\"yocto\",\"SQUARED\",\"CUBIC\",\"BINARY_SHORT_SI\",\"BINARY_SHORT_IEC\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\",\"BINARY_LONG_SI\",\"BINARY_LONG_IEC\",\"kibi\",\"mebi\",\"gibi\",\"tebi\",\"pebi\",\"exi\",\"zebi\",\"yobi\",\"BTU\",\"MM\",\"SHORTLONG\",\"BINARY_SHORT\",\"BINARY_LONG\",\"MASS\",\"LENGTH\",\"TIME\",\"CURRENT\",\"TEMPERATURE\",\"LUMINOUS_INTENSITY\",\"AMOUNT_OF_SUBSTANCE\",\"FORCE\",\"SURFACE\",\"VOLUME\",\"ENERGY\",\"POWER\",\"PRESSURE\",\"ELECTRIC_CHARGE\",\"ELECTRIC_CAPACITANCE\",\"ELECTRIC_POTENTIAL\",\"ELECTRIC_RESISTANCE\",\"ELECTRIC_INDUCTANCE\",\"ELECTRIC_CONDUCTANCE\",\"MAGNETIC_FLUX\",\"MAGNETIC_FLUX_DENSITY\",\"FREQUENCY\",\"ANGLE\",\"BIT\",\"BASE_UNIT_NONE\",\"map\",\"meter\",\"inch\",\"foot\",\"yard\",\"mile\",\"link\",\"rod\",\"chain\",\"angstrom\",\"ft\",\"yd\",\"mi\",\"li\",\"rd\",\"ch\",\"mil\",\"m2\",\"sqin\",\"sqft\",\"sqyd\",\"sqmi\",\"sqrd\",\"sqch\",\"sqmil\",\"acre\",\"hectare\",\"m3\",\"L\",\"l\",\"litre\",\"cuin\",\"cuft\",\"cuyd\",\"teaspoon\",\"tablespoon\",\"drop\",\"gtt\",\"minim\",\"fluiddram\",\"fluidounce\",\"gill\",\"cc\",\"cup\",\"pint\",\"quart\",\"gallon\",\"beerbarrel\",\"oilbarrel\",\"hogshead\",\"fldr\",\"floz\",\"gi\",\"cp\",\"pt\",\"qt\",\"gal\",\"bbl\",\"obl\",\"g\",\"gram\",\"ton\",\"t\",\"tonne\",\"grain\",\"dram\",\"ounce\",\"poundmass\",\"hundredweight\",\"stick\",\"stone\",\"gr\",\"dr\",\"oz\",\"lbm\",\"cwt\",\"s\",\"min\",\"second\",\"sec\",\"minute\",\"hour\",\"day\",\"week\",\"month\",\"year\",\"decade\",\"century\",\"millennium\",\"hertz\",\"reciprocal\",\"Hz\",\"A\",\"ampere\",\"K\",\"degC\",\"degF\",\"degR\",\"kelvin\",\"celsius\",\"fahrenheit\",\"rankine\",\"mol\",\"mole\",\"cd\",\"candela\",\"N\",\"newton\",\"dyn\",\"dyne\",\"lbf\",\"poundforce\",\"kip\",\"kilogramforce\",\"J\",\"joule\",\"erg\",\"Wh\",\"eV\",\"electronvolt\",\"watt\",\"hp\",\"I\",\"Pa\",\"psi\",\"atm\",\"bar\",\"torr\",\"mmHg\",\"mmH2O\",\"cmH2O\",\"coulomb\",\"C\",\"farad\",\"F\",\"volt\",\"V\",\"ohm\",\"henry\",\"H\",\"siemens\",\"S\",\"weber\",\"Wb\",\"tesla\",\"b\",\"bits\",\"B\",\"bytes\",\"ALIASES\",\"meters\",\"inches\",\"feet\",\"yards\",\"miles\",\"links\",\"rods\",\"chains\",\"angstroms\",\"lt\",\"litres\",\"liter\",\"liters\",\"teaspoons\",\"tablespoons\",\"minims\",\"fluiddrams\",\"fluidounces\",\"gills\",\"cups\",\"pints\",\"quarts\",\"gallons\",\"beerbarrels\",\"oilbarrels\",\"hogsheads\",\"gtts\",\"grams\",\"tons\",\"tonnes\",\"grains\",\"drams\",\"ounces\",\"poundmasses\",\"hundredweights\",\"sticks\",\"lb\",\"lbs\",\"kips\",\"kgf\",\"acres\",\"hectares\",\"sqfeet\",\"sqyard\",\"sqmile\",\"sqmiles\",\"mmhg\",\"mmh2o\",\"cmh2o\",\"seconds\",\"secs\",\"minutes\",\"mins\",\"hours\",\"hr\",\"hrs\",\"days\",\"weeks\",\"months\",\"years\",\"decades\",\"centuries\",\"millennia\",\"radians\",\"degrees\",\"gradians\",\"cycles\",\"arcsecond\",\"arcseconds\",\"arcminute\",\"arcminutes\",\"BTUs\",\"watts\",\"joules\",\"amperes\",\"coulombs\",\"volts\",\"ohms\",\"farads\",\"webers\",\"teslas\",\"electronvolts\",\"moles\",\"bit\",\"curr\",\"prev\",\"cgs\",\"JSON\",\"stringify\",\"us\",\"setUnitSystem\",\"Unit.setUnitSystem\",\"join\",\"getUnitSystem\",\"Unit.getUnitSystem\",\"_key\",\"typeConverters\",\"Unit._getNumberConverter\",\"_key2\",\"_name2\",\"_unit2\",\"alias\",\"_key3\",\"Unit.isValidAlpha\",\"test\",\"createUnit\",\"Unit.createUnit\",\"override\",\"_key4\",\"aliases\",\"deleteUnit\",\"lastUnit\",\"_key5\",\"createUnitSingle\",\"Unit.createUnitSingle\",\"defUnit\",\"definition\",\"baseName\",\"ex\",\"message\",\"toUpperCase\",\"newUnit\",\"anyMatch\",\"_i7\",\"match\",\"j\",\"_newBaseUnit\",\"indexOf\",\"newBaseUnit\",\"_i6\",\"_i8\",\"aliasName\",\"_alias\",\"_key6\",\"cache\",\"Unit.deleteUnit\",\"isClass\"]\n}\n"]