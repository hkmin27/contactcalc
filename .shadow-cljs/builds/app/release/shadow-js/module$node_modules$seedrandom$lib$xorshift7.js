["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/seedrandom/lib/xorshift7.js"],"~:js","shadow$provide[547]=function(c,b,y,a){(function(q,f,u){function k(g){var d=this;d.next=function(){var l=d.x,h=d.i;var n=l[h];n^=n>>>7;var r=n^n<<24;n=l[h+1&7];r^=n^n>>>10;n=l[h+3&7];r^=n^n>>>3;n=l[h+4&7];r^=n^n<<7;n=l[h+7&7];n^=n<<13;r^=n^n<<9;l[h]=r;d.i=h+1&7;return r};(function(l,h){var n,r=[];if(h===(h|0))r[0]=h;else for(h=\"\"+h,n=0;n<h.length;++n)r[n&7]=r[n&7]<<15^h.charCodeAt(n)+r[n+1&7]<<13;for(;8>r.length;)r.push(0);for(n=0;8>n&&0===r[n];++n);8==n&&(r[7]=-1);l.x=r;l.i=0;for(n=256;0<n;--n)l.next()})(d,\ng)}function t(g,d){d.x=g.x.slice();d.i=g.i;return d}function p(g,d){null==g&&(g=+new Date);var l=new k(g);g=d&&d.state;d=function(){return(l.next()>>>0)/4294967296};d.double=function(){do{var h=l.next()>>>11,n=(l.next()>>>0)/4294967296;h=(h+n)/2097152}while(0===h);return h};d.int32=l.next;d.quick=d;g&&(g.x&&t(g,l),d.state=function(){return t(l,{})});return d}f&&f.exports?f.exports=p:u&&u.amd?u(function(){return p}):this.xorshift7=p})(this,\"object\"==typeof y&&y,\"function\"==typeof define&&define)}","~:source","shadow$provide[547] = function(global,require,module,exports) {\n// A Javascript implementaion of the \"xorshift7\" algorithm by\n// FranÃ§ois Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["next","int32","x","xorshift7","quick","i","state","double"]],"~:compiled-at",1619135724028,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$seedrandom$lib$xorshift7.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAM7D,SAAQ,CAACH,CAAD,CAASE,CAAT,CAAiBE,CAAjB,CAAyB,CAElCC,QAASA,EAAM,CAACC,CAAD,CAAO,CACpB,IAAIC,EAAK,IAGTA,EAAGC,CAAAA,IAAH,CAAUC,QAAQ,EAAG,CAAA,IAEfC,EAAIH,CAAGI,CAAAA,CAFQ,CAELC,EAAIL,CAAGK,CAAAA,CACrB,KAAAC,EAAIH,CAAA,CAAEE,CAAF,CAAMC,EAAA,EAAMA,CAAN,GAAY,CAAI,KAAAC,EAAID,CAAJC,CAASD,CAATC,EAAc,EACxCD,EAAA,CAAIH,CAAA,CAAGE,CAAH,CAAO,CAAP,CAAY,CAAZ,CAAgBE,EAAA,EAAKD,CAAL,CAAUA,CAAV,GAAgB,EACpCA,EAAA,CAAIH,CAAA,CAAGE,CAAH,CAAO,CAAP,CAAY,CAAZ,CAAgBE,EAAA,EAAKD,CAAL,CAAUA,CAAV,GAAgB,CACpCA,EAAA,CAAIH,CAAA,CAAGE,CAAH,CAAO,CAAP,CAAY,CAAZ,CAAgBE,EAAA,EAAKD,CAAL,CAAUA,CAAV,EAAe,CACnCA,EAAA,CAAIH,CAAA,CAAGE,CAAH,CAAO,CAAP,CAAY,CAAZ,CAAoBC,EAAJ,EAASA,CAAT,EAAc,EAAKC,EAAA,EAAKD,CAAL,CAAUA,CAAV,EAAe,CACtDH,EAAA,CAAEE,CAAF,CAAA,CAAOE,CACPP,EAAGK,CAAAA,CAAH,CAAQA,CAAR,CAAY,CAAZ,CAAiB,CACjB,OAAOE,EAVY,CAarBC,UAAa,CAACR,CAAD,CAAKD,CAAL,CAAW,CAAA,IAClBU,CADkB,CACZN,EAAI,EAEd,IAAIJ,CAAJ,IAAcA,CAAd,CAAqB,CAArB,EAEMI,CAAA,CAAE,CAAF,CAAJ,CAAWJ,CAFb,KAME,KADAA,CACK,CADE,EACF,CADOA,CACP,CAAAU,CAAA,CAAI,CAAT,CAAYA,CAAZ,CAAgBV,CAAKW,CAAAA,MAArB,CAA6B,EAAED,CAA/B,CACEN,CAAA,CAAEM,CAAF,CAAM,CAAN,CAAA,CAAYN,CAAA,CAAEM,CAAF,CAAM,CAAN,CAAZ,EAAwB,EAAxB,CACKV,CAAKY,CAAAA,UAAL,CAAgBF,CAAhB,CADL,CAC0BN,CAAA,CAAGM,CAAH,CAAO,CAAP,CAAY,CAAZ,CAD1B,EAC4C,EAIhD,KAAA,CAAkB,CAAlB,CAAON,CAAEO,CAAAA,MAAT,CAAA,CAAqBP,CAAES,CAAAA,IAAF,CAAO,CAAP,CACrB,KAAKH,CAAL,CAAS,CAAT,CAAgB,CAAhB,CAAYA,CAAZ,EAA8B,CAA9B,GAAqBN,CAAA,CAAEM,CAAF,CAArB,CAAiC,EAAEA,CAAnC,EACS,CAAT,EAAIA,CAAJ,GAAgBN,CAAA,CAAE,CAAF,CAAhB,CAAuB,EAAvB,CAEAH,EAAGI,CAAAA,CAAH,CAAOD,CACPH,EAAGK,CAAAA,CAAH,CAAO,CAGP,KAAKI,CAAL,CAAS,GAAT,CAAkB,CAAlB,CAAcA,CAAd,CAAqB,EAAEA,CAAvB,CACET,CAAGC,CAAAA,IAAH,EAxBoB,CAAxBO,CA4BA,CAAKR,CAAL;AAASD,CAAT,CA7CoB,CAgDtBc,QAASA,EAAI,CAACC,CAAD,CAAIR,CAAJ,CAAO,CAClBA,CAAEF,CAAAA,CAAF,CAAMU,CAAEV,CAAAA,CAAEW,CAAAA,KAAJ,EACNT,EAAED,CAAAA,CAAF,CAAMS,CAAET,CAAAA,CACR,OAAOC,EAHW,CAMpBU,QAASA,EAAI,CAACjB,CAAD,CAAOkB,CAAP,CAAa,CACZ,IAAZ,EAAIlB,CAAJ,GAAkBA,CAAlB,CAAyB,CAAE,IAAImB,IAA/B,CADwB,KAEpBC,EAAK,IAAIrB,CAAJ,CAAWC,CAAX,CACLqB,EAAAA,CAAQH,CAARG,EAAgBH,CAAKG,CAAAA,KACrBC,EAAAA,CAAOA,QAAQ,EAAG,CAAE,OAAQF,CAAGlB,CAAAA,IAAH,EAAR,GAAsB,CAAtB,EAA2B,UAA7B,CACtBoB,EAAKC,CAAAA,MAAL,CAAcC,QAAQ,EAAG,CACvB,EAAG,CAAA,IACGC,EAAML,CAAGlB,CAAAA,IAAH,EAANuB,GAAoB,EADvB,CAEGC,GAAON,CAAGlB,CAAAA,IAAH,EAAPwB,GAAqB,CAArBA,EAA0B,UAC1BC,EAAAA,EAAUF,CAAVE,CAAgBD,CAAhBC,EAAwB,OAH3B,CAAH,MAIoB,CAJpB,GAISA,CAJT,CAKA,OAAOA,EANgB,CAQzBL,EAAKM,CAAAA,KAAL,CAAaR,CAAGlB,CAAAA,IAChBoB,EAAKO,CAAAA,KAAL,CAAaP,CACTD,EAAJ,GACMA,CAAMhB,CAAAA,CACV,EADaS,CAAA,CAAKO,CAAL,CAAYD,CAAZ,CACb,CAAAE,CAAKD,CAAAA,KAAL,CAAaS,QAAQ,EAAG,CAAE,MAAOhB,EAAA,CAAKM,CAAL,CAAS,EAAT,CAAT,CAF1B,CAIA,OAAOE,EAnBiB,CAsBtB1B,CAAJ,EAAcA,CAAOC,CAAAA,OAArB,CACED,CAAOC,CAAAA,OADT,CACmBoB,CADnB,CAEWnB,CAAJ,EAAcA,CAAOiC,CAAAA,GAArB,CACLjC,CAAA,CAAO,QAAQ,EAAG,CAAE,MAAOmB,EAAT,CAAlB,CADK,CAGL,IAAKe,CAAAA,SAHA,CAGYf,CAnFe,CAAjC,CAAD,CAuFE,IAvFF,CAwFqB,QAxFrB,EAwFG,MAAOrB,EAxFV,EAwFiCA,CAxFjC,CAyFqB,UAzFrB,EAyFG,MAAOE,OAzFV,EAyFmCA,MAzFnC,CAN8D;\",\n\"sources\":[\"node_modules/seedrandom/lib/xorshift7.js\"],\n\"sourcesContent\":[\"shadow$provide[547] = function(global,require,module,exports) {\\n// A Javascript implementaion of the \\\"xorshift7\\\" algorithm by\\n// Fran\\u00e7ois Panneton and Pierre L'ecuyer:\\n// \\\"On the Xorgshift Random Number Generators\\\"\\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\\n\\n(function(global, module, define) {\\n\\nfunction XorGen(seed) {\\n  var me = this;\\n\\n  // Set up generator function.\\n  me.next = function() {\\n    // Update xor generator.\\n    var X = me.x, i = me.i, t, v, w;\\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\\n    X[i] = v;\\n    me.i = (i + 1) & 7;\\n    return v;\\n  };\\n\\n  function init(me, seed) {\\n    var j, w, X = [];\\n\\n    if (seed === (seed | 0)) {\\n      // Seed state array using a 32-bit integer.\\n      w = X[0] = seed;\\n    } else {\\n      // Seed state using a string.\\n      seed = '' + seed;\\n      for (j = 0; j < seed.length; ++j) {\\n        X[j & 7] = (X[j & 7] << 15) ^\\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\\n      }\\n    }\\n    // Enforce an array length of 8, not all zeroes.\\n    while (X.length < 8) X.push(0);\\n    for (j = 0; j < 8 && X[j] === 0; ++j);\\n    if (j == 8) w = X[7] = -1; else w = X[j];\\n\\n    me.x = X;\\n    me.i = 0;\\n\\n    // Discard an initial 256 values.\\n    for (j = 256; j > 0; --j) {\\n      me.next();\\n    }\\n  }\\n\\n  init(me, seed);\\n}\\n\\nfunction copy(f, t) {\\n  t.x = f.x.slice();\\n  t.i = f.i;\\n  return t;\\n}\\n\\nfunction impl(seed, opts) {\\n  if (seed == null) seed = +(new Date);\\n  var xg = new XorGen(seed),\\n      state = opts && opts.state,\\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\\n  prng.double = function() {\\n    do {\\n      var top = xg.next() >>> 11,\\n          bot = (xg.next() >>> 0) / 0x100000000,\\n          result = (top + bot) / (1 << 21);\\n    } while (result === 0);\\n    return result;\\n  };\\n  prng.int32 = xg.next;\\n  prng.quick = prng;\\n  if (state) {\\n    if (state.x) copy(state, xg);\\n    prng.state = function() { return copy(xg, {}); }\\n  }\\n  return prng;\\n}\\n\\nif (module && module.exports) {\\n  module.exports = impl;\\n} else if (define && define.amd) {\\n  define(function() { return impl; });\\n} else {\\n  this.xorshift7 = impl;\\n}\\n\\n})(\\n  this,\\n  (typeof module) == 'object' && module,    // present in node.js\\n  (typeof define) == 'function' && define   // present with an AMD loader\\n);\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"define\",\"XorGen\",\"seed\",\"me\",\"next\",\"me.next\",\"X\",\"x\",\"i\",\"t\",\"v\",\"init\",\"j\",\"length\",\"charCodeAt\",\"push\",\"copy\",\"f\",\"slice\",\"impl\",\"opts\",\"Date\",\"xg\",\"state\",\"prng\",\"double\",\"prng.double\",\"top\",\"bot\",\"result\",\"int32\",\"quick\",\"prng.state\",\"amd\",\"xorshift7\"]\n}\n"]