["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/json/replacer.js"],"~:js","shadow$provide[570]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createReplacer=void 0;c=b(25);c=(0,c.factory)(\"replacer\",[],function(){return function(q,f){return\"number\"!==typeof f||isFinite(f)&&!isNaN(f)?f:{mathjs:\"number\",value:String(f)}}});a.createReplacer=c}","~:source","shadow$provide[570] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReplacer = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar name = 'replacer';\nvar dependencies = [];\nvar createReplacer = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n\n    return value;\n  };\n});\nexports.createReplacer = createReplacer;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","mathjs","createReplacer"]],"~:compiled-at",1619135724039,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$json$replacer.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE1BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAgC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,EACiB,CAA0C,QAAS,EAAG,CAaxF,MAAOC,SAAiB,CAACC,CAAD,CAAMP,CAAN,CAAa,CAEnC,MAAqB,QAArB,GAAI,MAAOA,EAAX,EAAmCQ,QAAA,CAASR,CAAT,CAAnC,EAAsD,CAAAS,KAAA,CAAMT,CAAN,CAAtD,CAOOA,CAPP,CACS,CACLU,OAAQ,QADH,CAELV,MAAOW,MAAA,CAAOX,CAAP,CAFF,CAH0B,CAbmD,CAAtD,CAyBpCH,EAAQI,CAAAA,cAAR,CAAyBA,CArCqC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/json/replacer.js\"],\n\"sourcesContent\":[\"shadow$provide[570] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createReplacer = void 0;\\n\\nvar _factory = require(\\\"../utils/factory.js\\\");\\n\\nvar name = 'replacer';\\nvar dependencies = [];\\nvar createReplacer = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {\\n  /**\\n   * Stringify data types into their JSON representation.\\n   * Most data types can be serialized using their `.toJSON` method,\\n   * but not all, for example the number `Infinity`. For these cases you have\\n   * to use the replacer. Example usage:\\n   *\\n   *     JSON.stringify([2, Infinity], math.replacer)\\n   *\\n   * @param {string} key\\n   * @param {*} value\\n   * @returns {*} Returns the replaced object\\n   */\\n  return function replacer(key, value) {\\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\\n      return {\\n        mathjs: 'number',\\n        value: String(value)\\n      };\\n    }\\n\\n    return value;\\n  };\\n});\\nexports.createReplacer = createReplacer;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createReplacer\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"replacer\",\"key\",\"isFinite\",\"isNaN\",\"mathjs\",\"String\"]\n}\n"]