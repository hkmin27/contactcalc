["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSize.js"],"~:js","shadow$provide[353]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.setSizeDocs={name:\"setSize\",category:\"Set\",syntax:[\"setSize(set)\",\"setSize(set, unique)\"],description:'Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',examples:[\"setSize([1, 2, 2, 4])\",\"setSize([1, 2, 2, 4], true)\"],seealso:[\"setUnion\",\"setIntersect\",\n\"setDifference\"]}}","~:source","shadow$provide[353] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSizeDocs = void 0;\nvar setSizeDocs = {\n  name: 'setSize',\n  category: 'Set',\n  syntax: ['setSize(set)', 'setSize(set, unique)'],\n  description: 'Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\n};\nexports.setSizeDocs = setSizeDocs;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["seealso","__esModule","setSizeDocs","name","value","syntax","category","examples","description"]],"~:compiled-at",1619135723989,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$embeddedDocs$function$set$setSize.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAYAH,EAAQI,CAAAA,WAAR,CARkBA,CAChBC,KAAM,SADUD,CAEhBE,SAAU,KAFMF,CAGhBG,OAAQ,CAAC,cAAD,CAAiB,sBAAjB,CAHQH,CAIhBI,YAAa,qNAJGJ,CAKhBK,SAAU,CAAC,uBAAD,CAA0B,6BAA1B,CALML,CAMhBM,QAAS,CAAC,UAAD,CAAa,cAAb;AAA6B,eAA7B,CANON,CAP4C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSize.js\"],\n\"sourcesContent\":[\"shadow$provide[353] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.setSizeDocs = void 0;\\nvar setSizeDocs = {\\n  name: 'setSize',\\n  category: 'Set',\\n  syntax: ['setSize(set)', 'setSize(set, unique)'],\\n  description: 'Count the number of elements of a (multi)set. When the second parameter \\\"unique\\\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',\\n  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],\\n  seealso: ['setUnion', 'setIntersect', 'setDifference']\\n};\\nexports.setSizeDocs = setSizeDocs;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"setSizeDocs\",\"name\",\"category\",\"syntax\",\"description\",\"examples\",\"seealso\"]\n}\n"]