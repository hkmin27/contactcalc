["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/log10.js"],"~:js","shadow$provide[92]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createLog10=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"log10\",[\"typed\",\"config\",\"Complex\"],function(u){var k=u.typed,t=u.config,p=u.Complex;return k(\"log10\",{number:function(g){return 0<=g||t.predictable?(0,f.log10Number)(g):(new p(g,0)).log().div(Math.LN10)},Complex:function(g){return(new p(g)).log().div(Math.LN10)},BigNumber:function(g){return!g.isNegative()||t.predictable?g.log():(new p(g.toNumber(),\n0)).log().div(Math.LN10)},\"Array | Matrix\":function(g){return(0,q.deepMap)(g,this)}})});a.createLog10=b}","~:source","shadow$provide[92] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog10 = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createLog10 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      _Complex = _ref.Complex;\n\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.log10Number)(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createLog10 = createLog10;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","createLog10","value","number","BigNumber"]],"~:compiled-at",1619135723779,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log10.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA6B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CACc,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACrFC,EAAQD,CAAKC,CAAAA,KADwE,CAErFC,EAASF,CAAKE,CAAAA,MAFuE,CAGrFC,EAAWH,CAAKI,CAAAA,OA2BpB,OAAOH,EAAA,CAhCEH,OAgCF,CAAY,CACjBO,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAcJ,CAAOK,CAAAA,WAArB,CACS,CAAC,CAAA,CAAGX,CAAOY,CAAAA,WAAX,EAAwBF,CAAxB,CADT,CAI4BG,CAAnB,IAAIN,CAAJ,CAAaG,CAAb,CAAgB,CAAhB,CAAmBG,EAAAA,GAAnB,EAAyBC,CAAAA,GAAzB,CAA6BC,IAAKC,CAAAA,IAAlC,CALgB,CADV,CASjBR,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAuBG,CAAhB,IAAIN,CAAJ,CAAaG,CAAb,CAAgBG,EAAAA,GAAhB,EAAsBC,CAAAA,GAAtB,CAA0BC,IAAKC,CAAAA,IAA/B,CADoB,CATZ,CAYjBC,UAAWA,QAAkB,CAACP,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEQ,CAAAA,UAAF,EAAL,EAAuBZ,CAAOK,CAAAA,WAA9B,CACSD,CAAEG,CAAAA,GAAF,EADT,CAIuCA,CAA9B,IAAIN,CAAJ,CAAaG,CAAES,CAAAA,QAAF,EAAb;AAA2B,CAA3B,CAA8BN,EAAAA,GAA9B,EAAoCC,CAAAA,GAApC,CAAwCC,IAAKC,CAAAA,IAA7C,CALsB,CAZhB,CAoBjB,iBAAkBI,QAAoB,CAACV,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,CAAYsB,CAAAA,OAAhB,EAAyBX,CAAzB,CAA4B,IAA5B,CADiC,CApBzB,CAAZ,CA9BkF,CAA1D,CAuDjCjB,EAAQI,CAAAA,WAAR,CAAsBA,CAvEuC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/log10.js\"],\n\"sourcesContent\":[\"shadow$provide[92] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createLog10 = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'log10';\\nvar dependencies = ['typed', 'config', 'Complex'];\\nvar createLog10 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      _Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.log10(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.log10(0.00001)            // returns -5\\n   *    math.log10(10000)              // returns 4\\n   *    math.log(10000) / math.log(10) // returns 4\\n   *    math.pow(10, 4)                // returns 10000\\n   *\\n   * See also:\\n   *\\n   *    exp, log, log1p, log2\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            Value for which to calculate the logarithm.\\n   * @return {number | BigNumber | Complex | Array | Matrix}\\n   *            Returns the 10-base logarithm of `x`\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x >= 0 || config.predictable) {\\n        return (0, _index.log10Number)(x);\\n      } else {\\n        // negative value -> complex value computation\\n        return new _Complex(x, 0).log().div(Math.LN10);\\n      }\\n    },\\n    Complex: function Complex(x) {\\n      return new _Complex(x).log().div(Math.LN10);\\n    },\\n    BigNumber: function BigNumber(x) {\\n      if (!x.isNegative() || config.predictable) {\\n        return x.log();\\n      } else {\\n        // downgrade to number, return Complex valued result\\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\\n      }\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createLog10 = createLog10;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createLog10\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"_Complex\",\"Complex\",\"number\",\"x\",\"predictable\",\"log10Number\",\"log\",\"div\",\"Math\",\"LN10\",\"BigNumber\",\"isNegative\",\"toNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]