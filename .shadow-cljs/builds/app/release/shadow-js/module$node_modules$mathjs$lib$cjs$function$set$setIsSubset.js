["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setIsSubset.js"],"~:js","shadow$provide[236]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetIsSubset=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setIsSubset\",[\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\"],function(f){var u=f.typed,k=f.size,t=f.subset,p=f.compareNatural,g=f.Index;return u(\"setIsSubset\",{\"Array | Matrix, Array | Matrix\":function(d,l){if(0===t(k(d),new g(0)))return!0;if(0===t(k(l),new g(0)))return!1;d=(0,q.identify)((0,q.flatten)(Array.isArray(d)?d:d.toArray()).sort(p));l=\n(0,q.identify)((0,q.flatten)(Array.isArray(l)?l:l.toArray()).sort(p));for(var h,n=0;n<d.length;n++){h=!1;for(var r=0;r<l.length;r++)if(0===p(d[n].value,l[r].value)&&d[n].identifier===l[r].identifier){h=!0;break}if(!1===h)return!1}return!0}})});a.createSetIsSubset=c}","~:source","shadow$provide[236] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIsSubset = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});\nexports.createSetIsSubset = createSetIsSubset;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createSetIsSubset","value"]],"~:compiled-at",1619135723950,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setIsSubset.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAEjC,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAmC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CAAU,MAAVA,CAAkB,QAAlBA,CAA4B,gBAA5BA,CAA8C,OAA9CA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC3FC,EAAQD,CAAKC,CAAAA,KAD8E,CAE3FC,EAAOF,CAAKE,CAAAA,IAF+E,CAG3FC,EAASH,CAAKG,CAAAA,MAH6E,CAI3FC,EAAiBJ,CAAKI,CAAAA,cAJqE,CAK3FC,EAAQL,CAAKK,CAAAA,KAuBjB,OAAOJ,EAAA,CA9BEH,aA8BF,CAAY,CACjB,iCAAkCQ,QAA+B,CAACC,CAAD,CAAKC,CAAL,CAAS,CACxE,GAAuC,CAAvC,GAAIL,CAAA,CAAOD,CAAA,CAAKK,CAAL,CAAP,CAAiB,IAAIF,CAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEE,MAAO,CAAA,CACF,IAAuC,CAAvC,GAAIF,CAAA,CAAOD,CAAA,CAAKM,CAAL,CAAP,CAAiB,IAAIH,CAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEL,MAAO,CAAA,CAGLI,EAAAA,CAAK,CAAC,CAAA,CAAGd,CAAOe,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGf,CAAOgB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcN,CAAd,CAAA,CAAoBA,CAApB,CAAyBA,CAAGO,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEX,CAAhE,CAArB,CACLY,EAAAA;AAAK,CAAC,CAAA,CAAGrB,CAAOe,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGf,CAAOgB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcL,CAAd,CAAA,CAAoBA,CAApB,CAAyBA,CAAGM,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEX,CAAhE,CAArB,CAGT,KAFA,IAAIa,CAAJ,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,CAAGU,CAAAA,MAAvB,CAA+BD,CAAA,EAA/B,CAAoC,CAClCD,CAAA,CAAO,CAAA,CAEP,KAAK,IAAIG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,CAAGG,CAAAA,MAAvB,CAA+BC,CAAA,EAA/B,CACE,GAAiD,CAAjD,GAAIhB,CAAA,CAAeK,CAAA,CAAGS,CAAH,CAAMzB,CAAAA,KAArB,CAA4BuB,CAAA,CAAGI,CAAH,CAAM3B,CAAAA,KAAlC,CAAJ,EAAsDgB,CAAA,CAAGS,CAAH,CAAMG,CAAAA,UAA5D,GAA2EL,CAAA,CAAGI,CAAH,CAAMC,CAAAA,UAAjF,CAA6F,CAE3FJ,CAAA,CAAO,CAAA,CACP,MAH2F,CAO/F,GAAa,CAAA,CAAb,GAAIA,CAAJ,CACE,MAAO,CAAA,CAZyB,CAgBpC,MAAO,CAAA,CA7BiE,CADzD,CAAZ,CA5BwF,CAA1D,CA8DvC3B,EAAQI,CAAAA,iBAAR,CAA4BA,CA5EkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setIsSubset.js\"],\n\"sourcesContent\":[\"shadow$provide[236] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetIsSubset = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setIsSubset';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\\nvar createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index;\\n\\n  /**\\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setIsSubset(set1, set2)\\n   *\\n   * Examples:\\n   *\\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\\n   *\\n   * See also:\\n   *\\n   *    setUnion, setIntersect, setDifference\\n   *\\n   * @param {Array | Matrix}    a1  A (multi)set\\n   * @param {Array | Matrix}    a2  A (multi)set\\n   * @return {boolean}            true | false\\n   */\\n  return typed(name, {\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\\n      if (subset(size(a1), new Index(0)) === 0) {\\n        // empty is a subset of anything\\n        return true;\\n      } else if (subset(size(a2), new Index(0)) === 0) {\\n        // anything is not a subset of empty\\n        return false;\\n      }\\n\\n      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\\n      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\\n      var inb2;\\n\\n      for (var i = 0; i < b1.length; i++) {\\n        inb2 = false;\\n\\n        for (var j = 0; j < b2.length; j++) {\\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\\n            // the identifier is always a decimal int\\n            inb2 = true;\\n            break;\\n          }\\n        }\\n\\n        if (inb2 === false) {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n  });\\n});\\nexports.createSetIsSubset = createSetIsSubset;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetIsSubset\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"ArrayMatrixArrayMatrix\",\"a1\",\"a2\",\"b1\",\"identify\",\"flatten\",\"Array\",\"isArray\",\"toArray\",\"sort\",\"b2\",\"inb2\",\"i\",\"length\",\"j\",\"identifier\"]\n}\n"]