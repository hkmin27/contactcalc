["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/complex_DOT_js/complex.js"],"~:js","shadow$provide[30]=function(c,b,y,a){(function(q){function f(g,d){var l=Math.abs(g),h=Math.abs(d);return 0===g?Math.log(h):0===d?Math.log(l):3E3>l&&3E3>h?.5*Math.log(g*g+d*d):Math.log(g/Math.cos(Math.atan2(d,g)))}function u(g,d){if(!(this instanceof u))return new u(g,d);a:{var l={re:0,im:0};if(void 0===g||null===g)l.re=l.im=0;else if(void 0!==d)l.re=g,l.im=d;else switch(typeof g){case \"object\":if(\"im\"in g&&\"re\"in g)l.re=g.re,l.im=g.im;else if(\"abs\"in g&&\"arg\"in g){if(!Number.isFinite(g.abs)&&Number.isFinite(g.arg)){l=\nu.INFINITY;break a}l.re=g.abs*Math.cos(g.arg);l.im=g.abs*Math.sin(g.arg)}else if(\"r\"in g&&\"phi\"in g){if(!Number.isFinite(g.r)&&Number.isFinite(g.phi)){l=u.INFINITY;break a}l.re=g.r*Math.cos(g.phi);l.im=g.r*Math.sin(g.phi)}else 2===g.length?(l.re=g[0],l.im=g[1]):p();break;case \"string\":l.im=l.re=0;g=g.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);d=1;var h=0;null===g&&p();for(var n=0;n<g.length;n++){var r=g[n];\" \"!==r&&\"\\t\"!==r&&\"\\n\"!==r&&(\"+\"===r?d++:\"-\"===r?h++:(\"i\"===r||\"I\"===r?(0===d+h&&p(),\" \"===\ng[n+1]||isNaN(g[n+1])?l.im+=parseFloat((h%2?\"-\":\"\")+\"1\"):(l.im+=parseFloat((h%2?\"-\":\"\")+g[n+1]),n++)):((0===d+h||isNaN(r))&&p(),\"i\"===g[n+1]||\"I\"===g[n+1]?(l.im+=parseFloat((h%2?\"-\":\"\")+r),n++):l.re+=parseFloat((h%2?\"-\":\"\")+r)),d=h=0))}0<d+h&&p();break;case \"number\":l.im=0;l.re=g;break;default:p()}isNaN(l.re)||isNaN(l.im)}this.re=l.re;this.im=l.im}var k=function(g){return.5*(Math.exp(g)+Math.exp(-g))},t=function(g){return.5*(Math.exp(g)-Math.exp(-g))},p=function(){throw SyntaxError(\"Invalid Param\");\n};u.prototype={re:0,im:0,sign:function(){var g=this.abs();return new u(this.re/g,this.im/g)},add:function(g,d){g=new u(g,d);return this.isInfinite()&&g.isInfinite()?u.NAN:this.isInfinite()||g.isInfinite()?u.INFINITY:new u(this.re+g.re,this.im+g.im)},sub:function(g,d){g=new u(g,d);return this.isInfinite()&&g.isInfinite()?u.NAN:this.isInfinite()||g.isInfinite()?u.INFINITY:new u(this.re-g.re,this.im-g.im)},mul:function(g,d){g=new u(g,d);return this.isInfinite()&&g.isZero()||this.isZero()&&g.isInfinite()?\nu.NAN:this.isInfinite()||g.isInfinite()?u.INFINITY:0===g.im&&0===this.im?new u(this.re*g.re,0):new u(this.re*g.re-this.im*g.im,this.re*g.im+this.im*g.re)},div:function(g,d){var l=new u(g,d);if(this.isZero()&&l.isZero()||this.isInfinite()&&l.isInfinite())return u.NAN;if(this.isInfinite()||l.isZero())return u.INFINITY;if(this.isZero()||l.isInfinite())return u.ZERO;g=this.re;d=this.im;var h=l.re,n=l.im;if(0===n)return new u(g/h,d/h);if(Math.abs(h)<Math.abs(n))return l=h/n,h=h*l+n,new u((g*l+d)/h,(d*\nl-g)/h);l=n/h;h=n*l+h;return new u((g+d*l)/h,(d-g*l)/h)},pow:function(g,d){var l=new u(g,d);g=this.re;d=this.im;if(l.isZero())return u.ONE;if(0===l.im){if(0===d)return new u(Math.pow(g,l.re),0);if(0===g)switch((l.re%4+4)%4){case 0:return new u(Math.pow(d,l.re),0);case 1:return new u(0,Math.pow(d,l.re));case 2:return new u(-Math.pow(d,l.re),0);case 3:return new u(0,-Math.pow(d,l.re))}}if(0===g&&0===d&&0<l.re&&0<=l.im)return u.ZERO;var h=Math.atan2(d,g);d=f(g,d);g=Math.exp(l.re*d-l.im*h);d=l.im*d+l.re*\nh;return new u(g*Math.cos(d),g*Math.sin(d))},sqrt:function(){var g=this.re,d=this.im,l=this.abs();if(0<=g){if(0===d)return new u(Math.sqrt(g),0);var h=.5*Math.sqrt(2*(l+g))}else h=Math.abs(d)/Math.sqrt(2*(l-g));g=0>=g?.5*Math.sqrt(2*(l-g)):Math.abs(d)/Math.sqrt(2*(l+g));return new u(h,0>d?-g:g)},exp:function(){var g=Math.exp(this.re);return new u(g*Math.cos(this.im),g*Math.sin(this.im))},expm1:function(){var g=this.re,d=this.im,l=Math.expm1(g)*Math.cos(d);var h=Math.PI/4;d<-h||d>h?h=Math.cos(d)-1:\n(h=d*d,h*=-.5+h*(1/24+h*(-1/720+h*(1/40320+h*(-1/3628800+h*(1/4790014600+h*(-1/87178291200+1/20922789888E3*h)))))));return new u(l+h,Math.exp(g)*Math.sin(d))},log:function(){var g=this.re,d=this.im;return new u(f(g,d),Math.atan2(d,g))},abs:function(){var g=this.re;var d=this.im,l=Math.abs(g),h=Math.abs(d);3E3>l&&3E3>h?g=Math.sqrt(l*l+h*h):(l<h?(l=h,h=g/d):h=d/g,g=l*Math.sqrt(1+h*h));return g},arg:function(){return Math.atan2(this.im,this.re)},sin:function(){var g=this.re,d=this.im;return new u(Math.sin(g)*\nk(d),Math.cos(g)*t(d))},cos:function(){var g=this.re,d=this.im;return new u(Math.cos(g)*k(d),-Math.sin(g)*t(d))},tan:function(){var g=2*this.re,d=2*this.im,l=Math.cos(g)+k(d);return new u(Math.sin(g)/l,t(d)/l)},cot:function(){var g=2*this.re,d=2*this.im,l=Math.cos(g)-k(d);return new u(-Math.sin(g)/l,t(d)/l)},sec:function(){var g=this.re,d=this.im,l=.5*k(2*d)+.5*Math.cos(2*g);return new u(Math.cos(g)*k(d)/l,Math.sin(g)*t(d)/l)},csc:function(){var g=this.re,d=this.im,l=.5*k(2*d)-.5*Math.cos(2*g);return new u(Math.sin(g)*\nk(d)/l,-Math.cos(g)*t(d)/l)},asin:function(){var g=this.re,d=this.im,l=(new u(d*d-g*g+1,-2*g*d)).sqrt();g=(new u(l.re-d,l.im+g)).log();return new u(g.im,-g.re)},acos:function(){var g=this.re,d=this.im,l=(new u(d*d-g*g+1,-2*g*d)).sqrt();g=(new u(l.re-d,l.im+g)).log();return new u(Math.PI/2-g.im,g.re)},atan:function(){var g=this.re,d=this.im;if(0===g){if(1===d)return new u(0,Infinity);if(-1===d)return new u(0,-Infinity)}var l=g*g+(1-d)*(1-d);g=(new u((1-d*d-g*g)/l,-2*g/l)).log();return new u(-.5*g.im,\n.5*g.re)},acot:function(){var g=this.re,d=this.im;if(0===d)return new u(Math.atan2(1,g),0);var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).atan():(new u(0!==g?g/0:0,0!==d?-d/0:0)).atan()},asec:function(){var g=this.re,d=this.im;if(0===g&&0===d)return new u(0,Infinity);var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).acos():(new u(0!==g?g/0:0,0!==d?-d/0:0)).acos()},acsc:function(){var g=this.re,d=this.im;if(0===g&&0===d)return new u(Math.PI/2,Infinity);var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).asin():\n(new u(0!==g?g/0:0,0!==d?-d/0:0)).asin()},sinh:function(){var g=this.re,d=this.im;return new u(t(g)*Math.cos(d),k(g)*Math.sin(d))},cosh:function(){var g=this.re,d=this.im;return new u(k(g)*Math.cos(d),t(g)*Math.sin(d))},tanh:function(){var g=2*this.re,d=2*this.im,l=k(g)+Math.cos(d);return new u(t(g)/l,Math.sin(d)/l)},coth:function(){var g=2*this.re,d=2*this.im,l=k(g)-Math.cos(d);return new u(t(g)/l,-Math.sin(d)/l)},csch:function(){var g=this.re,d=this.im,l=Math.cos(2*d)-k(2*g);return new u(-2*t(g)*\nMath.cos(d)/l,2*k(g)*Math.sin(d)/l)},sech:function(){var g=this.re,d=this.im,l=Math.cos(2*d)+k(2*g);return new u(2*k(g)*Math.cos(d)/l,-2*t(g)*Math.sin(d)/l)},asinh:function(){var g=this.im;this.im=-this.re;this.re=g;var d=this.asin();this.re=-this.im;this.im=g;g=d.re;d.re=-d.im;d.im=g;return d},acosh:function(){var g=this.acos();if(0>=g.im){var d=g.re;g.re=-g.im;g.im=d}else d=g.im,g.im=-g.re,g.re=d;return g},atanh:function(){var g=this.re,d=this.im,l=1<g&&0===d,h=1-g,n=1+g,r=h*h+d*d;g=0!==r?new u((n*\nh-d*d)/r,(d*h+n*d)/r):new u(-1!==g?g/0:0,0!==d?d/0:0);d=g.re;g.re=f(g.re,g.im)/2;g.im=Math.atan2(g.im,d)/2;l&&(g.im=-g.im);return g},acoth:function(){var g=this.re,d=this.im;if(0===g&&0===d)return new u(0,Math.PI/2);var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).atanh():(new u(0!==g?g/0:0,0!==d?-d/0:0)).atanh()},acsch:function(){var g=this.re,d=this.im;if(0===d)return new u(0!==g?Math.log(g+Math.sqrt(g*g+1)):Infinity,0);var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).asinh():(new u(0!==g?g/0:0,0!==d?-d/\n0:0)).asinh()},asech:function(){var g=this.re,d=this.im;if(this.isZero())return u.INFINITY;var l=g*g+d*d;return 0!==l?(new u(g/l,-d/l)).acosh():(new u(0!==g?g/0:0,0!==d?-d/0:0)).acosh()},inverse:function(){if(this.isZero())return u.INFINITY;if(this.isInfinite())return u.ZERO;var g=this.re,d=this.im,l=g*g+d*d;return new u(g/l,-d/l)},conjugate:function(){return new u(this.re,-this.im)},neg:function(){return new u(-this.re,-this.im)},ceil:function(g){g=Math.pow(10,g||0);return new u(Math.ceil(this.re*\ng)/g,Math.ceil(this.im*g)/g)},floor:function(g){g=Math.pow(10,g||0);return new u(Math.floor(this.re*g)/g,Math.floor(this.im*g)/g)},round:function(g){g=Math.pow(10,g||0);return new u(Math.round(this.re*g)/g,Math.round(this.im*g)/g)},equals:function(g,d){g=new u(g,d);return Math.abs(g.re-this.re)<=u.EPSILON&&Math.abs(g.im-this.im)<=u.EPSILON},clone:function(){return new u(this.re,this.im)},toString:function(){var g=this.re,d=this.im,l=\"\";if(this.isNaN())return\"NaN\";if(this.isInfinite())return\"Infinity\";\nif(0===d)return l+g;0!==g?(l=l+g+\" \",0>d?(d=-d,l+=\"-\"):l+=\"+\",l+=\" \"):0>d&&(d=-d,l+=\"-\");1!==d&&(l+=d);return l+\"i\"},toVector:function(){return[this.re,this.im]},valueOf:function(){return 0===this.im?this.re:null},isNaN:function(){return isNaN(this.re)||isNaN(this.im)},isZero:function(){return 0===this.im&&0===this.re},isFinite:function(){return isFinite(this.re)&&isFinite(this.im)},isInfinite:function(){return!(this.isNaN()||this.isFinite())}};u.ZERO=new u(0,0);u.ONE=new u(1,0);u.I=new u(0,1);u.PI=\nnew u(Math.PI,0);u.E=new u(Math.E,0);u.INFINITY=new u(Infinity,Infinity);u.NAN=new u(NaN,NaN);u.EPSILON=1E-16;\"function\"===typeof define&&define.amd?define([],function(){return u}):\"object\"===typeof a?(Object.defineProperty(u,\"__esModule\",{value:!0}),u[\"default\"]=u,u.Complex=u,y.exports=u):q.Complex=u})(this)}","~:source","shadow$provide[30] = function(global,require,module,exports) {\n/**\n * @license Complex.js v2.0.12 11/02/2016\n *\n * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = function(x) {\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = function(x) {\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small.\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n\n  var cosm1 = function(x) {\n    var limit = Math.PI/4;\n    if (x < -limit || x > limit) {\n      return (Math.cos(x) - 1.0);\n    }\n\n    var xx = x * x;\n    return xx *\n      (-0.5 + xx *\n        (1/24 + xx *\n          (-1/720 + xx *\n            (1/40320 + xx *\n              (-1/3628800 + xx *\n                (1/4790014600 + xx *\n                  (-1/87178291200 + xx *\n                    (1/20922789888000)\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n\n  var parse = function(a, b) {\n\n    var z = {'re': 0, 'im': 0};\n\n    if (a === undefined || a === null) {\n      z['re'] =\n              z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n                  z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n              this['re'] / abs,\n              this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n              this['re'] + z['re'],\n              this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n              this['re'] - z['re'],\n              this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n              this['re'] * z['re'] - this['im'] * z['im'],\n              this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n                (a * x + b) / t,\n                (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n                (a + b * x) / t,\n                (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n              a * Math.cos(b),\n              a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n              tmp * Math.cos(this['im']),\n              tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.expm1(a) * Math.cos(b) + cosm1(b),\n              Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n              logHypot(a, b),\n              Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(c) = (e^b - e^(-b)) / (2i)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.sin(a) * cosh(b),\n              Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = (e^b + e^(-b)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.cos(a) * cosh(b),\n              -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n              Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n              -Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.cos(a) * cosh(b) / d,\n              Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.sin(a) * cosh(b) / d,\n              -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n              b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n              b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n              (1 - b * b - a * a) / d,\n              -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).atan()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).acos()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).asin()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              sinh(a) * Math.cos(b),\n              cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              cosh(a) * Math.cos(b),\n              sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n              Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n              -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n              -2 * sinh(a) * Math.cos(b) / d,\n              2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n              2 * cosh(a) * Math.cos(b) / d,\n              -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n              ? new Complex(\n                      (onePlus * oneMinus - b * b) / d,\n                      (b * oneMinus + onePlus * b) / d)\n              : new Complex(\n                      (a !== -1) ? (a / 0) : 0,\n                      (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).atanh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n                (a !== 0)\n                ? Math.log(a + Math.sqrt(a * a + 1))\n                : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).asinh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).acosh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.ceil(this['re'] * places) / places,\n              Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.floor(this['re'] * places) / places,\n              Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.round(this['re'] * places) / places,\n              Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret+= a;\n        ret+= \" \";\n        if (b < 0) {\n          b = -b;\n          ret+= \"-\";\n        } else {\n          ret+= \"+\";\n        }\n        ret+= \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret+= \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret+= b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-16;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", {'value': true});\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["prototype","__esModule"]],"~:compiled-at",1619135723738,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$complex_DOT_js$complex.js\",\n\"lineCount\":18,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/complex_DOT_js/complex.js\"],\n\"sourcesContent\":[\"shadow$provide[30] = function(global,require,module,exports) {\\n/**\\n * @license Complex.js v2.0.12 11/02/2016\\n *\\n * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\\n * Dual licensed under the MIT or GPL Version 2 licenses.\\n **/\\n\\n/**\\n *\\n * This class allows the manipulation of complex numbers.\\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\\n *\\n * Object form\\n * { re: <real>, im: <imaginary> }\\n * { arg: <angle>, abs: <radius> }\\n * { phi: <angle>, r: <radius> }\\n *\\n * Array / Vector form\\n * [ real, imaginary ]\\n *\\n * Double form\\n * 99.3 - Single double value\\n *\\n * String form\\n * '23.1337' - Simple real number\\n * '15+3i' - a simple complex number\\n * '3-i' - a simple complex number\\n *\\n * Example:\\n *\\n * var c = new Complex('99.3+8i');\\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\\n *\\n */\\n\\n(function(root) {\\n\\n  'use strict';\\n\\n  var cosh = function(x) {\\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\\n  };\\n\\n  var sinh = function(x) {\\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\\n  };\\n\\n  /**\\n   * Calculates cos(x) - 1 using Taylor series if x is small.\\n   *\\n   * @param {number} x\\n   * @returns {number} cos(x) - 1\\n   */\\n\\n  var cosm1 = function(x) {\\n    var limit = Math.PI/4;\\n    if (x < -limit || x > limit) {\\n      return (Math.cos(x) - 1.0);\\n    }\\n\\n    var xx = x * x;\\n    return xx *\\n      (-0.5 + xx *\\n        (1/24 + xx *\\n          (-1/720 + xx *\\n            (1/40320 + xx *\\n              (-1/3628800 + xx *\\n                (1/4790014600 + xx *\\n                  (-1/87178291200 + xx *\\n                    (1/20922789888000)\\n                  )\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n  };\\n\\n  var hypot = function(x, y) {\\n\\n    var a = Math.abs(x);\\n    var b = Math.abs(y);\\n\\n    if (a < 3000 && b < 3000) {\\n      return Math.sqrt(a * a + b * b);\\n    }\\n\\n    if (a < b) {\\n      a = b;\\n      b = x / y;\\n    } else {\\n      b = y / x;\\n    }\\n    return a * Math.sqrt(1 + b * b);\\n  };\\n\\n  var parser_exit = function() {\\n    throw SyntaxError('Invalid Param');\\n  };\\n\\n  /**\\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\\n   *\\n   * @param {number} a\\n   * @param {number} b\\n   * @returns {number}\\n   */\\n  function logHypot(a, b) {\\n\\n    var _a = Math.abs(a);\\n    var _b = Math.abs(b);\\n\\n    if (a === 0) {\\n      return Math.log(_b);\\n    }\\n\\n    if (b === 0) {\\n      return Math.log(_a);\\n    }\\n\\n    if (_a < 3000 && _b < 3000) {\\n      return Math.log(a * a + b * b) * 0.5;\\n    }\\n\\n    /* I got 4 ideas to compute this property without overflow:\\n     *\\n     * Testing 1000000 times with random samples for a,b \\u2208 [1, 1000000000] against a big decimal library to get an error estimate\\n     *\\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\\n\\n     Math.log(a * a + b * b) / 2\\n\\n     *\\n     *\\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\\n\\n     var fn = function(a, b) {\\n     a = Math.abs(a);\\n     b = Math.abs(b);\\n     var t = Math.min(a, b);\\n     a = Math.max(a, b);\\n     t = t / a;\\n\\n     return Math.log(a) + Math.log(1 + t * t) / 2;\\n     };\\n\\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\\n\\n     Math.log(a / Math.cos(Math.atan2(b, a)))\\n\\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\\n\\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\\n\\n     */\\n\\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\\n  }\\n\\n  var parse = function(a, b) {\\n\\n    var z = {'re': 0, 'im': 0};\\n\\n    if (a === undefined || a === null) {\\n      z['re'] =\\n              z['im'] = 0;\\n    } else if (b !== undefined) {\\n      z['re'] = a;\\n      z['im'] = b;\\n    } else\\n      switch (typeof a) {\\n\\n        case 'object':\\n\\n          if ('im' in a && 're' in a) {\\n            z['re'] = a['re'];\\n            z['im'] = a['im'];\\n          } else if ('abs' in a && 'arg' in a) {\\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\\n              return Complex['INFINITY'];\\n            }\\n            z['re'] = a['abs'] * Math.cos(a['arg']);\\n            z['im'] = a['abs'] * Math.sin(a['arg']);\\n          } else if ('r' in a && 'phi' in a) {\\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\\n              return Complex['INFINITY'];\\n            }\\n            z['re'] = a['r'] * Math.cos(a['phi']);\\n            z['im'] = a['r'] * Math.sin(a['phi']);\\n          } else if (a.length === 2) { // Quick array check\\n            z['re'] = a[0];\\n            z['im'] = a[1];\\n          } else {\\n            parser_exit();\\n          }\\n          break;\\n\\n        case 'string':\\n\\n          z['im'] = /* void */\\n                  z['re'] = 0;\\n\\n          var tokens = a.match(/\\\\d+\\\\.?\\\\d*e[+-]?\\\\d+|\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+|./g);\\n          var plus = 1;\\n          var minus = 0;\\n\\n          if (tokens === null) {\\n            parser_exit();\\n          }\\n\\n          for (var i = 0; i < tokens.length; i++) {\\n\\n            var c = tokens[i];\\n\\n            if (c === ' ' || c === '\\\\t' || c === '\\\\n') {\\n              /* void */\\n            } else if (c === '+') {\\n              plus++;\\n            } else if (c === '-') {\\n              minus++;\\n            } else if (c === 'i' || c === 'I') {\\n\\n              if (plus + minus === 0) {\\n                parser_exit();\\n              }\\n\\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\\n                i++;\\n              } else {\\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\\n              }\\n              plus = minus = 0;\\n\\n            } else {\\n\\n              if (plus + minus === 0 || isNaN(c)) {\\n                parser_exit();\\n              }\\n\\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\\n                i++;\\n              } else {\\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\\n              }\\n              plus = minus = 0;\\n            }\\n          }\\n\\n          // Still something on the stack\\n          if (plus + minus > 0) {\\n            parser_exit();\\n          }\\n          break;\\n\\n        case 'number':\\n          z['im'] = 0;\\n          z['re'] = a;\\n          break;\\n\\n        default:\\n          parser_exit();\\n      }\\n\\n    if (isNaN(z['re']) || isNaN(z['im'])) {\\n      // If a calculation is NaN, we treat it as NaN and don't throw\\n      //parser_exit();\\n    }\\n\\n    return z;\\n  };\\n\\n  /**\\n   * @constructor\\n   * @returns {Complex}\\n   */\\n  function Complex(a, b) {\\n\\n    if (!(this instanceof Complex)) {\\n      return new Complex(a, b);\\n    }\\n\\n    var z = parse(a, b);\\n\\n    this['re'] = z['re'];\\n    this['im'] = z['im'];\\n  }\\n\\n  Complex.prototype = {\\n\\n    're': 0,\\n    'im': 0,\\n\\n    /**\\n     * Calculates the sign of a complex number, which is a normalized complex\\n     *\\n     * @returns {Complex}\\n     */\\n    'sign': function() {\\n\\n      var abs = this['abs']();\\n\\n      return new Complex(\\n              this['re'] / abs,\\n              this['im'] / abs);\\n    },\\n\\n    /**\\n     * Adds two complex numbers\\n     *\\n     * @returns {Complex}\\n     */\\n    'add': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      // Infinity + Infinity = NaN\\n      if (this['isInfinite']() && z['isInfinite']()) {\\n        return Complex['NAN'];\\n      }\\n\\n      // Infinity + z = Infinity { where z != Infinity }\\n      if (this['isInfinite']() || z['isInfinite']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      return new Complex(\\n              this['re'] + z['re'],\\n              this['im'] + z['im']);\\n    },\\n\\n    /**\\n     * Subtracts two complex numbers\\n     *\\n     * @returns {Complex}\\n     */\\n    'sub': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      // Infinity - Infinity = NaN\\n      if (this['isInfinite']() && z['isInfinite']()) {\\n        return Complex['NAN'];\\n      }\\n\\n      // Infinity - z = Infinity { where z != Infinity }\\n      if (this['isInfinite']() || z['isInfinite']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      return new Complex(\\n              this['re'] - z['re'],\\n              this['im'] - z['im']);\\n    },\\n\\n    /**\\n     * Multiplies two complex numbers\\n     *\\n     * @returns {Complex}\\n     */\\n    'mul': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      // Infinity * 0 = NaN\\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\\n        return Complex['NAN'];\\n      }\\n\\n      // Infinity * z = Infinity { where z != 0 }\\n      if (this['isInfinite']() || z['isInfinite']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      // Short circuit for real values\\n      if (z['im'] === 0 && this['im'] === 0) {\\n        return new Complex(this['re'] * z['re'], 0);\\n      }\\n\\n      return new Complex(\\n              this['re'] * z['re'] - this['im'] * z['im'],\\n              this['re'] * z['im'] + this['im'] * z['re']);\\n    },\\n\\n    /**\\n     * Divides two complex numbers\\n     *\\n     * @returns {Complex}\\n     */\\n    'div': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\\n        return Complex['NAN'];\\n      }\\n\\n      // Infinity / 0 = Infinity\\n      if (this['isInfinite']() || z['isZero']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      // 0 / Infinity = 0\\n      if (this['isZero']() || z['isInfinite']()) {\\n        return Complex['ZERO'];\\n      }\\n\\n      a = this['re'];\\n      b = this['im'];\\n\\n      var c = z['re'];\\n      var d = z['im'];\\n      var t, x;\\n\\n      if (0 === d) {\\n        // Divisor is real\\n        return new Complex(a / c, b / c);\\n      }\\n\\n      if (Math.abs(c) < Math.abs(d)) {\\n\\n        x = c / d;\\n        t = c * x + d;\\n\\n        return new Complex(\\n                (a * x + b) / t,\\n                (b * x - a) / t);\\n\\n      } else {\\n\\n        x = d / c;\\n        t = d * x + c;\\n\\n        return new Complex(\\n                (a + b * x) / t,\\n                (b - a * x) / t);\\n      }\\n    },\\n\\n    /**\\n     * Calculate the power of two complex numbers\\n     *\\n     * @returns {Complex}\\n     */\\n    'pow': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      a = this['re'];\\n      b = this['im'];\\n\\n      if (z['isZero']()) {\\n        return Complex['ONE'];\\n      }\\n\\n      // If the exponent is real\\n      if (z['im'] === 0) {\\n\\n        if (b === 0) {\\n\\n          return new Complex(Math.pow(a, z['re']), 0);\\n\\n        } else if (a === 0) { // If base is fully imaginary\\n\\n          switch ((z['re'] % 4 + 4) % 4) {\\n            case 0:\\n              return new Complex(Math.pow(b, z['re']), 0);\\n            case 1:\\n              return new Complex(0, Math.pow(b, z['re']));\\n            case 2:\\n              return new Complex(-Math.pow(b, z['re']), 0);\\n            case 3:\\n              return new Complex(0, -Math.pow(b, z['re']));\\n          }\\n        }\\n      }\\n\\n      /* I couldn't find a good formula, so here is a derivation and optimization\\n       *\\n       * z_1^z_2 = (a + bi)^(c + di)\\n       *         = exp((c + di) * log(a + bi)\\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\\n       * =>...\\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\\n       *\\n       * =>...\\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\\n       *\\n       * =>\\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\\n       *\\n       */\\n\\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\\n        return Complex['ZERO'];\\n      }\\n\\n      var arg = Math.atan2(b, a);\\n      var loh = logHypot(a, b);\\n\\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\\n      b = z['im'] * loh + z['re'] * arg;\\n      return new Complex(\\n              a * Math.cos(b),\\n              a * Math.sin(b));\\n    },\\n\\n    /**\\n     * Calculate the complex square root\\n     *\\n     * @returns {Complex}\\n     */\\n    'sqrt': function() {\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var r = this['abs']();\\n\\n      var re, im;\\n\\n      if (a >= 0) {\\n\\n        if (b === 0) {\\n          return new Complex(Math.sqrt(a), 0);\\n        }\\n\\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\\n      } else {\\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\\n      }\\n\\n      if (a <= 0) {\\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\\n      } else {\\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\\n      }\\n\\n      return new Complex(re, b < 0 ? -im : im);\\n    },\\n\\n    /**\\n     * Calculate the complex exponent\\n     *\\n     * @returns {Complex}\\n     */\\n    'exp': function() {\\n\\n      var tmp = Math.exp(this['re']);\\n\\n      if (this['im'] === 0) {\\n        //return new Complex(tmp, 0);\\n      }\\n      return new Complex(\\n              tmp * Math.cos(this['im']),\\n              tmp * Math.sin(this['im']));\\n    },\\n\\n    /**\\n     * Calculate the complex exponent and subtracts one.\\n     *\\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\\n     * `x` is small.\\n     *\\n     * @returns {Complex}\\n     */\\n    'expm1': function() {\\n\\n      /**\\n       * exp(a + i*b) - 1\\n       = exp(a) * (cos(b) + j*sin(b)) - 1\\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\\n       */\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      return new Complex(\\n              Math.expm1(a) * Math.cos(b) + cosm1(b),\\n              Math.exp(a) * Math.sin(b));\\n    },\\n\\n    /**\\n     * Calculate the natural log\\n     *\\n     * @returns {Complex}\\n     */\\n    'log': function() {\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (b === 0 && a > 0) {\\n        //return new Complex(Math.log(a), 0);\\n      }\\n\\n      return new Complex(\\n              logHypot(a, b),\\n              Math.atan2(b, a));\\n    },\\n\\n    /**\\n     * Calculate the magnitude of the complex number\\n     *\\n     * @returns {number}\\n     */\\n    'abs': function() {\\n\\n      return hypot(this['re'], this['im']);\\n    },\\n\\n    /**\\n     * Calculate the angle of the complex number\\n     *\\n     * @returns {number}\\n     */\\n    'arg': function() {\\n\\n      return Math.atan2(this['im'], this['re']);\\n    },\\n\\n    /**\\n     * Calculate the sine of the complex number\\n     *\\n     * @returns {Complex}\\n     */\\n    'sin': function() {\\n\\n      // sin(c) = (e^b - e^(-b)) / (2i)\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      return new Complex(\\n              Math.sin(a) * cosh(b),\\n              Math.cos(a) * sinh(b));\\n    },\\n\\n    /**\\n     * Calculate the cosine\\n     *\\n     * @returns {Complex}\\n     */\\n    'cos': function() {\\n\\n      // cos(z) = (e^b + e^(-b)) / 2\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      return new Complex(\\n              Math.cos(a) * cosh(b),\\n              -Math.sin(a) * sinh(b));\\n    },\\n\\n    /**\\n     * Calculate the tangent\\n     *\\n     * @returns {Complex}\\n     */\\n    'tan': function() {\\n\\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\\n\\n      var a = 2 * this['re'];\\n      var b = 2 * this['im'];\\n      var d = Math.cos(a) + cosh(b);\\n\\n      return new Complex(\\n              Math.sin(a) / d,\\n              sinh(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the cotangent\\n     *\\n     * @returns {Complex}\\n     */\\n    'cot': function() {\\n\\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\\n\\n      var a = 2 * this['re'];\\n      var b = 2 * this['im'];\\n      var d = Math.cos(a) - cosh(b);\\n\\n      return new Complex(\\n              -Math.sin(a) / d,\\n              sinh(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the secant\\n     *\\n     * @returns {Complex}\\n     */\\n    'sec': function() {\\n\\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\\n\\n      return new Complex(\\n              Math.cos(a) * cosh(b) / d,\\n              Math.sin(a) * sinh(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the cosecans\\n     *\\n     * @returns {Complex}\\n     */\\n    'csc': function() {\\n\\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\\n\\n      return new Complex(\\n              Math.sin(a) * cosh(b) / d,\\n              -Math.cos(a) * sinh(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the complex arcus sinus\\n     *\\n     * @returns {Complex}\\n     */\\n    'asin': function() {\\n\\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      var t1 = new Complex(\\n              b * b - a * a + 1,\\n              -2 * a * b)['sqrt']();\\n\\n      var t2 = new Complex(\\n              t1['re'] - b,\\n              t1['im'] + a)['log']();\\n\\n      return new Complex(t2['im'], -t2['re']);\\n    },\\n\\n    /**\\n     * Calculate the complex arcus cosinus\\n     *\\n     * @returns {Complex}\\n     */\\n    'acos': function() {\\n\\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      var t1 = new Complex(\\n              b * b - a * a + 1,\\n              -2 * a * b)['sqrt']();\\n\\n      var t2 = new Complex(\\n              t1['re'] - b,\\n              t1['im'] + a)['log']();\\n\\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\\n    },\\n\\n    /**\\n     * Calculate the complex arcus tangent\\n     *\\n     * @returns {Complex}\\n     */\\n    'atan': function() {\\n\\n      // atan(c) = i / 2 log((i + x) / (i - x))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (a === 0) {\\n\\n        if (b === 1) {\\n          return new Complex(0, Infinity);\\n        }\\n\\n        if (b === -1) {\\n          return new Complex(0, -Infinity);\\n        }\\n      }\\n\\n      var d = a * a + (1.0 - b) * (1.0 - b);\\n\\n      var t1 = new Complex(\\n              (1 - b * b - a * a) / d,\\n              -2 * a / d).log();\\n\\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\\n    },\\n\\n    /**\\n     * Calculate the complex arcus cotangent\\n     *\\n     * @returns {Complex}\\n     */\\n    'acot': function() {\\n\\n      // acot(c) = i / 2 log((c - i) / (c + i))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (b === 0) {\\n        return new Complex(Math.atan2(1, a), 0);\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).atan()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).atan();\\n    },\\n\\n    /**\\n     * Calculate the complex arcus secant\\n     *\\n     * @returns {Complex}\\n     */\\n    'asec': function() {\\n\\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (a === 0 && b === 0) {\\n        return new Complex(0, Infinity);\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).acos()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).acos();\\n    },\\n\\n    /**\\n     * Calculate the complex arcus cosecans\\n     *\\n     * @returns {Complex}\\n     */\\n    'acsc': function() {\\n\\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (a === 0 && b === 0) {\\n        return new Complex(Math.PI / 2, Infinity);\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).asin()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).asin();\\n    },\\n\\n    /**\\n     * Calculate the complex sinh\\n     *\\n     * @returns {Complex}\\n     */\\n    'sinh': function() {\\n\\n      // sinh(c) = (e^c - e^-c) / 2\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      return new Complex(\\n              sinh(a) * Math.cos(b),\\n              cosh(a) * Math.sin(b));\\n    },\\n\\n    /**\\n     * Calculate the complex cosh\\n     *\\n     * @returns {Complex}\\n     */\\n    'cosh': function() {\\n\\n      // cosh(c) = (e^c + e^-c) / 2\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      return new Complex(\\n              cosh(a) * Math.cos(b),\\n              sinh(a) * Math.sin(b));\\n    },\\n\\n    /**\\n     * Calculate the complex tanh\\n     *\\n     * @returns {Complex}\\n     */\\n    'tanh': function() {\\n\\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\\n\\n      var a = 2 * this['re'];\\n      var b = 2 * this['im'];\\n      var d = cosh(a) + Math.cos(b);\\n\\n      return new Complex(\\n              sinh(a) / d,\\n              Math.sin(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the complex coth\\n     *\\n     * @returns {Complex}\\n     */\\n    'coth': function() {\\n\\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\\n\\n      var a = 2 * this['re'];\\n      var b = 2 * this['im'];\\n      var d = cosh(a) - Math.cos(b);\\n\\n      return new Complex(\\n              sinh(a) / d,\\n              -Math.sin(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the complex coth\\n     *\\n     * @returns {Complex}\\n     */\\n    'csch': function() {\\n\\n      // csch(c) = 2 / (e^c - e^-c)\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var d = Math.cos(2 * b) - cosh(2 * a);\\n\\n      return new Complex(\\n              -2 * sinh(a) * Math.cos(b) / d,\\n              2 * cosh(a) * Math.sin(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the complex sech\\n     *\\n     * @returns {Complex}\\n     */\\n    'sech': function() {\\n\\n      // sech(c) = 2 / (e^c + e^-c)\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var d = Math.cos(2 * b) + cosh(2 * a);\\n\\n      return new Complex(\\n              2 * cosh(a) * Math.cos(b) / d,\\n              -2 * sinh(a) * Math.sin(b) / d);\\n    },\\n\\n    /**\\n     * Calculate the complex asinh\\n     *\\n     * @returns {Complex}\\n     */\\n    'asinh': function() {\\n\\n      // asinh(c) = log(c + sqrt(c^2 + 1))\\n\\n      var tmp = this['im'];\\n      this['im'] = -this['re'];\\n      this['re'] = tmp;\\n      var res = this['asin']();\\n\\n      this['re'] = -this['im'];\\n      this['im'] = tmp;\\n      tmp = res['re'];\\n\\n      res['re'] = -res['im'];\\n      res['im'] = tmp;\\n      return res;\\n    },\\n\\n    /**\\n     * Calculate the complex acosh\\n     *\\n     * @returns {Complex}\\n     */\\n    'acosh': function() {\\n\\n      // acosh(c) = log(c + sqrt(c^2 - 1))\\n\\n      var res = this['acos']();\\n      if (res['im'] <= 0) {\\n        var tmp = res['re'];\\n        res['re'] = -res['im'];\\n        res['im'] = tmp;\\n      } else {\\n        var tmp = res['im'];\\n        res['im'] = -res['re'];\\n        res['re'] = tmp;\\n      }\\n      return res;\\n    },\\n\\n    /**\\n     * Calculate the complex atanh\\n     *\\n     * @returns {Complex}\\n     */\\n    'atanh': function() {\\n\\n      // atanh(c) = log((1+c) / (1-c)) / 2\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      var noIM = a > 1 && b === 0;\\n      var oneMinus = 1 - a;\\n      var onePlus = 1 + a;\\n      var d = oneMinus * oneMinus + b * b;\\n\\n      var x = (d !== 0)\\n              ? new Complex(\\n                      (onePlus * oneMinus - b * b) / d,\\n                      (b * oneMinus + onePlus * b) / d)\\n              : new Complex(\\n                      (a !== -1) ? (a / 0) : 0,\\n                      (b !== 0) ? (b / 0) : 0);\\n\\n      var temp = x['re'];\\n      x['re'] = logHypot(x['re'], x['im']) / 2;\\n      x['im'] = Math.atan2(x['im'], temp) / 2;\\n      if (noIM) {\\n        x['im'] = -x['im'];\\n      }\\n      return x;\\n    },\\n\\n    /**\\n     * Calculate the complex acoth\\n     *\\n     * @returns {Complex}\\n     */\\n    'acoth': function() {\\n\\n      // acoth(c) = log((c+1) / (c-1)) / 2\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (a === 0 && b === 0) {\\n        return new Complex(0, Math.PI / 2);\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).atanh()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).atanh();\\n    },\\n\\n    /**\\n     * Calculate the complex acsch\\n     *\\n     * @returns {Complex}\\n     */\\n    'acsch': function() {\\n\\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (b === 0) {\\n\\n        return new Complex(\\n                (a !== 0)\\n                ? Math.log(a + Math.sqrt(a * a + 1))\\n                : Infinity, 0);\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).asinh()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).asinh();\\n    },\\n\\n    /**\\n     * Calculate the complex asech\\n     *\\n     * @returns {Complex}\\n     */\\n    'asech': function() {\\n\\n      // asech(c) = log((1+sqrt(1-c^2))/c)\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      if (this['isZero']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      var d = a * a + b * b;\\n      return (d !== 0)\\n              ? new Complex(\\n                      a / d,\\n                      -b / d).acosh()\\n              : new Complex(\\n                      (a !== 0) ? a / 0 : 0,\\n                      (b !== 0) ? -b / 0 : 0).acosh();\\n    },\\n\\n    /**\\n     * Calculate the complex inverse 1/z\\n     *\\n     * @returns {Complex}\\n     */\\n    'inverse': function() {\\n\\n      // 1 / 0 = Infinity and 1 / Infinity = 0\\n      if (this['isZero']()) {\\n        return Complex['INFINITY'];\\n      }\\n\\n      if (this['isInfinite']()) {\\n        return Complex['ZERO'];\\n      }\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n\\n      var d = a * a + b * b;\\n\\n      return new Complex(a / d, -b / d);\\n    },\\n\\n    /**\\n     * Returns the complex conjugate\\n     *\\n     * @returns {Complex}\\n     */\\n    'conjugate': function() {\\n\\n      return new Complex(this['re'], -this['im']);\\n    },\\n\\n    /**\\n     * Gets the negated complex number\\n     *\\n     * @returns {Complex}\\n     */\\n    'neg': function() {\\n\\n      return new Complex(-this['re'], -this['im']);\\n    },\\n\\n    /**\\n     * Ceils the actual complex number\\n     *\\n     * @returns {Complex}\\n     */\\n    'ceil': function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      return new Complex(\\n              Math.ceil(this['re'] * places) / places,\\n              Math.ceil(this['im'] * places) / places);\\n    },\\n\\n    /**\\n     * Floors the actual complex number\\n     *\\n     * @returns {Complex}\\n     */\\n    'floor': function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      return new Complex(\\n              Math.floor(this['re'] * places) / places,\\n              Math.floor(this['im'] * places) / places);\\n    },\\n\\n    /**\\n     * Ceils the actual complex number\\n     *\\n     * @returns {Complex}\\n     */\\n    'round': function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      return new Complex(\\n              Math.round(this['re'] * places) / places,\\n              Math.round(this['im'] * places) / places);\\n    },\\n\\n    /**\\n     * Compares two complex numbers\\n     *\\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\\n     *\\n     * @returns {boolean}\\n     */\\n    'equals': function(a, b) {\\n\\n      var z = new Complex(a, b);\\n\\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\\n              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\\n    },\\n\\n    /**\\n     * Clones the actual object\\n     *\\n     * @returns {Complex}\\n     */\\n    'clone': function() {\\n\\n      return new Complex(this['re'], this['im']);\\n    },\\n\\n    /**\\n     * Gets a string of the actual complex number\\n     *\\n     * @returns {string}\\n     */\\n    'toString': function() {\\n\\n      var a = this['re'];\\n      var b = this['im'];\\n      var ret = \\\"\\\";\\n\\n      if (this['isNaN']()) {\\n        return 'NaN';\\n      }\\n\\n      if (this['isInfinite']()) {\\n        return 'Infinity';\\n      }\\n\\n      // If is real number\\n      if (b === 0) {\\n        return ret + a;\\n      }\\n\\n      if (a !== 0) {\\n        ret+= a;\\n        ret+= \\\" \\\";\\n        if (b < 0) {\\n          b = -b;\\n          ret+= \\\"-\\\";\\n        } else {\\n          ret+= \\\"+\\\";\\n        }\\n        ret+= \\\" \\\";\\n      } else if (b < 0) {\\n        b = -b;\\n        ret+= \\\"-\\\";\\n      }\\n\\n      if (1 !== b) { // b is the absolute imaginary part\\n        ret+= b;\\n      }\\n      return ret + \\\"i\\\";\\n    },\\n\\n    /**\\n     * Returns the actual number as a vector\\n     *\\n     * @returns {Array}\\n     */\\n    'toVector': function() {\\n\\n      return [this['re'], this['im']];\\n    },\\n\\n    /**\\n     * Returns the actual real value of the current object\\n     *\\n     * @returns {number|null}\\n     */\\n    'valueOf': function() {\\n\\n      if (this['im'] === 0) {\\n        return this['re'];\\n      }\\n      return null;\\n    },\\n\\n    /**\\n     * Determines whether a complex number is not on the Riemann sphere.\\n     *\\n     * @returns {boolean}\\n     */\\n    'isNaN': function() {\\n      return isNaN(this['re']) || isNaN(this['im']);\\n    },\\n\\n    /**\\n     * Determines whether or not a complex number is at the zero pole of the\\n     * Riemann sphere.\\n     *\\n     * @returns {boolean}\\n     */\\n    'isZero': function() {\\n      return this['im'] === 0 && this['re'] === 0;\\n    },\\n\\n    /**\\n     * Determines whether a complex number is not at the infinity pole of the\\n     * Riemann sphere.\\n     *\\n     * @returns {boolean}\\n     */\\n    'isFinite': function() {\\n      return isFinite(this['re']) && isFinite(this['im']);\\n    },\\n\\n    /**\\n     * Determines whether or not a complex number is at the infinity pole of the\\n     * Riemann sphere.\\n     *\\n     * @returns {boolean}\\n     */\\n    'isInfinite': function() {\\n      return !(this['isNaN']() || this['isFinite']());\\n    }\\n  };\\n\\n  Complex['ZERO'] = new Complex(0, 0);\\n  Complex['ONE'] = new Complex(1, 0);\\n  Complex['I'] = new Complex(0, 1);\\n  Complex['PI'] = new Complex(Math.PI, 0);\\n  Complex['E'] = new Complex(Math.E, 0);\\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\\n  Complex['NAN'] = new Complex(NaN, NaN);\\n  Complex['EPSILON'] = 1e-16;\\n\\n  if (typeof define === 'function' && define['amd']) {\\n    define([], function() {\\n      return Complex;\\n    });\\n  } else if (typeof exports === 'object') {\\n    Object.defineProperty(Complex, \\\"__esModule\\\", {'value': true});\\n    Complex['default'] = Complex;\\n    Complex['Complex'] = Complex;\\n    module['exports'] = Complex;\\n  } else {\\n    root['Complex'] = Complex;\\n  }\\n\\n})(this);\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"logHypot\",\"a\",\"b\",\"_a\",\"Math\",\"abs\",\"_b\",\"log\",\"cos\",\"atan2\",\"Complex\",\"z\",\"undefined\",\"Number\",\"isFinite\",\"sin\",\"length\",\"parser_exit\",\"tokens\",\"match\",\"plus\",\"minus\",\"i\",\"c\",\"isNaN\",\"parseFloat\",\"cosh\",\"x\",\"exp\",\"sinh\",\"SyntaxError\",\"prototype\",\"sign\",\"add\",\"sub\",\"mul\",\"div\",\"d\",\"t\",\"pow\",\"arg\",\"loh\",\"sqrt\",\"r\",\"re\",\"im\",\"tmp\",\"expm1\",\"limit\",\"PI\",\"xx\",\"y\",\"tan\",\"cot\",\"sec\",\"csc\",\"asin\",\"t1\",\"t2\",\"acos\",\"atan\",\"Infinity\",\"acot\",\"asec\",\"acsc\",\"tanh\",\"coth\",\"csch\",\"sech\",\"asinh\",\"res\",\"acosh\",\"atanh\",\"noIM\",\"oneMinus\",\"onePlus\",\"temp\",\"acoth\",\"acsch\",\"asech\",\"inverse\",\"conjugate\",\"neg\",\"ceil\",\"places\",\"floor\",\"round\",\"equals\",\"clone\",\"toString\",\"ret\",\"toVector\",\"valueOf\",\"isZero\",\"isInfinite\",\"E\",\"NaN\",\"define\",\"Object\",\"defineProperty\"]\n}\n"]