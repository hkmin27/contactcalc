["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/geometry/distance.js"],"~:js","shadow$provide[528]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createDistance=void 0;var q=b(14);c=b(25);c=(0,c.factory)(\"distance\",\"typed addScalar subtract divideScalar multiplyScalar unaryMinus sqrt abs\".split(\" \"),function(f){function u(E){return\"number\"===typeof E||(0,q.isBigNumber)(E)}function k(E){E.constructor!==Array&&(E=d(E));return u(E[0])&&u(E[1])}function t(E){E.constructor!==Array&&(E=d(E));return u(E[0])&&u(E[1])&&u(E[2])}function p(E){Array.isArray(E)||(E=\nd(E));return E.every(u)}function g(E){E.constructor!==Array&&(E=d(E));return u(E[0])&&u(E[1])&&u(E[2])&&u(E[3])&&u(E[4])&&u(E[5])}function d(E){for(var G=Object.keys(E),I=[],L=0;L<G.length;L++)I.push(E[G[L]]);return I}function l(E){if(2===E[0].length&&u(E[0][0])&&u(E[0][1])){if(E.some(function(G){return 2!==G.length||!u(G[0])||!u(G[1])}))return!1}else if(3===E[0].length&&u(E[0][0])&&u(E[0][1])&&u(E[0][2])){if(E.some(function(G){return 3!==G.length||!u(G[0])||!u(G[1])||!u(G[2])}))return!1}else return!1;\nreturn!0}function h(E,G,I,L,M){E=F(C(C(w(I,E),w(L,G)),M));I=D(C(w(I,I),w(L,L)));return B(E,I)}function n(E,G,I,L,M,S,P,R,ba){E=[z(w(z(M,G),ba),w(z(S,I),R)),z(w(z(S,I),P),w(z(L,E),ba)),z(w(z(L,E),R),w(z(M,G),P))];E=D(C(C(w(E[0],E[0]),w(E[1],E[1])),w(E[2],E[2])));P=D(C(C(w(P,P),w(R,R)),w(ba,ba)));return B(E,P)}function r(E,G){for(var I=E.length,L=0,M,S=0;S<I;S++)M=z(E[S],G[S]),L=C(w(M,M),L);return D(L)}var v=f.typed,C=f.addScalar,z=f.subtract,w=f.multiplyScalar,B=f.divideScalar,x=f.unaryMinus,D=f.sqrt,\nF=f.abs;return v(\"distance\",{\"Array, Array, Array\":function(E,G,I){if(2===E.length&&2===G.length&&2===I.length){if(!k(E))throw new TypeError(\"Array with 2 numbers or BigNumbers expected for first argument\");if(!k(G))throw new TypeError(\"Array with 2 numbers or BigNumbers expected for second argument\");if(!k(I))throw new TypeError(\"Array with 2 numbers or BigNumbers expected for third argument\");var L=B(z(I[1],I[0]),z(G[1],G[0]));I=w(w(L,L),G[0]);G=x(w(L,G[0]));return h(E[0],E[1],I,G,E[1])}throw new TypeError(\"Invalid Arguments: Try again\");\n},\"Object, Object, Object\":function(E,G,I){if(2===Object.keys(E).length&&2===Object.keys(G).length&&2===Object.keys(I).length){if(!k(E))throw new TypeError(\"Values of pointX and pointY should be numbers or BigNumbers\");if(!k(G))throw new TypeError(\"Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers\");if(!k(I))throw new TypeError(\"Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers\");if(\"pointX\"in E&&\"pointY\"in E&&\"lineOnePtX\"in G&&\"lineOnePtY\"in G&&\"lineTwoPtX\"in I&&\n\"lineTwoPtY\"in I){var L=B(z(I.lineTwoPtY,I.lineTwoPtX),z(G.lineOnePtY,G.lineOnePtX));I=w(w(L,L),G.lineOnePtX);G=x(w(L,G.lineOnePtX));return h(E.pointX,E.pointY,I,G,E.pointX)}throw new TypeError(\"Key names do not match\");}throw new TypeError(\"Invalid Arguments: Try again\");},\"Array, Array\":function(E,G){if(2===E.length&&3===G.length){if(!k(E))throw new TypeError(\"Array with 2 numbers or BigNumbers expected for first argument\");if(!t(G))throw new TypeError(\"Array with 3 numbers or BigNumbers expected for second argument\");\nreturn h(E[0],E[1],G[0],G[1],G[2])}if(3===E.length&&6===G.length){if(!t(E))throw new TypeError(\"Array with 3 numbers or BigNumbers expected for first argument\");if(!g(G))throw new TypeError(\"Array with 6 numbers or BigNumbers expected for second argument\");return n(E[0],E[1],E[2],G[0],G[1],G[2],G[3],G[4],G[5])}if(E.length===G.length&&0<E.length){if(!p(E))throw new TypeError(\"All values of an array should be numbers or BigNumbers\");if(!p(G))throw new TypeError(\"All values of an array should be numbers or BigNumbers\");\nreturn r(E,G)}throw new TypeError(\"Invalid Arguments: Try again\");},\"Object, Object\":function(E,G){if(2===Object.keys(E).length&&3===Object.keys(G).length){if(!k(E))throw new TypeError(\"Values of pointX and pointY should be numbers or BigNumbers\");if(!t(G))throw new TypeError(\"Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers\");if(\"pointX\"in E&&\"pointY\"in E&&\"xCoeffLine\"in G&&\"yCoeffLine\"in G&&\"constant\"in G)return h(E.pointX,E.pointY,G.xCoeffLine,G.yCoeffLine,G.constant);\nthrow new TypeError(\"Key names do not match\");}if(3===Object.keys(E).length&&6===Object.keys(G).length){if(!t(E))throw new TypeError(\"Values of pointX, pointY and pointZ should be numbers or BigNumbers\");if(!g(G))throw new TypeError(\"Values of x0, y0, z0, a, b and c should be numbers or BigNumbers\");if(\"pointX\"in E&&\"pointY\"in E&&\"x0\"in G&&\"y0\"in G&&\"z0\"in G&&\"a\"in G&&\"b\"in G&&\"c\"in G)return n(E.pointX,E.pointY,E.pointZ,G.x0,G.y0,G.z0,G.a,G.b,G.c);throw new TypeError(\"Key names do not match\");}if(2===\nObject.keys(E).length&&2===Object.keys(G).length){if(!k(E))throw new TypeError(\"Values of pointOneX and pointOneY should be numbers or BigNumbers\");if(!k(G))throw new TypeError(\"Values of pointTwoX and pointTwoY should be numbers or BigNumbers\");if(\"pointOneX\"in E&&\"pointOneY\"in E&&\"pointTwoX\"in G&&\"pointTwoY\"in G)return r([E.pointOneX,E.pointOneY],[G.pointTwoX,G.pointTwoY]);throw new TypeError(\"Key names do not match\");}if(3===Object.keys(E).length&&3===Object.keys(G).length){if(!t(E))throw new TypeError(\"Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers\");\nif(!t(G))throw new TypeError(\"Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers\");if(\"pointOneX\"in E&&\"pointOneY\"in E&&\"pointOneZ\"in E&&\"pointTwoX\"in G&&\"pointTwoY\"in G&&\"pointTwoZ\"in G)return r([E.pointOneX,E.pointOneY,E.pointOneZ],[G.pointTwoX,G.pointTwoY,G.pointTwoZ]);throw new TypeError(\"Key names do not match\");}throw new TypeError(\"Invalid Arguments: Try again\");},Array:function(E){if(!l(E))throw new TypeError(\"Incorrect array format entered for pairwise distance calculation\");\nfor(var G=[],I=[],L=[],M=0;M<E.length-1;M++)for(var S=M+1;S<E.length;S++)2===E[0].length?(I=[E[M][0],E[M][1]],L=[E[S][0],E[S][1]]):3===E[0].length&&(I=[E[M][0],E[M][1],E[M][2]],L=[E[S][0],E[S][1],E[S][2]]),G.push(r(I,L));return G}})});a.createDistance=c}","~:source","shadow$provide[528] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDistance = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\nvar createDistance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      unaryMinus = _ref.unaryMinus,\n      sqrt = _ref.sqrt,\n      abs = _ref.abs;\n\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || (0, _is.isBigNumber)(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n\n    return a.every(_isNumber);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(function (aI) {\n        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);\n      })) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(function (aI) {\n        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);\n      })) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n\n    return sqrt(result);\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n\n    return result;\n  }\n});\nexports.createDistance = createDistance;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createDistance","Array"]],"~:compiled-at",1619135724021,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$geometry$distance.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/geometry/distance.js\"],\n\"sourcesContent\":[\"shadow$provide[528] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDistance = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'distance';\\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];\\nvar createDistance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      addScalar = _ref.addScalar,\\n      subtract = _ref.subtract,\\n      multiplyScalar = _ref.multiplyScalar,\\n      divideScalar = _ref.divideScalar,\\n      unaryMinus = _ref.unaryMinus,\\n      sqrt = _ref.sqrt,\\n      abs = _ref.abs;\\n\\n  /**\\n    * Calculates:\\n    *    The eucledian distance between two points in N-dimensional spaces.\\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\\n    *    Pairwise distance between a set of 2D or 3D points\\n    * NOTE:\\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x\\u2212x0, y\\u2212y0, z\\u2212z0) = t(a, b, c)\\n    *\\n    * Syntax:\\n    *    math.distance([x1, y1], [x2, y2])\\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\\n    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])\\n    *    math.distance([[A], [B], [C]...])\\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\\n    *\\n    * Examples:\\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\\n    *    math.distance(\\n    *     {pointOneX: 0, pointOneY: 0},\\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\\n    *    math.distance(\\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\\n    *    math.distance(\\n    *     {pointX: 1, pointY: 4},\\n    *     {lineOnePtX: 6, lineOnePtY: 3},\\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\\n    *    math.distance(\\n    *     {pointX: 2, pointY: 3, pointZ: 1},\\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\\n    *\\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\\n    * @return {Number | BigNumber} Returns the distance from two/three points\\n  */\\n  return typed(name, {\\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\\n        if (!_2d(x)) {\\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\\n        }\\n\\n        if (!_2d(y)) {\\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\\n        }\\n\\n        if (!_2d(z)) {\\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\\n        }\\n\\n        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));\\n        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);\\n        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));\\n        var constant = x[1];\\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\\n      } else {\\n        throw new TypeError('Invalid Arguments: Try again');\\n      }\\n    },\\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\\n        if (!_2d(x)) {\\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\\n        }\\n\\n        if (!_2d(y)) {\\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\\n        }\\n\\n        if (!_2d(z)) {\\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\\n        }\\n\\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\\n          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\\n          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);\\n          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));\\n          var constant = x.pointX;\\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\\n        } else {\\n          throw new TypeError('Key names do not match');\\n        }\\n      } else {\\n        throw new TypeError('Invalid Arguments: Try again');\\n      }\\n    },\\n    'Array, Array': function ArrayArray(x, y) {\\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\\n      if (x.length === 2 && y.length === 3) {\\n        if (!_2d(x)) {\\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\\n        }\\n\\n        if (!_3d(y)) {\\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\\n        }\\n\\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\\n      } else if (x.length === 3 && y.length === 6) {\\n        // Point to Line 3D\\n        if (!_3d(x)) {\\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\\n        }\\n\\n        if (!_parametricLine(y)) {\\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\\n        }\\n\\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\\n      } else if (x.length === y.length && x.length > 0) {\\n        // Point to Point N-dimensions\\n        if (!_containsOnlyNumbers(x)) {\\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\\n        }\\n\\n        if (!_containsOnlyNumbers(y)) {\\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\\n        }\\n\\n        return _euclideanDistance(x, y);\\n      } else {\\n        throw new TypeError('Invalid Arguments: Try again');\\n      }\\n    },\\n    'Object, Object': function ObjectObject(x, y) {\\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\\n        if (!_2d(x)) {\\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\\n        }\\n\\n        if (!_3d(y)) {\\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\\n        }\\n\\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\\n        } else {\\n          throw new TypeError('Key names do not match');\\n        }\\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\\n        // Point to Line 3D\\n        if (!_3d(x)) {\\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\\n        }\\n\\n        if (!_parametricLine(y)) {\\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\\n        }\\n\\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\\n        } else {\\n          throw new TypeError('Key names do not match');\\n        }\\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\\n        // Point to Point 2D\\n        if (!_2d(x)) {\\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\\n        }\\n\\n        if (!_2d(y)) {\\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\\n        }\\n\\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\\n        } else {\\n          throw new TypeError('Key names do not match');\\n        }\\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\\n        // Point to Point 3D\\n        if (!_3d(x)) {\\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\\n        }\\n\\n        if (!_3d(y)) {\\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\\n        }\\n\\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\\n        } else {\\n          throw new TypeError('Key names do not match');\\n        }\\n      } else {\\n        throw new TypeError('Invalid Arguments: Try again');\\n      }\\n    },\\n    Array: function Array(arr) {\\n      if (!_pairwise(arr)) {\\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\\n      }\\n\\n      return _distancePairwise(arr);\\n    }\\n  });\\n\\n  function _isNumber(a) {\\n    // distance supports numbers and bignumbers\\n    return typeof a === 'number' || (0, _is.isBigNumber)(a);\\n  }\\n\\n  function _2d(a) {\\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\\n    if (a.constructor !== Array) {\\n      a = _objectToArray(a);\\n    }\\n\\n    return _isNumber(a[0]) && _isNumber(a[1]);\\n  }\\n\\n  function _3d(a) {\\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\\n    if (a.constructor !== Array) {\\n      a = _objectToArray(a);\\n    }\\n\\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\\n  }\\n\\n  function _containsOnlyNumbers(a) {\\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\\n    if (!Array.isArray(a)) {\\n      a = _objectToArray(a);\\n    }\\n\\n    return a.every(_isNumber);\\n  }\\n\\n  function _parametricLine(a) {\\n    if (a.constructor !== Array) {\\n      a = _objectToArray(a);\\n    }\\n\\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\\n  }\\n\\n  function _objectToArray(o) {\\n    var keys = Object.keys(o);\\n    var a = [];\\n\\n    for (var i = 0; i < keys.length; i++) {\\n      a.push(o[keys[i]]);\\n    }\\n\\n    return a;\\n  }\\n\\n  function _pairwise(a) {\\n    // checks for valid arguments passed to _distancePairwise(Array)\\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\\n      if (a.some(function (aI) {\\n        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);\\n      })) {\\n        return false;\\n      }\\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\\n      if (a.some(function (aI) {\\n        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);\\n      })) {\\n        return false;\\n      }\\n    } else {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function _distancePointLine2D(x, y, a, b, c) {\\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\\n    return divideScalar(num, den);\\n  }\\n\\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\\n    return divideScalar(num, den);\\n  }\\n\\n  function _euclideanDistance(x, y) {\\n    var vectorSize = x.length;\\n    var result = 0;\\n    var diff = 0;\\n\\n    for (var i = 0; i < vectorSize; i++) {\\n      diff = subtract(x[i], y[i]);\\n      result = addScalar(multiplyScalar(diff, diff), result);\\n    }\\n\\n    return sqrt(result);\\n  }\\n\\n  function _distancePairwise(a) {\\n    var result = [];\\n    var pointA = [];\\n    var pointB = [];\\n\\n    for (var i = 0; i < a.length - 1; i++) {\\n      for (var j = i + 1; j < a.length; j++) {\\n        if (a[0].length === 2) {\\n          pointA = [a[i][0], a[i][1]];\\n          pointB = [a[j][0], a[j][1]];\\n        } else if (a[0].length === 3) {\\n          pointA = [a[i][0], a[i][1], a[i][2]];\\n          pointB = [a[j][0], a[j][1], a[j][2]];\\n        }\\n\\n        result.push(_euclideanDistance(pointA, pointB));\\n      }\\n    }\\n\\n    return result;\\n  }\\n});\\nexports.createDistance = createDistance;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDistance\",\"_is\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_isNumber\",\"a\",\"isBigNumber\",\"_2d\",\"constructor\",\"Array\",\"_objectToArray\",\"_3d\",\"_containsOnlyNumbers\",\"isArray\",\"every\",\"_parametricLine\",\"o\",\"keys\",\"i\",\"length\",\"push\",\"_pairwise\",\"some\",\"aI\",\"_distancePointLine2D\",\"x\",\"y\",\"b\",\"c\",\"num\",\"abs\",\"addScalar\",\"multiplyScalar\",\"den\",\"sqrt\",\"divideScalar\",\"_distancePointLine3D\",\"z\",\"x0\",\"y0\",\"z0\",\"subtract\",\"_euclideanDistance\",\"vectorSize\",\"result\",\"diff\",\"typed\",\"unaryMinus\",\"ArrayArrayArray\",\"TypeError\",\"m\",\"xCoeff\",\"yCoeff\",\"constant\",\"ObjectObjectObject\",\"lineTwoPtY\",\"lineTwoPtX\",\"lineOnePtY\",\"lineOnePtX\",\"pointX\",\"pointY\",\"ArrayArray\",\"ObjectObject\",\"xCoeffLine\",\"yCoeffLine\",\"pointZ\",\"pointOneX\",\"pointOneY\",\"pointTwoX\",\"pointTwoY\",\"pointOneZ\",\"pointTwoZ\",\"arr\",\"pointA\",\"pointB\",\"j\"]\n}\n"]