["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/rotate.js"],"~:js","shadow$provide[142]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRotate=void 0;c=b(25);var q=b(24);b=(0,c.factory)(\"rotate\",[\"typed\",\"multiply\",\"rotationMatrix\"],function(f){function u(g,d){g=Array.isArray(g)?(0,q.arraySize)(g):g.size();if(2<g.length)throw new RangeError(\"Vector must be of dimensions 1x\".concat(d));if(2===g.length&&1!==g[1])throw new RangeError(\"Vector must be of dimensions 1x\".concat(d));if(g[0]!==d)throw new RangeError(\"Vector must be of dimensions 1x\".concat(d));\n}var k=f.typed,t=f.multiply,p=f.rotationMatrix;return k(\"rotate\",{\"Array , number | BigNumber | Complex | Unit\":function(g,d){u(g,2);return t(p(d),g).toArray()},\"Matrix , number | BigNumber | Complex | Unit\":function(g,d){u(g,2);return t(p(d),g)},\"Array, number | BigNumber | Complex | Unit, Array | Matrix\":function(g,d,l){u(g,3);return t(p(d,l),g)},\"Matrix, number | BigNumber | Complex | Unit, Array | Matrix\":function(g,d,l){u(g,3);return t(p(d,l),g)}})});a.createRotate=b}","~:source","shadow$provide[142] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotate = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nvar createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      multiply = _ref.multiply,\n      rotationMatrix = _ref.rotationMatrix;\n\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();\n\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});\nexports.createRotate = createRotate;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createRotate"]],"~:compiled-at",1619135723881,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$rotate.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA8B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,UAAVA,CAAsB,gBAAtBA,CACe,CAA0C,QAAS,CAACC,CAAD,CAAO,CA0D1FC,QAASA,EAAa,CAACC,CAAD,CAAIC,CAAJ,CAAkB,CAClCC,CAAAA,CAAaC,KAAMC,CAAAA,OAAN,CAAcJ,CAAd,CAAA,CAAmB,CAAC,CAAA,CAAGN,CAAOW,CAAAA,SAAX,EAAsBL,CAAtB,CAAnB,CAA8CA,CAAEM,CAAAA,IAAF,EAE/D,IAAwB,CAAxB,CAAIJ,CAAWK,CAAAA,MAAf,CACE,KAAM,KAAIC,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,CAAzC,CAAf,CAAN,CAGF,GAA0B,CAA1B,GAAIC,CAAWK,CAAAA,MAAf,EAAiD,CAAjD,GAA+BL,CAAA,CAAW,CAAX,CAA/B,CACE,KAAM,KAAIM,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,CAAzC,CAAf,CAAN,CAGF,GAAIC,CAAA,CAAW,CAAX,CAAJ,GAAsBD,CAAtB,CACE,KAAM,KAAIO,UAAJ,CAAe,iCAAkCC,CAAAA,MAAlC,CAAyCR,CAAzC,CAAf,CAAN;AAZoC,CA1DkD,IACtFS,EAAQZ,CAAKY,CAAAA,KADyE,CAEtFC,EAAWb,CAAKa,CAAAA,QAFsE,CAGtFC,EAAiBd,CAAKc,CAAAA,cA8B1B,OAAOF,EAAA,CAnCEd,QAmCF,CAAY,CACjB,8CAA+CiB,QAAwC,CAACC,CAAD,CAAIC,CAAJ,CAAW,CAChGhB,CAAA,CAAce,CAAd,CAAiB,CAAjB,CAGA,OADgBH,EAAAK,CAASJ,CAAA,CAAeG,CAAf,CAATC,CAAgCF,CAAhCE,CACCC,CAAAA,OAAV,EAJyF,CADjF,CAOjB,+CAAgDC,QAAyC,CAACJ,CAAD,CAAIC,CAAJ,CAAW,CAClGhB,CAAA,CAAce,CAAd,CAAiB,CAAjB,CAEA,OAAOH,EAAA,CAASC,CAAA,CAAeG,CAAf,CAAT,CAAgCD,CAAhC,CAH2F,CAPnF,CAYjB,6DAA8DK,QAAmD,CAACL,CAAD,CAAIC,CAAJ,CAAWf,CAAX,CAAc,CAC7HD,CAAA,CAAce,CAAd,CAAiB,CAAjB,CAGA,OADgBH,EAAAK,CAASJ,CAAA,CAAeG,CAAf,CAAsBf,CAAtB,CAATgB,CAAmCF,CAAnCE,CAH6G,CAZ9G,CAkBjB,8DAA+DI,QAAoD,CAACN,CAAD,CAAIC,CAAJ,CAAWf,CAAX,CAAc,CAC/HD,CAAA,CAAce,CAAd,CAAiB,CAAjB,CAEA,OAAOH,EAAA,CAASC,CAAA,CAAeG,CAAf,CAAsBf,CAAtB,CAAT,CAAmCc,CAAnC,CAHwH,CAlBhH,CAAZ,CAjCmF,CAA1D,CA0ElC1B,EAAQI,CAAAA,YAAR,CAAuBA,CAxFuC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/rotate.js\"],\n\"sourcesContent\":[\"shadow$provide[142] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRotate = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar name = 'rotate';\\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\\nvar createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      multiply = _ref.multiply,\\n      rotationMatrix = _ref.rotationMatrix;\\n\\n  /**\\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\\n     *\\n     * Syntax:\\n     *\\n     *    math.rotate(w, theta)\\n     *    math.rotate(w, theta, v)\\n     *\\n     * Examples:\\n     *\\n     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])\\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])\\n     *\\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])\\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])\\n     *\\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])\\n     *\\n     * See also:\\n     *\\n     *    matrix, rotationMatrix\\n     *\\n     * @param {Array | Matrix} w                             Vector to rotate\\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\\n     * @param {Array | Matrix} [v]                           Rotation axis\\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\\n     */\\n  return typed(name, {\\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\\n      _validateSize(w, 2);\\n\\n      var matrixRes = multiply(rotationMatrix(theta), w);\\n      return matrixRes.toArray();\\n    },\\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\\n      _validateSize(w, 2);\\n\\n      return multiply(rotationMatrix(theta), w);\\n    },\\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\\n      _validateSize(w, 3);\\n\\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\\n      return matrixRes;\\n    },\\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\\n      _validateSize(w, 3);\\n\\n      return multiply(rotationMatrix(theta, v), w);\\n    }\\n  });\\n\\n  function _validateSize(v, expectedSize) {\\n    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();\\n\\n    if (actualSize.length > 2) {\\n      throw new RangeError(\\\"Vector must be of dimensions 1x\\\".concat(expectedSize));\\n    }\\n\\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\\n      throw new RangeError(\\\"Vector must be of dimensions 1x\\\".concat(expectedSize));\\n    }\\n\\n    if (actualSize[0] !== expectedSize) {\\n      throw new RangeError(\\\"Vector must be of dimensions 1x\\\".concat(expectedSize));\\n    }\\n  }\\n});\\nexports.createRotate = createRotate;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRotate\",\"_factory\",\"_array\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_validateSize\",\"v\",\"expectedSize\",\"actualSize\",\"Array\",\"isArray\",\"arraySize\",\"size\",\"length\",\"RangeError\",\"concat\",\"typed\",\"multiply\",\"rotationMatrix\",\"ArrayNumberBigNumberComplexUnit\",\"w\",\"theta\",\"matrixRes\",\"toArray\",\"MatrixNumberBigNumberComplexUnit\",\"ArrayNumberBigNumberComplexUnitArrayMatrix\",\"MatrixNumberBigNumberComplexUnitArrayMatrix\"]\n}\n"]