["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/flatten.js"],"~:js","shadow$provide[129]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createFlatten=void 0;var q=b(15),f=b(24);c=b(25);c=(0,c.factory)(\"flatten\",[\"typed\",\"matrix\"],function(u){var k=u.typed,t=u.matrix;return k(\"flatten\",{Array:function(p){return(0,f.flatten)((0,q.clone)(p))},Matrix:function(p){p=(0,f.flatten)((0,q.clone)(p.toArray()));return t(p)}})});a.createFlatten=c}","~:source","shadow$provide[129] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFlatten = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nvar createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.flatten)((0, _object.clone)(x));\n    },\n    Matrix: function Matrix(x) {\n      var flat = (0, _array.flatten)((0, _object.clone)(x.toArray())); // TODO: return the same matrix type as x\n\n      return matrix(flat);\n    }\n  });\n});\nexports.createFlatten = createFlatten;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createFlatten","__esModule","value","Matrix","Array"]],"~:compiled-at",1619135723804,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$flatten.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,EAAUP,CAAA,CAAQ,EAAR,CAAd,CAEIQ,EAASR,CAAA,CAAQ,EAAR,CAETS,EAAAA,CAAWT,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA+B,CAAC,CAAA,CAAGG,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,QAAVA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAASF,CAAKE,CAAAA,MAoBlB,OAAOD,EAAA,CAxBEH,SAwBF,CAAY,CACjBK,MAAOA,QAAc,CAACC,CAAD,CAAI,CACvB,MAAO,CAAC,CAAA,CAAGT,CAAOU,CAAAA,OAAX,EAAoB,CAAC,CAAA,CAAGX,CAAQY,CAAAA,KAAZ,EAAmBF,CAAnB,CAApB,CADgB,CADR,CAIjBG,OAAQA,QAAe,CAACH,CAAD,CAAI,CACrBI,CAAAA,CAAO,CAAC,CAAA,CAAGb,CAAOU,CAAAA,OAAX,EAAoB,CAAC,CAAA,CAAGX,CAAQY,CAAAA,KAAZ,EAAmBF,CAAEK,CAAAA,OAAF,EAAnB,CAApB,CAEX,OAAOP,EAAA,CAAOM,CAAP,CAHkB,CAJV,CAAZ,CAtBoF,CAA1D,CAiCnCnB,EAAQI,CAAAA,aAAR,CAAwBA,CAjDsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/flatten.js\"],\n\"sourcesContent\":[\"shadow$provide[129] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createFlatten = void 0;\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'flatten';\\nvar dependencies = ['typed', 'matrix'];\\nvar createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix;\\n\\n  /**\\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\\n   *\\n   * Syntax:\\n   *\\n   *    math.flatten(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\\n   *\\n   * See also:\\n   *\\n   *    concat, resize, size, squeeze\\n   *\\n   * @param {Matrix | Array} x   Matrix to be flattened\\n   * @return {Matrix | Array} Returns the flattened matrix\\n   */\\n  return typed(name, {\\n    Array: function Array(x) {\\n      return (0, _array.flatten)((0, _object.clone)(x));\\n    },\\n    Matrix: function Matrix(x) {\\n      var flat = (0, _array.flatten)((0, _object.clone)(x.toArray())); // TODO: return the same matrix type as x\\n\\n      return matrix(flat);\\n    }\\n  });\\n});\\nexports.createFlatten = createFlatten;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createFlatten\",\"_object\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"Array\",\"x\",\"flatten\",\"clone\",\"Matrix\",\"flat\",\"toArray\"]\n}\n"]