["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/diff.js"],"~:js","shadow$provide[135]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createDiff=void 0;c=b(25);var q=b(19),f=b(14);b=(0,c.factory)(\"diff\",[\"typed\",\"matrix\",\"subtract\",\"number\"],function(u){function k(n,r){(0,f.isMatrix)(n)&&(n=n.toArray());if(!Array.isArray(n))throw RangeError(\"Array/Matrix does not have that many dimensions\");if(0<r){var v=[];n.forEach(function(C){v.push(k(C,r-1))});return v}if(0===r)return t(n);throw RangeError(\"Cannot have negative dimension\");}function t(n){var r=\n[],v=n.length;if(2>v)return n;for(var C=1;C<v;C++)r.push(p(n[C-1],n[C]));return r}function p(n,r){(0,f.isMatrix)(n)&&(n=n.toArray());(0,f.isMatrix)(r)&&(r=r.toArray());var v=Array.isArray(n),C=Array.isArray(r);if(v&&C){if(n.length!==r.length)throw RangeError(\"Not all sub-arrays have the same length\");v=[];C=n.length;for(var z=0;z<C;z++)v.push(p(n[z],r[z]));return v}if(!v&&!C)return l(r,n);throw TypeError(\"Cannot calculate difference between 1 array and 1 non-array\");}var g=u.typed,d=u.matrix,l=u.subtract,\nh=u.number;return g(\"diff\",{\"Array | Matrix\":function(n){return(0,f.isMatrix)(n)?d(t(n.toArray())):t(n)},\"Array | Matrix, number\":function(n,r){if(!(0,q.isInteger)(r))throw new RangeError(\"Dimension must be a whole number\");return(0,f.isMatrix)(n)?d(k(n.toArray(),r)):k(n,r)},\"Array | Matrix, BigNumber\":function(n,r){return this(n,h(r))}})});a.createDiff=b}","~:source","shadow$provide[135] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDiff = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\nvar createDiff = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      number = _ref.number;\n\n  /**\n   * Create a new matrix or array of the difference between elements of the given array\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\n   * If no dimension parameter is passed it is assumed as dimension 0\n   *\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\n   *\n   * Syntax:\n   *\n   *     math.diff(arr)\n   *     math.diff(arr, dim)\n   *\n   * Examples:\n   *\n   *     const arr = [1, 2, 4, 7, 0]\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\n   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])\n   *\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\n   *\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\n   *\n   *     // These will all produce the same result\n   *     math.diff([[1, 2], [3, 4]])\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\n   *     math.diff([[1, 2], math.matrix([3, 4])])\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\n   *\n   * See Also:\n   *\n   *      sum\n   *      subtract\n   *      partitionSelect\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @param {number} dim            Dimension\n   * @return {Array | Matrix}       Difference between array elements in given dimension\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      // No dimension specified => assume dimension 0\n      if ((0, _is.isMatrix)(arr)) {\n        return matrix(_diff(arr.toArray()));\n      } else {\n        return _diff(arr);\n      }\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\n      if (!(0, _number.isInteger)(dim)) throw new RangeError('Dimension must be a whole number');\n\n      if ((0, _is.isMatrix)(arr)) {\n        return matrix(_recursive(arr.toArray(), dim));\n      } else {\n        return _recursive(arr, dim);\n      }\n    },\n    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {\n      return this(arr, number(dim));\n    }\n  });\n  /**\n   * Recursively find the correct dimension in the array/matrix\n   * Then Apply _diff to that dimension\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     Dimension\n   * @return {Array}         resulting array\n   */\n\n  function _recursive(arr, dim) {\n    if ((0, _is.isMatrix)(arr)) {\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\n    }\n\n    if (!Array.isArray(arr)) {\n      throw RangeError('Array/Matrix does not have that many dimensions');\n    }\n\n    if (dim > 0) {\n      var result = [];\n      arr.forEach(function (element) {\n        result.push(_recursive(element, dim - 1));\n      });\n      return result;\n    } else if (dim === 0) {\n      return _diff(arr);\n    } else {\n      throw RangeError('Cannot have negative dimension');\n    }\n  }\n  /**\n   * Difference between elements in the array\n   *\n   * @param {Array} arr      An array\n   * @return {Array}         resulting array\n   */\n\n\n  function _diff(arr) {\n    var result = [];\n    var size = arr.length;\n\n    if (size < 2) {\n      return arr;\n    }\n\n    for (var i = 1; i < size; i++) {\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\n    }\n\n    return result;\n  }\n  /**\n   * Difference between 2 objects\n   *\n   * @param {Object} obj1    First object\n   * @param {Object} obj2    Second object\n   * @return {Array}         resulting array\n   */\n\n\n  function _ElementDiff(obj1, obj2) {\n    // Convert matrices to arrays\n    if ((0, _is.isMatrix)(obj1)) obj1 = obj1.toArray();\n    if ((0, _is.isMatrix)(obj2)) obj2 = obj2.toArray();\n    var obj1IsArray = Array.isArray(obj1);\n    var obj2IsArray = Array.isArray(obj2);\n\n    if (obj1IsArray && obj2IsArray) {\n      return _ArrayDiff(obj1, obj2);\n    }\n\n    if (!obj1IsArray && !obj2IsArray) {\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\n    }\n\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\n  }\n  /**\n   * Difference of elements in 2 arrays\n   *\n   * @param {Array} arr1     Array 1\n   * @param {Array} arr2     Array 2\n   * @return {Array}         resulting array\n   */\n\n\n  function _ArrayDiff(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      throw RangeError('Not all sub-arrays have the same length');\n    }\n\n    var result = [];\n    var size = arr1.length;\n\n    for (var i = 0; i < size; i++) {\n      result.push(_ElementDiff(arr1[i], arr2[i]));\n    }\n\n    return result;\n  }\n});\nexports.createDiff = createDiff;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createDiff","value"]],"~:compiled-at",1619135723870,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$diff.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/diff.js\"],\n\"sourcesContent\":[\"shadow$provide[135] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDiff = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar name = 'diff';\\nvar dependencies = ['typed', 'matrix', 'subtract', 'number'];\\nvar createDiff = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      subtract = _ref.subtract,\\n      number = _ref.number;\\n\\n  /**\\n   * Create a new matrix or array of the difference between elements of the given array\\n   * The optional dim parameter lets you specify the dimension to evaluate the difference of\\n   * If no dimension parameter is passed it is assumed as dimension 0\\n   *\\n   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber\\n   * Arrays must be 'rectangular' meaning arrays like [1, 2]\\n   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays\\n   *\\n   * Syntax:\\n   *\\n   *     math.diff(arr)\\n   *     math.diff(arr, dim)\\n   *\\n   * Examples:\\n   *\\n   *     const arr = [1, 2, 4, 7, 0]\\n   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)\\n   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])\\n   *\\n   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]\\n   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\\n   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]\\n   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\\n   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]\\n   *\\n   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3\\n   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed\\n   *\\n   *     // These will all produce the same result\\n   *     math.diff([[1, 2], [3, 4]])\\n   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])\\n   *     math.diff([[1, 2], math.matrix([3, 4])])\\n   *     math.diff([math.matrix([1, 2]), [3, 4]])\\n   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix\\n   *\\n   * See Also:\\n   *\\n   *      sum\\n   *      subtract\\n   *      partitionSelect\\n   *\\n   * @param {Array | Matrix} arr    An array or matrix\\n   * @param {number} dim            Dimension\\n   * @return {Array | Matrix}       Difference between array elements in given dimension\\n   */\\n  return typed(name, {\\n    'Array | Matrix': function ArrayMatrix(arr) {\\n      // No dimension specified => assume dimension 0\\n      if ((0, _is.isMatrix)(arr)) {\\n        return matrix(_diff(arr.toArray()));\\n      } else {\\n        return _diff(arr);\\n      }\\n    },\\n    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {\\n      if (!(0, _number.isInteger)(dim)) throw new RangeError('Dimension must be a whole number');\\n\\n      if ((0, _is.isMatrix)(arr)) {\\n        return matrix(_recursive(arr.toArray(), dim));\\n      } else {\\n        return _recursive(arr, dim);\\n      }\\n    },\\n    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {\\n      return this(arr, number(dim));\\n    }\\n  });\\n  /**\\n   * Recursively find the correct dimension in the array/matrix\\n   * Then Apply _diff to that dimension\\n   *\\n   * @param {Array} arr      The array\\n   * @param {number} dim     Dimension\\n   * @return {Array}         resulting array\\n   */\\n\\n  function _recursive(arr, dim) {\\n    if ((0, _is.isMatrix)(arr)) {\\n      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly\\n    }\\n\\n    if (!Array.isArray(arr)) {\\n      throw RangeError('Array/Matrix does not have that many dimensions');\\n    }\\n\\n    if (dim > 0) {\\n      var result = [];\\n      arr.forEach(function (element) {\\n        result.push(_recursive(element, dim - 1));\\n      });\\n      return result;\\n    } else if (dim === 0) {\\n      return _diff(arr);\\n    } else {\\n      throw RangeError('Cannot have negative dimension');\\n    }\\n  }\\n  /**\\n   * Difference between elements in the array\\n   *\\n   * @param {Array} arr      An array\\n   * @return {Array}         resulting array\\n   */\\n\\n\\n  function _diff(arr) {\\n    var result = [];\\n    var size = arr.length;\\n\\n    if (size < 2) {\\n      return arr;\\n    }\\n\\n    for (var i = 1; i < size; i++) {\\n      result.push(_ElementDiff(arr[i - 1], arr[i]));\\n    }\\n\\n    return result;\\n  }\\n  /**\\n   * Difference between 2 objects\\n   *\\n   * @param {Object} obj1    First object\\n   * @param {Object} obj2    Second object\\n   * @return {Array}         resulting array\\n   */\\n\\n\\n  function _ElementDiff(obj1, obj2) {\\n    // Convert matrices to arrays\\n    if ((0, _is.isMatrix)(obj1)) obj1 = obj1.toArray();\\n    if ((0, _is.isMatrix)(obj2)) obj2 = obj2.toArray();\\n    var obj1IsArray = Array.isArray(obj1);\\n    var obj2IsArray = Array.isArray(obj2);\\n\\n    if (obj1IsArray && obj2IsArray) {\\n      return _ArrayDiff(obj1, obj2);\\n    }\\n\\n    if (!obj1IsArray && !obj2IsArray) {\\n      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)\\n    }\\n\\n    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');\\n  }\\n  /**\\n   * Difference of elements in 2 arrays\\n   *\\n   * @param {Array} arr1     Array 1\\n   * @param {Array} arr2     Array 2\\n   * @return {Array}         resulting array\\n   */\\n\\n\\n  function _ArrayDiff(arr1, arr2) {\\n    if (arr1.length !== arr2.length) {\\n      throw RangeError('Not all sub-arrays have the same length');\\n    }\\n\\n    var result = [];\\n    var size = arr1.length;\\n\\n    for (var i = 0; i < size; i++) {\\n      result.push(_ElementDiff(arr1[i], arr2[i]));\\n    }\\n\\n    return result;\\n  }\\n});\\nexports.createDiff = createDiff;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDiff\",\"_factory\",\"_number\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_recursive\",\"arr\",\"dim\",\"isMatrix\",\"toArray\",\"Array\",\"isArray\",\"RangeError\",\"result\",\"forEach\",\"element\",\"push\",\"_diff\",\"size\",\"length\",\"i\",\"_ElementDiff\",\"obj1\",\"obj2\",\"obj1IsArray\",\"obj2IsArray\",\"arr1\",\"arr2\",\"subtract\",\"TypeError\",\"typed\",\"matrix\",\"number\",\"ArrayMatrix\",\"ArrayMatrixNumber\",\"isInteger\",\"ArrayMatrixBigNumber\"]\n}\n"]