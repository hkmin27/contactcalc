["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/kron.js"],"~:js","shadow$provide[133]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createKron=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"kron\",[\"typed\",\"matrix\",\"multiplyScalar\"],function(f){function u(g,d){1===(0,q.arraySize)(g).length&&(g=[g]);1===(0,q.arraySize)(d).length&&(d=[d]);if(2<(0,q.arraySize)(g).length||2<(0,q.arraySize)(d).length)throw new RangeError(\"Vectors with dimensions greater then 2 are not supported expected (Size x \\x3d \"+JSON.stringify(g.length)+\", y \\x3d \"+JSON.stringify(d.length)+\n\")\");var l=[],h=[];return g.map(function(n){return d.map(function(r){h=[];l.push(h);return n.map(function(v){return r.map(function(C){return h.push(p(v,C))})})})})&&l}var k=f.typed,t=f.matrix,p=f.multiplyScalar;return k(\"kron\",{\"Matrix, Matrix\":function(g,d){return t(u(g.toArray(),d.toArray()))},\"Matrix, Array\":function(g,d){return t(u(g.toArray(),d))},\"Array, Matrix\":function(g,d){return t(u(g,d.toArray()))},\"Array, Array\":u})});a.createKron=c}","~:source","shadow$provide[133] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createKron = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nvar createKron = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiplyScalar = _ref.multiplyScalar;\n\n  /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4])\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n  /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if ((0, _array.arraySize)(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n\n    if ((0, _array.arraySize)(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n\n    if ((0, _array.arraySize)(a).length > 2 || (0, _array.arraySize)(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});\nexports.createKron = createKron;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createKron"]],"~:compiled-at",1619135723849,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$kron.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/kron.js\"],\n\"sourcesContent\":[\"shadow$provide[133] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createKron = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'kron';\\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\\nvar createKron = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      multiplyScalar = _ref.multiplyScalar;\\n\\n  /**\\n     * Calculates the kronecker product of 2 matrices or vectors.\\n     *\\n     * NOTE: If a one dimensional vector / matrix is given, it will be\\n     * wrapped so its two dimensions.\\n     * See the examples.\\n     *\\n     * Syntax:\\n     *\\n     *    math.kron(x, y)\\n     *\\n     * Examples:\\n     *\\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\\n     *\\n     *    math.kron([1,1], [2,3,4])\\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\\n     *\\n     * See also:\\n     *\\n     *    multiply, dot, cross\\n     *\\n     * @param  {Array | Matrix} x     First vector\\n     * @param  {Array | Matrix} y     Second vector\\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\\n     */\\n  return typed(name, {\\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\\n      return matrix(_kron(x.toArray(), y.toArray()));\\n    },\\n    'Matrix, Array': function MatrixArray(x, y) {\\n      return matrix(_kron(x.toArray(), y));\\n    },\\n    'Array, Matrix': function ArrayMatrix(x, y) {\\n      return matrix(_kron(x, y.toArray()));\\n    },\\n    'Array, Array': _kron\\n  });\\n  /**\\n     * Calculate the kronecker product of two matrices / vectors\\n     * @param {Array} a  First vector\\n     * @param {Array} b  Second vector\\n     * @returns {Array} Returns the kronecker product of x and y\\n     * @private\\n     */\\n\\n  function _kron(a, b) {\\n    // Deal with the dimensions of the matricies.\\n    if ((0, _array.arraySize)(a).length === 1) {\\n      // Wrap it in a 2D Matrix\\n      a = [a];\\n    }\\n\\n    if ((0, _array.arraySize)(b).length === 1) {\\n      // Wrap it in a 2D Matrix\\n      b = [b];\\n    }\\n\\n    if ((0, _array.arraySize)(a).length > 2 || (0, _array.arraySize)(b).length > 2) {\\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\\n    }\\n\\n    var t = [];\\n    var r = [];\\n    return a.map(function (a) {\\n      return b.map(function (b) {\\n        r = [];\\n        t.push(r);\\n        return a.map(function (y) {\\n          return b.map(function (x) {\\n            return r.push(multiplyScalar(y, x));\\n          });\\n        });\\n      });\\n    }) && t;\\n  }\\n});\\nexports.createKron = createKron;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createKron\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_kron\",\"a\",\"b\",\"arraySize\",\"length\",\"RangeError\",\"JSON\",\"stringify\",\"t\",\"r\",\"map\",\"push\",\"y\",\"x\",\"multiplyScalar\",\"typed\",\"matrix\",\"MatrixMatrix\",\"toArray\",\"MatrixArray\",\"ArrayMatrix\"]\n}\n"]