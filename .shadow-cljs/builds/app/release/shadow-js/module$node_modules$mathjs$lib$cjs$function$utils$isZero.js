["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isZero.js"],"~:js","shadow$provide[55]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIsZero=void 0;var q=b(38);c=b(25);var f=b(50);b=(0,c.factory)(\"isZero\",[\"typed\"],function(u){u=u.typed;return u(\"isZero\",{number:f.isZeroNumber,BigNumber:function(k){return k.isZero()},Complex:function(k){return 0===k.re&&0===k.im},Fraction:function(k){return 1===k.d&&0===k.n},Unit:function(k){return this(k.value)},\"Array | Matrix\":function(k){return(0,q.deepMap)(k,this)}})});a.createIsZero=b}","~:source","shadow$provide[55] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsZero = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'isZero';\nvar dependencies = ['typed'];\nvar createIsZero = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                     // returns true\n   *    math.isZero(2)                     // returns false\n   *    math.isZero(0.5)                   // returns false\n   *    math.isZero(math.bignumber(0))     // returns true\n   *    math.isZero(math.fraction(0))      // returns true\n   *    math.isZero(math.fraction(1,3))    // returns false\n   *    math.isZero(math.complex('2 - 4i') // returns false\n   *    math.isZero(math.complex('0i')     // returns true\n   *    math.isZero('0')                   // returns true\n   *    math.isZero('2')                   // returns false\n   *    math.isZero([2, 0, -3]')           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _index.isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsZero = createIsZero;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","number","BigNumber","Fraction","createIsZero"]],"~:compiled-at",1619135723756,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isZero.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA8B,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,CAAD,CAAO,CACtFC,CAAAA,CAAQD,CAAKC,CAAAA,KAmCjB,OAAOA,EAAA,CAtCEH,QAsCF,CAAY,CACjBI,OAAQN,CAAOO,CAAAA,YADE,CAEjBC,UAAWA,QAAkB,CAACC,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,MAAF,EADwB,CAFhB,CAKjBC,QAASA,QAAgB,CAACF,CAAD,CAAI,CAC3B,MAAgB,EAAhB,GAAOA,CAAEG,CAAAA,EAAT,EAA8B,CAA9B,GAAqBH,CAAEI,CAAAA,EADI,CALZ,CAQjBC,SAAUA,QAAiB,CAACL,CAAD,CAAI,CAC7B,MAAe,EAAf,GAAOA,CAAEM,CAAAA,CAAT,EAA4B,CAA5B,GAAoBN,CAAEO,CAAAA,CADO,CARd,CAWjBC,KAAMA,QAAa,CAACR,CAAD,CAAI,CACrB,MAAO,KAAA,CAAKA,CAAEb,CAAAA,KAAP,CADc,CAXN,CAcjB,iBAAkBsB,QAAoB,CAACT,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,CAAYqB,CAAAA,OAAhB,EAAyBV,CAAzB,CAA4B,IAA5B,CADiC,CAdzB,CAAZ,CApCmF,CAA1D,CAuDlChB,EAAQI,CAAAA,YAAR,CAAuBA,CAvEsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isZero.js\"],\n\"sourcesContent\":[\"shadow$provide[55] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsZero = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'isZero';\\nvar dependencies = ['typed'];\\nvar createIsZero = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is zero.\\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\\n   * `Complex`, and `Unit`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isZero(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isZero(0)                     // returns true\\n   *    math.isZero(2)                     // returns false\\n   *    math.isZero(0.5)                   // returns false\\n   *    math.isZero(math.bignumber(0))     // returns true\\n   *    math.isZero(math.fraction(0))      // returns true\\n   *    math.isZero(math.fraction(1,3))    // returns false\\n   *    math.isZero(math.complex('2 - 4i') // returns false\\n   *    math.isZero(math.complex('0i')     // returns true\\n   *    math.isZero('0')                   // returns true\\n   *    math.isZero('2')                   // returns false\\n   *    math.isZero([2, 0, -3]')           // returns [false, true, false]\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isPositive, isNegative, isInteger\\n   *\\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\\n   * @return {boolean}  Returns true when `x` is zero.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: _index.isZeroNumber,\\n    BigNumber: function BigNumber(x) {\\n      return x.isZero();\\n    },\\n    Complex: function Complex(x) {\\n      return x.re === 0 && x.im === 0;\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.d === 1 && x.n === 0;\\n    },\\n    Unit: function Unit(x) {\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsZero = createIsZero;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsZero\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"isZeroNumber\",\"BigNumber\",\"x\",\"isZero\",\"Complex\",\"re\",\"im\",\"Fraction\",\"d\",\"n\",\"Unit\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]