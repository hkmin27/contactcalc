["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/row.js"],"~:js","shadow$provide[144]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRow=void 0;c=b(25);var q=b(15),f=b(24);b=(0,c.factory)(\"row\",[\"typed\",\"Index\",\"matrix\",\"range\"],function(u){function k(l,h){if(2!==l.size().length)throw Error(\"Only two dimensional matrix is supported\");(0,f.validateIndex)(h,l.size()[0]);var n=d(0,l.size()[1]);h=new p(h,n);return l.subset(h)}var t=u.typed,p=u.Index,g=u.matrix,d=u.range;return t(\"row\",{\"Matrix, number\":k,\"Array, number\":function(l,h){return k(g((0,\nq.clone)(l)),h).valueOf()}})});a.createRow=b}","~:source","shadow$provide[144] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRow = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix((0, _object.clone)(value)), row).valueOf();\n    }\n  });\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    (0, _array.validateIndex)(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});\nexports.createRow = createRow;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createRow","__esModule","value"]],"~:compiled-at",1619135723887,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$row.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAUR,CAAA,CAAQ,EAAR,CAAd,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,OAAVA,CAAmB,QAAnBA,CAA6B,OAA7BA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CAwCvFC,QAASA,EAAI,CAACT,CAAD,CAAQU,CAAR,CAAa,CAExB,GAA4B,CAA5B,GAAIV,CAAMW,CAAAA,IAAN,EAAaC,CAAAA,MAAjB,CACE,KAAUC,MAAJ,CAAU,0CAAV,CAAN,CAGF,CAAC,CAAA,CAAGT,CAAOU,CAAAA,aAAX,EAA0BJ,CAA1B,CAA+BV,CAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAA/B,CACA,KAAII,EAAcC,CAAA,CAAM,CAAN,CAAShB,CAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAAT,CACdM,EAAAA,CAAQ,IAAIC,CAAJ,CAAUR,CAAV,CAAeK,CAAf,CACZ,OAAOf,EAAMmB,CAAAA,MAAN,CAAaF,CAAb,CATiB,CAxC6D,IACnFG,EAAQZ,CAAKY,CAAAA,KADsE,CAEnFF,EAAQV,CAAKU,CAAAA,KAFsE,CAGnFG,EAASb,CAAKa,CAAAA,MAHqE,CAInFL,EAAQR,CAAKQ,CAAAA,KAuBjB,OAAOI,EAAA,CA7BEd,KA6BF,CAAY,CACjB,iBAAkBG,CADD,CAEjB,gBAAiBa,QAAoB,CAACtB,CAAD,CAAQU,CAAR,CAAa,CAChD,MAAOD,EAAA,CAAKY,CAAA,CAAO,CAAC,CAAA;AAAGlB,CAAQoB,CAAAA,KAAZ,EAAmBvB,CAAnB,CAAP,CAAL,CAAwCU,CAAxC,CAA6Cc,CAAAA,OAA7C,EADyC,CAFjC,CAAZ,CA3BgF,CAA1D,CAoD/B3B,EAAQI,CAAAA,SAAR,CAAoBA,CApE0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/row.js\"],\n\"sourcesContent\":[\"shadow$provide[144] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRow = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar name = 'row';\\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\\nvar createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Index = _ref.Index,\\n      matrix = _ref.matrix,\\n      range = _ref.range;\\n\\n  /**\\n   * Return a row from a Matrix.\\n   *\\n   * Syntax:\\n   *\\n   *     math.row(value, index)\\n   *\\n   * Example:\\n   *\\n   *     // get a row\\n   *     const d = [[1, 2], [3, 4]]\\n   *     math.row(d, 1) // returns [[3, 4]]\\n   *\\n   * See also:\\n   *\\n   *     column\\n   *\\n   * @param {Array | Matrix } value   An array or matrix\\n   * @param {number} row              The index of the row\\n   * @return {Array | Matrix}         The retrieved row\\n   */\\n  return typed(name, {\\n    'Matrix, number': _row,\\n    'Array, number': function ArrayNumber(value, row) {\\n      return _row(matrix((0, _object.clone)(value)), row).valueOf();\\n    }\\n  });\\n  /**\\n   * Retrieve a row of a matrix\\n   * @param {Matrix } value  A matrix\\n   * @param {number} row     The index of the row\\n   * @return {Matrix}        The retrieved row\\n   */\\n\\n  function _row(value, row) {\\n    // check dimensions\\n    if (value.size().length !== 2) {\\n      throw new Error('Only two dimensional matrix is supported');\\n    }\\n\\n    (0, _array.validateIndex)(row, value.size()[0]);\\n    var columnRange = range(0, value.size()[1]);\\n    var index = new Index(row, columnRange);\\n    return value.subset(index);\\n  }\\n});\\nexports.createRow = createRow;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRow\",\"_factory\",\"_object\",\"_array\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_row\",\"row\",\"size\",\"length\",\"Error\",\"validateIndex\",\"columnRange\",\"range\",\"index\",\"Index\",\"subset\",\"typed\",\"matrix\",\"ArrayNumber\",\"clone\",\"valueOf\"]\n}\n"]