["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js"],"~:js","shadow$provide[252]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAccessorNode=void 0;var q=b(14),f=b(147);c=b(25);var u=b(251);b=(0,c.factory)(\"AccessorNode\",[\"subset\",\"Node\"],function(k){function t(l,h){if(!(this instanceof t))throw new SyntaxError(\"Constructor must be called with the new operator\");if(!(0,q.isNode)(l))throw new TypeError('Node expected for parameter \"object\"');if(!(0,q.isIndexNode)(h))throw new TypeError('IndexNode expected for parameter \"index\"');\nthis.object=l||null;this.index=h;Object.defineProperty(this,\"name\",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():\"\":this.object.name||\"\"}.bind(this),set:function(){throw Error(\"Cannot assign a new name, name is read-only\");}})}function p(l){return!((0,q.isAccessorNode)(l)||(0,q.isArrayNode)(l)||(0,q.isConstantNode)(l)||(0,q.isFunctionNode)(l)||(0,q.isObjectNode)(l)||(0,q.isParenthesisNode)(l)||(0,q.isSymbolNode)(l))}var g=k.subset;k=k.Node;var d=(0,\nu.accessFactory)({subset:g});t.prototype=new k;t.prototype.type=\"AccessorNode\";t.prototype.isAccessorNode=!0;t.prototype._compile=function(l,h){var n=this.object._compile(l,h),r=this.index._compile(l,h);if(this.index.isObjectProperty()){var v=this.index.getObjectProperty();return function(C,z,w){return(0,f.getSafeProperty)(n(C,z,w),v)}}return function(C,z,w){w=n(C,z,w);C=r(C,z,w);return d(w,C)}};t.prototype.forEach=function(l){l(this.object,\"object\",this);l(this.index,\"index\",this)};t.prototype.map=\nfunction(l){return new t(this._ifNode(l(this.object,\"object\",this)),this._ifNode(l(this.index,\"index\",this)))};t.prototype.clone=function(){return new t(this.object,this.index)};t.prototype._toString=function(l){var h=this.object.toString(l);p(this.object)&&(h=\"(\"+h+\")\");return h+this.index.toString(l)};t.prototype.toHTML=function(l){var h=this.object.toHTML(l);p(this.object)&&(h='\\x3cspan class\\x3d\"math-parenthesis math-round-parenthesis\"\\x3e(\\x3c/span\\x3e'+h+'\\x3cspan class\\x3d\"math-parenthesis math-round-parenthesis\"\\x3e)\\x3c/span\\x3e');\nreturn h+this.index.toHTML(l)};t.prototype._toTex=function(l){var h=this.object.toTex(l);p(this.object)&&(h=\"\\\\left(' + object + '\\\\right)\");return h+this.index.toTex(l)};t.prototype.toJSON=function(){return{mathjs:\"AccessorNode\",object:this.object,index:this.index}};t.fromJSON=function(l){return new t(l.object,l.index)};return t},{isClass:!0,isNode:!0});a.createAccessorNode=b}","~:source","shadow$provide[252] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccessorNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _access = require(\"./utils/access.js\");\n\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nvar createAccessorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!(0, _is.isNode)(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!(0, _is.isIndexNode)(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(\\' + object + \\'\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));\n  }\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAccessorNode = createAccessorNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$customs","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$expression$node$utils$access"]],"~:properties",["^5",["map","object","subset","forEach","fromJSON","index","isClass","toHTML","prototype","_toString","isNode","_toTex","createAccessorNode","__esModule","name","value","isAccessorNode","mathjs","type","clone","set","_compile","get","toJSON"]],"~:compiled-at",1619135723955,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$node$AccessorNode.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js\"],\n\"sourcesContent\":[\"shadow$provide[252] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAccessorNode = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _customs = require(\\\"../../utils/customs.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _access = require(\\\"./utils/access.js\\\");\\n\\nvar name = 'AccessorNode';\\nvar dependencies = ['subset', 'Node'];\\nvar createAccessorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var subset = _ref.subset,\\n      Node = _ref.Node;\\n  var access = (0, _access.accessFactory)({\\n    subset: subset\\n  });\\n  /**\\n   * @constructor AccessorNode\\n   * @extends {Node}\\n   * Access an object property or get a matrix subset\\n   *\\n   * @param {Node} object                 The object from which to retrieve\\n   *                                      a property or subset.\\n   * @param {IndexNode} index             IndexNode containing ranges\\n   */\\n\\n  function AccessorNode(object, index) {\\n    if (!(this instanceof AccessorNode)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    if (!(0, _is.isNode)(object)) {\\n      throw new TypeError('Node expected for parameter \\\"object\\\"');\\n    }\\n\\n    if (!(0, _is.isIndexNode)(index)) {\\n      throw new TypeError('IndexNode expected for parameter \\\"index\\\"');\\n    }\\n\\n    this.object = object || null;\\n    this.index = index; // readonly property name\\n\\n    Object.defineProperty(this, 'name', {\\n      get: function () {\\n        if (this.index) {\\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\\n        } else {\\n          return this.object.name || '';\\n        }\\n      }.bind(this),\\n      set: function set() {\\n        throw new Error('Cannot assign a new name, name is read-only');\\n      }\\n    });\\n  }\\n\\n  AccessorNode.prototype = new Node();\\n  AccessorNode.prototype.type = 'AccessorNode';\\n  AccessorNode.prototype.isAccessorNode = true;\\n  /**\\n   * Compile a node into a JavaScript function.\\n   * This basically pre-calculates as much as possible and only leaves open\\n   * calculations which depend on a dynamic scope with variables.\\n   * @param {Object} math     Math.js namespace with functions and constants.\\n   * @param {Object} argNames An object with argument names as key and `true`\\n   *                          as value. Used in the SymbolNode to optimize\\n   *                          for arguments from user assigned functions\\n   *                          (see FunctionAssignmentNode) or special symbols\\n   *                          like `end` (see IndexNode).\\n   * @return {function} Returns a function which can be called like:\\n   *                        evalNode(scope: Object, args: Object, context: *)\\n   */\\n\\n  AccessorNode.prototype._compile = function (math, argNames) {\\n    var evalObject = this.object._compile(math, argNames);\\n\\n    var evalIndex = this.index._compile(math, argNames);\\n\\n    if (this.index.isObjectProperty()) {\\n      var prop = this.index.getObjectProperty();\\n      return function evalAccessorNode(scope, args, context) {\\n        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);\\n      };\\n    } else {\\n      return function evalAccessorNode(scope, args, context) {\\n        var object = evalObject(scope, args, context);\\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\\n\\n        return access(object, index);\\n      };\\n    }\\n  };\\n  /**\\n   * Execute a callback for each of the child nodes of this node\\n   * @param {function(child: Node, path: string, parent: Node)} callback\\n   */\\n\\n\\n  AccessorNode.prototype.forEach = function (callback) {\\n    callback(this.object, 'object', this);\\n    callback(this.index, 'index', this);\\n  };\\n  /**\\n   * Create a new AccessorNode having it's childs be the results of calling\\n   * the provided callback function for each of the childs of the original node.\\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\\n   * @returns {AccessorNode} Returns a transformed copy of the node\\n   */\\n\\n\\n  AccessorNode.prototype.map = function (callback) {\\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\\n  };\\n  /**\\n   * Create a clone of this node, a shallow copy\\n   * @return {AccessorNode}\\n   */\\n\\n\\n  AccessorNode.prototype.clone = function () {\\n    return new AccessorNode(this.object, this.index);\\n  };\\n  /**\\n   * Get string representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AccessorNode.prototype._toString = function (options) {\\n    var object = this.object.toString(options);\\n\\n    if (needParenthesis(this.object)) {\\n      object = '(' + object + ')';\\n    }\\n\\n    return object + this.index.toString(options);\\n  };\\n  /**\\n   * Get HTML representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AccessorNode.prototype.toHTML = function (options) {\\n    var object = this.object.toHTML(options);\\n\\n    if (needParenthesis(this.object)) {\\n      object = '<span class=\\\"math-parenthesis math-round-parenthesis\\\">(</span>' + object + '<span class=\\\"math-parenthesis math-round-parenthesis\\\">)</span>';\\n    }\\n\\n    return object + this.index.toHTML(options);\\n  };\\n  /**\\n   * Get LaTeX representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AccessorNode.prototype._toTex = function (options) {\\n    var object = this.object.toTex(options);\\n\\n    if (needParenthesis(this.object)) {\\n      object = '\\\\\\\\left(\\\\' + object + \\\\'\\\\\\\\right)';\\n    }\\n\\n    return object + this.index.toTex(options);\\n  };\\n  /**\\n   * Get a JSON representation of the node\\n   * @returns {Object}\\n   */\\n\\n\\n  AccessorNode.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'AccessorNode',\\n      object: this.object,\\n      index: this.index\\n    };\\n  };\\n  /**\\n   * Instantiate an AccessorNode from its JSON representation\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"AccessorNode\\\", object: ..., index: ...}`,\\n   *                       where mathjs is optional\\n   * @returns {AccessorNode}\\n   */\\n\\n\\n  AccessorNode.fromJSON = function (json) {\\n    return new AccessorNode(json.object, json.index);\\n  };\\n  /**\\n   * Are parenthesis needed?\\n   * @private\\n   */\\n\\n\\n  function needParenthesis(node) {\\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\\n    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));\\n  }\\n\\n  return AccessorNode;\\n}, {\\n  isClass: true,\\n  isNode: true\\n});\\nexports.createAccessorNode = createAccessorNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAccessorNode\",\"_is\",\"_customs\",\"_factory\",\"_access\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"AccessorNode\",\"object\",\"index\",\"SyntaxError\",\"isNode\",\"TypeError\",\"isIndexNode\",\"get\",\"isObjectProperty\",\"getObjectProperty\",\"bind\",\"set\",\"Error\",\"needParenthesis\",\"node\",\"isAccessorNode\",\"isArrayNode\",\"isConstantNode\",\"isFunctionNode\",\"isObjectNode\",\"isParenthesisNode\",\"isSymbolNode\",\"subset\",\"Node\",\"access\",\"accessFactory\",\"prototype\",\"type\",\"_compile\",\"AccessorNode.prototype._compile\",\"math\",\"argNames\",\"evalObject\",\"evalIndex\",\"prop\",\"evalAccessorNode\",\"scope\",\"args\",\"context\",\"getSafeProperty\",\"forEach\",\"AccessorNode.prototype.forEach\",\"callback\",\"map\",\"AccessorNode.prototype.map\",\"_ifNode\",\"clone\",\"AccessorNode.prototype.clone\",\"_toString\",\"AccessorNode.prototype._toString\",\"options\",\"toString\",\"toHTML\",\"AccessorNode.prototype.toHTML\",\"_toTex\",\"AccessorNode.prototype._toTex\",\"toTex\",\"toJSON\",\"AccessorNode.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"AccessorNode.fromJSON\",\"json\",\"isClass\"]\n}\n"]