["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/divide.js"],"~:js","shadow$provide[527]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createDivide=void 0;c=b(25);var q=b(15),f=b(76),u=b(77);b=(0,c.factory)(\"divide\",\"typed matrix multiply equalScalar divideScalar inv\".split(\" \"),function(k){var t=k.typed,p=k.matrix,g=k.multiply,d=k.equalScalar,l=k.divideScalar,h=k.inv,n=(0,f.createAlgorithm11)({typed:t,equalScalar:d}),r=(0,u.createAlgorithm14)({typed:t});return t(\"divide\",(0,q.extend)({\"Array | Matrix, Array | Matrix\":function(v,C){return g(v,\nh(C))},\"DenseMatrix, any\":function(v,C){return r(v,C,l,!1)},\"SparseMatrix, any\":function(v,C){return n(v,C,l,!1)},\"Array, any\":function(v,C){return r(p(v),C,l,!1).valueOf()},\"any, Array | Matrix\":function(v,C){return g(v,h(C))}},l.signatures))});a.createDivide=b}","~:source","shadow$provide[527] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivide = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm11.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nvar createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv;\n  var algorithm11 = (0, _algorithm.createAlgorithm11)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', (0, _object.extend)({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});\nexports.createDivide = createDivide;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm14","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm11","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["typed","createDivide","__esModule","value","equalScalar"]],"~:compiled-at",1619135724020,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$divide.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAUR,CAAA,CAAQ,EAAR,CAAd,CAEIS,EAAaT,CAAA,CAAQ,EAAR,CAFjB,CAIIU,EAAcV,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA8B,CAAC,CAAA,CAAGC,CAASI,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,oDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACe,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACtFC,EAAQD,CAAKC,CAAAA,KADyE,CAEtFC,EAASF,CAAKE,CAAAA,MAFwE,CAGtFC,EAAWH,CAAKG,CAAAA,QAHsE,CAItFC,EAAcJ,CAAKI,CAAAA,WAJmE,CAKtFC,EAAeL,CAAKK,CAAAA,YALkE,CAMtFC,EAAMN,CAAKM,CAAAA,GAN2E,CAOtFC,EAAc,CAAC,CAAA,CAAGZ,CAAWa,CAAAA,iBAAf,EAAkC,CAClDP,MAAOA,CAD2C,CAElDG,YAAaA,CAFqC,CAAlC,CAPwE,CAWtFK,EAAc,CAAC,CAAA,CAAGb,CAAYc,CAAAA,iBAAhB,EAAmC,CACnDT,MAAOA,CAD4C,CAAnC,CAmClB,OAAOA,EAAA,CAAM,QAAN,CAAgB,CAAC,CAAA,CAAGP,CAAQiB,CAAAA,MAAZ,EAAoB,CAEzC,iCAAkCC,QAA+B,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAKtE,MAAOX,EAAA,CAASU,CAAT;AAAYP,CAAA,CAAIQ,CAAJ,CAAZ,CAL+D,CAF/B,CASzC,mBAAoBC,QAAuB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOL,EAAA,CAAYI,CAAZ,CAAeC,CAAf,CAAkBT,CAAlB,CAAgC,CAAA,CAAhC,CADyC,CATT,CAYzC,oBAAqBW,QAAwB,CAACH,CAAD,CAAIC,CAAJ,CAAO,CAClD,MAAOP,EAAA,CAAYM,CAAZ,CAAeC,CAAf,CAAkBT,CAAlB,CAAgC,CAAA,CAAhC,CAD2C,CAZX,CAezC,aAAcY,QAAiB,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CAEpC,MAAOL,EAAA,CAAYP,CAAA,CAAOW,CAAP,CAAZ,CAAuBC,CAAvB,CAA0BT,CAA1B,CAAwC,CAAA,CAAxC,CAA+Ca,CAAAA,OAA/C,EAF6B,CAfG,CAmBzC,sBAAuBC,QAAuB,CAACN,CAAD,CAAIC,CAAJ,CAAO,CACnD,MAAOX,EAAA,CAASU,CAAT,CAAYP,CAAA,CAAIQ,CAAJ,CAAZ,CAD4C,CAnBZ,CAApB,CAsBpBT,CAAae,CAAAA,UAtBO,CAAhB,CA9CmF,CAA1D,CAsElChC,EAAQI,CAAAA,YAAR,CAAuBA,CAxFuC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/divide.js\"],\n\"sourcesContent\":[\"shadow$provide[527] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDivide = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _algorithm = require(\\\"../../type/matrix/utils/algorithm11.js\\\");\\n\\nvar _algorithm2 = require(\\\"../../type/matrix/utils/algorithm14.js\\\");\\n\\nvar name = 'divide';\\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\\nvar createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      multiply = _ref.multiply,\\n      equalScalar = _ref.equalScalar,\\n      divideScalar = _ref.divideScalar,\\n      inv = _ref.inv;\\n  var algorithm11 = (0, _algorithm.createAlgorithm11)({\\n    typed: typed,\\n    equalScalar: equalScalar\\n  });\\n  var algorithm14 = (0, _algorithm2.createAlgorithm14)({\\n    typed: typed\\n  });\\n  /**\\n   * Divide two values, `x / y`.\\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\\n   *\\n   * Syntax:\\n   *\\n   *    math.divide(x, y)\\n   *\\n   * Examples:\\n   *\\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\\n   *\\n   *    const a = math.complex(5, 14)\\n   *    const b = math.complex(4, 1)\\n   *    math.divide(a, b)            // returns Complex 2 + 3i\\n   *\\n   *    const c = [[7, -6], [13, -4]]\\n   *    const d = [[1, 2], [4, 3]]\\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\\n   *\\n   *    const e = math.unit('18 km')\\n   *    math.divide(e, 4.5)          // returns Unit 4 km\\n   *\\n   * See also:\\n   *\\n   *    multiply\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\\n   */\\n\\n  return typed('divide', (0, _object.extend)({\\n    // we extend the signatures of divideScalar with signatures dealing with matrices\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\\n      // TODO: implement matrix right division using pseudo inverse\\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\\n      return multiply(x, inv(y));\\n    },\\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\\n      return algorithm14(x, y, divideScalar, false);\\n    },\\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\\n      return algorithm11(x, y, divideScalar, false);\\n    },\\n    'Array, any': function ArrayAny(x, y) {\\n      // use matrix implementation\\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\\n    },\\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\\n      return multiply(x, inv(y));\\n    }\\n  }, divideScalar.signatures));\\n});\\nexports.createDivide = createDivide;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDivide\",\"_factory\",\"_object\",\"_algorithm\",\"_algorithm2\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"multiply\",\"equalScalar\",\"divideScalar\",\"inv\",\"algorithm11\",\"createAlgorithm11\",\"algorithm14\",\"createAlgorithm14\",\"extend\",\"ArrayMatrixArrayMatrix\",\"x\",\"y\",\"DenseMatrixAny\",\"SparseMatrixAny\",\"ArrayAny\",\"valueOf\",\"anyArrayMatrix\",\"signatures\"]\n}\n"]