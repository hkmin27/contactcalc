["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/seedrandom/index.js"],"~:js","shadow$provide[552]=function(c,b,y,a){c=b(544);a=b(545);var q=b(546),f=b(547),u=b(548),k=b(549);b=b(551);b.alea=c;b.xor128=a;b.xorwow=q;b.xorshift7=f;b.xor4096=u;b.tychei=k;y.exports=b}","~:source","shadow$provide[552] = function(global,require,module,exports) {\n// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$seedrandom$seedrandom","~$module$node_modules$seedrandom$lib$xorshift7","~$module$node_modules$seedrandom$lib$xor4096","~$module$node_modules$seedrandom$lib$tychei","~$shadow.js","~$module$node_modules$seedrandom$lib$xorwow","~$module$node_modules$seedrandom$lib$xor128","~$module$node_modules$seedrandom$lib$alea"]],"~:properties",["^5",["xor128","tychei","xorwow","alea","xorshift7","xor4096"]],"~:compiled-at",1619135724030,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$seedrandom$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAa1DC,CAAAA,CAAOH,CAAA,CAAQ,GAAR,CAKPI,EAAAA,CAASJ,CAAA,CAAQ,GAAR,CAKb,KAAIK,EAASL,CAAA,CAAQ,GAAR,CAAb,CAQIM,EAAYN,CAAA,CAAQ,GAAR,CARhB,CAiBIO,EAAUP,CAAA,CAAQ,GAAR,CAjBd,CAwBIQ,EAASR,CAAA,CAAQ,GAAR,CAITS,EAAAA,CAAKT,CAAA,CAAQ,GAAR,CAETS,EAAGN,CAAAA,IAAH,CAAUA,CACVM,EAAGL,CAAAA,MAAH,CAAYA,CACZK,EAAGJ,CAAAA,MAAH,CAAYA,CACZI,EAAGH,CAAAA,SAAH,CAAeA,CACfG,EAAGF,CAAAA,OAAH,CAAaA,CACbE,EAAGD,CAAAA,MAAH,CAAYA,CAEZP,EAAOC,CAAAA,OAAP,CAAiBO,CA5D6C;\",\n\"sources\":[\"node_modules/seedrandom/index.js\"],\n\"sourcesContent\":[\"shadow$provide[552] = function(global,require,module,exports) {\\n// A library of seedable RNGs implemented in Javascript.\\n//\\n// Usage:\\n//\\n// var seedrandom = require('seedrandom');\\n// var random = seedrandom(1); // or any seed.\\n// var x = random();       // 0 <= x < 1.  Every bit is random.\\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\\n\\n// alea, a 53-bit multiply-with-carry generator by Johannes Baag\\u00f8e.\\n// Period: ~2^116\\n// Reported to pass all BigCrush tests.\\nvar alea = require('./lib/alea');\\n\\n// xor128, a pure xor-shift generator by George Marsaglia.\\n// Period: 2^128-1.\\n// Reported to fail: MatrixRank and LinearComp.\\nvar xor128 = require('./lib/xor128');\\n\\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\\n// Period: 2^192-2^32\\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\\nvar xorwow = require('./lib/xorwow');\\n\\n// xorshift7, by Fran\\u00e7ois Panneton and Pierre L'ecuyer, takes\\n// a different approach: it adds robustness by allowing more shifts\\n// than Marsaglia's original three.  It is a 7-shift generator\\n// with 256 bits, that passes BigCrush with no systmatic failures.\\n// Period 2^256-1.\\n// No systematic BigCrush failures reported.\\nvar xorshift7 = require('./lib/xorshift7');\\n\\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\\n// very long period that also adds a Weyl generator. It also passes\\n// BigCrush with no systematic failures.  Its long period may\\n// be useful if you have many generators and need to avoid\\n// collisions.\\n// Period: 2^4128-2^32.\\n// No systematic BigCrush failures reported.\\nvar xor4096 = require('./lib/xor4096');\\n\\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\\n// number generator derived from ChaCha, a modern stream cipher.\\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\\n// Period: ~2^127\\n// No systematic BigCrush failures reported.\\nvar tychei = require('./lib/tychei');\\n\\n// The original ARC4-based prng included in this library.\\n// Period: ~2^1600\\nvar sr = require('./seedrandom');\\n\\nsr.alea = alea;\\nsr.xor128 = xor128;\\nsr.xorwow = xorwow;\\nsr.xorshift7 = xorshift7;\\nsr.xor4096 = xor4096;\\nsr.tychei = tychei;\\n\\nmodule.exports = sr;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"alea\",\"xor128\",\"xorwow\",\"xorshift7\",\"xor4096\",\"tychei\",\"sr\"]\n}\n"]