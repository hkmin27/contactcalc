["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js"],"~:js","shadow$provide[105]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createXgcd=void 0;c=b(25);var q=b(50);b=(0,c.factory)(\"xgcd\",[\"typed\",\"config\",\"matrix\",\"BigNumber\"],function(f){var u=f.typed,k=f.config,t=f.matrix,p=f.BigNumber;return u(\"xgcd\",{\"number, number\":function(g,d){g=(0,q.xgcdNumber)(g,d);return\"Array\"===k.matrix?g:t(g)},\"BigNumber, BigNumber\":function(g,d){var l=new p(0);var h=new p(1);var n=l,r=h,v=h,C=l;if(!g.isInt()||!d.isInt())throw Error(\"Parameters in function xgcd must be integer numbers\");\nfor(;!d.isZero();){h=g.div(d).floor();var z=g.mod(d);g=n;n=r.minus(h.times(n));r=g;g=v;v=C.minus(h.times(v));C=g;g=d;d=z}d=g.lt(l)?[g.neg(),r.neg(),C.neg()]:[g,g.isZero()?0:r,C];return\"Array\"===k.matrix?d:t(d)}})});a.createXgcd=b}","~:source","shadow$provide[105] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXgcd = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'xgcd';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(a, b) {\n      var res = (0, _index.xgcdNumber)(a, b);\n      return config.matrix === 'Array' ? res : matrix(res);\n    },\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n\n  });\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n\n  function _xgcdBigNumber(a, b) {\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var // used to swap two variables\n    t;\n    var // quotient\n    q;\n    var // remainder\n    r;\n    var zero = new BigNumber(0);\n    var one = new BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n});\nexports.createXgcd = createXgcd;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createXgcd"]],"~:compiled-at",1619135723786,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$xgcd.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,QAApBA,CAA8B,WAA9BA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACpFC,EAAQD,CAAKC,CAAAA,KADuE,CAEpFC,EAASF,CAAKE,CAAAA,MAFsE,CAGpFC,EAASH,CAAKG,CAAAA,MAHsE,CAIpFC,EAAYJ,CAAKI,CAAAA,SAyBrB,OAAOH,EAAA,CA/BEH,MA+BF,CAAY,CACjB,iBAAkBO,QAAqB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACxCC,CAAAA,CAAM,CAAC,CAAA,CAAGZ,CAAOa,CAAAA,UAAX,EAAuBH,CAAvB,CAA0BC,CAA1B,CACV,OAAyB,OAAlB,GAAAL,CAAOC,CAAAA,MAAP,CAA4BK,CAA5B,CAAkCL,CAAA,CAAOK,CAAP,CAFG,CAD7B,CAKjB,uBAWFE,QAAuB,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CAI5B,IAIII,EAAO,IAAIP,CAAJ,CAAc,CAAd,CACPQ,KAAAA,EAAM,IAAIR,CAAJ,CAAc,CAAd,CACV,KAAIS,EAAIF,CAAR,CACIG,EAAQF,CADZ,CAEIG,EAAIH,CAFR,CAGII,EAAQL,CAEZ,IAAI,CAACL,CAAEW,CAAAA,KAAF,EAAL,EAAkB,CAACV,CAAEU,CAAAA,KAAF,EAAnB,CACE,KAAUC,MAAJ,CAAU,qDAAV,CAAN;AAGF,IAAA,CAAO,CAACX,CAAEY,CAAAA,MAAF,EAAR,CAAA,CAAoB,CAClBC,CAAA,CAAId,CAAEe,CAAAA,GAAF,CAAMd,CAAN,CAASe,CAAAA,KAAT,EACJ,KAAAC,EAAIjB,CAAEkB,CAAAA,GAAF,CAAMjB,CAAN,CACJkB,EAAA,CAAIZ,CACJA,EAAA,CAAIC,CAAMY,CAAAA,KAAN,CAAYN,CAAEO,CAAAA,KAAF,CAAQd,CAAR,CAAZ,CACJC,EAAA,CAAQW,CACRA,EAAA,CAAIV,CACJA,EAAA,CAAIC,CAAMU,CAAAA,KAAN,CAAYN,CAAEO,CAAAA,KAAF,CAAQZ,CAAR,CAAZ,CACJC,EAAA,CAAQS,CACRnB,EAAA,CAAIC,CACJA,EAAA,CAAIgB,CAVc,CAgBlBf,CAAA,CADEF,CAAEsB,CAAAA,EAAF,CAAKjB,CAAL,CAAJ,CACQ,CAACL,CAAEuB,CAAAA,GAAF,EAAD,CAAUf,CAAMe,CAAAA,GAAN,EAAV,CAAuBb,CAAMa,CAAAA,GAAN,EAAvB,CADR,CAGQ,CAACvB,CAAD,CAAKA,CAAEa,CAAAA,MAAF,EAAD,CAAsB,CAAtB,CAAcL,CAAlB,CAA6BE,CAA7B,CAGR,OAAyB,OAAlB,GAAAd,CAAOC,CAAAA,MAAP,CAA4BK,CAA5B,CAAkCL,CAAA,CAAOK,CAAP,CAxCb,CAhBX,CAAZ,CA7BiF,CAA1D,CAwFhClB,EAAQI,CAAAA,UAAR,CAAqBA,CAtGyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js\"],\n\"sourcesContent\":[\"shadow$provide[105] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createXgcd = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'xgcd';\\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\\nvar createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      matrix = _ref.matrix,\\n      BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Calculate the extended greatest common divisor for two values.\\n   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\\n   *\\n   * Syntax:\\n   *\\n   *    math.xgcd(a, b)\\n   *\\n   * Examples:\\n   *\\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\\n   *    math.gcd(8, 12)              // returns 4\\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\\n   *\\n   * See also:\\n   *\\n   *    gcd, lcm\\n   *\\n   * @param {number | BigNumber} a  An integer number\\n   * @param {number | BigNumber} b  An integer number\\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\\n   */\\n  return typed(name, {\\n    'number, number': function numberNumber(a, b) {\\n      var res = (0, _index.xgcdNumber)(a, b);\\n      return config.matrix === 'Array' ? res : matrix(res);\\n    },\\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\\n\\n  });\\n  /**\\n   * Calculate xgcd for two BigNumbers\\n   * @param {BigNumber} a\\n   * @param {BigNumber} b\\n   * @return {BigNumber[]} result\\n   * @private\\n   */\\n\\n  function _xgcdBigNumber(a, b) {\\n    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\\n    var // used to swap two variables\\n    t;\\n    var // quotient\\n    q;\\n    var // remainder\\n    r;\\n    var zero = new BigNumber(0);\\n    var one = new BigNumber(1);\\n    var x = zero;\\n    var lastx = one;\\n    var y = one;\\n    var lasty = zero;\\n\\n    if (!a.isInt() || !b.isInt()) {\\n      throw new Error('Parameters in function xgcd must be integer numbers');\\n    }\\n\\n    while (!b.isZero()) {\\n      q = a.div(b).floor();\\n      r = a.mod(b);\\n      t = x;\\n      x = lastx.minus(q.times(x));\\n      lastx = t;\\n      t = y;\\n      y = lasty.minus(q.times(y));\\n      lasty = t;\\n      a = b;\\n      b = r;\\n    }\\n\\n    var res;\\n\\n    if (a.lt(zero)) {\\n      res = [a.neg(), lastx.neg(), lasty.neg()];\\n    } else {\\n      res = [a, !a.isZero() ? lastx : 0, lasty];\\n    }\\n\\n    return config.matrix === 'Array' ? res : matrix(res);\\n  }\\n});\\nexports.createXgcd = createXgcd;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createXgcd\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"matrix\",\"BigNumber\",\"numberNumber\",\"a\",\"b\",\"res\",\"xgcdNumber\",\"_xgcdBigNumber\",\"zero\",\"one\",\"x\",\"lastx\",\"y\",\"lasty\",\"isInt\",\"Error\",\"isZero\",\"q\",\"div\",\"floor\",\"r\",\"mod\",\"t\",\"minus\",\"times\",\"lt\",\"neg\"]\n}\n"]