["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js"],"~:js","shadow$provide[95]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm05=void 0;c=b(25);var q=b(22);b=(0,c.factory)(\"algorithm05\",[\"typed\",\"equalScalar\"],function(f){var u=f.typed,k=f.equalScalar;return function(t,p,g){var d=t._values,l=t._index,h=t._ptr,n=t._size,r=t._datatype,v=p._values,C=p._index,z=p._ptr,w=p._size,B=p._datatype;if(n.length!==w.length)throw new q.DimensionError(n.length,w.length);if(n[0]!==w[0]||n[1]!==w[1])throw new RangeError(\"Dimension mismatch. Matrix A (\"+\nn+\") must match Matrix B (\"+w+\")\");w=n[0];n=n[1];p=k;var x=0,D=g;if(\"string\"===typeof r&&r===B){var F=r;p=u.find(k,[F,F]);x=u.convert(0,F);D=u.find(g,[F,F])}g=d&&v?[]:void 0;r=[];B=[];var E=g?[]:void 0,G=g?[]:void 0,I=[],L=[],M,S;for(M=0;M<n;M++){B[M]=r.length;var P=M+1;var R=h[M];for(S=h[M+1];R<S;R++){var ba=l[R];r.push(ba);I[ba]=P;E&&(E[ba]=d[R])}R=z[M];for(S=z[M+1];R<S;R++)ba=C[R],I[ba]!==P&&r.push(ba),L[ba]=P,G&&(G[ba]=v[R]);if(g)for(R=B[M];R<r.length;){ba=r[R];S=I[ba];var Q=L[ba];if(S===P||Q===\nP)ba=D(S===P?E[ba]:x,Q===P?G[ba]:x),p(ba,x)?r.splice(R,1):(g.push(ba),R++)}}B[n]=r.length;return t.createSparseMatrix({values:g,index:r,ptr:B,size:[w,n],datatype:F})}});a.createAlgorithm05=b}","~:source","shadow$provide[95] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm05 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm05 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm05 = createAlgorithm05;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["values","index","__esModule","value","datatype","size","createAlgorithm05","ptr"]],"~:compiled-at",1619135723780,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm05.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js\"],\n\"sourcesContent\":[\"shadow$provide[95] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm05 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _DimensionError = require(\\\"../../../error/DimensionError.js\\\");\\n\\nvar name = 'algorithm05';\\nvar dependencies = ['typed', 'equalScalar'];\\nvar createAlgorithm05 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equalScalar = _ref.equalScalar;\\n\\n  /**\\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\\n   * Callback function invoked MAX(NNZA, NNZB) times\\n   *\\n   *\\n   *          \\u250c  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\\n   * C(i,j) = \\u2524\\n   *          \\u2514  0            ; otherwise\\n   *\\n   *\\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\\n   *\\n   * @return {Matrix}                    SparseMatrix (C)\\n   *\\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\\n   */\\n  return function algorithm05(a, b, callback) {\\n    // sparse matrix arrays\\n    var avalues = a._values;\\n    var aindex = a._index;\\n    var aptr = a._ptr;\\n    var asize = a._size;\\n    var adt = a._datatype; // sparse matrix arrays\\n\\n    var bvalues = b._values;\\n    var bindex = b._index;\\n    var bptr = b._ptr;\\n    var bsize = b._size;\\n    var bdt = b._datatype; // validate dimensions\\n\\n    if (asize.length !== bsize.length) {\\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\\n    } // check rows & columns\\n\\n\\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // equal signature to use\\n\\n    var eq = equalScalar; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string' && adt === bdt) {\\n      // datatype\\n      dt = adt; // find signature that matches (dt, dt)\\n\\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result arrays\\n\\n\\n    var cvalues = avalues && bvalues ? [] : undefined;\\n    var cindex = [];\\n    var cptr = []; // workspaces\\n\\n    var xa = cvalues ? [] : undefined;\\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\\n\\n    var wa = [];\\n    var wb = []; // vars\\n\\n    var i, j, k, k1; // loop columns\\n\\n    for (j = 0; j < columns; j++) {\\n      // update cptr\\n      cptr[j] = cindex.length; // columns mark\\n\\n      var mark = j + 1; // loop values A(:,j)\\n\\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\\n        // row\\n        i = aindex[k]; // push index\\n\\n        cindex.push(i); // update workspace\\n\\n        wa[i] = mark; // check we need to process values\\n\\n        if (xa) {\\n          xa[i] = avalues[k];\\n        }\\n      } // loop values B(:,j)\\n\\n\\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\\n        // row\\n        i = bindex[k]; // check row existed in A\\n\\n        if (wa[i] !== mark) {\\n          // push index\\n          cindex.push(i);\\n        } // update workspace\\n\\n\\n        wb[i] = mark; // check we need to process values\\n\\n        if (xb) {\\n          xb[i] = bvalues[k];\\n        }\\n      } // check we need to process values (non pattern matrix)\\n\\n\\n      if (cvalues) {\\n        // initialize first index in j\\n        k = cptr[j]; // loop index in j\\n\\n        while (k < cindex.length) {\\n          // row\\n          i = cindex[k]; // marks\\n\\n          var wai = wa[i];\\n          var wbi = wb[i]; // check Aij or Bij are nonzero\\n\\n          if (wai === mark || wbi === mark) {\\n            // matrix values @ i,j\\n            var va = wai === mark ? xa[i] : zero;\\n            var vb = wbi === mark ? xb[i] : zero; // Cij\\n\\n            var vc = cf(va, vb); // check for zero\\n\\n            if (!eq(vc, zero)) {\\n              // push value\\n              cvalues.push(vc); // increment pointer\\n\\n              k++;\\n            } else {\\n              // remove value @ i, do not increment pointer\\n              cindex.splice(k, 1);\\n            }\\n          }\\n        }\\n      }\\n    } // update cptr\\n\\n\\n    cptr[columns] = cindex.length; // return sparse matrix\\n\\n    return a.createSparseMatrix({\\n      values: cvalues,\\n      index: cindex,\\n      ptr: cptr,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm05 = createAlgorithm05;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm05\",\"_factory\",\"_DimensionError\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"equalScalar\",\"algorithm05\",\"a\",\"b\",\"callback\",\"avalues\",\"_values\",\"aindex\",\"_index\",\"aptr\",\"_ptr\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"bvalues\",\"bindex\",\"bptr\",\"bsize\",\"bdt\",\"length\",\"DimensionError\",\"RangeError\",\"rows\",\"columns\",\"eq\",\"zero\",\"cf\",\"dt\",\"find\",\"convert\",\"cvalues\",\"undefined\",\"cindex\",\"cptr\",\"xa\",\"xb\",\"wa\",\"wb\",\"j\",\"k1\",\"mark\",\"k\",\"i\",\"push\",\"wai\",\"wbi\",\"vc\",\"va\",\"vb\",\"splice\",\"createSparseMatrix\",\"values\",\"index\",\"ptr\",\"size\",\"datatype\"]\n}\n"]