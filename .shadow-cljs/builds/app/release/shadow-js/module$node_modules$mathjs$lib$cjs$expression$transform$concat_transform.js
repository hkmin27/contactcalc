["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/concat.transform.js"],"~:js","shadow$provide[588]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createConcatTransform=void 0;var q=b(14),f=b(250);c=b(25);var u=b(121);b=(0,c.factory)(\"concat\",[\"typed\",\"matrix\",\"isInteger\"],function(k){var t=k.typed,p=k.matrix;k=k.isInteger;var g=(0,u.createConcat)({typed:t,matrix:p,isInteger:k});return t(\"concat\",{\"...any\":function(d){var l=d.length-1,h=d[l];(0,q.isNumber)(h)?d[l]=h-1:(0,q.isBigNumber)(h)&&(d[l]=h.minus(1));try{return g.apply(null,d)}catch(n){throw(0,f.errorTransform)(n);\n}}})},{isTransformFunction:!0});a.createConcatTransform=b}","~:source","shadow$provide[588] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConcatTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _errorTransform = require(\"./utils/errorTransform.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _concat = require(\"../../function/matrix/concat.js\");\n\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nvar createConcatTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n  var concat = (0, _concat.createConcat)({\n    typed: typed,\n    matrix: matrix,\n    isInteger: isInteger\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function concat\n   * from one-based to zero based\n   */\n\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if ((0, _is.isNumber)(last)) {\n        args[lastIndex] = last - 1;\n      } else if ((0, _is.isBigNumber)(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw (0, _errorTransform.errorTransform)(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});\nexports.createConcatTransform = createConcatTransform;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$function$matrix$concat","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$expression$transform$utils$errorTransform","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["typed","matrix","__esModule","isTransformFunction","value","isInteger","createConcatTransform"]],"~:compiled-at",1619135724044,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$concat_transform.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAErC,KAAIC,EAAMP,CAAA,CAAQ,EAAR,CAAV,CAEIQ,EAAkBR,CAAA,CAAQ,GAAR,CAElBS,EAAAA,CAAWT,CAAA,CAAQ,EAAR,CAEf,KAAIU,EAAUV,CAAA,CAAQ,GAAR,CAIVM,EAAAA,CAAuC,CAAC,CAAA,CAAGG,CAASE,CAAAA,OAAb,EAFhCC,QAEgC,CADxBC,CAAC,OAADA,CAAU,QAAVA,CAAoB,WAApBA,CACwB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC/FC,EAAQD,CAAKC,CAAAA,KADkF,CAE/FC,EAASF,CAAKE,CAAAA,MACdC,EAAAA,CAAYH,CAAKG,CAAAA,SACrB,KAAIC,EAAS,CAAC,CAAA,CAAGR,CAAQS,CAAAA,YAAZ,EAA0B,CACrCJ,MAAOA,CAD8B,CAErCC,OAAQA,CAF6B,CAGrCC,UAAWA,CAH0B,CAA1B,CAab,OAAOF,EAAA,CAAM,QAAN,CAAgB,CACrB,SAAUK,QAAY,CAACC,CAAD,CAAO,CAE3B,IAAIC,EAAYD,CAAKE,CAAAA,MAAjBD,CAA0B,CAA9B,CACIE,EAAOH,CAAA,CAAKC,CAAL,CAEP,EAAC,CAAA,CAAGf,CAAIkB,CAAAA,QAAR,EAAkBD,CAAlB,CAAJ,CACEH,CAAA,CAAKC,CAAL,CADF,CACoBE,CADpB,CAC2B,CAD3B,CAEW,CAAC,CAAA,CAAGjB,CAAImB,CAAAA,WAAR,EAAqBF,CAArB,CAFX,GAGEH,CAAA,CAAKC,CAAL,CAHF,CAGoBE,CAAKG,CAAAA,KAAL,CAAW,CAAX,CAHpB,CAMA,IAAI,CACF,MAAOT,EAAOU,CAAAA,KAAP,CAAa,IAAb,CAAmBP,CAAnB,CADL,CAEF,MAAOQ,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGrB,CAAgBsB,CAAAA,cAApB,EAAoCD,CAApC,CAAN;AADY,CAba,CADR,CAAhB,CAjB4F,CAA1D,CAoCxC,CACDE,oBAAqB,CAAA,CADpB,CApCwC,CAuC3C7B,EAAQI,CAAAA,qBAAR,CAAgCA,CAzD8B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/concat.transform.js\"],\n\"sourcesContent\":[\"shadow$provide[588] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createConcatTransform = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _errorTransform = require(\\\"./utils/errorTransform.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _concat = require(\\\"../../function/matrix/concat.js\\\");\\n\\nvar name = 'concat';\\nvar dependencies = ['typed', 'matrix', 'isInteger'];\\nvar createConcatTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      isInteger = _ref.isInteger;\\n  var concat = (0, _concat.createConcat)({\\n    typed: typed,\\n    matrix: matrix,\\n    isInteger: isInteger\\n  });\\n  /**\\n   * Attach a transform function to math.range\\n   * Adds a property transform containing the transform function.\\n   *\\n   * This transform changed the last `dim` parameter of function concat\\n   * from one-based to zero based\\n   */\\n\\n  return typed('concat', {\\n    '...any': function any(args) {\\n      // change last argument from one-based to zero-based\\n      var lastIndex = args.length - 1;\\n      var last = args[lastIndex];\\n\\n      if ((0, _is.isNumber)(last)) {\\n        args[lastIndex] = last - 1;\\n      } else if ((0, _is.isBigNumber)(last)) {\\n        args[lastIndex] = last.minus(1);\\n      }\\n\\n      try {\\n        return concat.apply(null, args);\\n      } catch (err) {\\n        throw (0, _errorTransform.errorTransform)(err);\\n      }\\n    }\\n  });\\n}, {\\n  isTransformFunction: true\\n});\\nexports.createConcatTransform = createConcatTransform;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createConcatTransform\",\"_is\",\"_errorTransform\",\"_factory\",\"_concat\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"isInteger\",\"concat\",\"createConcat\",\"any\",\"args\",\"lastIndex\",\"length\",\"last\",\"isNumber\",\"isBigNumber\",\"minus\",\"apply\",\"err\",\"errorTransform\",\"isTransformFunction\"]\n}\n"]