["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fraction_DOT_js/fraction.js"],"~:js","shadow$provide[32]=function(c,b,y,a){(function(q){function f(n){function r(){var C=Error.apply(this,arguments);C.name=this.name=n;this.stack=C.stack;this.message=C.message}function v(){}v.prototype=Error.prototype;r.prototype=new v;return r}function u(n,r){isNaN(n=parseInt(n,10))&&k();return n*r}function k(){throw new l;}function t(n,r){if(!n)return r;if(!r)return n;for(;;){n%=r;if(!n)return r;r%=n;if(!r)return n}}function p(n,r){if(!(this instanceof p))return new p(n,r);h(n,r);n=p.REDUCE?t(g.d,g.n):\n1;this.s=g.s;this.n=g.n/n;this.d=g.d/n}var g={s:1,n:0,d:1},d=p.DivisionByZero=f(\"DivisionByZero\"),l=p.InvalidParameter=f(\"InvalidParameter\"),h=function(n,r){var v=0,C=1,z=1,w=0,B=0,x=0,D=1,F=1,E=0,G=1,I=1,L=1;if(void 0!==n&&null!==n)if(void 0!==r)v=n,C=r,z=v*C;else switch(typeof n){case \"object\":\"d\"in n&&\"n\"in n?(v=n.n,C=n.d,\"s\"in n&&(v*=n.s)):0 in n?(v=n[0],1 in n&&(C=n[1])):k();z=v*C;break;case \"number\":0>n&&(z=n,n=-n);if(0===n%1)v=n;else if(0<n){1<=n&&(F=Math.pow(10,Math.floor(1+Math.log(n)/Math.LN10)),\nn/=F);for(;1E7>=G&&1E7>=L;)if(r=(E+I)/(G+L),n===r){1E7>=G+L?(v=E+I,C=G+L):L>G?(v=I,C=L):(v=E,C=G);break}else n>r?(E+=I,G+=L):(I+=E,L+=G),1E7<G?(v=I,C=L):(v=E,C=G);v*=F}else if(isNaN(n)||isNaN(r))C=v=NaN;break;case \"string\":G=n.match(/\\d+|./g);null===G&&k();\"-\"===G[E]?(z=-1,E++):\"+\"===G[E]&&E++;if(G.length===E+1)B=u(G[E++],z);else if(\".\"===G[E+1]||\".\"===G[E]){\".\"!==G[E]&&(w=u(G[E++],z));E++;if(E+1===G.length||\"(\"===G[E+1]&&\")\"===G[E+3]||\"'\"===G[E+1]&&\"'\"===G[E+3])B=u(G[E],z),D=Math.pow(10,G[E].length),\nE++;if(\"(\"===G[E]&&\")\"===G[E+2]||\"'\"===G[E]&&\"'\"===G[E+2])x=u(G[E+1],z),F=Math.pow(10,G[E+1].length)-1,E+=3}else\"/\"===G[E+1]||\":\"===G[E+1]?(B=u(G[E],z),D=u(G[E+2],1),E+=3):\"/\"===G[E+3]&&\" \"===G[E+1]&&(w=u(G[E],z),B=u(G[E+2],z),D=u(G[E+4],1),E+=5);if(G.length<=E){C=D*F;z=v=x+C*w+F*B;break}default:k()}if(0===C)throw new d;g.s=0>z?-1:1;g.n=Math.abs(v);g.d=Math.abs(C)};p.REDUCE=1;p.prototype={s:1,n:0,d:1,abs:function(){return new p(this.n,this.d)},neg:function(){return new p(-this.s*this.n,this.d)},add:function(n,\nr){h(n,r);return new p(this.s*this.n*g.d+g.s*this.d*g.n,this.d*g.d)},sub:function(n,r){h(n,r);return new p(this.s*this.n*g.d-g.s*this.d*g.n,this.d*g.d)},mul:function(n,r){h(n,r);return new p(this.s*g.s*this.n*g.n,this.d*g.d)},div:function(n,r){h(n,r);return new p(this.s*g.s*this.n*g.d,this.d*g.n)},clone:function(){return new p(this)},mod:function(n,r){if(isNaN(this.n)||isNaN(this.d))return new p(NaN);if(void 0===n)return new p(this.s*this.n%this.d,1);h(n,r);0===g.n&&0===this.d&&p(0,0);return new p(this.s*\ng.d*this.n%(g.n*this.d),g.d*this.d)},gcd:function(n,r){h(n,r);return new p(t(g.n,this.n)*t(g.d,this.d),g.d*this.d)},lcm:function(n,r){h(n,r);return 0===g.n&&0===this.n?new p:new p(g.n*this.n,t(g.n,this.n)*t(g.d,this.d))},ceil:function(n){n=Math.pow(10,n||0);return isNaN(this.n)||isNaN(this.d)?new p(NaN):new p(Math.ceil(n*this.s*this.n/this.d),n)},floor:function(n){n=Math.pow(10,n||0);return isNaN(this.n)||isNaN(this.d)?new p(NaN):new p(Math.floor(n*this.s*this.n/this.d),n)},round:function(n){n=Math.pow(10,\nn||0);return isNaN(this.n)||isNaN(this.d)?new p(NaN):new p(Math.round(n*this.s*this.n/this.d),n)},inverse:function(){return new p(this.s*this.d,this.n)},pow:function(n){return 0>n?new p(Math.pow(this.s*this.d,-n),Math.pow(this.n,-n)):new p(Math.pow(this.s*this.n,n),Math.pow(this.d,n))},equals:function(n,r){h(n,r);return this.s*this.n*g.d===g.s*g.n*this.d},compare:function(n,r){h(n,r);n=this.s*this.n*g.d-g.s*g.n*this.d;return(0<n)-(0>n)},simplify:function(n){function r(w){return 1===w.length?new p(w[0]):\nr(w.slice(1)).inverse().add(w[0])}if(isNaN(this.n)||isNaN(this.d))return this;var v=this.abs().toContinued();n=n||.001;for(var C=0;C<v.length;C++){var z=r(v.slice(0,C+1));if(z.sub(this.abs()).abs().valueOf()<n)return z.mul(this.s)}return this},divisible:function(n,r){h(n,r);return!(!(g.n*this.d)||this.n*g.d%(g.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(n){var r,v=\"\",C=this.n,z=this.d;0>this.s&&(v+=\"-\");1===z?v+=C:(n&&0<(r=Math.floor(C/z))&&(v=v+r+\" \",C%=z),v=v+\nC+\"/\",v+=z);return v},toLatex:function(n){var r,v=\"\",C=this.n,z=this.d;0>this.s&&(v+=\"-\");1===z?v+=C:(n&&0<(r=Math.floor(C/z))&&(v+=r,C%=z),v=v+\"\\\\frac{\"+C+\"}{\"+z,v+=\"}\");return v},toContinued:function(){var n=this.n,r=this.d,v=[];if(isNaN(n)||isNaN(r))return v;do{v.push(Math.floor(n/r));var C=n%r;n=r;r=C}while(1!==n);return v},toString:function(n){var r=this.n,v=this.d;if(isNaN(r)||isNaN(v))return\"NaN\";if(!p.REDUCE){var C=t(r,v);r/=C;v/=C}a:{for(C=v;0===C%2;C/=2);for(;0===C%5;C/=5);if(1===C)C=0;\nelse{for(var z=10%C,w=1;1!==z;w++)if(z=10*z%C,2E3<w){C=0;break a}C=w}}a:{z=v;w=1;var B=10;for(var x=C,D=1;0<x;B=B*B%z,x>>=1)x&1&&(D=D*B%z);B=D;for(x=0;300>x;x++){if(w===B){w=x;break a}w=10*w%z;B=10*B%z}w=0}z=-1===this.s?\"-\":\"\";z+=r/v|0;(r=r%v*10)&&(z+=\".\");if(C){for(n=w;n--;)z+=r/v|0,r%=v,r*=10;z+=\"(\";for(n=C;n--;)z+=r/v|0,r%=v,r*=10;z+=\")\"}else for(n=n||15;r&&n--;)z+=r/v|0,r%=v,r*=10;return z}};\"function\"===typeof define&&define.amd?define([],function(){return p}):\"object\"===typeof a?(Object.defineProperty(p,\n\"__esModule\",{value:!0}),p[\"default\"]=p,p.Fraction=p,y.exports=p):q.Fraction=p})(this)}","~:source","shadow$provide[32] = function(global,require,module,exports) {\n/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() { }\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n *= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throwInvalidParam();\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1 /= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A += C;\n                    B += D;\n                  } else {\n                    C += A;\n                    D += B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n *= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throwInvalidParam();\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A += 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A += 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A += 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      // First naive implementation, needs improvement\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["prototype","__esModule"]],"~:compiled-at",1619135723740,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fraction_DOT_js$fraction.js\",\n\"lineCount\":11,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAwC5D,SAAQ,CAACC,CAAD,CAAO,CAgBdC,QAASA,EAAW,CAACC,CAAD,CAAO,CAEzBC,QAASA,EAAgB,EAAG,CAC1B,IAAIC,EAAOC,KAAMC,CAAAA,KAAN,CAAY,IAAZ,CAAkBC,SAAlB,CACXH,EAAA,CAAA,IAAA,CAAe,IAAA,CAAA,IAAf,CAA8BF,CAC9B,KAAA,CAAA,KAAA,CAAgBE,CAAA,CAAA,KAChB,KAAA,CAAA,OAAA,CAAkBA,CAAA,CAAA,OAJQ,CAY5BI,QAASA,EAAqB,EAAG,EACjCA,CAAsBC,CAAAA,SAAtB,CAAkCJ,KAAMI,CAAAA,SACxCN,EAAiBM,CAAAA,SAAjB,CAA6B,IAAID,CAEjC,OAAOL,EAlBkB,CAwB3BO,QAASA,EAAM,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAEhBC,KAAA,CAAMF,CAAN,CAAUG,QAAA,CAASH,CAAT,CAAY,EAAZ,CAAV,CAAJ,EACEI,CAAA,EAEF,OAAOJ,EAAP,CAAWC,CALS,CAQtBG,QAASA,EAAiB,EAAG,CAC3B,KAAM,KAAIC,CAAV,CAD2B,CAwO7BC,QAASA,EAAG,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAEjB,GAAI,CAACD,CAAL,CACE,MAAOC,EACT,IAAI,CAACA,CAAL,CACE,MAAOD,EAET,KAAA,CAAA,CAAA,CAAU,CACRA,CAAA,EAAKC,CACL,IAAI,CAACD,CAAL,CACE,MAAOC,EACTA,EAAA,EAAKD,CACL,IAAI,CAACC,CAAL,CACE,MAAOD,EAND,CAPO,CAwBnBE,QAASA,EAAQ,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAEtB,GAAI,EAAE,IAAF,WAAkBC,EAAlB,CAAJ,CACE,MAAO,KAAIA,CAAJ,CAAaF,CAAb,CAAgBC,CAAhB,CAGTE,EAAA,CAAMH,CAAN,CAASC,CAAT,CAGED,EAAA,CADEE,CAAA,CAAA,MAAJ,CACMH,CAAA,CAAIK,CAAA,CAAA,CAAJ,CAAYA,CAAA,CAAA,CAAZ,CADN;AAGM,CAGN,KAAA,CAAA,CAAA,CAAYA,CAAA,CAAA,CACZ,KAAA,CAAA,CAAA,CAAYA,CAAA,CAAA,CAAZ,CAAqBJ,CACrB,KAAA,CAAA,CAAA,CAAYI,CAAA,CAAA,CAAZ,CAAqBJ,CAhBC,CAtSxB,IAAII,EAAI,CACN,EAAK,CADC,CAEN,EAAK,CAFC,CAGN,EAAK,CAHC,CAAR,CA2BIC,EAAiBH,CAAA,CAAA,cAAjBG,CAA8CtB,CAAA,CAAY,gBAAZ,CA3BlD,CA4BIe,EAAmBI,CAAA,CAAA,gBAAnBJ,CAAkDf,CAAA,CAAY,kBAAZ,CA5BtD,CA0CIoB,EAAQA,QAAQ,CAACG,CAAD,CAAKC,CAAL,CAAS,CAAA,IAEvBd,EAAI,CAFmB,CAEhBe,EAAI,CAFY,CAETd,EAAI,CAFK,CAGvBe,EAAI,CAHmB,CAGhBC,EAAI,CAHY,CAGTC,EAAI,CAHK,CAGFC,EAAI,CAHF,CAGKC,EAAI,CAHT,CAKvBC,EAAI,CALmB,CAKhBC,EAAI,CALY,CAMvBC,EAAI,CANmB,CAMhBC,EAAI,CAKf,IAAWC,IAAAA,EAAX,GAAIZ,CAAJ,EAA+B,IAA/B,GAAwBA,CAAxB,CAEO,GAAWY,IAAAA,EAAX,GAAIX,CAAJ,CACLd,CAEA,CAFIa,CAEJ,CADAE,CACA,CADID,CACJ,CAAAb,CAAA,CAAID,CAAJ,CAAQe,CAHH,KAKL,QAAQ,MAAOF,EAAf,EAEE,KAAK,QAAL,CAEQ,GAAJ,EAAWA,EAAX,EAAiB,GAAjB,EAAwBA,EAAxB,EACEb,CAEA,CAFIa,CAAA,CAAA,CAEJ,CADAE,CACA,CADIF,CAAA,CAAA,CACJ,CAAI,GAAJ,EAAWA,EAAX,GACEb,CADF,EACOa,CAAA,CAAA,CADP,CAHF,EAKW,CAAJ,GAASA,EAAT,EACLb,CACA,CADIa,CAAA,CAAG,CAAH,CACJ,CAAI,CAAJ,GAASA,EAAT,GACEE,CADF,CACMF,CAAA,CAAG,CAAH,CADN,CAFK,EAKLT,CAAA,EAEFH,EAAA,CAAID,CAAJ,CAAQe,CACR,MAEJ,MAAK,QAAL,CAEa,CAAT,CAAIF,CAAJ,GACEZ,CACA,CADIY,CACJ,CAAAA,CAAA,CAAK,CAACA,CAFR,CAKA,IAAe,CAAf,GAAIA,CAAJ,CAAS,CAAT,CACEb,CAAA,CAAIa,CADN,KAEO,IAAS,CAAT,CAAIA,CAAJ,CAAY,CAEP,CAAV,EAAIA,CAAJ,GACEO,CACA,CADIM,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAaD,IAAKE,CAAAA,KAAL,CAAW,CAAX,CAAeF,IAAKG,CAAAA,GAAL,CAAShB,CAAT,CAAf,CAA8Ba,IAAKI,CAAAA,IAAnC,CAAb,CACJ;AAAAjB,CAAA,EAAMO,CAFR,CAQA,KAAA,CAhDFW,GAgDE,EAAOT,CAAP,EAhDFS,GAgDE,EAAiBP,CAAjB,CAAA,CAGE,GAFAQ,CAEI,EAFCX,CAED,CAFKE,CAEL,GAFWD,CAEX,CAFeE,CAEf,EAAAX,CAAA,GAAOmB,CAAX,CAAc,CAnDlBD,GAoDM,EAAIT,CAAJ,CAAQE,CAAR,EACExB,CACA,CADIqB,CACJ,CADQE,CACR,CAAAR,CAAA,CAAIO,CAAJ,CAAQE,CAFV,EAGWA,CAAJ,CAAQF,CAAR,EACLtB,CACA,CADIuB,CACJ,CAAAR,CAAA,CAAIS,CAFC,GAILxB,CACA,CADIqB,CACJ,CAAAN,CAAA,CAAIO,CALC,CAOP,MAXY,CAAd,IAeMT,EAAJ,CAASmB,CAAT,EACEX,CACA,EADKE,CACL,CAAAD,CAAA,EAAKE,CAFP,GAIED,CACA,EADKF,CACL,CAAAG,CAAA,EAAKF,CALP,CAQA,CA1ENS,GA0EM,CAAIT,CAAJ,EACEtB,CACA,CADIuB,CACJ,CAAAR,CAAA,CAAIS,CAFN,GAIExB,CACA,CADIqB,CACJ,CAAAN,CAAA,CAAIO,CALN,CASJtB,EAAA,EAAKoB,CA7CY,CAAZ,IA8CA,IAAIlB,KAAA,CAAMW,CAAN,CAAJ,EAAiBX,KAAA,CAAMY,CAAN,CAAjB,CACLC,CAAA,CAAIf,CAAJ,CAAQiC,GAEV,MAEJ,MAAK,QAAL,CAEIX,CAAA,CAAIT,CAAGqB,CAAAA,KAAH,CAAS,QAAT,CAEM,KAAV,GAAIZ,CAAJ,EACElB,CAAA,EAEW,IAAb,GAAIkB,CAAA,CAAED,CAAF,CAAJ,EACEpB,CACA,CADI,EACJ,CAAAoB,CAAA,EAFF,EAGoB,GAHpB,GAGWC,CAAA,CAAED,CAAF,CAHX,EAIEA,CAAA,EAGF,IAAIC,CAAEa,CAAAA,MAAN,GAAiBd,CAAjB,CAAqB,CAArB,CACEJ,CAAA,CAAIlB,CAAA,CAAOuB,CAAA,CAAED,CAAA,EAAF,CAAP,CAAepB,CAAf,CADN,KAEO,IAAiB,GAAjB,GAAIqB,CAAA,CAAED,CAAF,CAAM,CAAN,CAAJ,EAAiC,GAAjC,GAAwBC,CAAA,CAAED,CAAF,CAAxB,CAAsC,CAE9B,GAAb,GAAIC,CAAA,CAAED,CAAF,CAAJ,GACEL,CADF,CACMjB,CAAA,CAAOuB,CAAA,CAAED,CAAA,EAAF,CAAP,CAAepB,CAAf,CADN,CAGAoB,EAAA,EAGA,IAAIA,CAAJ,CAAQ,CAAR,GAAcC,CAAEa,CAAAA,MAAhB,EAAuC,GAAvC,GAA0Bb,CAAA,CAAED,CAAF,CAAM,CAAN,CAA1B,EAA2D,GAA3D,GAA8CC,CAAA,CAAED,CAAF,CAAM,CAAN,CAA9C,EAA+E,GAA/E,GAAkEC,CAAA,CAAED,CAAF,CAAM,CAAN,CAAlE,EAAmG,GAAnG,GAAsFC,CAAA,CAAED,CAAF,CAAM,CAAN,CAAtF,CACEJ,CAEA,CAFIlB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAP,CAAapB,CAAb,CAEJ,CADAkB,CACA,CADIO,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAaL,CAAA,CAAED,CAAF,CAAKc,CAAAA,MAAlB,CACJ;AAAAd,CAAA,EAIF,IAAa,GAAb,GAAIC,CAAA,CAAED,CAAF,CAAJ,EAAiC,GAAjC,GAAoBC,CAAA,CAAED,CAAF,CAAM,CAAN,CAApB,EAAiD,GAAjD,GAAwCC,CAAA,CAAED,CAAF,CAAxC,EAAqE,GAArE,GAAwDC,CAAA,CAAED,CAAF,CAAM,CAAN,CAAxD,CACEH,CAEA,CAFInB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAM,CAAN,CAAP,CAAiBpB,CAAjB,CAEJ,CADAmB,CACA,CADIM,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAaL,CAAA,CAAED,CAAF,CAAM,CAAN,CAASc,CAAAA,MAAtB,CACJ,CADoC,CACpC,CAAAd,CAAA,EAAK,CAlBoC,CAAtC,IAqBiB,GAAjB,GAAIC,CAAA,CAAED,CAAF,CAAM,CAAN,CAAJ,EAAqC,GAArC,GAAwBC,CAAA,CAAED,CAAF,CAAM,CAAN,CAAxB,EACLJ,CAEA,CAFIlB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAP,CAAapB,CAAb,CAEJ,CADAkB,CACA,CADIpB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAM,CAAN,CAAP,CAAiB,CAAjB,CACJ,CAAAA,CAAA,EAAK,CAHA,EAIiB,GAJjB,GAIIC,CAAA,CAAED,CAAF,CAAM,CAAN,CAJJ,EAIqC,GAJrC,GAIwBC,CAAA,CAAED,CAAF,CAAM,CAAN,CAJxB,GAKLL,CAGA,CAHIjB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAP,CAAapB,CAAb,CAGJ,CAFAgB,CAEA,CAFIlB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAM,CAAN,CAAP,CAAiBpB,CAAjB,CAEJ,CADAkB,CACA,CADIpB,CAAA,CAAOuB,CAAA,CAAED,CAAF,CAAM,CAAN,CAAP,CAAiB,CAAjB,CACJ,CAAAA,CAAA,EAAK,CARA,CAWP,IAAIC,CAAEa,CAAAA,MAAN,EAAgBd,CAAhB,CAAmB,CACjBN,CAAA,CAAII,CAAJ,CAAQC,CACRnB,EAAA,CACAD,CADA,CACIkB,CADJ,CACQH,CADR,CACYC,CADZ,CACgBI,CADhB,CACoBH,CACpB,MAJiB,CASvB,QACEb,CAAA,EAzIJ,CA4IF,GAAU,CAAV,GAAIW,CAAJ,CACE,KAAM,KAAIH,CAAV,CAGFD,CAAA,CAAA,CAAA,CAAa,CAAJ,CAAAV,CAAA,CAAQ,EAAR,CAAa,CACtBU,EAAA,CAAA,CAAA,CAASe,IAAKU,CAAAA,GAAL,CAASpC,CAAT,CACTW,EAAA,CAAA,CAAA,CAASe,IAAKU,CAAAA,GAAL,CAASrB,CAAT,CApKkB,CAmR7BN,EAAA,CAAA,MAAA,CAAqB,CAErBA,EAASX,CAAAA,SAAT,CAAqB,CAEnB,EAAK,CAFc,CAGnB,EAAK,CAHc,CAInB,EAAK,CAJc,CAWnB,IAAOsC,QAAQ,EAAG,CAEhB,MAAO,KAAI3B,CAAJ,CAAa,IAAA,CAAA,CAAb,CAAwB,IAAA,CAAA,CAAxB,CAFS,CAXC,CAqBnB,IAAO4B,QAAQ,EAAG,CAEhB,MAAO,KAAI5B,CAAJ,CAAa,CAAC,IAAA,CAAA,CAAd,CAA0B,IAAA,CAAA,CAA1B,CAAqC,IAAA,CAAA,CAArC,CAFS,CArBC,CA+BnB,IAAO6B,QAAQ,CAAC/B,CAAD;AAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,KAAIC,CAAJ,CACL,IAAA,CAAA,CADK,CACO,IAAA,CAAA,CADP,CACmBE,CAAA,CAAA,CADnB,CAC4BA,CAAA,CAAA,CAD5B,CACqC,IAAA,CAAA,CADrC,CACiDA,CAAA,CAAA,CADjD,CAEL,IAAA,CAAA,CAFK,CAEOA,CAAA,CAAA,CAFP,CAHa,CA/BH,CA6CnB,IAAO4B,QAAQ,CAAChC,CAAD,CAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,KAAIC,CAAJ,CACL,IAAA,CAAA,CADK,CACO,IAAA,CAAA,CADP,CACmBE,CAAA,CAAA,CADnB,CAC4BA,CAAA,CAAA,CAD5B,CACqC,IAAA,CAAA,CADrC,CACiDA,CAAA,CAAA,CADjD,CAEL,IAAA,CAAA,CAFK,CAEOA,CAAA,CAAA,CAFP,CAHa,CA7CH,CA2DnB,IAAO6B,QAAQ,CAACjC,CAAD,CAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,KAAIC,CAAJ,CACL,IAAA,CAAA,CADK,CACOE,CAAA,CAAA,CADP,CACgB,IAAA,CAAA,CADhB,CAC4BA,CAAA,CAAA,CAD5B,CAEL,IAAA,CAAA,CAFK,CAEOA,CAAA,CAAA,CAFP,CAHa,CA3DH,CAyEnB,IAAO8B,QAAQ,CAAClC,CAAD,CAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,KAAIC,CAAJ,CACL,IAAA,CAAA,CADK,CACOE,CAAA,CAAA,CADP,CACgB,IAAA,CAAA,CADhB,CAC4BA,CAAA,CAAA,CAD5B,CAEL,IAAA,CAAA,CAFK,CAEOA,CAAA,CAAA,CAFP,CAHa,CAzEH,CAuFnB,MAAS+B,QAAQ,EAAG,CAClB,MAAO,KAAIjC,CAAJ,CAAa,IAAb,CADW,CAvFD,CAgGnB,IAAOkC,QAAQ,CAACpC,CAAD,CAAIC,CAAJ,CAAO,CAEpB,GAAIN,KAAA,CAAM,IAAA,CAAA,CAAN,CAAJ,EAAwBA,KAAA,CAAM,IAAA,CAAA,CAAN,CAAxB,CACE,MAAO,KAAIO,CAAJ,CAAawB,GAAb,CAGT,IAAUR,IAAAA,EAAV,GAAIlB,CAAJ,CACE,MAAO,KAAIE,CAAJ,CAAa,IAAA,CAAA,CAAb,CAAyB,IAAA,CAAA,CAAzB,CAAqC,IAAA,CAAA,CAArC,CAAgD,CAAhD,CAGTC,EAAA,CAAMH,CAAN,CAASC,CAAT,CACI,EAAJ,GAAUG,CAAA,CAAA,CAAV,EAAoB,CAApB,GAA0B,IAAA,CAAA,CAA1B,EACEF,CAAA,CAAS,CAAT,CAAY,CAAZ,CAiBF,OAAO,KAAIA,CAAJ,CACL,IAAA,CAAA,CADK;AACQE,CAAA,CAAA,CADR,CACiB,IAAA,CAAA,CADjB,EAC+BA,CAAA,CAAA,CAD/B,CACwC,IAAA,CAAA,CADxC,EAELA,CAAA,CAAA,CAFK,CAEI,IAAA,CAAA,CAFJ,CA7Ba,CAhGH,CAwInB,IAAOL,QAAQ,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CAIA,OAAO,KAAIC,CAAJ,CAAaH,CAAA,CAAIK,CAAA,CAAA,CAAJ,CAAY,IAAA,CAAA,CAAZ,CAAb,CAAsCL,CAAA,CAAIK,CAAA,CAAA,CAAJ,CAAY,IAAA,CAAA,CAAZ,CAAtC,CAA8DA,CAAA,CAAA,CAA9D,CAAuE,IAAA,CAAA,CAAvE,CANa,CAxIH,CAsJnB,IAAOiC,QAAQ,CAACrC,CAAD,CAAIC,CAAJ,CAAO,CAEpBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CAIA,OAAe,EAAf,GAAIG,CAAA,CAAA,CAAJ,EAAkC,CAAlC,GAAoB,IAAA,CAAA,CAApB,CACS,IAAIF,CADb,CAGO,IAAIA,CAAJ,CAAaE,CAAA,CAAA,CAAb,CAAsB,IAAA,CAAA,CAAtB,CAAiCL,CAAA,CAAIK,CAAA,CAAA,CAAJ,CAAY,IAAA,CAAA,CAAZ,CAAjC,CAA0DL,CAAA,CAAIK,CAAA,CAAA,CAAJ,CAAY,IAAA,CAAA,CAAZ,CAA1D,CATa,CAtJH,CAuKnB,KAAQkC,QAAQ,CAACC,CAAD,CAAS,CAEvBA,CAAA,CAASpB,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAamB,CAAb,EAAuB,CAAvB,CAET,OAAI5C,MAAA,CAAM,IAAA,CAAA,CAAN,CAAJ,EAAwBA,KAAA,CAAM,IAAA,CAAA,CAAN,CAAxB,CACS,IAAIO,CAAJ,CAAawB,GAAb,CADT,CAGO,IAAIxB,CAAJ,CAAaiB,IAAKmB,CAAAA,IAAL,CAAUC,CAAV,CAAmB,IAAA,CAAA,CAAnB,CAA+B,IAAA,CAAA,CAA/B,CAA2C,IAAA,CAAA,CAA3C,CAAb,CAAoEA,CAApE,CAPgB,CAvKN,CAsLnB,MAASlB,QAAQ,CAACkB,CAAD,CAAS,CAExBA,CAAA,CAASpB,IAAKC,CAAAA,GAAL,CAAS,EAAT,CAAamB,CAAb,EAAuB,CAAvB,CAET,OAAI5C,MAAA,CAAM,IAAA,CAAA,CAAN,CAAJ,EAAwBA,KAAA,CAAM,IAAA,CAAA,CAAN,CAAxB,CACS,IAAIO,CAAJ,CAAawB,GAAb,CADT,CAGO,IAAIxB,CAAJ,CAAaiB,IAAKE,CAAAA,KAAL,CAAWkB,CAAX,CAAoB,IAAA,CAAA,CAApB,CAAgC,IAAA,CAAA,CAAhC,CAA4C,IAAA,CAAA,CAA5C,CAAb,CAAqEA,CAArE,CAPiB,CAtLP,CAqMnB,MAASC,QAAQ,CAACD,CAAD,CAAS,CAExBA,CAAA,CAASpB,IAAKC,CAAAA,GAAL,CAAS,EAAT;AAAamB,CAAb,EAAuB,CAAvB,CAET,OAAI5C,MAAA,CAAM,IAAA,CAAA,CAAN,CAAJ,EAAwBA,KAAA,CAAM,IAAA,CAAA,CAAN,CAAxB,CACS,IAAIO,CAAJ,CAAawB,GAAb,CADT,CAGO,IAAIxB,CAAJ,CAAaiB,IAAKqB,CAAAA,KAAL,CAAWD,CAAX,CAAoB,IAAA,CAAA,CAApB,CAAgC,IAAA,CAAA,CAAhC,CAA4C,IAAA,CAAA,CAA5C,CAAb,CAAqEA,CAArE,CAPiB,CArMP,CAoNnB,QAAWE,QAAQ,EAAG,CAEpB,MAAO,KAAIvC,CAAJ,CAAa,IAAA,CAAA,CAAb,CAAyB,IAAA,CAAA,CAAzB,CAAoC,IAAA,CAAA,CAApC,CAFa,CApNH,CA8NnB,IAAOkB,QAAQ,CAACsB,CAAD,CAAI,CAEjB,MAAQ,EAAR,CAAIA,CAAJ,CACS,IAAIxC,CAAJ,CAAaiB,IAAKC,CAAAA,GAAL,CAAS,IAAA,CAAA,CAAT,CAAqB,IAAA,CAAA,CAArB,CAAgC,CAACsB,CAAjC,CAAb,CAAkDvB,IAAKC,CAAAA,GAAL,CAAS,IAAA,CAAA,CAAT,CAAoB,CAACsB,CAArB,CAAlD,CADT,CAGS,IAAIxC,CAAJ,CAAaiB,IAAKC,CAAAA,GAAL,CAAS,IAAA,CAAA,CAAT,CAAqB,IAAA,CAAA,CAArB,CAAgCsB,CAAhC,CAAb,CAAiDvB,IAAKC,CAAAA,GAAL,CAAS,IAAA,CAAA,CAAT,CAAoBsB,CAApB,CAAjD,CALQ,CA9NA,CA4OnB,OAAUC,QAAQ,CAAC3C,CAAD,CAAIC,CAAJ,CAAO,CAEvBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,KAAA,CAAA,CAAP,CAAmB,IAAA,CAAA,CAAnB,CAA+BG,CAAA,CAAA,CAA/B,GAA0CA,CAAA,CAAA,CAA1C,CAAmDA,CAAA,CAAA,CAAnD,CAA4D,IAAA,CAAA,CAHrC,CA5ON,CAuPnB,QAAWwC,QAAQ,CAAC5C,CAAD,CAAIC,CAAJ,CAAO,CAExBE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACI4C,EAAAA,CAAK,IAAA,CAAA,CAALA,CAAiB,IAAA,CAAA,CAAjBA,CAA6BzC,CAAA,CAAA,CAA7ByC,CAAsCzC,CAAA,CAAA,CAAtCyC,CAA+CzC,CAAA,CAAA,CAA/CyC,CAAwD,IAAA,CAAA,CAC5D,QAAQ,CAAR,CAAYA,CAAZ,GAAsB,CAAtB,CAAkBA,CAAlB,CAJwB,CAvPP,CA8PnB,SAAYC,QAAQ,CAACC,CAAD,CAAM,CAYxBC,QAASA,EAAG,CAAChD,CAAD,CAAI,CACd,MAAiB,EAAjB,GAAIA,CAAE4B,CAAAA,MAAN,CACS,IAAI1B,CAAJ,CAAaF,CAAA,CAAE,CAAF,CAAb,CADT;AAEOgD,CAAA,CAAIhD,CAAEiD,CAAAA,KAAF,CAAQ,CAAR,CAAJ,CAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAoCjD,CAAA,CAAE,CAAF,CAApC,CAHO,CARhB,GAAIL,KAAA,CAAM,IAAA,CAAA,CAAN,CAAJ,EAAwBA,KAAA,CAAM,IAAA,CAAA,CAAN,CAAxB,CACE,MAAO,KAGT,KAAIuD,EAAO,IAAA,CAAA,GAAA,EAAA,CAAA,WAAA,EAEXH,EAAA,CAAMA,CAAN,EAAa,IAQb,KAAK,IAAII,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,CAAKtB,CAAAA,MAAzB,CAAiCuB,CAAA,EAAjC,CAAsC,CACpC,IAAIC,EAAMJ,CAAA,CAAIE,CAAKD,CAAAA,KAAL,CAAW,CAAX,CAAcE,CAAd,CAAkB,CAAlB,CAAJ,CACV,IAAIC,CAAA,CAAA,GAAA,CAAW,IAAA,CAAA,GAAA,EAAX,CAAA,CAAA,GAAA,EAAmCC,CAAAA,OAAnC,EAAJ,CAAmDN,CAAnD,CACE,MAAOK,EAAA,CAAA,GAAA,CAAW,IAAA,CAAA,CAAX,CAH2B,CAMtC,MAAO,KAxBiB,CA9PP,CA8RnB,UAAaE,QAAQ,CAACtD,CAAD,CAAIC,CAAJ,CAAO,CAE1BE,CAAA,CAAMH,CAAN,CAASC,CAAT,CACA,OAAO,EAAE,EAAEG,CAAA,CAAA,CAAF,CAAW,IAAA,CAAA,CAAX,CAAF,EAA6B,IAAA,CAAA,CAA7B,CAAyCA,CAAA,CAAA,CAAzC,EAAoDA,CAAA,CAAA,CAApD,CAA6D,IAAA,CAAA,CAA7D,EAHmB,CA9RT,CAySnB,QAAWiD,QAAQ,EAAG,CAEpB,MAAO,KAAA,CAAA,CAAP,CAAmB,IAAA,CAAA,CAAnB,CAA+B,IAAA,CAAA,CAFX,CAzSH,CAmTnB,WAAcE,QAAQ,CAACC,CAAD,CAAe,CAAA,IAE/BC,CAF+B,CAExBC,EAAM,EAFkB,CAG/BjE,EAAI,IAAA,CAAA,CAH2B,CAI/Be,EAAI,IAAA,CAAA,CACQ,EAAhB,CAAI,IAAA,CAAA,CAAJ,GACEkD,CADF,EACS,GADT,CAIU,EAAV,GAAIlD,CAAJ,CACEkD,CADF,EACSjE,CADT,EAIM+D,CAQJ,EARkD,CAQlD,EARqBC,CAQrB,CAR6BtC,IAAKE,CAAAA,KAAL,CAAW5B,CAAX,CAAee,CAAf,CAQ7B,IANEkD,CACA,CAFAA,CAEA,CAFOD,CAEP,CADO,GACP,CAAAhE,CAAA,EAAKe,CAKP,EADAkD,CACA,CAFAA,CAEA;AAFOjE,CAEP,CADO,GACP,CAAAiE,CAAA,EAAOlD,CAZT,CAcA,OAAOkD,EAvB4B,CAnTlB,CAkVnB,QAAWC,QAAQ,CAACH,CAAD,CAAe,CAAA,IAE5BC,CAF4B,CAErBC,EAAM,EAFe,CAG5BjE,EAAI,IAAA,CAAA,CAHwB,CAI5Be,EAAI,IAAA,CAAA,CACQ,EAAhB,CAAI,IAAA,CAAA,CAAJ,GACEkD,CADF,EACS,GADT,CAIU,EAAV,GAAIlD,CAAJ,CACEkD,CADF,EACSjE,CADT,EAIM+D,CASJ,EATkD,CASlD,EATqBC,CASrB,CAT6BtC,IAAKE,CAAAA,KAAL,CAAW5B,CAAX,CAAee,CAAf,CAS7B,IAREkD,CACA,EADOD,CACP,CAAAhE,CAAA,EAAKe,CAOP,EADAkD,CACA,CAJAA,CAIA,CAJO,SAIP,CAHOjE,CAGP,CAFO,IAEP,CADOe,CACP,CAAAkD,CAAA,EAAO,GAbT,CAeA,OAAOA,EAxByB,CAlVf,CAkXnB,YAAeE,QAAQ,EAAG,CAExB,IACI5D,EAAI,IAAA,CAAA,CADR,CAEIC,EAAI,IAAA,CAAA,CAFR,CAGI4D,EAAM,EAEV,IAAIlE,KAAA,CAAMK,CAAN,CAAJ,EAAgBL,KAAA,CAAMM,CAAN,CAAhB,CACE,MAAO4D,EAGT,GAAG,CACDA,CAAIC,CAAAA,IAAJ,CAAS3C,IAAKE,CAAAA,KAAL,CAAWrB,CAAX,CAAeC,CAAf,CAAT,CACA,KAAA4C,EAAI7C,CAAJ6C,CAAQ5C,CACRD,EAAA,CAAIC,CACJA,EAAA,CAAI4C,CAJH,CAAH,MAKe,CALf,GAKS7C,CALT,CAOA,OAAO6D,EAlBiB,CAlXP,CA4YnB,SAAYE,QAAQ,CAACC,CAAD,CAAM,CAExB,IACIxC,EAAI,IAAA,CAAA,CADR,CAEIP,EAAI,IAAA,CAAA,CAER,IAAItB,KAAA,CAAM6B,CAAN,CAAJ,EAAgB7B,KAAA,CAAMsB,CAAN,CAAhB,CACE,MAAO,KAGT,IAAI,CAACf,CAAA,CAAA,MAAL,CAAyB,CACvB,IAAA+D,EAAIlE,CAAA,CAAIyB,CAAJ,CAAOP,CAAP,CACJO,EAAA,EAAKyC,CACLhD,EAAA,EAAKgD,CAHkB,CAvfL,CAAA,CAAA,CAEtB,IA6f2BhD,CA7f3B,CA6f2BA,CA7f3B,CAAiB,CAAjB,GAAOT,CAAP,CAAW,CAAX,CACEA,CADF,EACO,CADP,EAIA,IAAA,CAAiB,CAAjB,GAAOA,CAAP,CAAW,CAAX,CACEA,CADF,EACO,CADP,EAIA,GAAU,CAAV,GAAIA,CAAJ,CACE,CAAA,CAAO,CADT;IAAA,CAWA,IAHA,IAAI0D,EAAM,EAANA,CAAW1D,CAAf,CACIqC,EAAI,CAER,CAAe,CAAf,GAAOqB,CAAP,CAAkBrB,CAAA,EAAlB,CAGE,GAFAqB,CAEI,CAFQ,EAER,CAFEA,CAEF,CAFa1D,CAEb,CAzPY2D,GAyPZ,CAAAtB,CAAJ,CACE,CAAA,CAAA,CAAO,CAAP,OAAA,CAAA,CAEJ,CAAA,CAAOA,CAjBP,CAVsB,CA+BO,CAAA,CAAA,CAieA5B,CAAAA,CAAAA,CA/dzBmD,EAAAA,CAAO,CACO,KAAA,EAAA,EA5ClB,KA0gBgCC,IAAAA,EAAAA,CAAAA,CA3gB5BC,EAAI,CACR,CAAW,CAAX,CAAOC,CAAP,CAActE,CAAA,CAAKA,CAAL,CAASA,CAAT,CA4CaO,CA5Cb,CAAiB+D,CAAjB,GAAuB,CAArC,CAEMA,CAAJ,CAAQ,CAAR,GACED,CADF,CACOA,CADP,CACWrE,CADX,CA0CyBO,CA1CzB,CAIF,EAAA,CAAO8D,CAwCP,KAASzB,CAAT,CAAa,CAAb,CAAoB,GAApB,CAAgBA,CAAhB,CAAyBA,CAAA,EAAzB,CAA8B,CAG5B,GAAIuB,CAAJ,GAAaI,CAAb,CACE,CAAA,CAAA,CAAO3B,CAAP,OAAA,CAAA,CAEFuB,CAAA,CAAc,EAAd,CAAOA,CAAP,CAAmB5D,CACnBgE,EAAA,CAAc,EAAd,CAAOA,CAAP,CAAmBhE,CAPS,CAS9B,CAAA,CAAO,CAdsB,CAmevBkD,CAAAA,CAAoB,EAAd,GAAA,IAAA,CAAA,CAAA,CAAmB,GAAnB,CAAyB,EAEnCA,EAAA,EAAOlC,CAAP,CAAWP,CAAX,CAAe,CAKf,EAFAO,CAEA,CAHAA,CAGA,CAHKP,CAGL,CAFK,EAEL,IACEyC,CADF,EACS,GADT,CAGA,IAAIW,CAAJ,CAAY,CAEV,IAASlB,CAAT,CAAasB,CAAb,CAAqBtB,CAAA,EAArB,CAAA,CACEO,CAEA,EAFOlC,CAEP,CAFWP,CAEX,CAFe,CAEf,CADAO,CACA,EADKP,CACL,CAAAO,CAAA,EAAK,EAEPkC,EAAA,EAAO,GACP,KAASP,CAAT,CAAakB,CAAb,CAAqBlB,CAAA,EAArB,CAAA,CACEO,CAEA,EAFOlC,CAEP,CAFWP,CAEX,CAFe,CAEf,CADAO,CACA,EADKP,CACL,CAAAO,CAAA,EAAK,EAEPkC,EAAA,EAAO,GAbG,CAAZ,IAeE,KAASP,CAAT,CA9BIa,CA8BJ,EA9BW,EA8BX,CAAkBxC,CAAlB,EAAuB2B,CAAA,EAAvB,CAAA,CACEO,CAEA,EAFOlC,CAEP,CAFWP,CAEX,CAFe,CAEf,CADAO,CACA,EADKP,CACL,CAAAO,CAAA,EAAK,EAGT,OAAOkC,EApDiB,CA5YP,CAocC,WAAtB,GAAI,MAAOgB,OAAX,EAAoCA,MAAA,CAAA,GAApC,CACEA,MAAA,CAAO,EAAP,CAAW,QAAQ,EAAG,CACpB,MAAOxE,EADa,CAAtB,CADF,CAI8B,QAAvB,GAAI,MAAOrB,EAAX,EACL8F,MAAOC,CAAAA,cAAP,CAAsB1E,CAAtB;AAAgC,YAAhC,CAA8C,CAAE,MAAS,CAAA,CAAX,CAA9C,CAGA,CAFAA,CAAA,CAAS,SAAT,CAEA,CAFsBA,CAEtB,CADAA,CAAA,CAAA,QACA,CADuBA,CACvB,CAAAtB,CAAA,CAAA,OAAA,CAAoBsB,CAJf,EAMLpB,CAAA,CAAA,QANK,CAMcoB,CAvxBP,CAAf,CAAD,CA0xBG,IA1xBH,CAxC6D;\",\n\"sources\":[\"node_modules/fraction_DOT_js/fraction.js\"],\n\"sourcesContent\":[\"shadow$provide[32] = function(global,require,module,exports) {\\n/**\\n * @license Fraction.js v4.0.12 09/09/2015\\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\\n *\\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\\n * Dual licensed under the MIT or GPL Version 2 licenses.\\n **/\\n\\n\\n/**\\n *\\n * This class offers the possibility to calculate fractions.\\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\\n *\\n * Array/Object form\\n * [ 0 => <nominator>, 1 => <denominator> ]\\n * [ n => <nominator>, d => <denominator> ]\\n *\\n * Integer form\\n * - Single integer value\\n *\\n * Double form\\n * - Single double value\\n *\\n * String form\\n * 123.456 - a simple double\\n * 123/456 - a string fraction\\n * 123.'456' - a double with repeating decimal places\\n * 123.(456) - synonym\\n * 123.45'6' - a double with repeating last place\\n * 123.45(6) - synonym\\n *\\n * Example:\\n *\\n * var f = new Fraction(\\\"9.4'31'\\\");\\n * f.mul([-4, 3]).div(4.9);\\n *\\n */\\n\\n(function(root) {\\n\\n  \\\"use strict\\\";\\n\\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\\n  var MAX_CYCLE_LEN = 2000;\\n\\n  // Parsed data to avoid calling \\\"new\\\" all the time\\n  var P = {\\n    \\\"s\\\": 1,\\n    \\\"n\\\": 0,\\n    \\\"d\\\": 1\\n  };\\n\\n  function createError(name) {\\n\\n    function errorConstructor() {\\n      var temp = Error.apply(this, arguments);\\n      temp['name'] = this['name'] = name;\\n      this['stack'] = temp['stack'];\\n      this['message'] = temp['message'];\\n    }\\n\\n    /**\\n     * Error constructor\\n     *\\n     * @constructor\\n     */\\n    function IntermediateInheritor() { }\\n    IntermediateInheritor.prototype = Error.prototype;\\n    errorConstructor.prototype = new IntermediateInheritor();\\n\\n    return errorConstructor;\\n  }\\n\\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\\n\\n  function assign(n, s) {\\n\\n    if (isNaN(n = parseInt(n, 10))) {\\n      throwInvalidParam();\\n    }\\n    return n * s;\\n  }\\n\\n  function throwInvalidParam() {\\n    throw new InvalidParameter();\\n  }\\n\\n  var parse = function(p1, p2) {\\n\\n    var n = 0, d = 1, s = 1;\\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\\n\\n    var A = 0, B = 1;\\n    var C = 1, D = 1;\\n\\n    var N = 10000000;\\n    var M;\\n\\n    if (p1 === undefined || p1 === null) {\\n      /* void */\\n    } else if (p2 !== undefined) {\\n      n = p1;\\n      d = p2;\\n      s = n * d;\\n    } else\\n      switch (typeof p1) {\\n\\n        case \\\"object\\\":\\n          {\\n            if (\\\"d\\\" in p1 && \\\"n\\\" in p1) {\\n              n = p1[\\\"n\\\"];\\n              d = p1[\\\"d\\\"];\\n              if (\\\"s\\\" in p1)\\n                n *= p1[\\\"s\\\"];\\n            } else if (0 in p1) {\\n              n = p1[0];\\n              if (1 in p1)\\n                d = p1[1];\\n            } else {\\n              throwInvalidParam();\\n            }\\n            s = n * d;\\n            break;\\n          }\\n        case \\\"number\\\":\\n          {\\n            if (p1 < 0) {\\n              s = p1;\\n              p1 = -p1;\\n            }\\n\\n            if (p1 % 1 === 0) {\\n              n = p1;\\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\\n\\n              if (p1 >= 1) {\\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\\n                p1 /= z;\\n              }\\n\\n              // Using Farey Sequences\\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\\n\\n              while (B <= N && D <= N) {\\n                M = (A + C) / (B + D);\\n\\n                if (p1 === M) {\\n                  if (B + D <= N) {\\n                    n = A + C;\\n                    d = B + D;\\n                  } else if (D > B) {\\n                    n = C;\\n                    d = D;\\n                  } else {\\n                    n = A;\\n                    d = B;\\n                  }\\n                  break;\\n\\n                } else {\\n\\n                  if (p1 > M) {\\n                    A += C;\\n                    B += D;\\n                  } else {\\n                    C += A;\\n                    D += B;\\n                  }\\n\\n                  if (B > N) {\\n                    n = C;\\n                    d = D;\\n                  } else {\\n                    n = A;\\n                    d = B;\\n                  }\\n                }\\n              }\\n              n *= z;\\n            } else if (isNaN(p1) || isNaN(p2)) {\\n              d = n = NaN;\\n            }\\n            break;\\n          }\\n        case \\\"string\\\":\\n          {\\n            B = p1.match(/\\\\d+|./g);\\n\\n            if (B === null)\\n              throwInvalidParam();\\n\\n            if (B[A] === '-') {// Check for minus sign at the beginning\\n              s = -1;\\n              A++;\\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\\n              A++;\\n            }\\n\\n            if (B.length === A + 1) { // Check if it's just a simple number \\\"1234\\\"\\n              w = assign(B[A++], s);\\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\\n\\n              if (B[A] !== '.') { // Handle 0.5 and .5\\n                v = assign(B[A++], s);\\n              }\\n              A++;\\n\\n              // Check for decimal places\\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \\\"'\\\" && B[A + 3] === \\\"'\\\") {\\n                w = assign(B[A], s);\\n                y = Math.pow(10, B[A].length);\\n                A++;\\n              }\\n\\n              // Check for repeating places\\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \\\"'\\\" && B[A + 2] === \\\"'\\\") {\\n                x = assign(B[A + 1], s);\\n                z = Math.pow(10, B[A + 1].length) - 1;\\n                A += 3;\\n              }\\n\\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \\\"123/456\\\" or \\\"123:456\\\"\\n              w = assign(B[A], s);\\n              y = assign(B[A + 2], 1);\\n              A += 3;\\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \\\"123 1/2\\\"\\n              v = assign(B[A], s);\\n              w = assign(B[A + 2], s);\\n              y = assign(B[A + 4], 1);\\n              A += 5;\\n            }\\n\\n            if (B.length <= A) { // Check for more tokens on the stack\\n              d = y * z;\\n              s = /* void */\\n              n = x + d * v + z * w;\\n              break;\\n            }\\n\\n            /* Fall through on error */\\n          }\\n        default:\\n          throwInvalidParam();\\n      }\\n\\n    if (d === 0) {\\n      throw new DivisionByZero();\\n    }\\n\\n    P[\\\"s\\\"] = s < 0 ? -1 : 1;\\n    P[\\\"n\\\"] = Math.abs(n);\\n    P[\\\"d\\\"] = Math.abs(d);\\n  };\\n\\n  function modpow(b, e, m) {\\n\\n    var r = 1;\\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\\n\\n      if (e & 1) {\\n        r = (r * b) % m;\\n      }\\n    }\\n    return r;\\n  }\\n\\n\\n  function cycleLen(n, d) {\\n\\n    for (; d % 2 === 0;\\n      d /= 2) {\\n    }\\n\\n    for (; d % 5 === 0;\\n      d /= 5) {\\n    }\\n\\n    if (d === 1) // Catch non-cyclic numbers\\n      return 0;\\n\\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\\n    // 10^(d-1) % d == 1\\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\\n    // as we want to translate the numbers to strings.\\n\\n    var rem = 10 % d;\\n    var t = 1;\\n\\n    for (; rem !== 1; t++) {\\n      rem = rem * 10 % d;\\n\\n      if (t > MAX_CYCLE_LEN)\\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\\n    }\\n    return t;\\n  }\\n\\n\\n  function cycleStart(n, d, len) {\\n\\n    var rem1 = 1;\\n    var rem2 = modpow(10, len, d);\\n\\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\\n      // Solve 10^s == 10^(s+t) (mod d)\\n\\n      if (rem1 === rem2)\\n        return t;\\n\\n      rem1 = rem1 * 10 % d;\\n      rem2 = rem2 * 10 % d;\\n    }\\n    return 0;\\n  }\\n\\n  function gcd(a, b) {\\n\\n    if (!a)\\n      return b;\\n    if (!b)\\n      return a;\\n\\n    while (1) {\\n      a %= b;\\n      if (!a)\\n        return b;\\n      b %= a;\\n      if (!b)\\n        return a;\\n    }\\n  };\\n\\n  /**\\n   * Module constructor\\n   *\\n   * @constructor\\n   * @param {number|Fraction=} a\\n   * @param {number=} b\\n   */\\n  function Fraction(a, b) {\\n\\n    if (!(this instanceof Fraction)) {\\n      return new Fraction(a, b);\\n    }\\n\\n    parse(a, b);\\n\\n    if (Fraction['REDUCE']) {\\n      a = gcd(P[\\\"d\\\"], P[\\\"n\\\"]); // Abuse a\\n    } else {\\n      a = 1;\\n    }\\n\\n    this[\\\"s\\\"] = P[\\\"s\\\"];\\n    this[\\\"n\\\"] = P[\\\"n\\\"] / a;\\n    this[\\\"d\\\"] = P[\\\"d\\\"] / a;\\n  }\\n\\n  /**\\n   * Boolean global variable to be able to disable automatic reduction of the fraction\\n   *\\n   */\\n  Fraction['REDUCE'] = 1;\\n\\n  Fraction.prototype = {\\n\\n    \\\"s\\\": 1,\\n    \\\"n\\\": 0,\\n    \\\"d\\\": 1,\\n\\n    /**\\n     * Calculates the absolute value\\n     *\\n     * Ex: new Fraction(-4).abs() => 4\\n     **/\\n    \\\"abs\\\": function() {\\n\\n      return new Fraction(this[\\\"n\\\"], this[\\\"d\\\"]);\\n    },\\n\\n    /**\\n     * Inverts the sign of the current fraction\\n     *\\n     * Ex: new Fraction(-4).neg() => 4\\n     **/\\n    \\\"neg\\\": function() {\\n\\n      return new Fraction(-this[\\\"s\\\"] * this[\\\"n\\\"], this[\\\"d\\\"]);\\n    },\\n\\n    /**\\n     * Adds two rational numbers\\n     *\\n     * Ex: new Fraction({n: 2, d: 3}).add(\\\"14.9\\\") => 467 / 30\\n     **/\\n    \\\"add\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return new Fraction(\\n        this[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"d\\\"] + P[\\\"s\\\"] * this[\\\"d\\\"] * P[\\\"n\\\"],\\n        this[\\\"d\\\"] * P[\\\"d\\\"]\\n      );\\n    },\\n\\n    /**\\n     * Subtracts two rational numbers\\n     *\\n     * Ex: new Fraction({n: 2, d: 3}).add(\\\"14.9\\\") => -427 / 30\\n     **/\\n    \\\"sub\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return new Fraction(\\n        this[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"d\\\"] - P[\\\"s\\\"] * this[\\\"d\\\"] * P[\\\"n\\\"],\\n        this[\\\"d\\\"] * P[\\\"d\\\"]\\n      );\\n    },\\n\\n    /**\\n     * Multiplies two rational numbers\\n     *\\n     * Ex: new Fraction(\\\"-17.(345)\\\").mul(3) => 5776 / 111\\n     **/\\n    \\\"mul\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return new Fraction(\\n        this[\\\"s\\\"] * P[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"n\\\"],\\n        this[\\\"d\\\"] * P[\\\"d\\\"]\\n      );\\n    },\\n\\n    /**\\n     * Divides two rational numbers\\n     *\\n     * Ex: new Fraction(\\\"-17.(345)\\\").inverse().div(3)\\n     **/\\n    \\\"div\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return new Fraction(\\n        this[\\\"s\\\"] * P[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"d\\\"],\\n        this[\\\"d\\\"] * P[\\\"n\\\"]\\n      );\\n    },\\n\\n    /**\\n     * Clones the actual object\\n     *\\n     * Ex: new Fraction(\\\"-17.(345)\\\").clone()\\n     **/\\n    \\\"clone\\\": function() {\\n      return new Fraction(this);\\n    },\\n\\n    /**\\n     * Calculates the modulo of two rational numbers - a more precise fmod\\n     *\\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\\n     **/\\n    \\\"mod\\\": function(a, b) {\\n\\n      if (isNaN(this['n']) || isNaN(this['d'])) {\\n        return new Fraction(NaN);\\n      }\\n\\n      if (a === undefined) {\\n        return new Fraction(this[\\\"s\\\"] * this[\\\"n\\\"] % this[\\\"d\\\"], 1);\\n      }\\n\\n      parse(a, b);\\n      if (0 === P[\\\"n\\\"] && 0 === this[\\\"d\\\"]) {\\n        Fraction(0, 0); // Throw DivisionByZero\\n      }\\n\\n      /*\\n       * First silly attempt, kinda slow\\n       *\\n       return that[\\\"sub\\\"]({\\n       \\\"n\\\": num[\\\"n\\\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\\n       \\\"d\\\": num[\\\"d\\\"],\\n       \\\"s\\\": this[\\\"s\\\"]\\n       });*/\\n\\n      /*\\n       * New attempt: a1 / b1 = a2 / b2 * q + r\\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\\n       */\\n      return new Fraction(\\n        this[\\\"s\\\"] * (P[\\\"d\\\"] * this[\\\"n\\\"]) % (P[\\\"n\\\"] * this[\\\"d\\\"]),\\n        P[\\\"d\\\"] * this[\\\"d\\\"]\\n      );\\n    },\\n\\n    /**\\n     * Calculates the fractional gcd of two rational numbers\\n     *\\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\\n     */\\n    \\\"gcd\\\": function(a, b) {\\n\\n      parse(a, b);\\n\\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\\n\\n      return new Fraction(gcd(P[\\\"n\\\"], this[\\\"n\\\"]) * gcd(P[\\\"d\\\"], this[\\\"d\\\"]), P[\\\"d\\\"] * this[\\\"d\\\"]);\\n    },\\n\\n    /**\\n     * Calculates the fractional lcm of two rational numbers\\n     *\\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\\n     */\\n    \\\"lcm\\\": function(a, b) {\\n\\n      parse(a, b);\\n\\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\\n\\n      if (P[\\\"n\\\"] === 0 && this[\\\"n\\\"] === 0) {\\n        return new Fraction;\\n      }\\n      return new Fraction(P[\\\"n\\\"] * this[\\\"n\\\"], gcd(P[\\\"n\\\"], this[\\\"n\\\"]) * gcd(P[\\\"d\\\"], this[\\\"d\\\"]));\\n    },\\n\\n    /**\\n     * Calculates the ceil of a rational number\\n     *\\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\\n     **/\\n    \\\"ceil\\\": function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      if (isNaN(this[\\\"n\\\"]) || isNaN(this[\\\"d\\\"])) {\\n        return new Fraction(NaN);\\n      }\\n      return new Fraction(Math.ceil(places * this[\\\"s\\\"] * this[\\\"n\\\"] / this[\\\"d\\\"]), places);\\n    },\\n\\n    /**\\n     * Calculates the floor of a rational number\\n     *\\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\\n     **/\\n    \\\"floor\\\": function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      if (isNaN(this[\\\"n\\\"]) || isNaN(this[\\\"d\\\"])) {\\n        return new Fraction(NaN);\\n      }\\n      return new Fraction(Math.floor(places * this[\\\"s\\\"] * this[\\\"n\\\"] / this[\\\"d\\\"]), places);\\n    },\\n\\n    /**\\n     * Rounds a rational numbers\\n     *\\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\\n     **/\\n    \\\"round\\\": function(places) {\\n\\n      places = Math.pow(10, places || 0);\\n\\n      if (isNaN(this[\\\"n\\\"]) || isNaN(this[\\\"d\\\"])) {\\n        return new Fraction(NaN);\\n      }\\n      return new Fraction(Math.round(places * this[\\\"s\\\"] * this[\\\"n\\\"] / this[\\\"d\\\"]), places);\\n    },\\n\\n    /**\\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\\n     *\\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\\n     **/\\n    \\\"inverse\\\": function() {\\n\\n      return new Fraction(this[\\\"s\\\"] * this[\\\"d\\\"], this[\\\"n\\\"]);\\n    },\\n\\n    /**\\n     * Calculates the fraction to some integer exponent\\n     *\\n     * Ex: new Fraction(-1,2).pow(-3) => -8\\n     */\\n    \\\"pow\\\": function(m) {\\n\\n      if (m < 0) {\\n        return new Fraction(Math.pow(this['s'] * this[\\\"d\\\"], -m), Math.pow(this[\\\"n\\\"], -m));\\n      } else {\\n        return new Fraction(Math.pow(this['s'] * this[\\\"n\\\"], m), Math.pow(this[\\\"d\\\"], m));\\n      }\\n    },\\n\\n    /**\\n     * Check if two rational numbers are the same\\n     *\\n     * Ex: new Fraction(19.6).equals([98, 5]);\\n     **/\\n    \\\"equals\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return this[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"d\\\"] === P[\\\"s\\\"] * P[\\\"n\\\"] * this[\\\"d\\\"]; // Same as compare() === 0\\n    },\\n\\n    /**\\n     * Check if two rational numbers are the same\\n     *\\n     * Ex: new Fraction(19.6).equals([98, 5]);\\n     **/\\n    \\\"compare\\\": function(a, b) {\\n\\n      parse(a, b);\\n      var t = (this[\\\"s\\\"] * this[\\\"n\\\"] * P[\\\"d\\\"] - P[\\\"s\\\"] * P[\\\"n\\\"] * this[\\\"d\\\"]);\\n      return (0 < t) - (t < 0);\\n    },\\n\\n    \\\"simplify\\\": function(eps) {\\n\\n      // First naive implementation, needs improvement\\n\\n      if (isNaN(this['n']) || isNaN(this['d'])) {\\n        return this;\\n      }\\n\\n      var cont = this['abs']()['toContinued']();\\n\\n      eps = eps || 0.001;\\n\\n      function rec(a) {\\n        if (a.length === 1)\\n          return new Fraction(a[0]);\\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\\n      }\\n\\n      for (var i = 0; i < cont.length; i++) {\\n        var tmp = rec(cont.slice(0, i + 1));\\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\\n          return tmp['mul'](this['s']);\\n        }\\n      }\\n      return this;\\n    },\\n\\n    /**\\n     * Check if two rational numbers are divisible\\n     *\\n     * Ex: new Fraction(19.6).divisible(1.5);\\n     */\\n    \\\"divisible\\\": function(a, b) {\\n\\n      parse(a, b);\\n      return !(!(P[\\\"n\\\"] * this[\\\"d\\\"]) || ((this[\\\"n\\\"] * P[\\\"d\\\"]) % (P[\\\"n\\\"] * this[\\\"d\\\"])));\\n    },\\n\\n    /**\\n     * Returns a decimal representation of the fraction\\n     *\\n     * Ex: new Fraction(\\\"100.'91823'\\\").valueOf() => 100.91823918239183\\n     **/\\n    'valueOf': function() {\\n\\n      return this[\\\"s\\\"] * this[\\\"n\\\"] / this[\\\"d\\\"];\\n    },\\n\\n    /**\\n     * Returns a string-fraction representation of a Fraction object\\n     *\\n     * Ex: new Fraction(\\\"1.'3'\\\").toFraction() => \\\"4 1/3\\\"\\n     **/\\n    'toFraction': function(excludeWhole) {\\n\\n      var whole, str = \\\"\\\";\\n      var n = this[\\\"n\\\"];\\n      var d = this[\\\"d\\\"];\\n      if (this[\\\"s\\\"] < 0) {\\n        str += '-';\\n      }\\n\\n      if (d === 1) {\\n        str += n;\\n      } else {\\n\\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\\n          str += whole;\\n          str += \\\" \\\";\\n          n %= d;\\n        }\\n\\n        str += n;\\n        str += '/';\\n        str += d;\\n      }\\n      return str;\\n    },\\n\\n    /**\\n     * Returns a latex representation of a Fraction object\\n     *\\n     * Ex: new Fraction(\\\"1.'3'\\\").toLatex() => \\\"\\\\frac{4}{3}\\\"\\n     **/\\n    'toLatex': function(excludeWhole) {\\n\\n      var whole, str = \\\"\\\";\\n      var n = this[\\\"n\\\"];\\n      var d = this[\\\"d\\\"];\\n      if (this[\\\"s\\\"] < 0) {\\n        str += '-';\\n      }\\n\\n      if (d === 1) {\\n        str += n;\\n      } else {\\n\\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\\n          str += whole;\\n          n %= d;\\n        }\\n\\n        str += \\\"\\\\\\\\frac{\\\";\\n        str += n;\\n        str += '}{';\\n        str += d;\\n        str += '}';\\n      }\\n      return str;\\n    },\\n\\n    /**\\n     * Returns an array of continued fraction elements\\n     *\\n     * Ex: new Fraction(\\\"7/8\\\").toContinued() => [0,1,7]\\n     */\\n    'toContinued': function() {\\n\\n      var t;\\n      var a = this['n'];\\n      var b = this['d'];\\n      var res = [];\\n\\n      if (isNaN(a) || isNaN(b)) {\\n        return res;\\n      }\\n\\n      do {\\n        res.push(Math.floor(a / b));\\n        t = a % b;\\n        a = b;\\n        b = t;\\n      } while (a !== 1);\\n\\n      return res;\\n    },\\n\\n    /**\\n     * Creates a string representation of a fraction with all digits\\n     *\\n     * Ex: new Fraction(\\\"100.'91823'\\\").toString() => \\\"100.(91823)\\\"\\n     **/\\n    'toString': function(dec) {\\n\\n      var g;\\n      var N = this[\\\"n\\\"];\\n      var D = this[\\\"d\\\"];\\n\\n      if (isNaN(N) || isNaN(D)) {\\n        return \\\"NaN\\\";\\n      }\\n\\n      if (!Fraction['REDUCE']) {\\n        g = gcd(N, D);\\n        N /= g;\\n        D /= g;\\n      }\\n\\n      dec = dec || 15; // 15 = decimal places when no repitation\\n\\n      var cycLen = cycleLen(N, D); // Cycle length\\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\\n\\n      var str = this['s'] === -1 ? \\\"-\\\" : \\\"\\\";\\n\\n      str += N / D | 0;\\n\\n      N %= D;\\n      N *= 10;\\n\\n      if (N)\\n        str += \\\".\\\";\\n\\n      if (cycLen) {\\n\\n        for (var i = cycOff; i--;) {\\n          str += N / D | 0;\\n          N %= D;\\n          N *= 10;\\n        }\\n        str += \\\"(\\\";\\n        for (var i = cycLen; i--;) {\\n          str += N / D | 0;\\n          N %= D;\\n          N *= 10;\\n        }\\n        str += \\\")\\\";\\n      } else {\\n        for (var i = dec; N && i--;) {\\n          str += N / D | 0;\\n          N %= D;\\n          N *= 10;\\n        }\\n      }\\n      return str;\\n    }\\n  };\\n\\n  if (typeof define === \\\"function\\\" && define[\\\"amd\\\"]) {\\n    define([], function() {\\n      return Fraction;\\n    });\\n  } else if (typeof exports === \\\"object\\\") {\\n    Object.defineProperty(Fraction, \\\"__esModule\\\", { 'value': true });\\n    Fraction['default'] = Fraction;\\n    Fraction['Fraction'] = Fraction;\\n    module['exports'] = Fraction;\\n  } else {\\n    root['Fraction'] = Fraction;\\n  }\\n\\n})(this);\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"createError\",\"name\",\"errorConstructor\",\"temp\",\"Error\",\"apply\",\"arguments\",\"IntermediateInheritor\",\"prototype\",\"assign\",\"n\",\"s\",\"isNaN\",\"parseInt\",\"throwInvalidParam\",\"InvalidParameter\",\"gcd\",\"a\",\"b\",\"Fraction\",\"parse\",\"P\",\"DivisionByZero\",\"p1\",\"p2\",\"d\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"undefined\",\"Math\",\"pow\",\"floor\",\"log\",\"LN10\",\"N\",\"M\",\"NaN\",\"match\",\"length\",\"abs\",\"neg\",\"add\",\"sub\",\"mul\",\"div\",\"clone\",\"mod\",\"lcm\",\"ceil\",\"places\",\"round\",\"inverse\",\"m\",\"equals\",\"compare\",\"t\",\"simplify\",\"eps\",\"rec\",\"slice\",\"cont\",\"i\",\"tmp\",\"valueOf\",\"divisible\",\"toFraction\",\"excludeWhole\",\"whole\",\"str\",\"toLatex\",\"toContinued\",\"res\",\"push\",\"toString\",\"dec\",\"g\",\"rem\",\"MAX_CYCLE_LEN\",\"rem1\",\"cycLen\",\"r\",\"e\",\"rem2\",\"cycOff\",\"define\",\"Object\",\"defineProperty\"]\n}\n"]