["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/variance.transform.js"],"~:js","shadow$provide[592]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createVarianceTransform=void 0;c=b(25);var q=b(250),f=b(534),u=b(581);b=(0,c.factory)(\"variance\",\"typed add subtract multiply divide apply isNaN\".split(\" \"),function(k){var t=k.typed,p=k.add,g=k.subtract,d=k.multiply,l=k.divide,h=k.apply;k=k.isNaN;var n=(0,f.createVariance)({typed:t,add:p,subtract:g,multiply:d,divide:l,apply:h,isNaN:k});return t(\"variance\",{\"...any\":function(r){r=(0,u.lastDimToZeroBase)(r);try{return n.apply(null,\nr)}catch(v){throw(0,q.errorTransform)(v);}}})},{isTransformFunction:!0});a.createVarianceTransform=b}","~:source","shadow$provide[592] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVarianceTransform = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _errorTransform = require(\"./utils/errorTransform.js\");\n\nvar _variance = require(\"../../function/statistics/variance.js\");\n\nvar _lastDimToZeroBase = require(\"./utils/lastDimToZeroBase.js\");\n\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\n\nvar createVarianceTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      apply = _ref.apply,\n      isNaN = _ref.isNaN;\n  var variance = (0, _variance.createVariance)({\n    typed: typed,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    apply: apply,\n    isNaN: isNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);\n\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw (0, _errorTransform.errorTransform)(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});\nexports.createVarianceTransform = createVarianceTransform;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$function$statistics$variance","~$module$node_modules$mathjs$lib$cjs$expression$transform$utils$lastDimToZeroBase","~$module$node_modules$mathjs$lib$cjs$expression$transform$utils$errorTransform","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["typed","multiply","__esModule","apply","isTransformFunction","value","createVarianceTransform","subtract","isNaN","divide","add"]],"~:compiled-at",1619135724044,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$variance_transform.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,uBAAR,CAAkC,IAAK,EAEnCC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAkBR,CAAA,CAAQ,GAAR,CAAtB,CAEIS,EAAYT,CAAA,CAAQ,GAAR,CAFhB,CAIIU,EAAqBV,CAAA,CAAQ,GAAR,CAYrBM,EAAAA,CAAyC,CAAC,CAAA,CAAGC,CAASI,CAAAA,OAAb,EAVlCC,UAUkC,CAT1BC,gDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAS0B,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACjGC,EAAQD,CAAKC,CAAAA,KADoF,CAEjGC,EAAMF,CAAKE,CAAAA,GAFsF,CAGjGC,EAAWH,CAAKG,CAAAA,QAHiF,CAIjGC,EAAWJ,CAAKI,CAAAA,QAJiF,CAKjGC,EAASL,CAAKK,CAAAA,MALmF,CAMjGC,EAAQN,CAAKM,CAAAA,KACbC,EAAAA,CAAQP,CAAKO,CAAAA,KACjB,KAAIC,EAAW,CAAC,CAAA,CAAGb,CAAUc,CAAAA,cAAd,EAA8B,CAC3CR,MAAOA,CADoC,CAE3CC,IAAKA,CAFsC,CAG3CC,SAAUA,CAHiC,CAI3CC,SAAUA,CAJiC,CAK3CC,OAAQA,CALmC,CAM3CC,MAAOA,CANoC,CAO3CC,MAAOA,CAPoC,CAA9B,CASf,OAAON,EAAA,CA3BEH,UA2BF,CAAY,CACjB,SAAUY,QAAY,CAACC,CAAD,CAAO,CAC3BA,CAAA,CAAO,CAAC,CAAA,CAAGf,CAAmBgB,CAAAA,iBAAvB,EAA0CD,CAA1C,CAEP,IAAI,CACF,MAAOH,EAASF,CAAAA,KAAT,CAAe,IAAf;AAAqBK,CAArB,CADL,CAEF,MAAOE,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGnB,CAAgBoB,CAAAA,cAApB,EAAoCD,CAApC,CAAN,CADY,CALa,CADZ,CAAZ,CAjB8F,CAA1D,CA4B1C,CACDE,oBAAqB,CAAA,CADpB,CA5B0C,CA+B7C3B,EAAQI,CAAAA,uBAAR,CAAkCA,CAzD4B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/variance.transform.js\"],\n\"sourcesContent\":[\"shadow$provide[592] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createVarianceTransform = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _errorTransform = require(\\\"./utils/errorTransform.js\\\");\\n\\nvar _variance = require(\\\"../../function/statistics/variance.js\\\");\\n\\nvar _lastDimToZeroBase = require(\\\"./utils/lastDimToZeroBase.js\\\");\\n\\nvar name = 'variance';\\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\\n/**\\n * Attach a transform function to math.var\\n * Adds a property transform containing the transform function.\\n *\\n * This transform changed the `dim` parameter of function var\\n * from one-based to zero based\\n */\\n\\nvar createVarianceTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      add = _ref.add,\\n      subtract = _ref.subtract,\\n      multiply = _ref.multiply,\\n      divide = _ref.divide,\\n      apply = _ref.apply,\\n      isNaN = _ref.isNaN;\\n  var variance = (0, _variance.createVariance)({\\n    typed: typed,\\n    add: add,\\n    subtract: subtract,\\n    multiply: multiply,\\n    divide: divide,\\n    apply: apply,\\n    isNaN: isNaN\\n  });\\n  return typed(name, {\\n    '...any': function any(args) {\\n      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);\\n\\n      try {\\n        return variance.apply(null, args);\\n      } catch (err) {\\n        throw (0, _errorTransform.errorTransform)(err);\\n      }\\n    }\\n  });\\n}, {\\n  isTransformFunction: true\\n});\\nexports.createVarianceTransform = createVarianceTransform;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createVarianceTransform\",\"_factory\",\"_errorTransform\",\"_variance\",\"_lastDimToZeroBase\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"add\",\"subtract\",\"multiply\",\"divide\",\"apply\",\"isNaN\",\"variance\",\"createVariance\",\"any\",\"args\",\"lastDimToZeroBase\",\"err\",\"errorTransform\",\"isTransformFunction\"]\n}\n"]