["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js"],"~:js","shadow$provide[143]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRotationMatrix=void 0;var q=b(14);c=b(25);c=(0,c.factory)(\"rotationMatrix\",\"typed config multiplyScalar addScalar unaryMinus norm matrix BigNumber DenseMatrix SparseMatrix cos sin\".split(\" \"),function(f){function u(F,E){var G=(0,q.isBigNumber)(F)?new C(-1):-1,I=x(F);F=D(F);G=[[I,h(G,F)],[F,I]];return p(G,E)}function k(F){F=F.size();if(1>F.length||3!==F[0])throw new RangeError(\"Vector must be of dimensions 1x3\");\n}function t(F){return F.reduce(function(E,G){return h(E,G)})}function p(F,E){if(E){if(\"sparse\"===E)return new B(F);if(\"dense\"===E)return new w(F);throw new TypeError('Unknown matrix type \"'.concat(E,'\"'));}return F}function g(F,E,G){var I=v(E);if(0===I)throw new RangeError(\"Rotation around zero vector\");var L=(0,q.isBigNumber)(F)?C:null,M=L?new L(1):1,S=L?new L(-1):-1,P=L?new L(E.get([0])/I):E.get([0])/I,R=L?new L(E.get([1])/I):E.get([1])/I;E=L?new L(E.get([2])/I):E.get([2])/I;I=x(F);M=n(M,r(I));\nvar ba=D(F);F=n(I,t([P,P,M]));L=n(t([P,R,M]),t([S,E,ba]));var Q=n(t([P,E,M]),t([R,ba])),T=n(t([P,R,M]),t([E,ba])),Y=n(I,t([R,R,M])),ca=n(t([R,E,M]),t([S,P,ba]));S=n(t([P,E,M]),t([S,R,ba]));P=n(t([R,E,M]),t([P,ba]));R=n(I,t([E,E,M]));return p([[F,L,Q],[T,Y,ca],[S,P,R]],G)}var d=f.typed,l=f.config,h=f.multiplyScalar,n=f.addScalar,r=f.unaryMinus,v=f.norm,C=f.BigNumber,z=f.matrix,w=f.DenseMatrix,B=f.SparseMatrix,x=f.cos,D=f.sin;return d(\"rotationMatrix\",{\"\":function(){return\"Matrix\"===l.matrix?z([]):\n[]},string:function(F){return z(F)},\"number | BigNumber | Complex | Unit\":function(F){return u(F,\"Matrix\"===l.matrix?\"dense\":void 0)},\"number | BigNumber | Complex | Unit, string\":function(F,E){return u(F,E)},\"number | BigNumber | Complex | Unit, Array\":function(F,E){E=z(E);k(E);return g(F,E,void 0)},\"number | BigNumber | Complex | Unit, Matrix\":function(F,E){k(E);var G=E.storage()||(\"Matrix\"===l.matrix?\"dense\":void 0);return g(F,E,G)},\"number | BigNumber | Complex | Unit, Array, string\":function(F,\nE,G){E=z(E);k(E);return g(F,E,G)},\"number | BigNumber | Complex | Unit, Matrix, string\":function(F,E,G){k(E);return g(F,E,G)}})});a.createRotationMatrix=c}","~:source","shadow$provide[143] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotationMatrix = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nvar createRotationMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      norm = _ref.norm,\n      BigNumber = _ref.BigNumber,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix,\n      cos = _ref.cos,\n      sin = _ref.sin;\n\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = (0, _is.isBigNumber)(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce(function (p, curr) {\n      return multiplyScalar(p, curr);\n    });\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n\n    var Big = (0, _is.isBigNumber)(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});\nexports.createRotationMatrix = createRotationMatrix;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","createRotationMatrix","__esModule","value"]],"~:compiled-at",1619135723886,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$rotationMatrix.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js\"],\n\"sourcesContent\":[\"shadow$provide[143] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRotationMatrix = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'rotationMatrix';\\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\\nvar createRotationMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      multiplyScalar = _ref.multiplyScalar,\\n      addScalar = _ref.addScalar,\\n      unaryMinus = _ref.unaryMinus,\\n      norm = _ref.norm,\\n      BigNumber = _ref.BigNumber,\\n      matrix = _ref.matrix,\\n      DenseMatrix = _ref.DenseMatrix,\\n      SparseMatrix = _ref.SparseMatrix,\\n      cos = _ref.cos,\\n      sin = _ref.sin;\\n\\n  /**\\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\\n   *\\n   * Syntax:\\n   *\\n   *    math.rotationMatrix(theta)\\n   *    math.rotationMatrix(theta, format)\\n   *    math.rotationMatrix(theta, [v])\\n   *    math.rotationMatrix(theta, [v], format)\\n   *\\n   * Examples:\\n   *\\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\\n   *\\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\\n   *\\n   *\\n   * See also:\\n   *\\n   *    matrix, cos, sin\\n   *\\n   *\\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\\n   * @param {Array | Matrix} [v]                           Rotation axis\\n   * @param {string} [format]                              Result Matrix storage format\\n   * @return {Array | Matrix}                              Rotation matrix\\n   */\\n  return typed(name, {\\n    '': function _() {\\n      return config.matrix === 'Matrix' ? matrix([]) : [];\\n    },\\n    string: function string(format) {\\n      return matrix(format);\\n    },\\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\\n    },\\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\\n      return _rotationMatrix2x2(theta, format);\\n    },\\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\\n      var matrixV = matrix(v);\\n\\n      _validateVector(matrixV);\\n\\n      return _rotationMatrix3x3(theta, matrixV, undefined);\\n    },\\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\\n      _validateVector(v);\\n\\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\\n      return _rotationMatrix3x3(theta, v, storageType);\\n    },\\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\\n      var matrixV = matrix(v);\\n\\n      _validateVector(matrixV);\\n\\n      return _rotationMatrix3x3(theta, matrixV, format);\\n    },\\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\\n      _validateVector(v);\\n\\n      return _rotationMatrix3x3(theta, v, format);\\n    }\\n  });\\n  /**\\n   * Returns 2x2 matrix of 2D rotation of angle theta\\n   *\\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\\n   * @param {string} format                              The result Matrix storage format\\n   * @returns {Matrix}\\n   * @private\\n   */\\n\\n  function _rotationMatrix2x2(theta, format) {\\n    var Big = (0, _is.isBigNumber)(theta);\\n    var minusOne = Big ? new BigNumber(-1) : -1;\\n    var cosTheta = cos(theta);\\n    var sinTheta = sin(theta);\\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\\n    return _convertToFormat(data, format);\\n  }\\n\\n  function _validateVector(v) {\\n    var size = v.size();\\n\\n    if (size.length < 1 || size[0] !== 3) {\\n      throw new RangeError('Vector must be of dimensions 1x3');\\n    }\\n  }\\n\\n  function _mul(array) {\\n    return array.reduce(function (p, curr) {\\n      return multiplyScalar(p, curr);\\n    });\\n  }\\n\\n  function _convertToFormat(data, format) {\\n    if (format) {\\n      if (format === 'sparse') {\\n        return new SparseMatrix(data);\\n      }\\n\\n      if (format === 'dense') {\\n        return new DenseMatrix(data);\\n      }\\n\\n      throw new TypeError(\\\"Unknown matrix type \\\\\\\"\\\".concat(format, \\\"\\\\\\\"\\\"));\\n    }\\n\\n    return data;\\n  }\\n  /**\\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\\n   *\\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\\n   * @param {Matrix} v                                  The rotation axis vector\\n   * @param {string} format                             The storage format of the resulting matrix\\n   * @returns {Matrix}\\n   * @private\\n   */\\n\\n\\n  function _rotationMatrix3x3(theta, v, format) {\\n    var normV = norm(v);\\n\\n    if (normV === 0) {\\n      throw new RangeError('Rotation around zero vector');\\n    }\\n\\n    var Big = (0, _is.isBigNumber)(theta) ? BigNumber : null;\\n    var one = Big ? new Big(1) : 1;\\n    var minusOne = Big ? new Big(-1) : -1;\\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\\n    var c = cos(theta);\\n    var oneMinusC = addScalar(one, unaryMinus(c));\\n    var s = sin(theta);\\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\\n    return _convertToFormat(data, format);\\n  }\\n});\\nexports.createRotationMatrix = createRotationMatrix;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRotationMatrix\",\"_is\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_rotationMatrix2x2\",\"theta\",\"format\",\"minusOne\",\"Big\",\"isBigNumber\",\"BigNumber\",\"cosTheta\",\"cos\",\"sinTheta\",\"sin\",\"data\",\"multiplyScalar\",\"_convertToFormat\",\"_validateVector\",\"v\",\"size\",\"length\",\"RangeError\",\"_mul\",\"array\",\"reduce\",\"p\",\"curr\",\"SparseMatrix\",\"DenseMatrix\",\"TypeError\",\"concat\",\"_rotationMatrix3x3\",\"normV\",\"norm\",\"one\",\"vx\",\"get\",\"vy\",\"vz\",\"c\",\"oneMinusC\",\"addScalar\",\"unaryMinus\",\"s\",\"r11\",\"r12\",\"r13\",\"r21\",\"r22\",\"r23\",\"r31\",\"r32\",\"r33\",\"typed\",\"config\",\"matrix\",\"_\",\"string\",\"numberBigNumberComplexUnit\",\"undefined\",\"numberBigNumberComplexUnitString\",\"numberBigNumberComplexUnitArray\",\"matrixV\",\"numberBigNumberComplexUnitMatrix\",\"storageType\",\"storage\",\"numberBigNumberComplexUnitArrayString\",\"numberBigNumberComplexUnitMatrixString\"]\n}\n"]