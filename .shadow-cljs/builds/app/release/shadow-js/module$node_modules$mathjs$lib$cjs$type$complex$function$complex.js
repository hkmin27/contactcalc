["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/complex/function/complex.js"],"~:js","shadow$provide[66]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createComplex=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"complex\",[\"typed\",\"Complex\"],function(f){var u=f.typed,k=f.Complex;return u(\"complex\",{\"\":function(){return k.ZERO},number:function(t){return new k(t,0)},\"number, number\":function(t,p){return new k(t,p)},\"BigNumber, BigNumber\":function(t,p){return new k(t.toNumber(),p.toNumber())},Fraction:function(t){return new k(t.valueOf(),0)},Complex:function(t){return t.clone()},\nstring:function(t){return k(t)},\"null\":function(t){return k(0)},Object:function(t){if(\"re\"in t&&\"im\"in t)return new k(t.re,t.im);if(\"r\"in t&&\"phi\"in t||\"abs\"in t&&\"arg\"in t)return new k(t);throw Error(\"Expected object with properties (re and im) or (r and phi) or (abs and arg)\");},\"Array | Matrix\":function(t){return(0,q.deepMap)(t,this)}})});a.createComplex=b}","~:source","shadow$provide[66] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComplex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nvar createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Complex = _ref.Complex;\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function numberNumber(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    \"null\": function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createComplex = createComplex;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","Complex","Object","__esModule","value","number","Fraction","createComplex"]],"~:compiled-at",1619135723765,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$complex$function$complex.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAEzBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA+B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,SAAVA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAAUF,CAAKE,CAAAA,OAwCnB,OAAOD,EAAA,CAAM,SAAN,CAAiB,CACtB,GAAIE,QAAU,EAAG,CACf,MAAOD,EAAQE,CAAAA,IADA,CADK,CAItBC,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAO,KAAIJ,CAAJ,CAAYI,CAAZ,CAAe,CAAf,CADkB,CAJL,CAOtB,iBAAkBC,QAAqB,CAACC,CAAD,CAAKC,CAAL,CAAS,CAC9C,MAAO,KAAIP,CAAJ,CAAYM,CAAZ,CAAgBC,CAAhB,CADuC,CAP1B,CAWtB,uBAAwBC,QAA2B,CAACF,CAAD,CAAKC,CAAL,CAAS,CAC1D,MAAO,KAAIP,CAAJ,CAAYM,CAAGG,CAAAA,QAAH,EAAZ,CAA2BF,CAAGE,CAAAA,QAAH,EAA3B,CADmD,CAXtC,CActBC,SAAUA,QAAiB,CAACN,CAAD,CAAI,CAC7B,MAAO,KAAIJ,CAAJ,CAAYI,CAAEO,CAAAA,OAAF,EAAZ,CAAyB,CAAzB,CADsB,CAdT,CAiBtBX,QAASA,QAAgB,CAACI,CAAD,CAAI,CAC3B,MAAOA,EAAEQ,CAAAA,KAAF,EADoB,CAjBP;AAoBtBC,OAAQA,QAAe,CAACT,CAAD,CAAI,CACzB,MAAOJ,EAAA,CAAQI,CAAR,CADkB,CApBL,CAuBtB,OAAQU,QAAc,CAACV,CAAD,CAAI,CACxB,MAAOJ,EAAA,CAAQ,CAAR,CADiB,CAvBJ,CA0BtBX,OAAQA,QAAe,CAACe,CAAD,CAAI,CACzB,GAAI,IAAJ,EAAYA,EAAZ,EAAiB,IAAjB,EAAyBA,EAAzB,CACE,MAAO,KAAIJ,CAAJ,CAAYI,CAAEE,CAAAA,EAAd,CAAkBF,CAAEG,CAAAA,EAApB,CAGT,IAAI,GAAJ,EAAWH,EAAX,EAAgB,KAAhB,EAAyBA,EAAzB,EAA8B,KAA9B,EAAuCA,EAAvC,EAA4C,KAA5C,EAAqDA,EAArD,CACE,MAAO,KAAIJ,CAAJ,CAAYI,CAAZ,CAGT,MAAUW,MAAJ,CAAU,6EAAV,CAAN,CATyB,CA1BL,CAqCtB,iBAAkBC,QAAoB,CAACZ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,CAAYuB,CAAAA,OAAhB,EAAyBb,CAAzB,CAA4B,IAA5B,CADiC,CArCpB,CAAjB,CA1CoF,CAA1D,CAoFnChB,EAAQI,CAAAA,aAAR,CAAwBA,CAlGqC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/complex/function/complex.js\"],\n\"sourcesContent\":[\"shadow$provide[66] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createComplex = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../../utils/collection.js\\\");\\n\\nvar name = 'complex';\\nvar dependencies = ['typed', 'Complex'];\\nvar createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Create a complex value or convert a value to a complex value.\\n   *\\n   * Syntax:\\n   *\\n   *     math.complex()                           // creates a complex value with zero\\n   *                                              // as real and imaginary part.\\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\\n   *                                              // values for real and imaginary part.\\n   *     math.complex(re : number)                // creates a complex value with provided\\n   *                                              // real value and zero imaginary part.\\n   *     math.complex(complex : Complex)          // clones the provided complex value.\\n   *     math.complex(arg : string)               // parses a string into a complex value.\\n   *     math.complex(array : Array)              // converts the elements of the array\\n   *                                              // or matrix element wise into a\\n   *                                              // complex value.\\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\\n   *                                              // values for real an imaginary part.\\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\\n   *                                              // polar coordinates\\n   *\\n   * Examples:\\n   *\\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\\n   *    a.re = 5                          // a = Complex 5 - 4i\\n   *    const i = a.im                    // Number -4\\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\\n   *    const c = math.complex()          // Complex 0 + 0i\\n   *    const d = math.add(a, b)          // Complex 5 + 2i\\n   *\\n   * See also:\\n   *\\n   *    bignumber, boolean, index, matrix, number, string, unit\\n   *\\n   * @param {* | Array | Matrix} [args]\\n   *            Arguments specifying the real and imaginary part of the complex number\\n   * @return {Complex | Array | Matrix} Returns a complex value\\n   */\\n  return typed('complex', {\\n    '': function _() {\\n      return Complex.ZERO;\\n    },\\n    number: function number(x) {\\n      return new Complex(x, 0);\\n    },\\n    'number, number': function numberNumber(re, im) {\\n      return new Complex(re, im);\\n    },\\n    // TODO: this signature should be redundant\\n    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {\\n      return new Complex(re.toNumber(), im.toNumber());\\n    },\\n    Fraction: function Fraction(x) {\\n      return new Complex(x.valueOf(), 0);\\n    },\\n    Complex: function Complex(x) {\\n      return x.clone();\\n    },\\n    string: function string(x) {\\n      return Complex(x); // for example '2 + 3i'\\n    },\\n    \\\"null\\\": function _null(x) {\\n      return Complex(0);\\n    },\\n    Object: function Object(x) {\\n      if ('re' in x && 'im' in x) {\\n        return new Complex(x.re, x.im);\\n      }\\n\\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\\n        return new Complex(x);\\n      }\\n\\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createComplex = createComplex;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createComplex\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Complex\",\"_\",\"ZERO\",\"number\",\"x\",\"numberNumber\",\"re\",\"im\",\"BigNumberBigNumber\",\"toNumber\",\"Fraction\",\"valueOf\",\"clone\",\"string\",\"_null\",\"Error\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]