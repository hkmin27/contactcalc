["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/sign.js"],"~:js","shadow$provide[101]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSign=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"sign\",[\"typed\",\"BigNumber\",\"Fraction\",\"complex\"],function(u){var k=u.typed,t=u.BigNumber,p=u.complex,g=u.Fraction;return k(\"sign\",{number:f.signNumber,Complex:function(d){return 0===d.im?p((0,f.signNumber)(d.re)):d.sign()},BigNumber:function(d){return new t(d.cmp(0))},Fraction:function(d){return new g(d.s,1)},\"Array | Matrix\":function(d){return(0,\nq.deepMap)(d,this,!0)},Unit:function(d){return this(d.value)}})});a.createSign=b}","~:source","shadow$provide[101] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSign = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nvar createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber,\n      complex = _ref.complex,\n      _Fraction = _ref.Fraction;\n\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: _index.signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    }\n  });\n});\nexports.createSign = createSign;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","number","BigNumber","Fraction","createSign"]],"~:compiled-at",1619135723784,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$sign.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,WAAVA,CAAuB,UAAvBA,CAAmC,SAAnCA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACpFC,EAAQD,CAAKC,CAAAA,KADuE,CAEpFC,EAAaF,CAAKG,CAAAA,SAFkE,CAGpFC,EAAUJ,CAAKI,CAAAA,OAHqE,CAIpFC,EAAYL,CAAKM,CAAAA,QAgCrB,OAAOL,EAAA,CAtCEH,MAsCF,CAAY,CACjBS,OAAQX,CAAOY,CAAAA,UADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAgB,EAAT,GAAAA,CAAEC,CAAAA,EAAF,CAAaP,CAAA,CAAQ,CAAC,CAAA,CAAGR,CAAOY,CAAAA,UAAX,EAAuBE,CAAEE,CAAAA,EAAzB,CAAR,CAAb,CAAqDF,CAAEG,CAAAA,IAAF,EADjC,CAFZ,CAKjBV,UAAWA,QAAkB,CAACO,CAAD,CAAI,CAC/B,MAAO,KAAIR,CAAJ,CAAeQ,CAAEI,CAAAA,GAAF,CAAM,CAAN,CAAf,CADwB,CALhB,CAQjBR,SAAUA,QAAiB,CAACI,CAAD,CAAI,CAC7B,MAAO,KAAIL,CAAJ,CAAcK,CAAEK,CAAAA,CAAhB,CAAmB,CAAnB,CADsB,CARd,CAWjB,iBAAkBC,QAAoB,CAACN,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA;AAAGf,CAAYsB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAXzB,CAejBQ,KAAMA,QAAa,CAACR,CAAD,CAAI,CACrB,MAAO,KAAA,CAAKA,CAAElB,CAAAA,KAAP,CADc,CAfN,CAAZ,CApCiF,CAA1D,CAwDhCH,EAAQI,CAAAA,UAAR,CAAqBA,CAxEyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/sign.js\"],\n\"sourcesContent\":[\"shadow$provide[101] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSign = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'sign';\\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\\nvar createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      _BigNumber = _ref.BigNumber,\\n      complex = _ref.complex,\\n      _Fraction = _ref.Fraction;\\n\\n  /**\\n   * Compute the sign of a value. The sign of a value x is:\\n   *\\n   * -  1 when x > 0\\n   * - -1 when x < 0\\n   * -  0 when x == 0\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.sign(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.sign(3.5)               // returns 1\\n   *    math.sign(-4.2)              // returns -1\\n   *    math.sign(0)                 // returns 0\\n   *\\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\\n   *\\n   * See also:\\n   *\\n   *    abs\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\\n   *            The number for which to determine the sign\\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\\n   *            The sign of `x`\\n   */\\n  return typed(name, {\\n    number: _index.signNumber,\\n    Complex: function Complex(x) {\\n      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return new _BigNumber(x.cmp(0));\\n    },\\n    Fraction: function Fraction(x) {\\n      return new _Fraction(x.s, 1);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since sign(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    },\\n    Unit: function Unit(x) {\\n      return this(x.value);\\n    }\\n  });\\n});\\nexports.createSign = createSign;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSign\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"_BigNumber\",\"BigNumber\",\"complex\",\"_Fraction\",\"Fraction\",\"number\",\"signNumber\",\"Complex\",\"x\",\"im\",\"re\",\"sign\",\"cmp\",\"s\",\"ArrayMatrix\",\"deepMap\",\"Unit\"]\n}\n"]