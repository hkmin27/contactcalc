["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/logical/not.js"],"~:js","shadow$provide[118]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createNot=void 0;var q=b(38);c=b(25);var f=b(50);b=(0,c.factory)(\"not\",[\"typed\"],function(u){u=u.typed;return u(\"not\",{number:f.notNumber,Complex:function(k){return 0===k.re&&0===k.im},BigNumber:function(k){return k.isZero()||k.isNaN()},Unit:function(k){return null!==k.value?this(k.value):!0},\"Array | Matrix\":function(k){return(0,q.deepMap)(k,this)}})});a.createNot=b}","~:source","shadow$provide[118] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNot = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'not';\nvar dependencies = ['typed'];\nvar createNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    number: _index.notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return x.value !== null ? this(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createNot = createNot;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","number","BigNumber","createNot"]],"~:compiled-at",1619135723798,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$logical$not.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA2B,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CACnFC,CAAAA,CAAQD,CAAKC,CAAAA,KA2BjB,OAAOA,EAAA,CA9BEH,KA8BF,CAAY,CACjBI,OAAQN,CAAOO,CAAAA,SADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAgB,EAAhB,GAAOA,CAAEC,CAAAA,EAAT,EAA8B,CAA9B,GAAqBD,CAAEE,CAAAA,EADI,CAFZ,CAKjBC,UAAWA,QAAkB,CAACH,CAAD,CAAI,CAC/B,MAAOA,EAAEI,CAAAA,MAAF,EAAP,EAAqBJ,CAAEK,CAAAA,KAAF,EADU,CALhB,CAQjBC,KAAMA,QAAa,CAACN,CAAD,CAAI,CACrB,MAAmB,KAAZ,GAAAA,CAAEb,CAAAA,KAAF,CAAmB,IAAA,CAAKa,CAAEb,CAAAA,KAAP,CAAnB,CAAmC,CAAA,CADrB,CARN,CAWjB,iBAAkBoB,QAAoB,CAACP,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,CAAYmB,CAAAA,OAAhB,EAAyBR,CAAzB,CAA4B,IAA5B,CADiC,CAXzB,CAAZ,CA5BgF,CAA1D,CA4C/BhB,EAAQI,CAAAA,SAAR,CAAoBA,CA5D0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/logical/not.js\"],\n\"sourcesContent\":[\"shadow$provide[118] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createNot = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'not';\\nvar dependencies = ['typed'];\\nvar createNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Logical `not`. Flips boolean value of a given parameter.\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.not(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.not(2)      // returns false\\n   *    math.not(0)      // returns true\\n   *    math.not(true)   // returns false\\n   *\\n   *    a = [2, -7, 0]\\n   *    math.not(a)      // returns [false, false, true]\\n   *\\n   * See also:\\n   *\\n   *    and, or, xor\\n   *\\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\\n   * @return {boolean | Array | Matrix}\\n   *            Returns true when input is a zero or empty value.\\n   */\\n  return typed(name, {\\n    number: _index.notNumber,\\n    Complex: function Complex(x) {\\n      return x.re === 0 && x.im === 0;\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.isZero() || x.isNaN();\\n    },\\n    Unit: function Unit(x) {\\n      return x.value !== null ? this(x.value) : true;\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createNot = createNot;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createNot\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"notNumber\",\"Complex\",\"x\",\"re\",\"im\",\"BigNumber\",\"isZero\",\"isNaN\",\"Unit\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]