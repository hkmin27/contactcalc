["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js"],"~:js","shadow$provide[256]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAssignmentNode=void 0;var q=b(14),f=b(147);c=b(25);var u=b(251),k=b(254),t=b(255);b=(0,c.factory)(\"AssignmentNode\",[\"subset\",\"?matrix\",\"Node\"],function(p){function g(v,C,z){if(!(this instanceof g))throw new SyntaxError(\"Constructor must be called with the new operator\");this.object=v;this.index=z?C:null;this.value=z||C;if(!(0,q.isSymbolNode)(v)&&!(0,q.isAccessorNode)(v))throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\nif((0,q.isSymbolNode)(v)&&\"end\"===v.name)throw Error('Cannot assign to symbol \"end\"');if(this.index&&!(0,q.isIndexNode)(this.index))throw new TypeError('IndexNode expected as \"index\"');if(!(0,q.isNode)(this.value))throw new TypeError('Node expected as \"value\"');Object.defineProperty(this,\"name\",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():\"\":this.object.name||\"\"}.bind(this),set:function(){throw Error(\"Cannot assign a new name, name is read-only\");\n}})}function d(v,C){C||(C=\"keep\");var z=(0,t.getPrecedence)(v,C);v=(0,t.getPrecedence)(v.value,C);return\"all\"===C||null!==v&&v<=z}var l=p.subset,h=p.matrix;p=p.Node;var n=(0,u.accessFactory)({subset:l}),r=(0,k.assignFactory)({subset:l,matrix:h});g.prototype=new p;g.prototype.type=\"AssignmentNode\";g.prototype.isAssignmentNode=!0;g.prototype._compile=function(v,C){var z=this.object._compile(v,C),w=this.index?this.index._compile(v,C):null,B=this.value._compile(v,C),x=this.object.name;if(this.index){if(this.index.isObjectProperty()){var D=\nthis.index.getObjectProperty();return function(I,L,M){var S=z(I,L,M);I=B(I,L,M);return(0,f.setSafeProperty)(S,D,I)}}if((0,q.isSymbolNode)(this.object))return function(I,L,M){var S=z(I,L,M);M=B(I,L,M);L=w(I,L,S);(0,f.setSafeProperty)(I,x,r(S,L,M));return M};var F=this.object.object._compile(v,C);if(this.object.index.isObjectProperty()){var E=this.object.index.getObjectProperty();return function(I,L,M){var S=F(I,L,M),P=(0,f.getSafeProperty)(S,E),R=w(I,L,P);I=B(I,L,M);(0,f.setSafeProperty)(S,E,r(P,R,\nI));return I}}var G=this.object.index._compile(v,C);return function(I,L,M){var S=F(I,L,M),P=G(I,L,S),R=n(S,P),ba=w(I,L,R);I=B(I,L,M);r(S,P,r(R,ba,I));return I}}if(!(0,q.isSymbolNode)(this.object))throw new TypeError(\"SymbolNode expected as object\");return function(I,L,M){return(0,f.setSafeProperty)(I,x,B(I,L,M))}};g.prototype.forEach=function(v){v(this.object,\"object\",this);this.index&&v(this.index,\"index\",this);v(this.value,\"value\",this)};g.prototype.map=function(v){var C=this._ifNode(v(this.object,\n\"object\",this)),z=this.index?this._ifNode(v(this.index,\"index\",this)):null;v=this._ifNode(v(this.value,\"value\",this));return new g(C,z,v)};g.prototype.clone=function(){return new g(this.object,this.index,this.value)};g.prototype._toString=function(v){var C=this.object.toString(v),z=this.index?this.index.toString(v):\"\",w=this.value.toString(v);d(this,v&&v.parenthesis)&&(w=\"(\"+w+\")\");return C+z+\" \\x3d \"+w};g.prototype.toJSON=function(){return{mathjs:\"AssignmentNode\",object:this.object,index:this.index,\nvalue:this.value}};g.fromJSON=function(v){return new g(v.object,v.index,v.value)};g.prototype.toHTML=function(v){var C=this.object.toHTML(v),z=this.index?this.index.toHTML(v):\"\",w=this.value.toHTML(v);d(this,v&&v.parenthesis)&&(w='\\x3cspan class\\x3d\"math-paranthesis math-round-parenthesis\"\\x3e(\\x3c/span\\x3e'+w+'\\x3cspan class\\x3d\"math-paranthesis math-round-parenthesis\"\\x3e)\\x3c/span\\x3e');return C+z+'\\x3cspan class\\x3d\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\"\\x3e\\x3d\\x3c/span\\x3e'+\nw};g.prototype._toTex=function(v){var C=this.object.toTex(v),z=this.index?this.index.toTex(v):\"\",w=this.value.toTex(v);d(this,v&&v.parenthesis)&&(w=\"\\\\left(\".concat(w,\"\\\\right)\"));return C+z+\":\\x3d\"+w};return g},{isClass:!0,isNode:!0});a.createAssignmentNode=b}","~:source","shadow$provide[256] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _access = require(\"./utils/access.js\");\n\nvar _assign = require(\"./utils/assign.js\");\n\nvar _operators = require(\"../operators.js\");\n\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix,\n      Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !(0, _is.isIndexNode)(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!(0, _is.isNode)(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!(0, _is.isSymbolNode)(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return (0, _customs.setSafeProperty)(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return (0, _customs.setSafeProperty)(object, prop, value);\n      };\n    } else if ((0, _is.isSymbolNode)(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        (0, _customs.setSafeProperty)(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$expression$operators","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$customs","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$expression$node$utils$assign","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$expression$node$utils$access"]],"~:properties",["^5",["map","isAssignmentNode","object","subset","forEach","fromJSON","index","isClass","toHTML","prototype","_toString","isNode","_toTex","matrix","__esModule","name","value","mathjs","type","clone","set","_compile","get","createAssignmentNode","toJSON"]],"~:compiled-at",1619135723957,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$node$AssignmentNode.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js\"],\n\"sourcesContent\":[\"shadow$provide[256] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAssignmentNode = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _customs = require(\\\"../../utils/customs.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _access = require(\\\"./utils/access.js\\\");\\n\\nvar _assign = require(\\\"./utils/assign.js\\\");\\n\\nvar _operators = require(\\\"../operators.js\\\");\\n\\nvar name = 'AssignmentNode';\\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\\n'Node'];\\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var subset = _ref.subset,\\n      matrix = _ref.matrix,\\n      Node = _ref.Node;\\n  var access = (0, _access.accessFactory)({\\n    subset: subset\\n  });\\n  var assign = (0, _assign.assignFactory)({\\n    subset: subset,\\n    matrix: matrix\\n  });\\n  /**\\n   * @constructor AssignmentNode\\n   * @extends {Node}\\n   *\\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\\n   * replace a subset of a matrix like `A[2,2]=42`.\\n   *\\n   * Syntax:\\n   *\\n   *     new AssignmentNode(symbol, value)\\n   *     new AssignmentNode(object, index, value)\\n   *\\n   * Usage:\\n   *\\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\\n   *\\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\\n   * @param {IndexNode} [index=null]            Index, property name or matrix\\n   *                                            index. Optional. If not provided\\n   *                                            and `object` is a SymbolNode,\\n   *                                            the property is assigned to the\\n   *                                            global scope.\\n   * @param {Node} value                        The value to be assigned\\n   */\\n\\n  function AssignmentNode(object, index, value) {\\n    if (!(this instanceof AssignmentNode)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    this.object = object;\\n    this.index = value ? index : null;\\n    this.value = value || index; // validate input\\n\\n    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\\n      throw new TypeError('SymbolNode or AccessorNode expected as \\\"object\\\"');\\n    }\\n\\n    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\\n      throw new Error('Cannot assign to symbol \\\"end\\\"');\\n    }\\n\\n    if (this.index && !(0, _is.isIndexNode)(this.index)) {\\n      // index is optional\\n      throw new TypeError('IndexNode expected as \\\"index\\\"');\\n    }\\n\\n    if (!(0, _is.isNode)(this.value)) {\\n      throw new TypeError('Node expected as \\\"value\\\"');\\n    } // readonly property name\\n\\n\\n    Object.defineProperty(this, 'name', {\\n      get: function () {\\n        if (this.index) {\\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\\n        } else {\\n          return this.object.name || '';\\n        }\\n      }.bind(this),\\n      set: function set() {\\n        throw new Error('Cannot assign a new name, name is read-only');\\n      }\\n    });\\n  }\\n\\n  AssignmentNode.prototype = new Node();\\n  AssignmentNode.prototype.type = 'AssignmentNode';\\n  AssignmentNode.prototype.isAssignmentNode = true;\\n  /**\\n   * Compile a node into a JavaScript function.\\n   * This basically pre-calculates as much as possible and only leaves open\\n   * calculations which depend on a dynamic scope with variables.\\n   * @param {Object} math     Math.js namespace with functions and constants.\\n   * @param {Object} argNames An object with argument names as key and `true`\\n   *                          as value. Used in the SymbolNode to optimize\\n   *                          for arguments from user assigned functions\\n   *                          (see FunctionAssignmentNode) or special symbols\\n   *                          like `end` (see IndexNode).\\n   * @return {function} Returns a function which can be called like:\\n   *                        evalNode(scope: Object, args: Object, context: *)\\n   */\\n\\n  AssignmentNode.prototype._compile = function (math, argNames) {\\n    var evalObject = this.object._compile(math, argNames);\\n\\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\\n\\n    var evalValue = this.value._compile(math, argNames);\\n\\n    var name = this.object.name;\\n\\n    if (!this.index) {\\n      // apply a variable to the scope, for example `a=2`\\n      if (!(0, _is.isSymbolNode)(this.object)) {\\n        throw new TypeError('SymbolNode expected as object');\\n      }\\n\\n      return function evalAssignmentNode(scope, args, context) {\\n        return (0, _customs.setSafeProperty)(scope, name, evalValue(scope, args, context));\\n      };\\n    } else if (this.index.isObjectProperty()) {\\n      // apply an object property for example `a.b=2`\\n      var prop = this.index.getObjectProperty();\\n      return function evalAssignmentNode(scope, args, context) {\\n        var object = evalObject(scope, args, context);\\n        var value = evalValue(scope, args, context);\\n        return (0, _customs.setSafeProperty)(object, prop, value);\\n      };\\n    } else if ((0, _is.isSymbolNode)(this.object)) {\\n      // update a matrix subset, for example `a[2]=3`\\n      return function evalAssignmentNode(scope, args, context) {\\n        var childObject = evalObject(scope, args, context);\\n        var value = evalValue(scope, args, context);\\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\\n\\n        (0, _customs.setSafeProperty)(scope, name, assign(childObject, index, value));\\n        return value;\\n      };\\n    } else {\\n      // isAccessorNode(node.object) === true\\n      // update a matrix subset, for example `a.b[2]=3`\\n      // we will not use the compile function of the AccessorNode, but compile it\\n      // ourselves here as we need the parent object of the AccessorNode:\\n      // wee need to apply the updated object to parent object\\n      var evalParentObject = this.object.object._compile(math, argNames);\\n\\n      if (this.object.index.isObjectProperty()) {\\n        var parentProp = this.object.index.getObjectProperty();\\n        return function evalAssignmentNode(scope, args, context) {\\n          var parent = evalParentObject(scope, args, context);\\n          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\\n\\n          var value = evalValue(scope, args, context);\\n          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\\n          return value;\\n        };\\n      } else {\\n        // if some parameters use the 'end' parameter, we need to calculate the size\\n        var evalParentIndex = this.object.index._compile(math, argNames);\\n\\n        return function evalAssignmentNode(scope, args, context) {\\n          var parent = evalParentObject(scope, args, context);\\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\\n\\n          var childObject = access(parent, parentIndex);\\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\\n\\n          var value = evalValue(scope, args, context);\\n          assign(parent, parentIndex, assign(childObject, index, value));\\n          return value;\\n        };\\n      }\\n    }\\n  };\\n  /**\\n   * Execute a callback for each of the child nodes of this node\\n   * @param {function(child: Node, path: string, parent: Node)} callback\\n   */\\n\\n\\n  AssignmentNode.prototype.forEach = function (callback) {\\n    callback(this.object, 'object', this);\\n\\n    if (this.index) {\\n      callback(this.index, 'index', this);\\n    }\\n\\n    callback(this.value, 'value', this);\\n  };\\n  /**\\n   * Create a new AssignmentNode having it's childs be the results of calling\\n   * the provided callback function for each of the childs of the original node.\\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\\n   * @returns {AssignmentNode} Returns a transformed copy of the node\\n   */\\n\\n\\n  AssignmentNode.prototype.map = function (callback) {\\n    var object = this._ifNode(callback(this.object, 'object', this));\\n\\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\\n\\n    var value = this._ifNode(callback(this.value, 'value', this));\\n\\n    return new AssignmentNode(object, index, value);\\n  };\\n  /**\\n   * Create a clone of this node, a shallow copy\\n   * @return {AssignmentNode}\\n   */\\n\\n\\n  AssignmentNode.prototype.clone = function () {\\n    return new AssignmentNode(this.object, this.index, this.value);\\n  };\\n  /*\\n   * Is parenthesis needed?\\n   * @param {node} node\\n   * @param {string} [parenthesis='keep']\\n   * @private\\n   */\\n\\n\\n  function needParenthesis(node, parenthesis) {\\n    if (!parenthesis) {\\n      parenthesis = 'keep';\\n    }\\n\\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis);\\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);\\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\\n  }\\n  /**\\n   * Get string representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AssignmentNode.prototype._toString = function (options) {\\n    var object = this.object.toString(options);\\n    var index = this.index ? this.index.toString(options) : '';\\n    var value = this.value.toString(options);\\n\\n    if (needParenthesis(this, options && options.parenthesis)) {\\n      value = '(' + value + ')';\\n    }\\n\\n    return object + index + ' = ' + value;\\n  };\\n  /**\\n   * Get a JSON representation of the node\\n   * @returns {Object}\\n   */\\n\\n\\n  AssignmentNode.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'AssignmentNode',\\n      object: this.object,\\n      index: this.index,\\n      value: this.value\\n    };\\n  };\\n  /**\\n   * Instantiate an AssignmentNode from its JSON representation\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"AssignmentNode\\\", object: ..., index: ..., value: ...}`,\\n   *                       where mathjs is optional\\n   * @returns {AssignmentNode}\\n   */\\n\\n\\n  AssignmentNode.fromJSON = function (json) {\\n    return new AssignmentNode(json.object, json.index, json.value);\\n  };\\n  /**\\n   * Get HTML representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AssignmentNode.prototype.toHTML = function (options) {\\n    var object = this.object.toHTML(options);\\n    var index = this.index ? this.index.toHTML(options) : '';\\n    var value = this.value.toHTML(options);\\n\\n    if (needParenthesis(this, options && options.parenthesis)) {\\n      value = '<span class=\\\"math-paranthesis math-round-parenthesis\\\">(</span>' + value + '<span class=\\\"math-paranthesis math-round-parenthesis\\\">)</span>';\\n    }\\n\\n    return object + index + '<span class=\\\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\\\">=</span>' + value;\\n  };\\n  /**\\n   * Get LaTeX representation\\n   * @param {Object} options\\n   * @return {string}\\n   */\\n\\n\\n  AssignmentNode.prototype._toTex = function (options) {\\n    var object = this.object.toTex(options);\\n    var index = this.index ? this.index.toTex(options) : '';\\n    var value = this.value.toTex(options);\\n\\n    if (needParenthesis(this, options && options.parenthesis)) {\\n      value = \\\"\\\\\\\\left(\\\".concat(value, \\\"\\\\\\\\right)\\\");\\n    }\\n\\n    return object + index + ':=' + value;\\n  };\\n\\n  return AssignmentNode;\\n}, {\\n  isClass: true,\\n  isNode: true\\n});\\nexports.createAssignmentNode = createAssignmentNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAssignmentNode\",\"_is\",\"_customs\",\"_factory\",\"_access\",\"_assign\",\"_operators\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"AssignmentNode\",\"object\",\"index\",\"SyntaxError\",\"isSymbolNode\",\"isAccessorNode\",\"TypeError\",\"Error\",\"isIndexNode\",\"isNode\",\"get\",\"isObjectProperty\",\"getObjectProperty\",\"bind\",\"set\",\"needParenthesis\",\"node\",\"parenthesis\",\"precedence\",\"getPrecedence\",\"exprPrecedence\",\"subset\",\"matrix\",\"Node\",\"access\",\"accessFactory\",\"assign\",\"assignFactory\",\"prototype\",\"type\",\"isAssignmentNode\",\"_compile\",\"AssignmentNode.prototype._compile\",\"math\",\"argNames\",\"evalObject\",\"evalIndex\",\"evalValue\",\"prop\",\"evalAssignmentNode\",\"scope\",\"args\",\"context\",\"setSafeProperty\",\"childObject\",\"evalParentObject\",\"parentProp\",\"parent\",\"getSafeProperty\",\"evalParentIndex\",\"parentIndex\",\"forEach\",\"AssignmentNode.prototype.forEach\",\"callback\",\"map\",\"AssignmentNode.prototype.map\",\"_ifNode\",\"clone\",\"AssignmentNode.prototype.clone\",\"_toString\",\"AssignmentNode.prototype._toString\",\"options\",\"toString\",\"toJSON\",\"AssignmentNode.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"AssignmentNode.fromJSON\",\"json\",\"toHTML\",\"AssignmentNode.prototype.toHTML\",\"_toTex\",\"AssignmentNode.prototype._toTex\",\"toTex\",\"concat\",\"isClass\"]\n}\n"]