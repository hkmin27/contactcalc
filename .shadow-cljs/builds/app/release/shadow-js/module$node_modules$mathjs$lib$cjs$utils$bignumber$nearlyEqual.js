["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js"],"~:js","shadow$provide[58]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.nearlyEqual=function(q,f,u){if(null===u||void 0===u)return q.eq(f);if(q.eq(f))return!0;if(q.isNaN()||f.isNaN())return!1;if(q.isFinite()&&f.isFinite()){var k=q.minus(f).abs();if(k.isZero())return!0;q=q.constructor.max(q.abs(),f.abs());return k.lte(q.times(u))}return!1}}","~:source","shadow$provide[58] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nearlyEqual = nearlyEqual;\n\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["nearlyEqual","__esModule","value"]],"~:compiled-at",1619135723756,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$utils$bignumber$nearlyEqual.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,WAAR,CAWAA,QAAoB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAgB,CAElC,GAAgB,IAAhB,GAAIA,CAAJ,EAAoCC,IAAAA,EAApC,GAAwBD,CAAxB,CACE,MAAOF,EAAEI,CAAAA,EAAF,CAAKH,CAAL,CAIT,IAAID,CAAEI,CAAAA,EAAF,CAAKH,CAAL,CAAJ,CACE,MAAO,CAAA,CAIT,IAAID,CAAEK,CAAAA,KAAF,EAAJ,EAAiBJ,CAAEI,CAAAA,KAAF,EAAjB,CACE,MAAO,CAAA,CAIT,IAAIL,CAAEM,CAAAA,QAAF,EAAJ,EAAoBL,CAAEK,CAAAA,QAAF,EAApB,CAAkC,CAEhC,IAAIC,EAAOP,CAAEQ,CAAAA,KAAF,CAAQP,CAAR,CAAWQ,CAAAA,GAAX,EAEX,IAAIF,CAAKG,CAAAA,MAAL,EAAJ,CACE,MAAO,CAAA,CAGHC,EAAAA,CAAMX,CAAEY,CAAAA,WAAYD,CAAAA,GAAd,CAAkBX,CAAES,CAAAA,GAAF,EAAlB,CAA2BR,CAAEQ,CAAAA,GAAF,EAA3B,CACV,OAAOF,EAAKM,CAAAA,GAAL,CAASF,CAAIG,CAAAA,KAAJ,CAAUZ,CAAV,CAAT,CATuB,CAclC,MAAO,CAAA,CA/B2B,CAjByB;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js\"],\n\"sourcesContent\":[\"shadow$provide[58] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.nearlyEqual = nearlyEqual;\\n\\n/**\\n * Compares two BigNumbers.\\n * @param {BigNumber} x       First value to compare\\n * @param {BigNumber} y       Second value to compare\\n * @param {number} [epsilon]  The maximum relative difference between x and y\\n *                            If epsilon is undefined or null, the function will\\n *                            test whether x and y are exactly equal.\\n * @return {boolean} whether the two numbers are nearly equal\\n */\\nfunction nearlyEqual(x, y, epsilon) {\\n  // if epsilon is null or undefined, test whether x and y are exactly equal\\n  if (epsilon === null || epsilon === undefined) {\\n    return x.eq(y);\\n  } // use \\\"==\\\" operator, handles infinities\\n\\n\\n  if (x.eq(y)) {\\n    return true;\\n  } // NaN\\n\\n\\n  if (x.isNaN() || y.isNaN()) {\\n    return false;\\n  } // at this point x and y should be finite\\n\\n\\n  if (x.isFinite() && y.isFinite()) {\\n    // check numbers are very close, needed when comparing numbers near zero\\n    var diff = x.minus(y).abs();\\n\\n    if (diff.isZero()) {\\n      return true;\\n    } else {\\n      // use relative error\\n      var max = x.constructor.max(x.abs(), y.abs());\\n      return diff.lte(max.times(epsilon));\\n    }\\n  } // Infinite and Number or negative Infinite and positive Infinite cases\\n\\n\\n  return false;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"nearlyEqual\",\"x\",\"y\",\"epsilon\",\"undefined\",\"eq\",\"isNaN\",\"isFinite\",\"diff\",\"minus\",\"abs\",\"isZero\",\"max\",\"constructor\",\"lte\",\"times\"]\n}\n"]