["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js"],"~:js","shadow$provide[85]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm04=void 0;c=b(25);var q=b(22);b=(0,c.factory)(\"algorithm04\",[\"typed\",\"equalScalar\"],function(f){var u=f.typed,k=f.equalScalar;return function(t,p,g){var d=t._values,l=t._index,h=t._ptr,n=t._size,r=t._datatype,v=p._values,C=p._index,z=p._ptr,w=p._size,B=p._datatype;if(n.length!==w.length)throw new q.DimensionError(n.length,w.length);if(n[0]!==w[0]||n[1]!==w[1])throw new RangeError(\"Dimension mismatch. Matrix A (\"+\nn+\") must match Matrix B (\"+w+\")\");w=n[0];n=n[1];p=k;var x=0,D=g;if(\"string\"===typeof r&&r===B){var F=r;p=u.find(k,[F,F]);x=u.convert(0,F);D=u.find(g,[F,F])}g=d&&v?[]:void 0;r=[];B=[];var E=d&&v?[]:void 0,G=d&&v?[]:void 0,I=[],L=[],M,S;for(M=0;M<n;M++){B[M]=r.length;var P=M+1;var R=h[M];var ba=h[M+1];for(S=R;S<ba;S++)R=l[S],r.push(R),I[R]=P,E&&(E[R]=d[S]);R=z[M];ba=z[M+1];for(S=R;S<ba;S++)if(R=C[S],I[R]===P){if(E){var Q=D(E[R],v[S]);p(Q,x)?I[R]=null:E[R]=Q}}else r.push(R),L[R]=P,G&&(G[R]=v[S]);if(E&&\nG)for(S=B[M];S<r.length;)R=r[S],I[R]===P?(g[S]=E[R],S++):L[R]===P?(g[S]=G[R],S++):r.splice(S,1)}B[n]=r.length;return t.createSparseMatrix({values:g,index:r,ptr:B,size:[w,n],datatype:F})}});a.createAlgorithm04=b}","~:source","shadow$provide[85] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm04 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar name = 'algorithm04';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm04 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm04 = createAlgorithm04;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["values","index","__esModule","value","createAlgorithm04","datatype","size","ptr"]],"~:compiled-at",1619135723773,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm04.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js\"],\n\"sourcesContent\":[\"shadow$provide[85] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm04 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _DimensionError = require(\\\"../../../error/DimensionError.js\\\");\\n\\nvar name = 'algorithm04';\\nvar dependencies = ['typed', 'equalScalar'];\\nvar createAlgorithm04 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equalScalar = _ref.equalScalar;\\n\\n  /**\\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\\n   * Callback function invoked MAX(NNZA, NNZB) times\\n   *\\n   *\\n   *          \\u250c  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\\n   * C(i,j) = \\u2524  A(i,j)       ; A(i,j) !== 0\\n   *          \\u2514  B(i,j)       ; B(i,j) !== 0\\n   *\\n   *\\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\\n   *\\n   * @return {Matrix}                    SparseMatrix (C)\\n   *\\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\\n   */\\n  return function algorithm04(a, b, callback) {\\n    // sparse matrix arrays\\n    var avalues = a._values;\\n    var aindex = a._index;\\n    var aptr = a._ptr;\\n    var asize = a._size;\\n    var adt = a._datatype; // sparse matrix arrays\\n\\n    var bvalues = b._values;\\n    var bindex = b._index;\\n    var bptr = b._ptr;\\n    var bsize = b._size;\\n    var bdt = b._datatype; // validate dimensions\\n\\n    if (asize.length !== bsize.length) {\\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\\n    } // check rows & columns\\n\\n\\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // equal signature to use\\n\\n    var eq = equalScalar; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string' && adt === bdt) {\\n      // datatype\\n      dt = adt; // find signature that matches (dt, dt)\\n\\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result arrays\\n\\n\\n    var cvalues = avalues && bvalues ? [] : undefined;\\n    var cindex = [];\\n    var cptr = []; // workspace\\n\\n    var xa = avalues && bvalues ? [] : undefined;\\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\\n\\n    var wa = [];\\n    var wb = []; // vars\\n\\n    var i, j, k, k0, k1; // loop columns\\n\\n    for (j = 0; j < columns; j++) {\\n      // update cptr\\n      cptr[j] = cindex.length; // columns mark\\n\\n      var mark = j + 1; // loop A(:,j)\\n\\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        i = aindex[k]; // update c\\n\\n        cindex.push(i); // update workspace\\n\\n        wa[i] = mark; // check we need to process values\\n\\n        if (xa) {\\n          xa[i] = avalues[k];\\n        }\\n      } // loop B(:,j)\\n\\n\\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        i = bindex[k]; // check row exists in A\\n\\n        if (wa[i] === mark) {\\n          // update record in xa @ i\\n          if (xa) {\\n            // invoke callback\\n            var v = cf(xa[i], bvalues[k]); // check for zero\\n\\n            if (!eq(v, zero)) {\\n              // update workspace\\n              xa[i] = v;\\n            } else {\\n              // remove mark (index will be removed later)\\n              wa[i] = null;\\n            }\\n          }\\n        } else {\\n          // update c\\n          cindex.push(i); // update workspace\\n\\n          wb[i] = mark; // check we need to process values\\n\\n          if (xb) {\\n            xb[i] = bvalues[k];\\n          }\\n        }\\n      } // check we need to process values (non pattern matrix)\\n\\n\\n      if (xa && xb) {\\n        // initialize first index in j\\n        k = cptr[j]; // loop index in j\\n\\n        while (k < cindex.length) {\\n          // row\\n          i = cindex[k]; // check workspace has value @ i\\n\\n          if (wa[i] === mark) {\\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\\n            cvalues[k] = xa[i]; // increment pointer\\n\\n            k++;\\n          } else if (wb[i] === mark) {\\n            // push value (bij != 0)\\n            cvalues[k] = xb[i]; // increment pointer\\n\\n            k++;\\n          } else {\\n            // remove index @ k\\n            cindex.splice(k, 1);\\n          }\\n        }\\n      }\\n    } // update cptr\\n\\n\\n    cptr[columns] = cindex.length; // return sparse matrix\\n\\n    return a.createSparseMatrix({\\n      values: cvalues,\\n      index: cindex,\\n      ptr: cptr,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm04 = createAlgorithm04;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm04\",\"_factory\",\"_DimensionError\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"equalScalar\",\"algorithm04\",\"a\",\"b\",\"callback\",\"avalues\",\"_values\",\"aindex\",\"_index\",\"aptr\",\"_ptr\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"bvalues\",\"bindex\",\"bptr\",\"bsize\",\"bdt\",\"length\",\"DimensionError\",\"RangeError\",\"rows\",\"columns\",\"eq\",\"zero\",\"cf\",\"dt\",\"find\",\"convert\",\"cvalues\",\"undefined\",\"cindex\",\"cptr\",\"xa\",\"xb\",\"wa\",\"wb\",\"j\",\"k\",\"mark\",\"k0\",\"k1\",\"i\",\"push\",\"v\",\"splice\",\"createSparseMatrix\",\"values\",\"index\",\"ptr\",\"size\",\"datatype\"]\n}\n"]