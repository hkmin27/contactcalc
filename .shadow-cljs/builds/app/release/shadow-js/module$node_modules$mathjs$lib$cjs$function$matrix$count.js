["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/count.js"],"~:js","shadow$provide[123]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCount=void 0;c=b(25);c=(0,c.factory)(\"count\",[\"typed\",\"size\",\"prod\"],function(q){var f=q.typed,u=q.size,k=q.prod;return f(\"count\",{string:function(t){return t.length},\"Matrix | Array\":function(t){return k(u(t))}})});a.createCount=c}","~:source","shadow$provide[123] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCount = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'count';\nvar dependencies = ['typed', 'size', 'prod'];\nvar createCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      prod = _ref.prod;\n\n  /**\n   * Count the number of elements of a matrix, array or string.\n   *\n   * Syntax:\n   *\n   *     math.count(x)\n   *\n   * Examples:\n   *\n   *     math.count('hello world')        // returns 11\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.count(A)                    // returns 6\n   *     math.count(math.range(1,6))      // returns 5\n   *\n   * See also:\n   *\n   *     size\n   *\n   * @param {string | Array | Matrix} x  A matrix or string\n   * @return {number} An integer with the elements in `x`.\n   */\n  return typed(name, {\n    string: function string(x) {\n      return x.length;\n    },\n    'Matrix | Array': function MatrixArray(x) {\n      return prod(size(x));\n    }\n  });\n});\nexports.createCount = createCount;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createCount","string","__esModule","value"]],"~:compiled-at",1619135723802,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$count.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA6B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,MAAVA,CAAkB,MAAlBA,CACc,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACrFC,EAAQD,CAAKC,CAAAA,KADwE,CAErFC,EAAOF,CAAKE,CAAAA,IAFyE,CAGrFC,EAAOH,CAAKG,CAAAA,IAuBhB,OAAOF,EAAA,CA5BEH,OA4BF,CAAY,CACjBM,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAEC,CAAAA,MADgB,CADV,CAIjB,iBAAkBC,QAAoB,CAACF,CAAD,CAAI,CACxC,MAAOF,EAAA,CAAKD,CAAA,CAAKG,CAAL,CAAL,CADiC,CAJzB,CAAZ,CA1BkF,CAA1D,CAmCjCd,EAAQI,CAAAA,WAAR,CAAsBA,CA/CwC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/count.js\"],\n\"sourcesContent\":[\"shadow$provide[123] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCount = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'count';\\nvar dependencies = ['typed', 'size', 'prod'];\\nvar createCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      prod = _ref.prod;\\n\\n  /**\\n   * Count the number of elements of a matrix, array or string.\\n   *\\n   * Syntax:\\n   *\\n   *     math.count(x)\\n   *\\n   * Examples:\\n   *\\n   *     math.count('hello world')        // returns 11\\n   *     const A = [[1, 2, 3], [4, 5, 6]]\\n   *     math.count(A)                    // returns 6\\n   *     math.count(math.range(1,6))      // returns 5\\n   *\\n   * See also:\\n   *\\n   *     size\\n   *\\n   * @param {string | Array | Matrix} x  A matrix or string\\n   * @return {number} An integer with the elements in `x`.\\n   */\\n  return typed(name, {\\n    string: function string(x) {\\n      return x.length;\\n    },\\n    'Matrix | Array': function MatrixArray(x) {\\n      return prod(size(x));\\n    }\\n  });\\n});\\nexports.createCount = createCount;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCount\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"prod\",\"string\",\"x\",\"length\",\"MatrixArray\"]\n}\n"]