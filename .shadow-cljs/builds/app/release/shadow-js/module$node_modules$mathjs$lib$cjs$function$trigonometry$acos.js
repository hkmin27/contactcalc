["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/acos.js"],"~:js","shadow$provide[207]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAcos=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"acos\",[\"typed\",\"config\",\"Complex\"],function(f){var u=f.typed,k=f.config,t=f.Complex;return u(\"acos\",{number:function(p){return-1<=p&&1>=p||k.predictable?Math.acos(p):(new t(p,0)).acos()},Complex:function(p){return p.acos()},BigNumber:function(p){return p.acos()},\"Array | Matrix\":function(p){return(0,q.deepMap)(p,this)}})});a.createAcos=b}","~:source","shadow$provide[207] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcos = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createAcos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5)           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)) // returns number 1.5\n   *\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createAcos = createAcos;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","createAcos","value","number","BigNumber"]],"~:compiled-at",1619135723936,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$acos.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACpFC,EAAQD,CAAKC,CAAAA,KADuE,CAEpFC,EAASF,CAAKE,CAAAA,MAFsE,CAGpFC,EAAUH,CAAKG,CAAAA,OAyBnB,OAAOF,EAAA,CA9BEH,MA8BF,CAAY,CACjBM,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAoB,CAApB,EAAeA,CAAf,EAAyBH,CAAOI,CAAAA,WAAhC,CACSC,IAAKC,CAAAA,IAAL,CAAUH,CAAV,CADT,CAG2BG,CAAlB,IAAIL,CAAJ,CAAYE,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,IAAlB,EAJgB,CADV,CAQjBL,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,IAAF,EADoB,CARZ,CAWjBC,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAOA,EAAEG,CAAAA,IAAF,EADwB,CAXhB,CAcjB,iBAAkBE,QAAoB,CAACL,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGT,CAAYe,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CADiC,CAdzB,CAAZ,CA5BiF,CAA1D,CA+ChCf,EAAQI,CAAAA,UAAR,CAAqBA,CA7DyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/acos.js\"],\n\"sourcesContent\":[\"shadow$provide[207] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAcos = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'acos';\\nvar dependencies = ['typed', 'config', 'Complex'];\\nvar createAcos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the inverse cosine of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.acos(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.acos(0.5)           // returns number 1.0471975511965979\\n   *    math.acos(math.cos(1.5)) // returns number 1.5\\n   *\\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\\n   *\\n   * See also:\\n   *\\n   *    cos, atan, asin\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x >= -1 && x <= 1 || config.predictable) {\\n        return Math.acos(x);\\n      } else {\\n        return new Complex(x, 0).acos();\\n      }\\n    },\\n    Complex: function Complex(x) {\\n      return x.acos();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.acos();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createAcos = createAcos;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAcos\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"Complex\",\"number\",\"x\",\"predictable\",\"Math\",\"acos\",\"BigNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]