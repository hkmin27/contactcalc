["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/Parser.js"],"~:js","shadow$provide[274]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createParserClass=void 0;c=b(25);var q=b(15),f=b(147);b=(0,c.factory)(\"Parser\",[\"parse\"],function(u){function k(){if(!(this instanceof k))throw new SyntaxError(\"Constructor must be called with the new operator\");this.scope={}}var t=u.parse;k.prototype.type=\"Parser\";k.prototype.isParser=!0;k.prototype.evaluate=function(p){return t(p).compile().evaluate(this.scope)};k.prototype.get=function(p){return p in this.scope?\n(0,f.getSafeProperty)(this.scope,p):void 0};k.prototype.getAll=function(){return(0,q.extend)({},this.scope)};k.prototype.set=function(p,g){return(0,f.setSafeProperty)(this.scope,p,g)};k.prototype.remove=function(p){delete this.scope[p]};k.prototype.clear=function(){for(var p in this.scope)(0,q.hasOwnProperty)(this.scope,p)&&delete this.scope[p]};return k},{isClass:!0});a.createParserClass=b}","~:source","shadow$provide[274] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParserClass = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _object = require(\"../utils/object.js\");\n\nvar _customs = require(\"../utils/customs.js\");\n\nvar name = 'Parser';\nvar dependencies = ['parse'];\nvar createParserClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var parse = _ref.parse;\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? (0, _customs.getSafeProperty)(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n\n  Parser.prototype.getAll = function () {\n    return (0, _object.extend)({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return (0, _customs.setSafeProperty)(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if ((0, _object.hasOwnProperty)(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n\n  return Parser;\n}, {\n  isClass: true\n});\nexports.createParserClass = createParserClass;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$customs","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["isClass","__esModule","createParserClass","getAll","value","evaluate","remove","scope","type","isParser","set","clear","get"]],"~:compiled-at",1619135723974,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$Parser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAUR,CAAA,CAAQ,EAAR,CAAd,CAEIS,EAAWT,CAAA,CAAQ,GAAR,CAIXM,EAAAA,CAAmC,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAF5BC,QAE4B,CADpBC,CAAC,OAADA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAmD/FC,QAASA,EAAM,EAAG,CAChB,GAAI,EAAE,IAAF,WAAkBA,EAAlB,CAAJ,CACE,KAAM,KAAIC,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKC,CAAAA,KAAL,CAAa,EALG,CAlDlB,IAAIC,EAAQJ,CAAKI,CAAAA,KA8DjBH,EAAOI,CAAAA,SAAUC,CAAAA,IAAjB,CAAwB,QACxBL,EAAOI,CAAAA,SAAUE,CAAAA,QAAjB,CAA4B,CAAA,CAQ5BN,EAAOI,CAAAA,SAAUG,CAAAA,QAAjB,CAA4BC,QAAS,CAACC,CAAD,CAAO,CAE1C,MAAON,EAAA,CAAMM,CAAN,CAAYC,CAAAA,OAAZ,EAAsBH,CAAAA,QAAtB,CAA+B,IAAKL,CAAAA,KAApC,CAFmC,CAY5CF,EAAOI,CAAAA,SAAUO,CAAAA,GAAjB,CAAuBC,QAAS,CAACf,CAAD,CAAO,CAErC,MAAOA,EAAA,GAAQ,KAAKK,CAAAA,KAAb;AAAqB,CAAC,CAAA,CAAGP,CAASkB,CAAAA,eAAb,EAA8B,IAAKX,CAAAA,KAAnC,CAA0CL,CAA1C,CAArB,CAAuEiB,IAAAA,EAFzC,CAUvCd,EAAOI,CAAAA,SAAUW,CAAAA,MAAjB,CAA0BC,QAAS,EAAG,CACpC,MAAO,CAAC,CAAA,CAAGtB,CAAQuB,CAAAA,MAAZ,EAAoB,EAApB,CAAwB,IAAKf,CAAAA,KAA7B,CAD6B,CAUtCF,EAAOI,CAAAA,SAAUc,CAAAA,GAAjB,CAAuBC,QAAS,CAACtB,CAAD,CAAON,CAAP,CAAc,CAE5C,MAAO,CAAC,CAAA,CAAGI,CAASyB,CAAAA,eAAb,EAA8B,IAAKlB,CAAAA,KAAnC,CAA0CL,CAA1C,CAAgDN,CAAhD,CAFqC,CAU9CS,EAAOI,CAAAA,SAAUiB,CAAAA,MAAjB,CAA0BC,QAAS,CAACzB,CAAD,CAAO,CAExC,OAAO,IAAKK,CAAAA,KAAL,CAAWL,CAAX,CAFiC,CAS1CG,EAAOI,CAAAA,SAAUmB,CAAAA,KAAjB,CAAyBC,QAAS,EAAG,CACnC,IAAKC,IAAIA,CAAT,GAAkB,KAAKvB,CAAAA,KAAvB,CACM,CAAC,CAAA,CAAGR,CAAQgC,CAAAA,cAAZ,EAA4B,IAAKxB,CAAAA,KAAjC,CAAwCuB,CAAxC,CAAJ,EACE,OAAO,IAAKvB,CAAAA,KAAL,CAAWuB,CAAX,CAHwB,CAQrC,OAAOzB,EAnIwF,CAA1D,CAoIpC,CACD2B,QAAS,CAAA,CADR,CApIoC,CAuIvCvC,EAAQI,CAAAA,iBAAR,CAA4BA,CAvJkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/Parser.js\"],\n\"sourcesContent\":[\"shadow$provide[274] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createParserClass = void 0;\\n\\nvar _factory = require(\\\"../utils/factory.js\\\");\\n\\nvar _object = require(\\\"../utils/object.js\\\");\\n\\nvar _customs = require(\\\"../utils/customs.js\\\");\\n\\nvar name = 'Parser';\\nvar dependencies = ['parse'];\\nvar createParserClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var parse = _ref.parse;\\n\\n  /**\\n   * @constructor Parser\\n   * Parser contains methods to evaluate or parse expressions, and has a number\\n   * of convenience methods to get, set, and remove variables from memory. Parser\\n   * keeps a scope containing variables in memory, which is used for all\\n   * evaluations.\\n   *\\n   * Methods:\\n   *    const result = parser.evaluate(expr)  // evaluate an expression\\n   *    const value = parser.get(name)        // retrieve a variable from the parser\\n   *    const values = parser.getAll()        // retrieve all defined variables\\n   *    parser.set(name, value)               // set a variable in the parser\\n   *    parser.remove(name)                   // clear a variable from the\\n   *                                          // parsers scope\\n   *    parser.clear()                        // clear the parsers scope\\n   *\\n   * Example usage:\\n   *    const parser = new Parser()\\n   *    // Note: there is a convenience method which can be used instead:\\n   *    // const parser = new math.parser()\\n   *\\n   *    // evaluate expressions\\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\\n   *    parser.evaluate('sqrt(-4)')               // 2i\\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\\n   *\\n   *    // define variables and functions\\n   *    parser.evaluate('x = 7 / 2')              // 3.5\\n   *    parser.evaluate('x + 3')                  // 6.5\\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\\n   *    parser.evaluate('f(2, 3)')                // 8\\n   *\\n   *    // get and set variables and functions\\n   *    const x = parser.get('x')                 // 7\\n   *    const f = parser.get('f')                 // function\\n   *    const g = f(3, 2)                         // 9\\n   *    parser.set('h', 500)\\n   *    const i = parser.evaluate('h / 2')        // 250\\n   *    parser.set('hello', function (name) {\\n   *        return 'hello, ' + name + '!'\\n   *    })\\n   *    parser.evaluate('hello(\\\"user\\\")')          // \\\"hello, user!\\\"\\n   *\\n   *    // clear defined functions and variables\\n   *    parser.clear()\\n   *\\n   */\\n  function Parser() {\\n    if (!(this instanceof Parser)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    this.scope = {};\\n  }\\n  /**\\n   * Attach type information\\n   */\\n\\n\\n  Parser.prototype.type = 'Parser';\\n  Parser.prototype.isParser = true;\\n  /**\\n   * Parse and evaluate the given expression\\n   * @param {string} expr   A string containing an expression, for example \\\"2+3\\\"\\n   * @return {*} result     The result, or undefined when the expression was empty\\n   * @throws {Error}\\n   */\\n\\n  Parser.prototype.evaluate = function (expr) {\\n    // TODO: validate arguments\\n    return parse(expr).compile().evaluate(this.scope);\\n  };\\n  /**\\n   * Get a variable (a function or variable) by name from the parsers scope.\\n   * Returns undefined when not found\\n   * @param {string} name\\n   * @return {* | undefined} value\\n   */\\n\\n\\n  Parser.prototype.get = function (name) {\\n    // TODO: validate arguments\\n    return name in this.scope ? (0, _customs.getSafeProperty)(this.scope, name) : undefined;\\n  };\\n  /**\\n   * Get a map with all defined variables\\n   * @return {Object} values\\n   */\\n\\n\\n  Parser.prototype.getAll = function () {\\n    return (0, _object.extend)({}, this.scope);\\n  };\\n  /**\\n   * Set a symbol (a function or variable) by name from the parsers scope.\\n   * @param {string} name\\n   * @param {* | undefined} value\\n   */\\n\\n\\n  Parser.prototype.set = function (name, value) {\\n    // TODO: validate arguments\\n    return (0, _customs.setSafeProperty)(this.scope, name, value);\\n  };\\n  /**\\n   * Remove a variable from the parsers scope\\n   * @param {string} name\\n   */\\n\\n\\n  Parser.prototype.remove = function (name) {\\n    // TODO: validate arguments\\n    delete this.scope[name];\\n  };\\n  /**\\n   * Clear the scope with variables and functions\\n   */\\n\\n\\n  Parser.prototype.clear = function () {\\n    for (var _name in this.scope) {\\n      if ((0, _object.hasOwnProperty)(this.scope, _name)) {\\n        delete this.scope[_name];\\n      }\\n    }\\n  };\\n\\n  return Parser;\\n}, {\\n  isClass: true\\n});\\nexports.createParserClass = createParserClass;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createParserClass\",\"_factory\",\"_object\",\"_customs\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"Parser\",\"SyntaxError\",\"scope\",\"parse\",\"prototype\",\"type\",\"isParser\",\"evaluate\",\"Parser.prototype.evaluate\",\"expr\",\"compile\",\"get\",\"Parser.prototype.get\",\"getSafeProperty\",\"undefined\",\"getAll\",\"Parser.prototype.getAll\",\"extend\",\"set\",\"Parser.prototype.set\",\"setSafeProperty\",\"remove\",\"Parser.prototype.remove\",\"clear\",\"Parser.prototype.clear\",\"_name\",\"hasOwnProperty\",\"isClass\"]\n}\n"]