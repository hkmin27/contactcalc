["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js"],"~:js","shadow$provide[206]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCreateUnit=void 0;c=b(25);c=(0,c.factory)(\"createUnit\",[\"typed\",\"Unit\"],function(q){var f=q.typed,u=q.Unit;return f(\"createUnit\",{\"Object, Object\":function(k,t){return u.createUnit(k,t)},Object:function(k){return u.createUnit(k,{})},\"string, Unit | string | Object, Object\":function(k,t,p){var g={};g[k]=t;return u.createUnit(g,p)},\"string, Unit | string | Object\":function(k,t){var p={};p[k]=t;return u.createUnit(p,\n{})},string:function(k){var t={};t[k]={};return u.createUnit(t,{})}})});a.createCreateUnit=c}","~:source","shadow$provide[206] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCreateUnit = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nvar createCreateUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Unit = _ref.Unit;\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});\nexports.createCreateUnit = createCreateUnit;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","Object","__esModule","value","createCreateUnit"]],"~:compiled-at",1619135723935,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$unit$function$createUnit.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAkC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CAAU,MAAVA,CACmB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC1FC,EAAQD,CAAKC,CAAAA,KAD6E,CAE1FC,EAAOF,CAAKE,CAAAA,IA2ChB,OAAOD,EAAA,CA/CEH,YA+CF,CAAY,CAEjB,iBAAkBK,QAAqB,CAACC,CAAD,CAAMC,CAAN,CAAe,CACpD,MAAOH,EAAKI,CAAAA,UAAL,CAAgBF,CAAhB,CAAqBC,CAArB,CAD6C,CAFrC,CAMjBb,OAAQA,QAAe,CAACY,CAAD,CAAM,CAC3B,MAAOF,EAAKI,CAAAA,UAAL,CAAgBF,CAAhB,CAAqB,EAArB,CADoB,CANZ,CAUjB,yCAA0CG,QAAqC,CAACT,CAAD,CAAOU,CAAP,CAAYH,CAAZ,CAAqB,CAClG,IAAID,EAAM,EACVA,EAAA,CAAIN,CAAJ,CAAA,CAAYU,CACZ,OAAON,EAAKI,CAAAA,UAAL,CAAgBF,CAAhB,CAAqBC,CAArB,CAH2F,CAVnF,CAgBjB,iCAAkCI,QAA+B,CAACX,CAAD,CAAOU,CAAP,CAAY,CAC3E,IAAIJ,EAAM,EACVA,EAAA,CAAIN,CAAJ,CAAA,CAAYU,CACZ,OAAON,EAAKI,CAAAA,UAAL,CAAgBF,CAAhB;AAAqB,EAArB,CAHoE,CAhB5D,CAsBjBM,OAAQA,QAAe,CAACZ,CAAD,CAAO,CAC5B,IAAIM,EAAM,EACVA,EAAA,CAAIN,CAAJ,CAAA,CAAY,EACZ,OAAOI,EAAKI,CAAAA,UAAL,CAAgBF,CAAhB,CAAqB,EAArB,CAHqB,CAtBb,CAAZ,CA7CuF,CAA1D,CA0EtCb,EAAQI,CAAAA,gBAAR,CAA2BA,CAtFmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js\"],\n\"sourcesContent\":[\"shadow$provide[206] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCreateUnit = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar name = 'createUnit';\\nvar dependencies = ['typed', 'Unit'];\\nvar createCreateUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Unit = _ref.Unit;\\n\\n  /**\\n   * Create a user-defined unit and register it with the Unit type.\\n   *\\n   * Syntax:\\n   *\\n   *     math.createUnit({\\n   *       baseUnit1: {\\n   *         aliases: [string, ...]\\n   *         prefixes: object\\n   *       },\\n   *       unit2: {\\n   *         definition: string,\\n   *         aliases: [string, ...]\\n   *         prefixes: object,\\n   *         offset: number\\n   *       },\\n   *       unit3: string    // Shortcut\\n   *     })\\n   *\\n   *     // Another shortcut:\\n   *     math.createUnit(string, unit : string, [object])\\n   *\\n   * Examples:\\n   *\\n   *     math.createUnit('foo')\\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\\n   *     math.createUnit('mph', '1 mile/hour')\\n   *\\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\\n   * @param {Object} options   (optional) An object containing any of the following properties:\\n   *     - `prefixes {string}` \\\"none\\\", \\\"short\\\", \\\"long\\\", \\\"binary_short\\\", or \\\"binary_long\\\". The default is \\\"none\\\".\\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\\n   *\\n   * See also:\\n   *\\n   *     unit\\n   *\\n   * @return {Unit} The new unit\\n   */\\n  return typed(name, {\\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\\n    'Object, Object': function ObjectObject(obj, options) {\\n      return Unit.createUnit(obj, options);\\n    },\\n    // Same as above but without the options.\\n    Object: function Object(obj) {\\n      return Unit.createUnit(obj, {});\\n    },\\n    // Shortcut method for creating one unit.\\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\\n      var obj = {};\\n      obj[name] = def;\\n      return Unit.createUnit(obj, options);\\n    },\\n    // Same as above but without the options.\\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\\n      var obj = {};\\n      obj[name] = def;\\n      return Unit.createUnit(obj, {});\\n    },\\n    // Without a definition, creates a base unit.\\n    string: function string(name) {\\n      var obj = {};\\n      obj[name] = {};\\n      return Unit.createUnit(obj, {});\\n    }\\n  });\\n});\\nexports.createCreateUnit = createCreateUnit;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCreateUnit\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Unit\",\"ObjectObject\",\"obj\",\"options\",\"createUnit\",\"stringUnitStringObjectObject\",\"def\",\"stringUnitStringObject\",\"string\"]\n}\n"]