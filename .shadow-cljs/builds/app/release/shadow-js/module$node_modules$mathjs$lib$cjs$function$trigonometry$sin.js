["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/sin.js"],"~:js","shadow$provide[228]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSin=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"sin\",[\"typed\"],function(f){f=f.typed;return f(\"sin\",{number:Math.sin,Complex:function(u){return u.sin()},BigNumber:function(u){return u.sin()},Unit:function(u){if(!u.hasBase(u.constructor.BASE_UNITS.ANGLE))throw new TypeError(\"Unit in function sin is no angle\");return this(u.value)},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this,!0)}})});a.createSin=\nb}","~:source","shadow$provide[228] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSin = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'sin';\nvar dependencies = ['typed'];\nvar createSin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\n   */\n  return typed(name, {\n    number: Math.sin,\n    Complex: function Complex(x) {\n      return x.sin();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.sin();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sin is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sin(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createSin = createSin;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","number","BigNumber","createSin"]],"~:compiled-at",1619135723940,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$sin.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CACnFC,CAAAA,CAAQD,CAAKC,CAAAA,KA4BjB,OAAOA,EAAA,CA/BEH,KA+BF,CAAY,CACjBI,OAAQC,IAAKC,CAAAA,GADI,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEF,CAAAA,GAAF,EADoB,CAFZ,CAKjBG,UAAWA,QAAkB,CAACD,CAAD,CAAI,CAC/B,MAAOA,EAAEF,CAAAA,GAAF,EADwB,CALhB,CAQjBI,KAAMA,QAAa,CAACF,CAAD,CAAI,CACrB,GAAI,CAACA,CAAEG,CAAAA,OAAF,CAAUH,CAAEI,CAAAA,WAAYC,CAAAA,UAAWC,CAAAA,KAAnC,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,kCAAd,CAAN,CAGF,MAAO,KAAA,CAAKP,CAAEb,CAAAA,KAAP,CALc,CARN,CAejB,iBAAkBqB,QAAoB,CAACR,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,CAAYmB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAfzB,CAAZ,CA7BgF,CAA1D,CAkD/BhB,EAAQI,CAAAA,SAAR;AAAoBA,CAhE0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/sin.js\"],\n\"sourcesContent\":[\"shadow$provide[228] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSin = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'sin';\\nvar dependencies = ['typed'];\\nvar createSin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Calculate the sine of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.sin(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.sin(2)                      // returns number 0.9092974268256813\\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\\n   *\\n   *    const angle = 0.2\\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\\n   *\\n   * See also:\\n   *\\n   *    cos, tan\\n   *\\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\\n   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\\n   */\\n  return typed(name, {\\n    number: Math.sin,\\n    Complex: function Complex(x) {\\n      return x.sin();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.sin();\\n    },\\n    Unit: function Unit(x) {\\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\\n        throw new TypeError('Unit in function sin is no angle');\\n      }\\n\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since sin(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    }\\n  });\\n});\\nexports.createSin = createSin;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSin\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"Math\",\"sin\",\"Complex\",\"x\",\"BigNumber\",\"Unit\",\"hasBase\",\"constructor\",\"BASE_UNITS\",\"ANGLE\",\"TypeError\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]