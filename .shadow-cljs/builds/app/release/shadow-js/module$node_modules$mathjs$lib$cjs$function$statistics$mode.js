["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/mode.js"],"~:js","shadow$provide[153]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMode=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"mode\",[\"typed\",\"isNaN\",\"isNumeric\"],function(f){function u(g){g=(0,q.flatten)(g.valueOf());if(0===g.length)throw Error(\"Cannot calculate mode of an empty array\");for(var d={},l=[],h=0,n=0;n<g.length;n++){var r=g[n];if(p(r)&&t(r))throw Error(\"Cannot calculate mode of an array containing NaN values\");r in d||(d[r]=0);d[r]++;d[r]===h?l.push(r):d[r]>h&&(h=d[r],\nl=[r])}return l}var k=f.typed,t=f.isNaN,p=f.isNumeric;return k(\"mode\",{\"Array | Matrix\":u,\"...\":function(g){return u(g)}})});a.createMode=c}","~:source","shadow$provide[153] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMode = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nvar createMode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNaN = _ref.isNaN,\n      isNumeric = _ref.isNumeric;\n\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n\n  function _mode(values) {\n    values = (0, _array.flatten)(values.valueOf());\n    var num = values.length;\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n\n    var count = {};\n    var mode = [];\n    var max = 0;\n\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n\n      count[value]++;\n\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n\n    return mode;\n  }\n});\nexports.createMode = createMode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createMode"]],"~:compiled-at",1619135723893,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$mode.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA4B,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,OAAVA,CAAmB,WAAnBA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CA2CxFC,QAASA,EAAK,CAACC,CAAD,CAAS,CACrBA,CAAA,CAAS,CAAC,CAAA,CAAGP,CAAOQ,CAAAA,OAAX,EAAoBD,CAAOE,CAAAA,OAAP,EAApB,CAGT,IAAY,CAAZ,GAFUF,CAAOG,CAAAA,MAEjB,CACE,KAAUC,MAAJ,CAAU,yCAAV,CAAN,CAOF,IAJA,IAAIC,EAAQ,EAAZ,CACIC,EAAO,EADX,CAEIC,EAAM,CAFV,CAISC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,CAAOG,CAAAA,MAA3B,CAAmCK,CAAA,EAAnC,CAAwC,CACtC,IAAIjB,EAAQS,CAAA,CAAOQ,CAAP,CAEZ,IAAIC,CAAA,CAAUlB,CAAV,CAAJ,EAAwBmB,CAAA,CAAMnB,CAAN,CAAxB,CACE,KAAUa,MAAJ,CAAU,yDAAV,CAAN,CAGIb,CAAN,GAAec,EAAf,GACEA,CAAA,CAAMd,CAAN,CADF,CACiB,CADjB,CAIAc,EAAA,CAAMd,CAAN,CAAA,EAEIc,EAAA,CAAMd,CAAN,CAAJ,GAAqBgB,CAArB,CACED,CAAKK,CAAAA,IAAL,CAAUpB,CAAV,CADF,CAEWc,CAAA,CAAMd,CAAN,CAFX,CAE0BgB,CAF1B,GAGEA,CACA,CADMF,CAAA,CAAMd,CAAN,CACN;AAAAe,CAAA,CAAO,CAACf,CAAD,CAJT,CAbsC,CAqBxC,MAAOe,EAjCc,CA3CiE,IACpFM,EAAQd,CAAKc,CAAAA,KADuE,CAEpFF,EAAQZ,CAAKY,CAAAA,KAFuE,CAGpFD,EAAYX,CAAKW,CAAAA,SA2BrB,OAAOG,EAAA,CAhCEhB,MAgCF,CAAY,CACjB,iBAAkBG,CADD,CAEjB,MAAOc,QAAU,CAACC,CAAD,CAAO,CACtB,MAAOf,EAAA,CAAMe,CAAN,CADe,CAFP,CAAZ,CA9BiF,CAA1D,CA+EhC1B,EAAQI,CAAAA,UAAR,CAAqBA,CA7FyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/mode.js\"],\n\"sourcesContent\":[\"shadow$provide[153] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMode = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'mode';\\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\\nvar createMode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      isNaN = _ref.isNaN,\\n      isNumeric = _ref.isNumeric;\\n\\n  /**\\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\\n  * If there are more than one modes, it returns a list of those values.\\n  *\\n  * Syntax:\\n  *\\n  *     math.mode(a, b, c, ...)\\n  *     math.mode(A)\\n  *\\n  * Examples:\\n  *\\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\\n  *     math.mode('a','a','b','c')                           // returns [\\\"a\\\"]\\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \\\"abc\\\"]\\n  *\\n  * See also:\\n  *\\n  *     median,\\n  *     mean\\n  *\\n  * @param {... *} args  A single matrix\\n  * @return {*} The mode of all values\\n  */\\n  return typed(name, {\\n    'Array | Matrix': _mode,\\n    '...': function _(args) {\\n      return _mode(args);\\n    }\\n  });\\n  /**\\n   * Calculates the mode in an 1-dimensional array\\n   * @param {Array} values\\n   * @return {Array} mode\\n   * @private\\n   */\\n\\n  function _mode(values) {\\n    values = (0, _array.flatten)(values.valueOf());\\n    var num = values.length;\\n\\n    if (num === 0) {\\n      throw new Error('Cannot calculate mode of an empty array');\\n    }\\n\\n    var count = {};\\n    var mode = [];\\n    var max = 0;\\n\\n    for (var i = 0; i < values.length; i++) {\\n      var value = values[i];\\n\\n      if (isNumeric(value) && isNaN(value)) {\\n        throw new Error('Cannot calculate mode of an array containing NaN values');\\n      }\\n\\n      if (!(value in count)) {\\n        count[value] = 0;\\n      }\\n\\n      count[value]++;\\n\\n      if (count[value] === max) {\\n        mode.push(value);\\n      } else if (count[value] > max) {\\n        max = count[value];\\n        mode = [value];\\n      }\\n    }\\n\\n    return mode;\\n  }\\n});\\nexports.createMode = createMode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMode\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_mode\",\"values\",\"flatten\",\"valueOf\",\"length\",\"Error\",\"count\",\"mode\",\"max\",\"i\",\"isNumeric\",\"isNaN\",\"push\",\"typed\",\"_\",\"args\"]\n}\n"]