["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setUnion.js"],"~:js","shadow$provide[241]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetUnion=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setUnion\",\"typed size concat subset setIntersect setSymDifference Index\".split(\" \"),function(f){var u=f.typed,k=f.size,t=f.concat,p=f.subset,g=f.setIntersect,d=f.setSymDifference,l=f.Index;return u(\"setUnion\",{\"Array | Matrix, Array | Matrix\":function(h,n){if(0===p(k(h),new l(0)))return(0,q.flatten)(n);if(0===p(k(n),new l(0)))return(0,q.flatten)(h);h=\n(0,q.flatten)(h);n=(0,q.flatten)(n);return t(d(h,n),g(h,n))}})});a.createSetUnion=c}","~:source","shadow$provide[241] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetUnion = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setUnion';\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\nvar createSetUnion = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      concat = _ref.concat,\n      subset = _ref.subset,\n      setIntersect = _ref.setIntersect,\n      setSymDifference = _ref.setSymDifference,\n      Index = _ref.Index;\n\n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // if any of them is empty, return the other one\n        return (0, _array.flatten)(a2);\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        return (0, _array.flatten)(a1);\n      }\n\n      var b1 = (0, _array.flatten)(a1);\n      var b2 = (0, _array.flatten)(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n});\nexports.createSetUnion = createSetUnion;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSetUnion","__esModule","value"]],"~:compiled-at",1619135723951,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setUnion.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE9B,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAgC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,8DAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACiB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACxFC,EAAQD,CAAKC,CAAAA,KAD2E,CAExFC,EAAOF,CAAKE,CAAAA,IAF4E,CAGxFC,EAASH,CAAKG,CAAAA,MAH0E,CAIxFC,EAASJ,CAAKI,CAAAA,MAJ0E,CAKxFC,EAAeL,CAAKK,CAAAA,YALoE,CAMxFC,EAAmBN,CAAKM,CAAAA,gBANgE,CAOxFC,EAAQP,CAAKO,CAAAA,KAuBjB,OAAON,EAAA,CAhCEH,UAgCF,CAAY,CACjB,iCAAkCU,QAA+B,CAACC,CAAD,CAAKC,CAAL,CAAS,CACxE,GAAuC,CAAvC,GAAIN,CAAA,CAAOF,CAAA,CAAKO,CAAL,CAAP,CAAiB,IAAIF,CAAJ,CAAU,CAAV,CAAjB,CAAJ,CAEE,MAAO,CAAC,CAAA,CAAGZ,CAAOgB,CAAAA,OAAX,EAAoBD,CAApB,CACF,IAAuC,CAAvC,GAAIN,CAAA,CAAOF,CAAA,CAAKQ,CAAL,CAAP,CAAiB,IAAIH,CAAJ,CAAU,CAAV,CAAjB,CAAJ,CACL,MAAO,CAAC,CAAA,CAAGZ,CAAOgB,CAAAA,OAAX,EAAoBF,CAApB,CAGLG,EAAAA;AAAK,CAAC,CAAA,CAAGjB,CAAOgB,CAAAA,OAAX,EAAoBF,CAApB,CACLI,EAAAA,CAAK,CAAC,CAAA,CAAGlB,CAAOgB,CAAAA,OAAX,EAAoBD,CAApB,CACT,OAAOP,EAAA,CAAOG,CAAA,CAAiBM,CAAjB,CAAqBC,CAArB,CAAP,CAAiCR,CAAA,CAAaO,CAAb,CAAiBC,CAAjB,CAAjC,CAViE,CADzD,CAAZ,CA9BqF,CAA1D,CA6CpCvB,EAAQI,CAAAA,cAAR,CAAyBA,CA3DqC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setUnion.js\"],\n\"sourcesContent\":[\"shadow$provide[241] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetUnion = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setUnion';\\nvar dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];\\nvar createSetUnion = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      concat = _ref.concat,\\n      subset = _ref.subset,\\n      setIntersect = _ref.setIntersect,\\n      setSymDifference = _ref.setSymDifference,\\n      Index = _ref.Index;\\n\\n  /**\\n   * Create the union of two (multi)sets.\\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setUnion(set1, set2)\\n   *\\n   * Examples:\\n   *\\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]\\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]\\n   *\\n   * See also:\\n   *\\n   *    setIntersect, setDifference\\n   *\\n   * @param {Array | Matrix}    a1  A (multi)set\\n   * @param {Array | Matrix}    a2  A (multi)set\\n   * @return {Array | Matrix}    The union of two (multi)sets\\n   */\\n  return typed(name, {\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\\n      if (subset(size(a1), new Index(0)) === 0) {\\n        // if any of them is empty, return the other one\\n        return (0, _array.flatten)(a2);\\n      } else if (subset(size(a2), new Index(0)) === 0) {\\n        return (0, _array.flatten)(a1);\\n      }\\n\\n      var b1 = (0, _array.flatten)(a1);\\n      var b2 = (0, _array.flatten)(a2);\\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\\n    }\\n  });\\n});\\nexports.createSetUnion = createSetUnion;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetUnion\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"concat\",\"subset\",\"setIntersect\",\"setSymDifference\",\"Index\",\"ArrayMatrixArrayMatrix\",\"a1\",\"a2\",\"flatten\",\"b1\",\"b2\"]\n}\n"]