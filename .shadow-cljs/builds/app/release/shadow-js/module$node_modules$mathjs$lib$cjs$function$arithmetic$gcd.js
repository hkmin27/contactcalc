["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js"],"~:js","shadow$provide[88]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createGcd=void 0;c=b(25);var q=b(84),f=b(85),u=b(86),k=b(87),t=b(77),p=b(50);b=(0,c.factory)(\"gcd\",[\"typed\",\"matrix\",\"equalScalar\",\"BigNumber\",\"DenseMatrix\"],function(g){var d=g.typed,l=g.matrix,h=g.equalScalar,n=g.BigNumber;g=g.DenseMatrix;var r=(0,q.createAlgorithm01)({typed:d}),v=(0,f.createAlgorithm04)({typed:d,equalScalar:h}),C=(0,u.createAlgorithm10)({typed:d,DenseMatrix:g}),z=(0,k.createAlgorithm13)({typed:d}),\nw=(0,t.createAlgorithm14)({typed:d});return d(\"gcd\",{\"number, number\":p.gcdNumber,\"BigNumber, BigNumber\":function(B,x){if(!B.isInt()||!x.isInt())throw Error(\"Parameters in function gcd must be integer numbers\");for(var D=new n(0);!x.isZero();){var F=B.mod(x);B=x;x=F}return B.lt(D)?B.neg():B},\"Fraction, Fraction\":function(B,x){return B.gcd(x)},\"SparseMatrix, SparseMatrix\":function(B,x){return v(B,x,this)},\"SparseMatrix, DenseMatrix\":function(B,x){return r(x,B,this,!0)},\"DenseMatrix, SparseMatrix\":function(B,\nx){return r(B,x,this,!1)},\"DenseMatrix, DenseMatrix\":function(B,x){return z(B,x,this)},\"Array, Array\":function(B,x){return this(l(B),l(x)).valueOf()},\"Array, Matrix\":function(B,x){return this(l(B),x)},\"Matrix, Array\":function(B,x){return this(B,l(x))},\"SparseMatrix, number | BigNumber\":function(B,x){return C(B,x,this,!1)},\"DenseMatrix, number | BigNumber\":function(B,x){return w(B,x,this,!1)},\"number | BigNumber, SparseMatrix\":function(B,x){return C(x,B,this,!0)},\"number | BigNumber, DenseMatrix\":function(B,\nx){return w(x,B,this,!0)},\"Array, number | BigNumber\":function(B,x){return w(l(B),x,this,!1).valueOf()},\"number | BigNumber, Array\":function(B,x){return w(l(x),B,this,!0).valueOf()},\"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber\":function(B,x,D){B=this(B,x);for(x=0;x<D.length;x++)B=this(B,D[x]);return B}})});a.createGcd=b}","~:source","shadow$provide[88] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGcd = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm01.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm04.js\");\n\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm10.js\");\n\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nvar createGcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = (0, _algorithm.createAlgorithm01)({\n    typed: typed\n  });\n  var algorithm04 = (0, _algorithm2.createAlgorithm04)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = (0, _algorithm3.createAlgorithm10)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm4.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm5.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  return typed(name, {\n    'number, number': _index.gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm10(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = this(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = this(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});\nexports.createGcd = createGcd;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm14","~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm10","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm04","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm01","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm13"]],"~:properties",["^5",["typed","DenseMatrix","__esModule","value","equalScalar","createGcd"]],"~:compiled-at",1619135723775,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$gcd.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js\"],\n\"sourcesContent\":[\"shadow$provide[88] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createGcd = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _algorithm = require(\\\"../../type/matrix/utils/algorithm01.js\\\");\\n\\nvar _algorithm2 = require(\\\"../../type/matrix/utils/algorithm04.js\\\");\\n\\nvar _algorithm3 = require(\\\"../../type/matrix/utils/algorithm10.js\\\");\\n\\nvar _algorithm4 = require(\\\"../../type/matrix/utils/algorithm13.js\\\");\\n\\nvar _algorithm5 = require(\\\"../../type/matrix/utils/algorithm14.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'gcd';\\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\\nvar createGcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      equalScalar = _ref.equalScalar,\\n      BigNumber = _ref.BigNumber,\\n      DenseMatrix = _ref.DenseMatrix;\\n  var algorithm01 = (0, _algorithm.createAlgorithm01)({\\n    typed: typed\\n  });\\n  var algorithm04 = (0, _algorithm2.createAlgorithm04)({\\n    typed: typed,\\n    equalScalar: equalScalar\\n  });\\n  var algorithm10 = (0, _algorithm3.createAlgorithm10)({\\n    typed: typed,\\n    DenseMatrix: DenseMatrix\\n  });\\n  var algorithm13 = (0, _algorithm4.createAlgorithm13)({\\n    typed: typed\\n  });\\n  var algorithm14 = (0, _algorithm5.createAlgorithm14)({\\n    typed: typed\\n  });\\n  /**\\n   * Calculate the greatest common divisor for two or more values or arrays.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.gcd(a, b)\\n   *    math.gcd(a, b, c, ...)\\n   *\\n   * Examples:\\n   *\\n   *    math.gcd(8, 12)              // returns 4\\n   *    math.gcd(-4, 6)              // returns 2\\n   *    math.gcd(25, 15, -10)        // returns 5\\n   *\\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\\n   *\\n   * See also:\\n   *\\n   *    lcm, xgcd\\n   *\\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\\n   */\\n\\n  return typed(name, {\\n    'number, number': _index.gcdNumber,\\n    'BigNumber, BigNumber': _gcdBigNumber,\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return x.gcd(y);\\n    },\\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\\n      return algorithm04(x, y, this);\\n    },\\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\\n      return algorithm01(y, x, this, true);\\n    },\\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\\n      return algorithm01(x, y, this, false);\\n    },\\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\\n      return algorithm13(x, y, this);\\n    },\\n    'Array, Array': function ArrayArray(x, y) {\\n      // use matrix implementation\\n      return this(matrix(x), matrix(y)).valueOf();\\n    },\\n    'Array, Matrix': function ArrayMatrix(x, y) {\\n      // use matrix implementation\\n      return this(matrix(x), y);\\n    },\\n    'Matrix, Array': function MatrixArray(x, y) {\\n      // use matrix implementation\\n      return this(x, matrix(y));\\n    },\\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\\n      return algorithm10(x, y, this, false);\\n    },\\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\\n      return algorithm14(x, y, this, false);\\n    },\\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\\n      return algorithm10(y, x, this, true);\\n    },\\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\\n      return algorithm14(y, x, this, true);\\n    },\\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\\n      // use matrix implementation\\n      return algorithm14(matrix(x), y, this, false).valueOf();\\n    },\\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\\n      // use matrix implementation\\n      return algorithm14(matrix(y), x, this, true).valueOf();\\n    },\\n    // TODO: need a smarter notation here\\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\\n      var res = this(a, b);\\n\\n      for (var i = 0; i < args.length; i++) {\\n        res = this(res, args[i]);\\n      }\\n\\n      return res;\\n    }\\n  });\\n  /**\\n   * Calculate gcd for BigNumbers\\n   * @param {BigNumber} a\\n   * @param {BigNumber} b\\n   * @returns {BigNumber} Returns greatest common denominator of a and b\\n   * @private\\n   */\\n\\n  function _gcdBigNumber(a, b) {\\n    if (!a.isInt() || !b.isInt()) {\\n      throw new Error('Parameters in function gcd must be integer numbers');\\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\\n\\n\\n    var zero = new BigNumber(0);\\n\\n    while (!b.isZero()) {\\n      var r = a.mod(b);\\n      a = b;\\n      b = r;\\n    }\\n\\n    return a.lt(zero) ? a.neg() : a;\\n  }\\n});\\nexports.createGcd = createGcd;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createGcd\",\"_factory\",\"_algorithm\",\"_algorithm2\",\"_algorithm3\",\"_algorithm4\",\"_algorithm5\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"equalScalar\",\"BigNumber\",\"DenseMatrix\",\"algorithm01\",\"createAlgorithm01\",\"algorithm04\",\"createAlgorithm04\",\"algorithm10\",\"createAlgorithm10\",\"algorithm13\",\"createAlgorithm13\",\"algorithm14\",\"createAlgorithm14\",\"gcdNumber\",\"_gcdBigNumber\",\"a\",\"b\",\"isInt\",\"Error\",\"zero\",\"isZero\",\"r\",\"mod\",\"lt\",\"neg\",\"FractionFraction\",\"x\",\"y\",\"gcd\",\"SparseMatrixSparseMatrix\",\"SparseMatrixDenseMatrix\",\"DenseMatrixSparseMatrix\",\"DenseMatrixDenseMatrix\",\"ArrayArray\",\"valueOf\",\"ArrayMatrix\",\"MatrixArray\",\"SparseMatrixNumberBigNumber\",\"DenseMatrixNumberBigNumber\",\"numberBigNumberSparseMatrix\",\"numberBigNumberDenseMatrix\",\"ArrayNumberBigNumber\",\"numberBigNumberArray\",\"ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber\",\"args\",\"res\",\"i\",\"length\"]\n}\n"]