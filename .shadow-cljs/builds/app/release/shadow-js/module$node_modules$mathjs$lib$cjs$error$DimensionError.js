["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/error/DimensionError.js"],"~:js","shadow$provide[22]=function(c,b,y,a){function q(f,u,k){if(!(this instanceof q))throw new SyntaxError(\"Constructor must be called with the new operator\");this.actual=f;this.expected=u;this.relation=k;this.message=\"Dimension mismatch (\"+(Array.isArray(f)?\"[\"+f.join(\", \")+\"]\":f)+\" \"+(this.relation||\"!\\x3d\")+\" \"+(Array.isArray(u)?\"[\"+u.join(\", \")+\"]\":u)+\")\";this.stack=Error().stack}Object.defineProperty(a,\"__esModule\",{value:!0});a.DimensionError=q;q.prototype=new RangeError;q.prototype.constructor=RangeError;\nq.prototype.name=\"DimensionError\";q.prototype.isDimensionError=!0}","~:source","shadow$provide[22] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DimensionError = DimensionError;\n\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["message","isDimensionError","prototype","__esModule","DimensionError","expected","name","value","actual","stack","relation","constructor"]],"~:compiled-at",1619135723713,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$error$DimensionError.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAiB7DC,QAASA,EAAc,CAACC,CAAD,CAASC,CAAT,CAAmBC,CAAnB,CAA6B,CAClD,GAAI,EAAE,IAAF,WAAkBH,EAAlB,CAAJ,CACE,KAAM,KAAII,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKH,CAAAA,MAAL,CAAcA,CACd,KAAKC,CAAAA,QAAL,CAAgBA,CAChB,KAAKC,CAAAA,QAAL,CAAgBA,CAChB,KAAKE,CAAAA,OAAL,CAAe,sBAAf,EAAyCC,KAAMC,CAAAA,OAAN,CAAcN,CAAd,CAAA,CAAwB,GAAxB,CAA8BA,CAAOO,CAAAA,IAAP,CAAY,IAAZ,CAA9B,CAAkD,GAAlD,CAAwDP,CAAjG,EAA2G,GAA3G,EAAkH,IAAKE,CAAAA,QAAvH,EAAmI,OAAnI,EAA2I,GAA3I,EAAkJG,KAAMC,CAAAA,OAAN,CAAcL,CAAd,CAAA,CAA0B,GAA1B,CAAgCA,CAASM,CAAAA,IAAT,CAAc,IAAd,CAAhC,CAAsD,GAAtD,CAA4DN,CAA9M,EAA0N,GAC1N,KAAKO,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KATyB,CAdpDE,MAAOC,CAAAA,cAAP,CAAsBb,CAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,EAAQC,CAAAA,cAAR,CAAyBA,CAuBzBA,EAAec,CAAAA,SAAf,CAA2B,IAAIC,UAC/Bf,EAAec,CAAAA,SAAUE,CAAAA,WAAzB,CAAuCD,UACvCf;CAAec,CAAAA,SAAUG,CAAAA,IAAzB,CAAgC,gBAChCjB,EAAec,CAAAA,SAAUI,CAAAA,gBAAzB,CAA4C,CAAA,CAhCiB;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/error/DimensionError.js\"],\n\"sourcesContent\":[\"shadow$provide[22] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.DimensionError = DimensionError;\\n\\n/**\\n * Create a range error with the message:\\n *     'Dimension mismatch (<actual size> != <expected size>)'\\n * @param {number | number[]} actual        The actual size\\n * @param {number | number[]} expected      The expected size\\n * @param {string} [relation='!=']          Optional relation between actual\\n *                                          and expected size: '!=', '<', etc.\\n * @extends RangeError\\n */\\nfunction DimensionError(actual, expected, relation) {\\n  if (!(this instanceof DimensionError)) {\\n    throw new SyntaxError('Constructor must be called with the new operator');\\n  }\\n\\n  this.actual = actual;\\n  this.expected = expected;\\n  this.relation = relation;\\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\\n  this.stack = new Error().stack;\\n}\\n\\nDimensionError.prototype = new RangeError();\\nDimensionError.prototype.constructor = RangeError;\\nDimensionError.prototype.name = 'DimensionError';\\nDimensionError.prototype.isDimensionError = true;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"DimensionError\",\"actual\",\"expected\",\"relation\",\"SyntaxError\",\"message\",\"Array\",\"isArray\",\"join\",\"stack\",\"Error\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"RangeError\",\"constructor\",\"name\",\"isDimensionError\"]\n}\n"]