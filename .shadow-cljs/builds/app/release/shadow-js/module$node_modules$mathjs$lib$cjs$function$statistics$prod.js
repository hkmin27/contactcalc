["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/prod.js"],"~:js","shadow$provide[155]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createProd=void 0;var q=b(38);c=b(25);var f=b(154);b=(0,c.factory)(\"prod\",[\"typed\",\"config\",\"multiplyScalar\",\"numeric\"],function(u){function k(l){var h;(0,q.deepForEach)(l,function(n){try{h=void 0===h?n:g(h,n)}catch(r){throw(0,f.improveErrorMessage)(r,\"prod\",n);}});\"string\"===typeof h&&(h=d(h,p.number));if(void 0===h)throw Error(\"Cannot calculate prod of an empty array\");return h}var t=u.typed,p=u.config,g=u.multiplyScalar,\nd=u.numeric;return t(\"prod\",{\"Array | Matrix\":k,\"Array | Matrix, number | BigNumber\":function(l,h){throw Error(\"prod(A, dim) is not yet supported\");},\"...\":function(l){return k(l)}})});a.createProd=b}","~:source","shadow$provide[155] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProd = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nvar createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      numeric = _ref.numeric;\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3)           // returns 6\n   *     math.prod(2, 3)               // returns 6\n   *     math.prod(2, 3, 4)            // returns 24\n   *     math.prod([2, 3, 4])          // returns 24\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n\n  function _prod(array) {\n    var prod;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n});\nexports.createProd = createProd;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage"]],"~:properties",["^5",["__esModule","value","createProd"]],"~:compiled-at",1619135723894,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$prod.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAuBT,CAAA,CAAQ,GAAR,CAIvBM,EAAAA,CAA4B,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,gBAApBA,CAAsC,SAAtCA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAmDxFC,QAASA,EAAK,CAACC,CAAD,CAAQ,CACpB,IAAIC,CACJ,EAAC,CAAA,CAAGT,CAAYU,CAAAA,WAAhB,EAA6BF,CAA7B,CAAoC,QAAS,CAACV,CAAD,CAAQ,CACnD,GAAI,CACFW,CAAA,CAAgBE,IAAAA,EAAT,GAAAF,CAAA,CAAqBX,CAArB,CAA6Bc,CAAA,CAAeH,CAAf,CAAqBX,CAArB,CADlC,CAEF,MAAOe,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGX,CAAqBY,CAAAA,mBAAzB,EAA8CD,CAA9C,CAAmD,MAAnD,CAA2Df,CAA3D,CAAN,CADY,CAHqC,CAArD,CAQoB,SAApB,GAAI,MAAOW,EAAX,GACEA,CADF,CACSM,CAAA,CAAQN,CAAR,CAAcO,CAAOC,CAAAA,MAArB,CADT,CAIA,IAAaN,IAAAA,EAAb,GAAIF,CAAJ,CACE,KAAUS,MAAJ,CAAU,yCAAV,CAAN,CAGF,MAAOT,EAlBa,CAnDkE,IACpFU,EAAQb,CAAKa,CAAAA,KADuE,CAEpFH,EAASV,CAAKU,CAAAA,MAFsE,CAGpFJ,EAAiBN,CAAKM,CAAAA,cAH8D;AAIpFG,EAAUT,CAAKS,CAAAA,OA2BnB,OAAOI,EAAA,CAjCEf,MAiCF,CAAY,CAEjB,iBAAkBG,CAFD,CAIjB,qCAAsCa,QAAmC,CAACZ,CAAD,CAAQa,CAAR,CAAa,CAEpF,KAAUH,MAAJ,CAAU,mCAAV,CAAN,CAFoF,CAJrE,CASjB,MAAOI,QAAU,CAACC,CAAD,CAAO,CACtB,MAAOhB,EAAA,CAAMgB,CAAN,CADe,CATP,CAAZ,CA/BiF,CAA1D,CAwEhC5B,EAAQI,CAAAA,UAAR,CAAqBA,CAxFyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/prod.js\"],\n\"sourcesContent\":[\"shadow$provide[155] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createProd = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _improveErrorMessage = require(\\\"./utils/improveErrorMessage.js\\\");\\n\\nvar name = 'prod';\\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\\nvar createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      multiplyScalar = _ref.multiplyScalar,\\n      numeric = _ref.numeric;\\n\\n  /**\\n   * Compute the product of a matrix or a list with values.\\n   * In case of a (multi dimensional) array or matrix, the sum of all\\n   * elements will be calculated.\\n   *\\n   * Syntax:\\n   *\\n   *     math.prod(a, b, c, ...)\\n   *     math.prod(A)\\n   *\\n   * Examples:\\n   *\\n   *     math.multiply(2, 3)           // returns 6\\n   *     math.prod(2, 3)               // returns 6\\n   *     math.prod(2, 3, 4)            // returns 24\\n   *     math.prod([2, 3, 4])          // returns 24\\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\\n   *\\n   * See also:\\n   *\\n   *    mean, median, min, max, sum, std, variance\\n   *\\n   * @param {... *} args  A single matrix or or multiple scalar values\\n   * @return {*} The product of all values\\n   */\\n  return typed(name, {\\n    // prod([a, b, c, d, ...])\\n    'Array | Matrix': _prod,\\n    // prod([a, b, c, d, ...], dim)\\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\\n      // TODO: implement prod(A, dim)\\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\\n    },\\n    // prod(a, b, c, d, ...)\\n    '...': function _(args) {\\n      return _prod(args);\\n    }\\n  });\\n  /**\\n   * Recursively calculate the product of an n-dimensional array\\n   * @param {Array} array\\n   * @return {number} prod\\n   * @private\\n   */\\n\\n  function _prod(array) {\\n    var prod;\\n    (0, _collection.deepForEach)(array, function (value) {\\n      try {\\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\\n      } catch (err) {\\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);\\n      }\\n    }); // make sure returning numeric value: parse a string into a numeric value\\n\\n    if (typeof prod === 'string') {\\n      prod = numeric(prod, config.number);\\n    }\\n\\n    if (prod === undefined) {\\n      throw new Error('Cannot calculate prod of an empty array');\\n    }\\n\\n    return prod;\\n  }\\n});\\nexports.createProd = createProd;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createProd\",\"_collection\",\"_factory\",\"_improveErrorMessage\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_prod\",\"array\",\"prod\",\"deepForEach\",\"undefined\",\"multiplyScalar\",\"err\",\"improveErrorMessage\",\"numeric\",\"config\",\"number\",\"Error\",\"typed\",\"ArrayMatrixNumberBigNumber\",\"dim\",\"_\",\"args\"]\n}\n"]