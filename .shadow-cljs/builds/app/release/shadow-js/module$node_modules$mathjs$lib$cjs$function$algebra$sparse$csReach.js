["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/algebra/sparse/csReach.js"],"~:js","shadow$provide[292]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.csReach=function(k,t,p,g,d){var l=k._ptr,h=t._index,n=t._ptr;t=k._size[1];var r=t;var v=n[p];for(p=n[p+1];v<p;v++)n=h[v],(0,q.csMarked)(l,n)||(r=(0,u.csDfs)(n,k,r,g,d));for(v=r;v<t;v++)(0,f.csMark)(l,g[v]);return r};var q=b(288),f=b(289),u=b(291)}","~:source","shadow$provide[292] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csReach = csReach;\n\nvar _csMarked = require(\"./csMarked.js\");\n\nvar _csMark = require(\"./csMark.js\");\n\nvar _csDfs = require(\"./csDfs.js\");\n\n/**\n * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1\n * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n *\n * @param {Matrix}  g               The G matrix\n * @param {Matrix}  b               The B matrix\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector\n *\n * @return {Number}                 The index for the nonzero pattern\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nfunction csReach(g, b, k, xi, pinv) {\n  // g arrays\n  var gptr = g._ptr;\n  var gsize = g._size; // b arrays\n\n  var bindex = b._index;\n  var bptr = b._ptr; // columns\n\n  var n = gsize[1]; // vars\n\n  var p, p0, p1; // initialize top\n\n  var top = n; // loop column indeces in B\n\n  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n    // node i\n    var i = bindex[p]; // check node i is marked\n\n    if (!(0, _csMarked.csMarked)(gptr, i)) {\n      // start a dfs at unmarked node i\n      top = (0, _csDfs.csDfs)(i, g, top, xi, pinv);\n    }\n  } // loop columns from top -> n - 1\n\n\n  for (p = top; p < n; p++) {\n    // restore G\n    (0, _csMark.csMark)(gptr, xi[p]);\n  }\n\n  return top;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csMark","~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csMarked","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csDfs"]],"~:properties",["^5",["__esModule","value","csReach"]],"~:compiled-at",1619135723979,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csReach.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,OAAR,CAwBAA,QAAgB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAcC,CAAd,CAAoB,CAElC,IAAIC,EAAOL,CAAEM,CAAAA,IAAb,CAGIC,EAASN,CAAEO,CAAAA,MAHf,CAIIC,EAAOR,CAAEK,CAAAA,IAETI,EAAAA,CALQV,CAAEW,CAAAA,KAKN,CAAM,CAAN,CAR0B,KAY9BC,EAAMF,CAEL,KAAAG,EAAKJ,CAAA,CAAKP,CAAL,CAAV,KAAmBY,CAAnB,CAAwBL,CAAA,CAAKP,CAAL,CAAS,CAAT,CAAxB,CAA6Ca,CAA7C,CAAiDD,CAAjD,CAAqDC,CAAA,EAArD,CAEMC,CAEJ,CAFQT,CAAA,CAAOQ,CAAP,CAER,CAAK,CAAC,CAAA,CAAGE,CAAUC,CAAAA,QAAd,EAAwBb,CAAxB,CAA8BW,CAA9B,CAAL,GAEEJ,CAFF,CAEQ,CAAC,CAAA,CAAGO,CAAOC,CAAAA,KAAX,EAAkBJ,CAAlB,CAAqBhB,CAArB,CAAwBY,CAAxB,CAA6BT,CAA7B,CAAiCC,CAAjC,CAFR,CAOF,KAAKW,CAAL,CAASH,CAAT,CAAcG,CAAd,CAAkBL,CAAlB,CAAqBK,CAAA,EAArB,CAEE,CAAC,CAAA,CAAGM,CAAQC,CAAAA,MAAZ,EAAoBjB,CAApB,CAA0BF,CAAA,CAAGY,CAAH,CAA1B,CAGF,OAAOH,EA9B2B,CAtBpC,KAAIK,EAAYxB,CAAA,CAAQ,GAAR,CAAhB,CAEI4B,EAAU5B,CAAA,CAAQ,GAAR,CAFd,CAII0B,EAAS1B,CAAA,CAAQ,GAAR,CAZiD;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/algebra/sparse/csReach.js\"],\n\"sourcesContent\":[\"shadow$provide[292] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.csReach = csReach;\\n\\nvar _csMarked = require(\\\"./csMarked.js\\\");\\n\\nvar _csMark = require(\\\"./csMark.js\\\");\\n\\nvar _csDfs = require(\\\"./csDfs.js\\\");\\n\\n/**\\n * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1\\n * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\\n * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\\n *\\n * @param {Matrix}  g               The G matrix\\n * @param {Matrix}  b               The B matrix\\n * @param {Number}  k               The kth column in B\\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\\n * @param {Array}   pinv            The inverse row permutation vector\\n *\\n * @return {Number}                 The index for the nonzero pattern\\n *\\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\\n */\\nfunction csReach(g, b, k, xi, pinv) {\\n  // g arrays\\n  var gptr = g._ptr;\\n  var gsize = g._size; // b arrays\\n\\n  var bindex = b._index;\\n  var bptr = b._ptr; // columns\\n\\n  var n = gsize[1]; // vars\\n\\n  var p, p0, p1; // initialize top\\n\\n  var top = n; // loop column indeces in B\\n\\n  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\\n    // node i\\n    var i = bindex[p]; // check node i is marked\\n\\n    if (!(0, _csMarked.csMarked)(gptr, i)) {\\n      // start a dfs at unmarked node i\\n      top = (0, _csDfs.csDfs)(i, g, top, xi, pinv);\\n    }\\n  } // loop columns from top -> n - 1\\n\\n\\n  for (p = top; p < n; p++) {\\n    // restore G\\n    (0, _csMark.csMark)(gptr, xi[p]);\\n  }\\n\\n  return top;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"csReach\",\"g\",\"b\",\"k\",\"xi\",\"pinv\",\"gptr\",\"_ptr\",\"bindex\",\"_index\",\"bptr\",\"n\",\"_size\",\"top\",\"p0\",\"p1\",\"p\",\"i\",\"_csMarked\",\"csMarked\",\"_csDfs\",\"csDfs\",\"_csMark\",\"csMark\"]\n}\n"]