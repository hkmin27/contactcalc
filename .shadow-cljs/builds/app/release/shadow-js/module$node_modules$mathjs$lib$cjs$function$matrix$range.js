["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/range.js"],"~:js","shadow$provide[138]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRange=void 0;c=b(25);var q=b(137);b=(0,c.factory)(\"range\",\"typed config ?matrix ?bignumber smaller smallerEq larger largerEq\".split(\" \"),function(f){function u(x){return\"Matrix\"===n.matrix?r?r(x):(0,q.noMatrix)():x}function k(x,D){var F=l(x);if(!F)throw new SyntaxError('String \"'+x+'\" is no valid range');if(\"BigNumber\"===n.number)return void 0===v&&(0,q.noBignumber)(),x=D?d:g,u(x(v(F.start),v(F.end),v(F.step)));\nx=D?p:t;return u(x(F.start,F.end,F.step))}function t(x,D,F){var E=[];if(0<F)for(;C(x,D);)E.push(x),x+=F;else if(0>F)for(;w(x,D);)E.push(x),x+=F;return E}function p(x,D,F){var E=[];if(0<F)for(;z(x,D);)E.push(x),x+=F;else if(0>F)for(;B(x,D);)E.push(x),x+=F;return E}function g(x,D,F){var E=v(0),G=[];if(F.gt(E))for(;C(x,D);)G.push(x),x=x.plus(F);else if(F.lt(E))for(;w(x,D);)G.push(x),x=x.plus(F);return G}function d(x,D,F){var E=v(0),G=[];if(F.gt(E))for(;z(x,D);)G.push(x),x=x.plus(F);else if(F.lt(E))for(;B(x,\nD);)G.push(x),x=x.plus(F);return G}function l(x){x=x.split(\":\").map(function(D){return Number(D)});if(x.some(function(D){return isNaN(D)}))return null;switch(x.length){case 2:return{start:x[0],end:x[1],step:1};case 3:return{start:x[0],end:x[2],step:x[1]};default:return null}}var h=f.typed,n=f.config,r=f.matrix,v=f.bignumber,C=f.smaller,z=f.smallerEq,w=f.larger,B=f.largerEq;return h(\"range\",{string:k,\"string, boolean\":k,\"number, number\":function(x,D){return u(t(x,D,1))},\"number, number, number\":function(x,\nD,F){return u(t(x,D,F))},\"number, number, boolean\":function(x,D,F){return F?u(p(x,D,1)):u(t(x,D,1))},\"number, number, number, boolean\":function(x,D,F,E){return E?u(p(x,D,F)):u(t(x,D,F))},\"BigNumber, BigNumber\":function(x,D){return u(g(x,D,new x.constructor(1)))},\"BigNumber, BigNumber, BigNumber\":function(x,D,F){return u(g(x,D,F))},\"BigNumber, BigNumber, boolean\":function(x,D,F){var E=x.constructor;return F?u(d(x,D,new E(1))):u(g(x,D,new E(1)))},\"BigNumber, BigNumber, BigNumber, boolean\":function(x,\nD,F,E){return E?u(d(x,D,F)):u(g(x,D,F))}})});a.createRange=b}","~:source","shadow$provide[138] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRange = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _noop = require(\"../../utils/noop.js\");\n\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nvar createRange = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\n    }\n  });\n\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : (0, _noop.noMatrix)();\n    }\n\n    return arr;\n  }\n\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        (0, _noop.noBignumber)();\n      }\n\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\n    } else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeEx(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (larger(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _rangeInc(start, end, step) {\n    var array = [];\n    var x = start;\n\n    if (step > 0) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    } else if (step < 0) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeEx(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smaller(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (larger(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _bigRangeInc(start, end, step) {\n    var zero = bignumber(0);\n    var array = [];\n    var x = start;\n\n    if (step.gt(zero)) {\n      while (smallerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    } else if (step.lt(zero)) {\n      while (largerEq(x, end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n});\nexports.createRange = createRange;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$noop","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","__esModule","value","start","createRange","end","step"]],"~:compiled-at",1619135723873,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$range.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/range.js\"],\n\"sourcesContent\":[\"shadow$provide[138] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRange = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _noop = require(\\\"../../utils/noop.js\\\");\\n\\nvar name = 'range';\\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\\nvar createRange = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      matrix = _ref.matrix,\\n      bignumber = _ref.bignumber,\\n      smaller = _ref.smaller,\\n      smallerEq = _ref.smallerEq,\\n      larger = _ref.larger,\\n      largerEq = _ref.largerEq;\\n\\n  /**\\n   * Create an array from a range.\\n   * By default, the range end is excluded. This can be customized by providing\\n   * an extra parameter `includeEnd`.\\n   *\\n   * Syntax:\\n   *\\n   *     math.range(str [, includeEnd])               // Create a range from a string,\\n   *                                                  // where the string contains the\\n   *                                                  // start, optional step, and end,\\n   *                                                  // separated by a colon.\\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\\n   *                                                  // end and a step size of 1.\\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\\n   *                                                  // and end.\\n   *\\n   * Where:\\n   *\\n   * - `str: string`\\n   *   A string 'start:end' or 'start:step:end'\\n   * - `start: {number | BigNumber}`\\n   *   Start of the range\\n   * - `end: number | BigNumber`\\n   *   End of the range, excluded by default, included when parameter includeEnd=true\\n   * - `step: number | BigNumber`\\n   *   Step size. Default value is 1.\\n   * - `includeEnd: boolean`\\n   *   Option to specify whether to include the end or not. False by default.\\n   *\\n   * Examples:\\n   *\\n   *     math.range(2, 6)        // [2, 3, 4, 5]\\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\\n   *\\n   * See also:\\n   *\\n   *     ones, zeros, size, subset\\n   *\\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\\n   * @return {Array | Matrix} range\\n   */\\n  return typed(name, {\\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\\n    // TODO: a number or boolean should not be converted to string here\\n    string: _strRange,\\n    'string, boolean': _strRange,\\n    'number, number': function numberNumber(start, end) {\\n      return _out(_rangeEx(start, end, 1));\\n    },\\n    'number, number, number': function numberNumberNumber(start, end, step) {\\n      return _out(_rangeEx(start, end, step));\\n    },\\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\\n      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));\\n    },\\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\\n      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\\n      var BigNumber = start.constructor;\\n      return _out(_bigRangeEx(start, end, new BigNumber(1)));\\n    },\\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\\n      return _out(_bigRangeEx(start, end, step));\\n    },\\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\\n      var BigNumber = start.constructor;\\n      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));\\n    },\\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\\n      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));\\n    }\\n  });\\n\\n  function _out(arr) {\\n    if (config.matrix === 'Matrix') {\\n      return matrix ? matrix(arr) : (0, _noop.noMatrix)();\\n    }\\n\\n    return arr;\\n  }\\n\\n  function _strRange(str, includeEnd) {\\n    var r = _parse(str);\\n\\n    if (!r) {\\n      throw new SyntaxError('String \\\"' + str + '\\\" is no valid range');\\n    }\\n\\n    var fn;\\n\\n    if (config.number === 'BigNumber') {\\n      if (bignumber === undefined) {\\n        (0, _noop.noBignumber)();\\n      }\\n\\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\\n      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));\\n    } else {\\n      fn = includeEnd ? _rangeInc : _rangeEx;\\n      return _out(fn(r.start, r.end, r.step));\\n    }\\n  }\\n  /**\\n   * Create a range with numbers. End is excluded\\n   * @param {number} start\\n   * @param {number} end\\n   * @param {number} step\\n   * @returns {Array} range\\n   * @private\\n   */\\n\\n\\n  function _rangeEx(start, end, step) {\\n    var array = [];\\n    var x = start;\\n\\n    if (step > 0) {\\n      while (smaller(x, end)) {\\n        array.push(x);\\n        x += step;\\n      }\\n    } else if (step < 0) {\\n      while (larger(x, end)) {\\n        array.push(x);\\n        x += step;\\n      }\\n    }\\n\\n    return array;\\n  }\\n  /**\\n   * Create a range with numbers. End is included\\n   * @param {number} start\\n   * @param {number} end\\n   * @param {number} step\\n   * @returns {Array} range\\n   * @private\\n   */\\n\\n\\n  function _rangeInc(start, end, step) {\\n    var array = [];\\n    var x = start;\\n\\n    if (step > 0) {\\n      while (smallerEq(x, end)) {\\n        array.push(x);\\n        x += step;\\n      }\\n    } else if (step < 0) {\\n      while (largerEq(x, end)) {\\n        array.push(x);\\n        x += step;\\n      }\\n    }\\n\\n    return array;\\n  }\\n  /**\\n   * Create a range with big numbers. End is excluded\\n   * @param {BigNumber} start\\n   * @param {BigNumber} end\\n   * @param {BigNumber} step\\n   * @returns {Array} range\\n   * @private\\n   */\\n\\n\\n  function _bigRangeEx(start, end, step) {\\n    var zero = bignumber(0);\\n    var array = [];\\n    var x = start;\\n\\n    if (step.gt(zero)) {\\n      while (smaller(x, end)) {\\n        array.push(x);\\n        x = x.plus(step);\\n      }\\n    } else if (step.lt(zero)) {\\n      while (larger(x, end)) {\\n        array.push(x);\\n        x = x.plus(step);\\n      }\\n    }\\n\\n    return array;\\n  }\\n  /**\\n   * Create a range with big numbers. End is included\\n   * @param {BigNumber} start\\n   * @param {BigNumber} end\\n   * @param {BigNumber} step\\n   * @returns {Array} range\\n   * @private\\n   */\\n\\n\\n  function _bigRangeInc(start, end, step) {\\n    var zero = bignumber(0);\\n    var array = [];\\n    var x = start;\\n\\n    if (step.gt(zero)) {\\n      while (smallerEq(x, end)) {\\n        array.push(x);\\n        x = x.plus(step);\\n      }\\n    } else if (step.lt(zero)) {\\n      while (largerEq(x, end)) {\\n        array.push(x);\\n        x = x.plus(step);\\n      }\\n    }\\n\\n    return array;\\n  }\\n  /**\\n   * Parse a string into a range,\\n   * The string contains the start, optional step, and end, separated by a colon.\\n   * If the string does not contain a valid range, null is returned.\\n   * For example str='0:2:11'.\\n   * @param {string} str\\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\\n   * @private\\n   */\\n\\n\\n  function _parse(str) {\\n    var args = str.split(':'); // number\\n\\n    var nums = args.map(function (arg) {\\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\\n      return Number(arg);\\n    });\\n    var invalid = nums.some(function (num) {\\n      return isNaN(num);\\n    });\\n\\n    if (invalid) {\\n      return null;\\n    }\\n\\n    switch (nums.length) {\\n      case 2:\\n        return {\\n          start: nums[0],\\n          end: nums[1],\\n          step: 1\\n        };\\n\\n      case 3:\\n        return {\\n          start: nums[0],\\n          end: nums[2],\\n          step: nums[1]\\n        };\\n\\n      default:\\n        return null;\\n    }\\n  }\\n});\\nexports.createRange = createRange;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRange\",\"_factory\",\"_noop\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_out\",\"arr\",\"config\",\"matrix\",\"noMatrix\",\"_strRange\",\"str\",\"includeEnd\",\"r\",\"_parse\",\"SyntaxError\",\"number\",\"undefined\",\"bignumber\",\"noBignumber\",\"fn\",\"_bigRangeInc\",\"_bigRangeEx\",\"start\",\"end\",\"step\",\"_rangeInc\",\"_rangeEx\",\"array\",\"smaller\",\"x\",\"push\",\"larger\",\"smallerEq\",\"largerEq\",\"zero\",\"gt\",\"plus\",\"lt\",\"nums\",\"split\",\"args\",\"map\",\"arg\",\"Number\",\"some\",\"invalid\",\"num\",\"isNaN\",\"length\",\"typed\",\"string\",\"numberNumber\",\"numberNumberNumber\",\"numberNumberBoolean\",\"numberNumberNumberBoolean\",\"BigNumberBigNumber\",\"constructor\",\"BigNumberBigNumberBigNumber\",\"BigNumberBigNumberBoolean\",\"BigNumber\",\"BigNumberBigNumberBigNumberBoolean\"]\n}\n"]