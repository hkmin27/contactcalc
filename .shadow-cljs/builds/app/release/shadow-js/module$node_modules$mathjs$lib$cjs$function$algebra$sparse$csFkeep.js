["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/algebra/sparse/csFkeep.js"],"~:js","shadow$provide[282]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.csFkeep=function(q,f,u){var k=q._values,t=q._index,p=q._ptr;q=q._size[1];for(var g=0,d=0;d<q;d++){var l=p[d];for(p[d]=g;l<p[d+1];l++)f(t[l],d,k?k[l]:1,u)&&(t[g]=t[l],k&&(k[g]=k[l]),g++)}p[q]=g;t.splice(g,t.length-g);k&&k.splice(g,k.length-g);return g}}","~:source","shadow$provide[282] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csFkeep = csFkeep;\n\n/**\n * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n *\n * @param {Matrix}   a              The sparse matrix\n * @param {function} callback       The callback function, function will be invoked with the following args:\n *                                    - The entry row\n *                                    - The entry column\n *                                    - The entry value\n *                                    - The state parameter\n * @param {any}      other          The state\n *\n * @return                          The number of nonzero elements in the matrix\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nfunction csFkeep(a, callback, other) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size; // columns\n\n  var n = asize[1]; // nonzero items\n\n  var nz = 0; // loop columns\n\n  for (var j = 0; j < n; j++) {\n    // get current location of col j\n    var p = aptr[j]; // record new location of col j\n\n    aptr[j] = nz;\n\n    for (; p < aptr[j + 1]; p++) {\n      // check we need to keep this item\n      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n        // keep A(i,j)\n        aindex[nz] = aindex[p]; // check we need to process values (pattern only)\n\n        if (avalues) {\n          avalues[nz] = avalues[p];\n        } // increment nonzero items\n\n\n        nz++;\n      }\n    }\n  } // finalize A\n\n\n  aptr[n] = nz; // trim arrays\n\n  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)\n\n  if (avalues) {\n    avalues.splice(nz, avalues.length - nz);\n  } // return number of nonzero items\n\n\n  return nz;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","csFkeep"]],"~:compiled-at",1619135723976,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csFkeep.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,OAAR,CAiBAA,QAAgB,CAACC,CAAD,CAAIC,CAAJ,CAAcC,CAAd,CAAqB,CAEnC,IAAIC,EAAUH,CAAEI,CAAAA,OAAhB,CACIC,EAASL,CAAEM,CAAAA,MADf,CAEIC,EAAOP,CAAEQ,CAAAA,IAGTC,EAAAA,CAFQT,CAAEU,CAAAA,KAEN,CAAM,CAAN,CAIR,KAFA,IAAIC,EAAK,CAAT,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,CAApB,CAAuBG,CAAA,EAAvB,CAA4B,CAE1B,IAAIC,EAAIN,CAAA,CAAKK,CAAL,CAIR,KAFAL,CAAA,CAAKK,CAAL,CAEA,CAFUD,CAEV,CAAOE,CAAP,CAAWN,CAAA,CAAKK,CAAL,CAAS,CAAT,CAAX,CAAwBC,CAAA,EAAxB,CAEMZ,CAAA,CAASI,CAAA,CAAOQ,CAAP,CAAT,CAAoBD,CAApB,CAAuBT,CAAA,CAAUA,CAAA,CAAQU,CAAR,CAAV,CAAuB,CAA9C,CAAiDX,CAAjD,CAAJ,GAEEG,CAAA,CAAOM,CAAP,CAOA,CAPaN,CAAA,CAAOQ,CAAP,CAOb,CALIV,CAKJ,GAJEA,CAAA,CAAQQ,CAAR,CAIF,CAJgBR,CAAA,CAAQU,CAAR,CAIhB,EAAAF,CAAA,EATF,CARwB,CAuB5BJ,CAAA,CAAKE,CAAL,CAAA,CAAUE,CAEVN,EAAOS,CAAAA,MAAP,CAAcH,CAAd,CAAkBN,CAAOU,CAAAA,MAAzB,CAAkCJ,CAAlC,CAEIR,EAAJ,EACEA,CAAQW,CAAAA,MAAR,CAAeH,CAAf,CAAmBR,CAAQY,CAAAA,MAA3B,CAAoCJ,CAApC,CAIF,OAAOA,EA3C4B,CAvByB;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/algebra/sparse/csFkeep.js\"],\n\"sourcesContent\":[\"shadow$provide[282] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.csFkeep = csFkeep;\\n\\n/**\\n * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\\n *\\n * @param {Matrix}   a              The sparse matrix\\n * @param {function} callback       The callback function, function will be invoked with the following args:\\n *                                    - The entry row\\n *                                    - The entry column\\n *                                    - The entry value\\n *                                    - The state parameter\\n * @param {any}      other          The state\\n *\\n * @return                          The number of nonzero elements in the matrix\\n *\\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\\n */\\nfunction csFkeep(a, callback, other) {\\n  // a arrays\\n  var avalues = a._values;\\n  var aindex = a._index;\\n  var aptr = a._ptr;\\n  var asize = a._size; // columns\\n\\n  var n = asize[1]; // nonzero items\\n\\n  var nz = 0; // loop columns\\n\\n  for (var j = 0; j < n; j++) {\\n    // get current location of col j\\n    var p = aptr[j]; // record new location of col j\\n\\n    aptr[j] = nz;\\n\\n    for (; p < aptr[j + 1]; p++) {\\n      // check we need to keep this item\\n      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\\n        // keep A(i,j)\\n        aindex[nz] = aindex[p]; // check we need to process values (pattern only)\\n\\n        if (avalues) {\\n          avalues[nz] = avalues[p];\\n        } // increment nonzero items\\n\\n\\n        nz++;\\n      }\\n    }\\n  } // finalize A\\n\\n\\n  aptr[n] = nz; // trim arrays\\n\\n  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)\\n\\n  if (avalues) {\\n    avalues.splice(nz, avalues.length - nz);\\n  } // return number of nonzero items\\n\\n\\n  return nz;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"csFkeep\",\"a\",\"callback\",\"other\",\"avalues\",\"_values\",\"aindex\",\"_index\",\"aptr\",\"_ptr\",\"n\",\"_size\",\"nz\",\"j\",\"p\",\"splice\",\"length\"]\n}\n"]