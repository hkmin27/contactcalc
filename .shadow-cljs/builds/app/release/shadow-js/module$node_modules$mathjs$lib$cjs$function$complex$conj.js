["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/complex/conj.js"],"~:js","shadow$provide[115]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createConj=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"conj\",[\"typed\"],function(f){f=f.typed;return f(\"conj\",{number:function(u){return u},BigNumber:function(u){return u},Complex:function(u){return u.conjugate()},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this)}})});a.createConj=b}","~:source","shadow$provide[115] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConj = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'conj';\nvar dependencies = ['typed'];\nvar createConj = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return x;\n    },\n    BigNumber: function BigNumber(x) {\n      return x;\n    },\n    Complex: function Complex(x) {\n      return x.conjugate();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createConj = createConj;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createConj"]],"~:compiled-at",1619135723796,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$complex$conj.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CACpFC,CAAAA,CAAQD,CAAKC,CAAAA,KA2BjB,OAAOA,EAAA,CA9BEH,MA8BF,CAAY,CACjBI,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOA,EADkB,CADV,CAIjBC,UAAWA,QAAkB,CAACD,CAAD,CAAI,CAC/B,MAAOA,EADwB,CAJhB,CAOjBE,QAASA,QAAgB,CAACF,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,SAAF,EADoB,CAPZ,CAUjB,iBAAkBC,QAAoB,CAACJ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,CAAYY,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CADiC,CAVzB,CAAZ,CA5BiF,CAA1D,CA2ChCb,EAAQI,CAAAA,UAAR,CAAqBA,CAzDyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/complex/conj.js\"],\n\"sourcesContent\":[\"shadow$provide[115] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createConj = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'conj';\\nvar dependencies = ['typed'];\\nvar createConj = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Compute the complex conjugate of a complex value.\\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.conj(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\\n   *\\n   * See also:\\n   *\\n   *    re, im, arg, abs\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            A complex number or array with complex numbers\\n   * @return {number | BigNumber | Complex | Array | Matrix}\\n   *            The complex conjugate of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      return x;\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x;\\n    },\\n    Complex: function Complex(x) {\\n      return x.conjugate();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createConj = createConj;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createConj\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"x\",\"BigNumber\",\"Complex\",\"conjugate\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]