["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/cross.js"],"~:js","shadow$provide[124]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCross=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"cross\",[\"typed\",\"matrix\",\"subtract\",\"multiply\"],function(f){function u(d,l){var h=Math.max((0,q.arraySize)(d).length,(0,q.arraySize)(l).length);d=(0,q.squeeze)(d);l=(0,q.squeeze)(l);var n=(0,q.arraySize)(d),r=(0,q.arraySize)(l);if(1!==n.length||1!==r.length||3!==n[0]||3!==r[0])throw new RangeError(\"Vectors with length 3 expected (Size A \\x3d [\"+n.join(\", \")+\n\"], B \\x3d [\"+r.join(\", \")+\"])\");d=[p(g(d[1],l[2]),g(d[2],l[1])),p(g(d[2],l[0]),g(d[0],l[2])),p(g(d[0],l[1]),g(d[1],l[0]))];return 1<h?[d]:d}var k=f.typed,t=f.matrix,p=f.subtract,g=f.multiply;return k(\"cross\",{\"Matrix, Matrix\":function(d,l){return t(u(d.toArray(),l.toArray()))},\"Matrix, Array\":function(d,l){return t(u(d.toArray(),l))},\"Array, Matrix\":function(d,l){return t(u(d,l.toArray()))},\"Array, Array\":u})});a.createCross=c}","~:source","shadow$provide[124] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCross = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'cross';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\nvar createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply;\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n    'Array, Array': _cross\n  });\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n\n  function _cross(x, y) {\n    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);\n    x = (0, _array.squeeze)(x);\n    y = (0, _array.squeeze)(y);\n    var xSize = (0, _array.arraySize)(x);\n    var ySize = (0, _array.arraySize)(y);\n\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n});\nexports.createCross = createCross;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createCross"]],"~:compiled-at",1619135723802,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$cross.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/cross.js\"],\n\"sourcesContent\":[\"shadow$provide[124] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCross = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'cross';\\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply'];\\nvar createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      subtract = _ref.subtract,\\n      multiply = _ref.multiply;\\n\\n  /**\\n   * Calculate the cross product for two vectors in three dimensional space.\\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\\n   * as:\\n   *\\n   *    cross(A, B) = [\\n   *      a2 * b3 - a3 * b2,\\n   *      a3 * b1 - a1 * b3,\\n   *      a1 * b2 - a2 * b1\\n   *    ]\\n   *\\n   * If one of the input vectors has a dimension greater than 1, the output\\n   * vector will be a 1x3 (2-dimensional) matrix.\\n   *\\n   * Syntax:\\n   *\\n   *    math.cross(x, y)\\n   *\\n   * Examples:\\n   *\\n   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]\\n   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]\\n   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]\\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]\\n   *\\n   * See also:\\n   *\\n   *    dot, multiply\\n   *\\n   * @param  {Array | Matrix} x   First vector\\n   * @param  {Array | Matrix} y   Second vector\\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\\n   */\\n  return typed(name, {\\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\\n      return matrix(_cross(x.toArray(), y.toArray()));\\n    },\\n    'Matrix, Array': function MatrixArray(x, y) {\\n      return matrix(_cross(x.toArray(), y));\\n    },\\n    'Array, Matrix': function ArrayMatrix(x, y) {\\n      return matrix(_cross(x, y.toArray()));\\n    },\\n    'Array, Array': _cross\\n  });\\n  /**\\n   * Calculate the cross product for two arrays\\n   * @param {Array} x  First vector\\n   * @param {Array} y  Second vector\\n   * @returns {Array} Returns the cross product of x and y\\n   * @private\\n   */\\n\\n  function _cross(x, y) {\\n    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);\\n    x = (0, _array.squeeze)(x);\\n    y = (0, _array.squeeze)(y);\\n    var xSize = (0, _array.arraySize)(x);\\n    var ySize = (0, _array.arraySize)(y);\\n\\n    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {\\n      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\\n    }\\n\\n    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];\\n\\n    if (highestDimension > 1) {\\n      return [product];\\n    } else {\\n      return product;\\n    }\\n  }\\n});\\nexports.createCross = createCross;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCross\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_cross\",\"x\",\"y\",\"highestDimension\",\"Math\",\"max\",\"arraySize\",\"length\",\"squeeze\",\"xSize\",\"ySize\",\"RangeError\",\"join\",\"product\",\"subtract\",\"multiply\",\"typed\",\"matrix\",\"MatrixMatrix\",\"toArray\",\"MatrixArray\",\"ArrayMatrix\"]\n}\n"]