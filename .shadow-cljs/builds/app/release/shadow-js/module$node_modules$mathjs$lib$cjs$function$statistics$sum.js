["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/sum.js"],"~:js","shadow$provide[530]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSum=void 0;var q=b(38);c=b(25);var f=b(154);b=(0,c.factory)(\"sum\",[\"typed\",\"config\",\"add\",\"numeric\"],function(u){function k(l){var h;(0,q.deepForEach)(l,function(n){try{h=void 0===h?n:g(h,n)}catch(r){throw(0,f.improveErrorMessage)(r,\"sum\",n);}});void 0===h&&(h=d(0,p.number));\"string\"===typeof h&&(h=d(h,p.number));return h}var t=u.typed,p=u.config,g=u.add,d=u.numeric;return t(\"sum\",{\"Array | Matrix\":k,\"Array | Matrix, number | BigNumber\":function(l,\nh){try{return(0,q.reduce)(l,h,g)}catch(n){throw(0,f.improveErrorMessage)(n,\"sum\");}},\"...\":function(l){if((0,q.containsCollections)(l))throw new TypeError(\"Scalar values expected in function sum\");return k(l)}})});a.createSum=b}","~:source","shadow$provide[530] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSum = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nvar createSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      numeric = _ref.numeric;\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');\n    }\n  }\n});\nexports.createSum = createSum;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage"]],"~:properties",["^5",["__esModule","value","createSum"]],"~:compiled-at",1619135724022,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$sum.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAuBT,CAAA,CAAQ,GAAR,CAIvBM,EAAAA,CAA2B,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,QAAVA,CAAoB,KAApBA,CAA2B,SAA3BA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CAkDvFC,QAASA,EAAI,CAACC,CAAD,CAAQ,CACnB,IAAIC,CACJ,EAAC,CAAA,CAAGT,CAAYU,CAAAA,WAAhB,EAA6BF,CAA7B,CAAoC,QAAS,CAACV,CAAD,CAAQ,CACnD,GAAI,CACFW,CAAA,CAAcE,IAAAA,EAAR,GAAAF,CAAA,CAAoBX,CAApB,CAA4Bc,CAAA,CAAIH,CAAJ,CAASX,CAAT,CADhC,CAEF,MAAOe,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGX,CAAqBY,CAAAA,mBAAzB,EAA8CD,CAA9C,CAAmD,KAAnD,CAA0Df,CAA1D,CAAN,CADY,CAHqC,CAArD,CAQYa,KAAAA,EAAZ,GAAIF,CAAJ,GACEA,CADF,CACQM,CAAA,CAAQ,CAAR,CAAWC,CAAOC,CAAAA,MAAlB,CADR,CAImB,SAAnB,GAAI,MAAOR,EAAX,GACEA,CADF,CACQM,CAAA,CAAQN,CAAR,CAAaO,CAAOC,CAAAA,MAApB,CADR,CAIA,OAAOR,EAlBY,CAlDkE,IACnFS,EAAQZ,CAAKY,CAAAA,KADsE,CAEnFF,EAASV,CAAKU,CAAAA,MAFqE,CAGnFJ,EAAMN,CAAKM,CAAAA,GAHwE,CAInFG,EAAUT,CAAKS,CAAAA,OAyBnB,OAAOG,EAAA,CA/BEd,KA+BF,CAAY,CAEjB,iBAAkBG,CAFD,CAIjB,qCAsCFY,QAAiB,CAACX,CAAD;AAAQY,CAAR,CAAa,CAC5B,GAAI,CAEF,MADUX,CAAC,CAAA,CAAGT,CAAYqB,CAAAA,MAAhBZ,EAAwBD,CAAxBC,CAA+BW,CAA/BX,CAAoCG,CAApCH,CADR,CAGF,MAAOI,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGX,CAAqBY,CAAAA,mBAAzB,EAA8CD,CAA9C,CAAmD,KAAnD,CAAN,CADY,CAJc,CA1CX,CAMjB,MAAOS,QAAU,CAACC,CAAD,CAAO,CACtB,GAAI,CAAC,CAAA,CAAGvB,CAAYwB,CAAAA,mBAAhB,EAAqCD,CAArC,CAAJ,CACE,KAAM,KAAIE,SAAJ,CAAc,wCAAd,CAAN,CAGF,MAAOlB,EAAA,CAAKgB,CAAL,CALe,CANP,CAAZ,CA7BgF,CAA1D,CAgF/B5B,EAAQI,CAAAA,SAAR,CAAoBA,CAhG0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/sum.js\"],\n\"sourcesContent\":[\"shadow$provide[530] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSum = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _improveErrorMessage = require(\\\"./utils/improveErrorMessage.js\\\");\\n\\nvar name = 'sum';\\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\\nvar createSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      add = _ref.add,\\n      numeric = _ref.numeric;\\n\\n  /**\\n   * Compute the sum of a matrix or a list with values.\\n   * In case of a (multi dimensional) array or matrix, the sum of all\\n   * elements will be calculated.\\n   *\\n   * Syntax:\\n   *\\n   *     math.sum(a, b, c, ...)\\n   *     math.sum(A)\\n   *\\n   * Examples:\\n   *\\n   *     math.sum(2, 1, 4, 3)               // returns 10\\n   *     math.sum([2, 1, 4, 3])             // returns 10\\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\\n   *\\n   * See also:\\n   *\\n   *    mean, median, min, max, prod, std, variance\\n   *\\n   * @param {... *} args  A single matrix or or multiple scalar values\\n   * @return {*} The sum of all values\\n   */\\n  return typed(name, {\\n    // sum([a, b, c, d, ...])\\n    'Array | Matrix': _sum,\\n    // sum([a, b, c, d, ...], dim)\\n    'Array | Matrix, number | BigNumber': _nsumDim,\\n    // sum(a, b, c, d, ...)\\n    '...': function _(args) {\\n      if ((0, _collection.containsCollections)(args)) {\\n        throw new TypeError('Scalar values expected in function sum');\\n      }\\n\\n      return _sum(args);\\n    }\\n  });\\n  /**\\n   * Recursively calculate the sum of an n-dimensional array\\n   * @param {Array | Matrix} array\\n   * @return {number} sum\\n   * @private\\n   */\\n\\n  function _sum(array) {\\n    var sum;\\n    (0, _collection.deepForEach)(array, function (value) {\\n      try {\\n        sum = sum === undefined ? value : add(sum, value);\\n      } catch (err) {\\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);\\n      }\\n    }); // make sure returning numeric value: parse a string into a numeric value\\n\\n    if (sum === undefined) {\\n      sum = numeric(0, config.number);\\n    }\\n\\n    if (typeof sum === 'string') {\\n      sum = numeric(sum, config.number);\\n    }\\n\\n    return sum;\\n  }\\n\\n  function _nsumDim(array, dim) {\\n    try {\\n      var sum = (0, _collection.reduce)(array, dim, add);\\n      return sum;\\n    } catch (err) {\\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');\\n    }\\n  }\\n});\\nexports.createSum = createSum;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSum\",\"_collection\",\"_factory\",\"_improveErrorMessage\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_sum\",\"array\",\"sum\",\"deepForEach\",\"undefined\",\"add\",\"err\",\"improveErrorMessage\",\"numeric\",\"config\",\"number\",\"typed\",\"_nsumDim\",\"dim\",\"reduce\",\"_\",\"args\",\"containsCollections\",\"TypeError\"]\n}\n"]