["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setIntersect.js"],"~:js","shadow$provide[235]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetIntersect=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setIntersect\",\"typed size subset compareNatural Index DenseMatrix\".split(\" \"),function(f){var u=f.typed,k=f.size,t=f.subset,p=f.compareNatural,g=f.Index,d=f.DenseMatrix;return u(\"setIntersect\",{\"Array | Matrix, Array | Matrix\":function(l,h){if(0===t(k(l),new g(0))||0===t(k(h),new g(0)))var n=[];else{var r=(0,q.identify)((0,q.flatten)(Array.isArray(l)?\nl:l.toArray()).sort(p)),v=(0,q.identify)((0,q.flatten)(Array.isArray(h)?h:h.toArray()).sort(p));n=[];for(var C=0;C<r.length;C++)for(var z=0;z<v.length;z++)if(0===p(r[C].value,v[z].value)&&r[C].identifier===v[z].identifier){n.push(r[C]);break}}return Array.isArray(l)&&Array.isArray(h)?(0,q.generalize)(n):new d((0,q.generalize)(n))}})});a.createSetIntersect=c}","~:source","shadow$provide[235] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetIntersect = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setIntersect';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetIntersect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\n        // of any of them is empty, return empty\n        result = [];\n      } else {\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              result.push(b1[i]);\n              break;\n            }\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return (0, _array.generalize)(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix((0, _array.generalize)(result));\n    }\n  });\n});\nexports.createSetIntersect = createSetIntersect;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createSetIntersect"]],"~:compiled-at",1619135723949,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setIntersect.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAElC,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAoC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,oDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACqB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC5FC,EAAQD,CAAKC,CAAAA,KAD+E,CAE5FC,EAAOF,CAAKE,CAAAA,IAFgF,CAG5FC,EAASH,CAAKG,CAAAA,MAH8E,CAI5FC,EAAiBJ,CAAKI,CAAAA,cAJsE,CAK5FC,EAAQL,CAAKK,CAAAA,KAL+E,CAM5FC,EAAcN,CAAKM,CAAAA,WAuBvB,OAAOL,EAAA,CA/BEH,cA+BF,CAAY,CACjB,iCAAkCS,QAA+B,CAACC,CAAD,CAAKC,CAAL,CAAS,CAGxE,GAAuC,CAAvC,GAAIN,CAAA,CAAOD,CAAA,CAAKM,CAAL,CAAP,CAAiB,IAAIH,CAAJ,CAAU,CAAV,CAAjB,CAAJ,EAA+E,CAA/E,GAA4CF,CAAA,CAAOD,CAAA,CAAKO,CAAL,CAAP,CAAiB,IAAIJ,CAAJ,CAAU,CAAV,CAAjB,CAA5C,CAEE,IAAAK,EAAS,EAFX,KAGO,CACL,IAAIC,EAAK,CAAC,CAAA,CAAGhB,CAAOiB,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGjB,CAAOkB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcP,CAAd,CAAA;AAAoBA,CAApB,CAAyBA,CAAGQ,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEb,CAAhE,CAArB,CAAT,CACIc,EAAK,CAAC,CAAA,CAAGvB,CAAOiB,CAAAA,QAAX,EAAqB,CAAC,CAAA,CAAGjB,CAAOkB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcN,CAAd,CAAA,CAAoBA,CAApB,CAAyBA,CAAGO,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEb,CAAhE,CAArB,CACTM,EAAA,CAAS,EAET,KAAK,IAAIS,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,CAAGS,CAAAA,MAAvB,CAA+BD,CAAA,EAA/B,CACE,IAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,CAAGE,CAAAA,MAAvB,CAA+BC,CAAA,EAA/B,CACE,GAAiD,CAAjD,GAAIjB,CAAA,CAAeO,CAAA,CAAGQ,CAAH,CAAM1B,CAAAA,KAArB,CAA4ByB,CAAA,CAAGG,CAAH,CAAM5B,CAAAA,KAAlC,CAAJ,EAAsDkB,CAAA,CAAGQ,CAAH,CAAMG,CAAAA,UAA5D,GAA2EJ,CAAA,CAAGG,CAAH,CAAMC,CAAAA,UAAjF,CAA6F,CAE3FZ,CAAOa,CAAAA,IAAP,CAAYZ,CAAA,CAAGQ,CAAH,CAAZ,CACA,MAH2F,CAP5F,CAiBP,MAAIL,MAAMC,CAAAA,OAAN,CAAcP,CAAd,CAAJ,EAAyBM,KAAMC,CAAAA,OAAN,CAAcN,CAAd,CAAzB,CACS,CAAC,CAAA,CAAGd,CAAO6B,CAAAA,UAAX,EAAuBd,CAAvB,CADT,CAKO,IAAIJ,CAAJ,CAAgB,CAAC,CAAA,CAAGX,CAAO6B,CAAAA,UAAX,EAAuBd,CAAvB,CAAhB,CA5BiE,CADzD,CAAZ,CA7ByF,CAA1D,CA8DxCpB,EAAQI,CAAAA,kBAAR,CAA6BA,CA5EiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setIntersect.js\"],\n\"sourcesContent\":[\"shadow$provide[235] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetIntersect = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setIntersect';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\\nvar createSetIntersect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index,\\n      DenseMatrix = _ref.DenseMatrix;\\n\\n  /**\\n   * Create the intersection of two (multi)sets.\\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setIntersect(set1, set2)\\n   *\\n   * Examples:\\n   *\\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]\\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]\\n   *\\n   * See also:\\n   *\\n   *    setUnion, setDifference\\n   *\\n   * @param {Array | Matrix}    a1  A (multi)set\\n   * @param {Array | Matrix}    a2  A (multi)set\\n   * @return {Array | Matrix}    The intersection of two (multi)sets\\n   */\\n  return typed(name, {\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\\n      var result;\\n\\n      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {\\n        // of any of them is empty, return empty\\n        result = [];\\n      } else {\\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\\n        result = [];\\n\\n        for (var i = 0; i < b1.length; i++) {\\n          for (var j = 0; j < b2.length; j++) {\\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\\n              // the identifier is always a decimal int\\n              result.push(b1[i]);\\n              break;\\n            }\\n          }\\n        }\\n      } // return an array, if both inputs were arrays\\n\\n\\n      if (Array.isArray(a1) && Array.isArray(a2)) {\\n        return (0, _array.generalize)(result);\\n      } // return a matrix otherwise\\n\\n\\n      return new DenseMatrix((0, _array.generalize)(result));\\n    }\\n  });\\n});\\nexports.createSetIntersect = createSetIntersect;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetIntersect\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"DenseMatrix\",\"ArrayMatrixArrayMatrix\",\"a1\",\"a2\",\"result\",\"b1\",\"identify\",\"flatten\",\"Array\",\"isArray\",\"toArray\",\"sort\",\"b2\",\"i\",\"length\",\"j\",\"identifier\",\"push\",\"generalize\"]\n}\n"]