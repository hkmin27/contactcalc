["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/range.transform.js"],"~:js","shadow$provide[585]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRangeTransform=void 0;c=b(25);var q=b(138);b=(0,c.factory)(\"range\",\"typed config ?matrix ?bignumber smaller smallerEq larger largerEq\".split(\" \"),function(f){var u=f.typed,k=f.config,t=f.matrix,p=f.bignumber,g=f.smaller,d=f.smallerEq,l=f.larger;f=f.largerEq;var h=(0,q.createRange)({typed:u,config:k,matrix:t,bignumber:p,smaller:g,smallerEq:d,larger:l,largerEq:f});return u(\"range\",{\"...any\":function(n){\"boolean\"!==\ntypeof n[n.length-1]&&n.push(!0);return h.apply(null,n)}})},{isTransformFunction:!0});a.createRangeTransform=b}","~:source","shadow$provide[585] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRangeTransform = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _range = require(\"../../function/matrix/range.js\");\n\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nvar createRangeTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n  var range = (0, _range.createRange)({\n    typed: typed,\n    config: config,\n    matrix: matrix,\n    bignumber: bignumber,\n    smaller: smaller,\n    smallerEq: smallerEq,\n    larger: larger,\n    largerEq: largerEq\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});\nexports.createRangeTransform = createRangeTransform;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$function$matrix$range","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["typed","config","smaller","larger","matrix","__esModule","largerEq","isTransformFunction","value","bignumber","createRangeTransform","smallerEq"]],"~:compiled-at",1619135724043,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$range_transform.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEhCC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,GAAR,CAITM,EAAAA,CAAsC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF/BC,OAE+B,CADvBC,mEAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACuB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC9FC,EAAQD,CAAKC,CAAAA,KADiF,CAE9FC,EAASF,CAAKE,CAAAA,MAFgF,CAG9FC,EAASH,CAAKG,CAAAA,MAHgF,CAI9FC,EAAYJ,CAAKI,CAAAA,SAJ6E,CAK9FC,EAAUL,CAAKK,CAAAA,OAL+E,CAM9FC,EAAYN,CAAKM,CAAAA,SAN6E,CAO9FC,EAASP,CAAKO,CAAAA,MACdC,EAAAA,CAAWR,CAAKQ,CAAAA,QACpB,KAAIC,EAAQ,CAAC,CAAA,CAAGb,CAAOc,CAAAA,WAAX,EAAwB,CAClCT,MAAOA,CAD2B,CAElCC,OAAQA,CAF0B,CAGlCC,OAAQA,CAH0B,CAIlCC,UAAWA,CAJuB,CAKlCC,QAASA,CALyB,CAMlCC,UAAWA,CANuB,CAOlCC,OAAQA,CAP0B,CAQlCC,SAAUA,CARwB,CAAxB,CAiBZ,OAAOP,EAAA,CAAM,OAAN,CAAe,CACpB,SAAUU,QAAY,CAACC,CAAD,CAAO,CAIP,SAApB;AAAI,MAFOA,EAAAC,CADKD,CAAKE,CAAAA,MACVD,CADmB,CACnBA,CAEX,EAEED,CAAKG,CAAAA,IAAL,CAAU,CAAA,CAAV,CAGF,OAAON,EAAMO,CAAAA,KAAN,CAAY,IAAZ,CAAkBJ,CAAlB,CAToB,CADT,CAAf,CA1B2F,CAA1D,CAuCvC,CACDK,oBAAqB,CAAA,CADpB,CAvCuC,CA0C1C3B,EAAQI,CAAAA,oBAAR,CAA+BA,CAxD+B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/range.transform.js\"],\n\"sourcesContent\":[\"shadow$provide[585] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRangeTransform = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _range = require(\\\"../../function/matrix/range.js\\\");\\n\\nvar name = 'range';\\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\\nvar createRangeTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      matrix = _ref.matrix,\\n      bignumber = _ref.bignumber,\\n      smaller = _ref.smaller,\\n      smallerEq = _ref.smallerEq,\\n      larger = _ref.larger,\\n      largerEq = _ref.largerEq;\\n  var range = (0, _range.createRange)({\\n    typed: typed,\\n    config: config,\\n    matrix: matrix,\\n    bignumber: bignumber,\\n    smaller: smaller,\\n    smallerEq: smallerEq,\\n    larger: larger,\\n    largerEq: largerEq\\n  });\\n  /**\\n   * Attach a transform function to math.range\\n   * Adds a property transform containing the transform function.\\n   *\\n   * This transform creates a range which includes the end value\\n   */\\n\\n  return typed('range', {\\n    '...any': function any(args) {\\n      var lastIndex = args.length - 1;\\n      var last = args[lastIndex];\\n\\n      if (typeof last !== 'boolean') {\\n        // append a parameter includeEnd=true\\n        args.push(true);\\n      }\\n\\n      return range.apply(null, args);\\n    }\\n  });\\n}, {\\n  isTransformFunction: true\\n});\\nexports.createRangeTransform = createRangeTransform;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRangeTransform\",\"_factory\",\"_range\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"matrix\",\"bignumber\",\"smaller\",\"smallerEq\",\"larger\",\"largerEq\",\"range\",\"createRange\",\"any\",\"args\",\"last\",\"length\",\"push\",\"apply\",\"isTransformFunction\"]\n}\n"]