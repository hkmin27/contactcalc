["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/exp.js"],"~:js","shadow$provide[80]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createExp=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"exp\",[\"typed\"],function(u){u=u.typed;return u(\"exp\",{number:f.expNumber,Complex:function(k){return k.exp()},BigNumber:function(k){return k.exp()},\"Array | Matrix\":function(k){return(0,q.deepMap)(k,this)}})});a.createExp=b}","~:source","shadow$provide[80] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createExp = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'exp';\nvar dependencies = ['typed'];\nvar createExp = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.exp([1, 2, 3])\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  return typed(name, {\n    number: _index.expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createExp = createExp;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createExp"]],"~:compiled-at",1619135723770,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$exp.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CACnFC,CAAAA,CAAQD,CAAKC,CAAAA,KA8BjB,OAAOA,EAAA,CAjCEH,KAiCF,CAAY,CACjBI,OAAQN,CAAOO,CAAAA,SADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,EADoB,CAFZ,CAKjBC,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,GAAF,EADwB,CALhB,CAQjB,iBAAkBE,QAAoB,CAACH,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,CAAYc,CAAAA,OAAhB,EAAyBJ,CAAzB,CAA4B,IAA5B,CAFiC,CARzB,CAAZ,CA/BgF,CAA1D,CA6C/BhB,EAAQI,CAAAA,SAAR,CAAoBA,CA7DyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/exp.js\"],\n\"sourcesContent\":[\"shadow$provide[80] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createExp = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'exp';\\nvar dependencies = ['typed'];\\nvar createExp = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Calculate the exponent of a value.\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.exp(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.exp(2)                  // returns number 7.3890560989306495\\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\\n   *    math.log(math.exp(2))        // returns number 2\\n   *\\n   *    math.exp([1, 2, 3])\\n   *    // returns Array [\\n   *    //   2.718281828459045,\\n   *    //   7.3890560989306495,\\n   *    //   20.085536923187668\\n   *    // ]\\n   *\\n   * See also:\\n   *\\n   *    expm1, log, pow\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\\n   */\\n  return typed(name, {\\n    number: _index.expNumber,\\n    Complex: function Complex(x) {\\n      return x.exp();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.exp();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createExp = createExp;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createExp\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"expNumber\",\"Complex\",\"x\",\"exp\",\"BigNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]