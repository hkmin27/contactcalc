["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/core/function/config.js"],"~:js","shadow$provide[16]=function(c,b,y,a){function q(p,g,d){void 0!==p[g]&&-1===d.indexOf(p[g])&&console.warn('Warning: Unknown value \"'+p[g]+'\" for configuration option \"'+g+'\". Available options: '+d.map(function(l){return JSON.stringify(l)}).join(\", \")+\".\")}Object.defineProperty(a,\"__esModule\",{value:!0});a.configFactory=function(p,g){function d(l){if(l){var h=(0,f.mapObject)(p,f.clone);q(l,\"matrix\",k);q(l,\"number\",t);(0,f.deepExtend)(p,l);var n=(0,f.mapObject)(p,f.clone);l=(0,f.mapObject)(l,f.clone);\ng(\"config\",n,h,l);return n}return(0,f.mapObject)(p,f.clone)}d.MATRIX_OPTIONS=k;d.NUMBER_OPTIONS=t;Object.keys(u.DEFAULT_CONFIG).forEach(function(l){Object.defineProperty(d,l,{get:function(){return p[l]},enumerable:!0,configurable:!0})});return d};a.NUMBER_OPTIONS=a.MATRIX_OPTIONS=void 0;var f=b(15),u=b(13),k=[\"Matrix\",\"Array\"];a.MATRIX_OPTIONS=k;var t=[\"number\",\"BigNumber\",\"Fraction\"];a.NUMBER_OPTIONS=t}","~:source","shadow$provide[16] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFactory = configFactory;\nexports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _config2 = require(\"../config.js\");\n\nvar MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexports.MATRIX_OPTIONS = MATRIX_OPTIONS;\nvar NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexports.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\nfunction configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      (0, _object.deepExtend)(config, options);\n      var curr = (0, _object.mapObject)(config, _object.clone);\n      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return (0, _object.mapObject)(config, _object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {\n    Object.defineProperty(_config, key, {\n      get: function get() {\n        return config[key];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(function (value) {\n      return JSON.stringify(value);\n    }).join(', ') + '.');\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$core$config","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$object"]],"~:properties",["^5",["__esModule","configurable","value","enumerable","MATRIX_OPTIONS","configFactory","get","NUMBER_OPTIONS"]],"~:compiled-at",1619135723706,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$core$function$config.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAmH7DC,QAASA,EAAc,CAACC,CAAD,CAAUC,CAAV,CAAgBC,CAAhB,CAAwB,CACvBC,IAAAA,EAAtB,GAAIH,CAAA,CAAQC,CAAR,CAAJ,EAX+B,EAW/B,GAA6CC,CAXhCE,CAAAA,OAAN,CAW8CJ,CAAAK,CAAQJ,CAARI,CAX9C,CAWP,EAEEC,OAAQC,CAAAA,IAAR,CAAa,0BAAb,CAA0CP,CAAA,CAAQC,CAAR,CAA1C,CAA0D,8BAA1D,CAA2FA,CAA3F,CAAkG,wBAAlG,CAAkIC,CAAOM,CAAAA,GAAP,CAAW,QAAS,CAACC,CAAD,CAAQ,CAC5J,MAAOC,KAAKC,CAAAA,SAAL,CAAeF,CAAf,CADqJ,CAA5B,CAE/HG,CAAAA,IAF+H,CAE1H,IAF0H,CAAlI,CAEgB,GAFhB,CAH2C,CAhH/CC,MAAOC,CAAAA,cAAP,CAAsBhB,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CW,MAAO,CAAA,CADoC,CAA7C,CAGAX,EAAQiB,CAAAA,aAAR,CAcAA,QAAsB,CAACC,CAAD,CAASC,CAAT,CAAe,CA2CnCC,QAASA,EAAO,CAAClB,CAAD,CAAU,CACxB,GAAIA,CAAJ,CAAa,CACX,IAAImB,EAAO,CAAC,CAAA,CAAGC,CAAQC,CAAAA,SAAZ,EAAuBL,CAAvB,CAA+BI,CAAQE,CAAAA,KAAvC,CAEXvB,EAAA,CAAeC,CAAf,CAAwB,QAAxB,CAAkCuB,CAAlC,CACAxB,EAAA,CAAeC,CAAf,CAAwB,QAAxB,CAAkCwB,CAAlC,CAEA,EAAC,CAAA,CAAGJ,CAAQK,CAAAA,UAAZ,EAAwBT,CAAxB,CAAgChB,CAAhC,CACA,KAAI0B,EAAO,CAAC,CAAA,CAAGN,CAAQC,CAAAA,SAAZ,EAAuBL,CAAvB,CAA+BI,CAAQE,CAAAA,KAAvC,CACPK,EAAAA,CAAU,CAAC,CAAA,CAAGP,CAAQC,CAAAA,SAAZ,EAAuBrB,CAAvB,CAAgCoB,CAAQE,CAAAA,KAAxC,CAEdL;CAAA,CAAK,QAAL,CAAeS,CAAf,CAAqBP,CAArB,CAA2BQ,CAA3B,CACA,OAAOD,EAXI,CAaX,MAAO,CAAC,CAAA,CAAGN,CAAQC,CAAAA,SAAZ,EAAuBL,CAAvB,CAA+BI,CAAQE,CAAAA,KAAvC,CAde,CAmB1BJ,CAAQK,CAAAA,cAAR,CAAyBA,CACzBL,EAAQM,CAAAA,cAAR,CAAyBA,CAEzBX,OAAOe,CAAAA,IAAP,CAAYC,CAASC,CAAAA,cAArB,CAAqCC,CAAAA,OAArC,CAA6C,QAAS,CAACC,CAAD,CAAM,CAC1DnB,MAAOC,CAAAA,cAAP,CAAsBI,CAAtB,CAA+Bc,CAA/B,CAAoC,CAClCC,IAAKA,QAAY,EAAG,CAClB,MAAOjB,EAAA,CAAOgB,CAAP,CADW,CADc,CAIlCE,WAAY,CAAA,CAJsB,CAKlCC,aAAc,CAAA,CALoB,CAApC,CAD0D,CAA5D,CASA,OAAOjB,EA1E4B,CAbrCpB,EAAQ0B,CAAAA,cAAR,CAAyB1B,CAAQyB,CAAAA,cAAjC,CAAkD,IAAK,EAEvD,KAAIH,EAAUxB,CAAA,CAAQ,EAAR,CAAd,CAEIiC,EAAWjC,CAAA,CAAQ,EAAR,CAFf,CAII2B,EAAiB,CAAC,QAAD,CAAW,OAAX,CAErBzB,EAAQyB,CAAAA,cAAR,CAAyBA,CACzB,KAAIC,EAAiB,CAAC,QAAD,CAAW,WAAX,CAAwB,UAAxB,CAErB1B,EAAQ0B,CAAAA,cAAR,CAAyBA,CAlBoC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/core/function/config.js\"],\n\"sourcesContent\":[\"shadow$provide[16] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.configFactory = configFactory;\\nexports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _config2 = require(\\\"../config.js\\\");\\n\\nvar MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\\n\\nexports.MATRIX_OPTIONS = MATRIX_OPTIONS;\\nvar NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\\n\\nexports.NUMBER_OPTIONS = NUMBER_OPTIONS;\\n\\nfunction configFactory(config, emit) {\\n  /**\\n   * Set configuration options for math.js, and get current options.\\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\\n   *\\n   * This function is only available on a mathjs instance created using `create`.\\n   *\\n   * Syntax:\\n   *\\n   *     math.config(config: Object): Object\\n   *\\n   * Examples:\\n   *\\n   *\\n   *     import { create, all } from 'mathjs'\\n   *\\n   *     // create a mathjs instance\\n   *     const math = create(all)\\n   *\\n   *     math.config().number                // outputs 'number'\\n   *     math.evaluate('0.4')                // outputs number 0.4\\n   *     math.config({number: 'Fraction'})\\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\\n   *\\n   * @param {Object} [options] Available options:\\n   *                            {number} epsilon\\n   *                              Minimum relative difference between two\\n   *                              compared values, used by all comparison functions.\\n   *                            {string} matrix\\n   *                              A string 'Matrix' (default) or 'Array'.\\n   *                            {string} number\\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\\n   *                            {number} precision\\n   *                              The number of significant digits for BigNumbers.\\n   *                              Not applicable for Numbers.\\n   *                            {string} parenthesis\\n   *                              How to display parentheses in LaTeX and string\\n   *                              output.\\n   *                            {string} randomSeed\\n   *                              Random seed for seeded pseudo random number generator.\\n   *                              Set to null to randomly seed.\\n   * @return {Object} Returns the current configuration\\n   */\\n  function _config(options) {\\n    if (options) {\\n      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options\\n\\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\\n\\n      (0, _object.deepExtend)(config, options);\\n      var curr = (0, _object.mapObject)(config, _object.clone);\\n      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event\\n\\n      emit('config', curr, prev, changes);\\n      return curr;\\n    } else {\\n      return (0, _object.mapObject)(config, _object.clone);\\n    }\\n  } // attach the valid options to the function so they can be extended\\n\\n\\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\\n\\n  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {\\n    Object.defineProperty(_config, key, {\\n      get: function get() {\\n        return config[key];\\n      },\\n      enumerable: true,\\n      configurable: true\\n    });\\n  });\\n  return _config;\\n}\\n/**\\n * Test whether an Array contains a specific item.\\n * @param {Array.<string>} array\\n * @param {string} item\\n * @return {boolean}\\n */\\n\\n\\nfunction contains(array, item) {\\n  return array.indexOf(item) !== -1;\\n}\\n/**\\n * Validate an option\\n * @param {Object} options         Object with options\\n * @param {string} name            Name of the option to validate\\n * @param {Array.<string>} values  Array with valid values for this option\\n */\\n\\n\\nfunction validateOption(options, name, values) {\\n  if (options[name] !== undefined && !contains(values, options[name])) {\\n    // unknown value\\n    console.warn('Warning: Unknown value \\\"' + options[name] + '\\\" for configuration option \\\"' + name + '\\\". ' + 'Available options: ' + values.map(function (value) {\\n      return JSON.stringify(value);\\n    }).join(', ') + '.');\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"validateOption\",\"options\",\"name\",\"values\",\"undefined\",\"indexOf\",\"item\",\"console\",\"warn\",\"map\",\"value\",\"JSON\",\"stringify\",\"join\",\"Object\",\"defineProperty\",\"configFactory\",\"config\",\"emit\",\"_config\",\"prev\",\"_object\",\"mapObject\",\"clone\",\"MATRIX_OPTIONS\",\"NUMBER_OPTIONS\",\"deepExtend\",\"curr\",\"changes\",\"keys\",\"_config2\",\"DEFAULT_CONFIG\",\"forEach\",\"key\",\"get\",\"enumerable\",\"configurable\"]\n}\n"]