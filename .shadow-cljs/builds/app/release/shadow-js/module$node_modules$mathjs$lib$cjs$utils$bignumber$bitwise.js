["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js"],"~:js","shadow$provide[108]=function(c,b,y,a){function q(k){if(k.isFinite()&&!k.isInteger())throw Error(\"Integer expected in function bitNot\");var t=k.constructor,p=t.precision;t.config({precision:1E9});k=k.plus(new t(1));k.s=-k.s||null;t.config({precision:p});return k}function f(k,t,p){var g=k.constructor,d,l=+(0>k.s),h=+(0>t.s);if(l)for(k=u(q(k)),d=0;d<k.length;++d)k[d]^=1;else k=u(k);if(h)for(d=u(q(t)),t=0;t<d.length;++t)d[t]^=1;else d=u(t);k.length<=d.length?(t=k,k=d,d=l):(t=d,d=h);var n=t.length,r=k.length;\nl=p(l,h)^1;h=new g(l^1);var v=new g(1),C=new g(2),z=g.precision;for(g.config({precision:1E9});0<n;)p(t[--n],k[--r])===l&&(h=h.plus(v)),v=v.times(C);for(;0<r;)p(d,k[--r])===l&&(h=h.plus(v)),v=v.times(C);g.config({precision:z});0===l&&(h.s=-h.s);return h}function u(k){for(var t=k.d,p=t[0]+\"\",g=1;g<t.length;++g){for(var d=t[g]+\"\",l=7-d.length;l--;)d=\"0\"+d;p+=d}for(t=p.length;\"0\"===p.charAt(t);)t--;k=k.e;p=p.slice(0,t+1||1);t=p.length;if(0<k)if(++k>t)for(k-=t;k--;)p+=\"0\";else k<t&&(p=p.slice(0,k)+\".\"+\np.slice(k));k=[0];for(t=0;t<p.length;){for(g=k.length;g--;)k[g]*=10;k[0]+=parseInt(p.charAt(t++));for(g=0;g<k.length;++g)if(1<k[g]){if(null===k[g+1]||void 0===k[g+1])k[g+1]=0;k[g+1]+=k[g]>>1;k[g]&=1}}return k.reverse()}Object.defineProperty(a,\"__esModule\",{value:!0});a.bitAndBigNumber=function(k,t){if(k.isFinite()&&!k.isInteger()||t.isFinite()&&!t.isInteger())throw Error(\"Integers expected in function bitAnd\");var p=k.constructor;if(k.isNaN()||t.isNaN())return new p(NaN);if(k.isZero()||t.eq(-1)||\nk.eq(t))return k;if(t.isZero()||k.eq(-1))return t;if(!k.isFinite()||!t.isFinite()){if(!k.isFinite()&&!t.isFinite())return k.isNegative()===t.isNegative()?k:new p(0);if(!k.isFinite())return t.isNegative()?k:k.isNegative()?new p(0):t;if(!t.isFinite())return k.isNegative()?t:t.isNegative()?new p(0):k}return f(k,t,function(g,d){return g&d})};a.bitNotBigNumber=q;a.bitOrBigNumber=function(k,t){if(k.isFinite()&&!k.isInteger()||t.isFinite()&&!t.isInteger())throw Error(\"Integers expected in function bitOr\");\nvar p=k.constructor;if(k.isNaN()||t.isNaN())return new p(NaN);p=new p(-1);return k.isZero()||t.eq(p)||k.eq(t)?t:t.isZero()||k.eq(p)?k:k.isFinite()&&t.isFinite()?f(k,t,function(g,d){return g|d}):!k.isFinite()&&!k.isNegative()&&t.isNegative()||k.isNegative()&&!t.isNegative()&&!t.isFinite()?p:k.isNegative()&&t.isNegative()?k.isFinite()?k:t:k.isFinite()?t:k};a.bitwise=f;a.bitXor=function(k,t){if(k.isFinite()&&!k.isInteger()||t.isFinite()&&!t.isInteger())throw Error(\"Integers expected in function bitXor\");\nvar p=k.constructor;if(k.isNaN()||t.isNaN())return new p(NaN);if(k.isZero())return t;if(t.isZero())return k;if(k.eq(t))return new p(0);var g=new p(-1);return k.eq(g)?q(t):t.eq(g)?q(k):k.isFinite()&&t.isFinite()?f(k,t,function(d,l){return d^l}):k.isFinite()||t.isFinite()?new p(k.isNegative()===t.isNegative()?Infinity:-Infinity):g};a.leftShiftBigNumber=function(k,t){if(k.isFinite()&&!k.isInteger()||t.isFinite()&&!t.isInteger())throw Error(\"Integers expected in function leftShift\");var p=k.constructor;\nreturn k.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new p(NaN):k.isZero()||t.isZero()?k:k.isFinite()||t.isFinite()?t.lt(55)?k.times(Math.pow(2,t.toNumber())+\"\"):k.times((new p(2)).pow(t)):new p(NaN)};a.rightArithShiftBigNumber=function(k,t){if(k.isFinite()&&!k.isInteger()||t.isFinite()&&!t.isInteger())throw Error(\"Integers expected in function rightArithShift\");var p=k.constructor;return k.isNaN()||t.isNaN()||t.isNegative()&&!t.isZero()?new p(NaN):k.isZero()||t.isZero()?k:t.isFinite()?t.lt(55)?\nk.div(Math.pow(2,t.toNumber())+\"\").floor():k.div((new p(2)).pow(t)).floor():k.isNegative()?new p(-1):k.isFinite()?new p(0):new p(NaN)}}","~:source","shadow$provide[108] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitAndBigNumber = bitAndBigNumber;\nexports.bitNotBigNumber = bitNotBigNumber;\nexports.bitOrBigNumber = bitOrBigNumber;\nexports.bitwise = bitwise;\nexports.bitXor = bitXor;\nexports.leftShiftBigNumber = leftShiftBigNumber;\nexports.rightArithShiftBigNumber = rightArithShiftBigNumber;\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nfunction bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\n\nfunction bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\n\nfunction bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\n\nfunction bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nfunction bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\n\nfunction leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\n\nfunction rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["bitwise","s","bitOrBigNumber","precision","bitNotBigNumber","leftShiftBigNumber","__esModule","value","bitXor","rightArithShiftBigNumber","bitAndBigNumber"]],"~:compiled-at",1619135723788,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js\"],\n\"sourcesContent\":[\"shadow$provide[108] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.bitAndBigNumber = bitAndBigNumber;\\nexports.bitNotBigNumber = bitNotBigNumber;\\nexports.bitOrBigNumber = bitOrBigNumber;\\nexports.bitwise = bitwise;\\nexports.bitXor = bitXor;\\nexports.leftShiftBigNumber = leftShiftBigNumber;\\nexports.rightArithShiftBigNumber = rightArithShiftBigNumber;\\n\\n/**\\n * Bitwise and for Bignumbers\\n *\\n * Special Cases:\\n *   N &  n =  N\\n *   n &  0 =  0\\n *   n & -1 =  n\\n *   n &  n =  n\\n *   I &  I =  I\\n *  -I & -I = -I\\n *   I & -I =  0\\n *   I &  n =  n\\n *   I & -n =  I\\n *  -I &  n =  0\\n *  -I & -n = -I\\n *\\n * @param {BigNumber} x\\n * @param {BigNumber} y\\n * @return {BigNumber} Result of `x` & `y`, is fully precise\\n * @private\\n */\\nfunction bitAndBigNumber(x, y) {\\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\\n    throw new Error('Integers expected in function bitAnd');\\n  }\\n\\n  var BigNumber = x.constructor;\\n\\n  if (x.isNaN() || y.isNaN()) {\\n    return new BigNumber(NaN);\\n  }\\n\\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\\n    return x;\\n  }\\n\\n  if (y.isZero() || x.eq(-1)) {\\n    return y;\\n  }\\n\\n  if (!x.isFinite() || !y.isFinite()) {\\n    if (!x.isFinite() && !y.isFinite()) {\\n      if (x.isNegative() === y.isNegative()) {\\n        return x;\\n      }\\n\\n      return new BigNumber(0);\\n    }\\n\\n    if (!x.isFinite()) {\\n      if (y.isNegative()) {\\n        return x;\\n      }\\n\\n      if (x.isNegative()) {\\n        return new BigNumber(0);\\n      }\\n\\n      return y;\\n    }\\n\\n    if (!y.isFinite()) {\\n      if (x.isNegative()) {\\n        return y;\\n      }\\n\\n      if (y.isNegative()) {\\n        return new BigNumber(0);\\n      }\\n\\n      return x;\\n    }\\n  }\\n\\n  return bitwise(x, y, function (a, b) {\\n    return a & b;\\n  });\\n}\\n/**\\n * Bitwise not\\n * @param {BigNumber} x\\n * @return {BigNumber} Result of ~`x`, fully precise\\n *\\n */\\n\\n\\nfunction bitNotBigNumber(x) {\\n  if (x.isFinite() && !x.isInteger()) {\\n    throw new Error('Integer expected in function bitNot');\\n  }\\n\\n  var BigNumber = x.constructor;\\n  var prevPrec = BigNumber.precision;\\n  BigNumber.config({\\n    precision: 1E9\\n  });\\n  var result = x.plus(new BigNumber(1));\\n  result.s = -result.s || null;\\n  BigNumber.config({\\n    precision: prevPrec\\n  });\\n  return result;\\n}\\n/**\\n * Bitwise OR for BigNumbers\\n *\\n * Special Cases:\\n *   N |  n =  N\\n *   n |  0 =  n\\n *   n | -1 = -1\\n *   n |  n =  n\\n *   I |  I =  I\\n *  -I | -I = -I\\n *   I | -n = -1\\n *   I | -I = -1\\n *   I |  n =  I\\n *  -I |  n = -I\\n *  -I | -n = -n\\n *\\n * @param {BigNumber} x\\n * @param {BigNumber} y\\n * @return {BigNumber} Result of `x` | `y`, fully precise\\n */\\n\\n\\nfunction bitOrBigNumber(x, y) {\\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\\n    throw new Error('Integers expected in function bitOr');\\n  }\\n\\n  var BigNumber = x.constructor;\\n\\n  if (x.isNaN() || y.isNaN()) {\\n    return new BigNumber(NaN);\\n  }\\n\\n  var negOne = new BigNumber(-1);\\n\\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\\n    return y;\\n  }\\n\\n  if (y.isZero() || x.eq(negOne)) {\\n    return x;\\n  }\\n\\n  if (!x.isFinite() || !y.isFinite()) {\\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\\n      return negOne;\\n    }\\n\\n    if (x.isNegative() && y.isNegative()) {\\n      return x.isFinite() ? x : y;\\n    }\\n\\n    return x.isFinite() ? y : x;\\n  }\\n\\n  return bitwise(x, y, function (a, b) {\\n    return a | b;\\n  });\\n}\\n/**\\n * Applies bitwise function to numbers\\n * @param {BigNumber} x\\n * @param {BigNumber} y\\n * @param {function (a, b)} func\\n * @return {BigNumber}\\n */\\n\\n\\nfunction bitwise(x, y, func) {\\n  var BigNumber = x.constructor;\\n  var xBits, yBits;\\n  var xSign = +(x.s < 0);\\n  var ySign = +(y.s < 0);\\n\\n  if (xSign) {\\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\\n\\n    for (var i = 0; i < xBits.length; ++i) {\\n      xBits[i] ^= 1;\\n    }\\n  } else {\\n    xBits = decCoefficientToBinaryString(x);\\n  }\\n\\n  if (ySign) {\\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\\n\\n    for (var _i = 0; _i < yBits.length; ++_i) {\\n      yBits[_i] ^= 1;\\n    }\\n  } else {\\n    yBits = decCoefficientToBinaryString(y);\\n  }\\n\\n  var minBits, maxBits, minSign;\\n\\n  if (xBits.length <= yBits.length) {\\n    minBits = xBits;\\n    maxBits = yBits;\\n    minSign = xSign;\\n  } else {\\n    minBits = yBits;\\n    maxBits = xBits;\\n    minSign = ySign;\\n  }\\n\\n  var shortLen = minBits.length;\\n  var longLen = maxBits.length;\\n  var expFuncVal = func(xSign, ySign) ^ 1;\\n  var outVal = new BigNumber(expFuncVal ^ 1);\\n  var twoPower = new BigNumber(1);\\n  var two = new BigNumber(2);\\n  var prevPrec = BigNumber.precision;\\n  BigNumber.config({\\n    precision: 1E9\\n  });\\n\\n  while (shortLen > 0) {\\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\\n      outVal = outVal.plus(twoPower);\\n    }\\n\\n    twoPower = twoPower.times(two);\\n  }\\n\\n  while (longLen > 0) {\\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\\n      outVal = outVal.plus(twoPower);\\n    }\\n\\n    twoPower = twoPower.times(two);\\n  }\\n\\n  BigNumber.config({\\n    precision: prevPrec\\n  });\\n\\n  if (expFuncVal === 0) {\\n    outVal.s = -outVal.s;\\n  }\\n\\n  return outVal;\\n}\\n/* Extracted from decimal.js, and edited to specialize. */\\n\\n\\nfunction decCoefficientToBinaryString(x) {\\n  // Convert to string\\n  var a = x.d; // array with digits\\n\\n  var r = a[0] + '';\\n\\n  for (var i = 1; i < a.length; ++i) {\\n    var s = a[i] + '';\\n\\n    for (var z = 7 - s.length; z--;) {\\n      s = '0' + s;\\n    }\\n\\n    r += s;\\n  }\\n\\n  var j = r.length;\\n\\n  while (r.charAt(j) === '0') {\\n    j--;\\n  }\\n\\n  var xe = x.e;\\n  var str = r.slice(0, j + 1 || 1);\\n  var strL = str.length;\\n\\n  if (xe > 0) {\\n    if (++xe > strL) {\\n      // Append zeros.\\n      xe -= strL;\\n\\n      while (xe--) {\\n        str += '0';\\n      }\\n    } else if (xe < strL) {\\n      str = str.slice(0, xe) + '.' + str.slice(xe);\\n    }\\n  } // Convert from base 10 (decimal) to base 2\\n\\n\\n  var arr = [0];\\n\\n  for (var _i2 = 0; _i2 < str.length;) {\\n    var arrL = arr.length;\\n\\n    while (arrL--) {\\n      arr[arrL] *= 10;\\n    }\\n\\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\\n\\n    for (var _j = 0; _j < arr.length; ++_j) {\\n      if (arr[_j] > 1) {\\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\\n          arr[_j + 1] = 0;\\n        }\\n\\n        arr[_j + 1] += arr[_j] >> 1;\\n        arr[_j] &= 1;\\n      }\\n    }\\n  }\\n\\n  return arr.reverse();\\n}\\n/**\\n * Bitwise XOR for BigNumbers\\n *\\n * Special Cases:\\n *   N ^  n =  N\\n *   n ^  0 =  n\\n *   n ^  n =  0\\n *   n ^ -1 = ~n\\n *   I ^  n =  I\\n *   I ^ -n = -I\\n *   I ^ -I = -1\\n *  -I ^  n = -I\\n *  -I ^ -n =  I\\n *\\n * @param {BigNumber} x\\n * @param {BigNumber} y\\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\\n *\\n */\\n\\n\\nfunction bitXor(x, y) {\\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\\n    throw new Error('Integers expected in function bitXor');\\n  }\\n\\n  var BigNumber = x.constructor;\\n\\n  if (x.isNaN() || y.isNaN()) {\\n    return new BigNumber(NaN);\\n  }\\n\\n  if (x.isZero()) {\\n    return y;\\n  }\\n\\n  if (y.isZero()) {\\n    return x;\\n  }\\n\\n  if (x.eq(y)) {\\n    return new BigNumber(0);\\n  }\\n\\n  var negOne = new BigNumber(-1);\\n\\n  if (x.eq(negOne)) {\\n    return bitNotBigNumber(y);\\n  }\\n\\n  if (y.eq(negOne)) {\\n    return bitNotBigNumber(x);\\n  }\\n\\n  if (!x.isFinite() || !y.isFinite()) {\\n    if (!x.isFinite() && !y.isFinite()) {\\n      return negOne;\\n    }\\n\\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\\n  }\\n\\n  return bitwise(x, y, function (a, b) {\\n    return a ^ b;\\n  });\\n}\\n/**\\n * Bitwise left shift\\n *\\n * Special Cases:\\n *  n << -n = N\\n *  n <<  N = N\\n *  N <<  n = N\\n *  n <<  0 = n\\n *  0 <<  n = 0\\n *  I <<  I = N\\n *  I <<  n = I\\n *  n <<  I = I\\n *\\n * @param {BigNumber} x\\n * @param {BigNumber} y\\n * @return {BigNumber} Result of `x` << `y`\\n *\\n */\\n\\n\\nfunction leftShiftBigNumber(x, y) {\\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\\n    throw new Error('Integers expected in function leftShift');\\n  }\\n\\n  var BigNumber = x.constructor;\\n\\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\\n    return new BigNumber(NaN);\\n  }\\n\\n  if (x.isZero() || y.isZero()) {\\n    return x;\\n  }\\n\\n  if (!x.isFinite() && !y.isFinite()) {\\n    return new BigNumber(NaN);\\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\\n\\n\\n  if (y.lt(55)) {\\n    return x.times(Math.pow(2, y.toNumber()) + '');\\n  }\\n\\n  return x.times(new BigNumber(2).pow(y));\\n}\\n/*\\n * Special Cases:\\n *   n >> -n =  N\\n *   n >>  N =  N\\n *   N >>  n =  N\\n *   I >>  I =  N\\n *   n >>  0 =  n\\n *   I >>  n =  I\\n *  -I >>  n = -I\\n *  -I >>  I = -I\\n *   n >>  I =  I\\n *  -n >>  I = -1\\n *   0 >>  n =  0\\n *\\n * @param {BigNumber} value\\n * @param {BigNumber} value\\n * @return {BigNumber} Result of `x` >> `y`\\n *\\n */\\n\\n\\nfunction rightArithShiftBigNumber(x, y) {\\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\\n    throw new Error('Integers expected in function rightArithShift');\\n  }\\n\\n  var BigNumber = x.constructor;\\n\\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\\n    return new BigNumber(NaN);\\n  }\\n\\n  if (x.isZero() || y.isZero()) {\\n    return x;\\n  }\\n\\n  if (!y.isFinite()) {\\n    if (x.isNegative()) {\\n      return new BigNumber(-1);\\n    }\\n\\n    if (!x.isFinite()) {\\n      return new BigNumber(NaN);\\n    }\\n\\n    return new BigNumber(0);\\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\\n\\n\\n  if (y.lt(55)) {\\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\\n  }\\n\\n  return x.div(new BigNumber(2).pow(y)).floor();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"bitNotBigNumber\",\"x\",\"isFinite\",\"isInteger\",\"Error\",\"BigNumber\",\"constructor\",\"prevPrec\",\"precision\",\"config\",\"result\",\"plus\",\"s\",\"bitwise\",\"y\",\"func\",\"yBits\",\"xSign\",\"ySign\",\"xBits\",\"i\",\"decCoefficientToBinaryString\",\"length\",\"_i\",\"minBits\",\"maxBits\",\"minSign\",\"shortLen\",\"longLen\",\"expFuncVal\",\"outVal\",\"twoPower\",\"two\",\"times\",\"a\",\"d\",\"r\",\"z\",\"j\",\"charAt\",\"xe\",\"e\",\"str\",\"slice\",\"strL\",\"arr\",\"_i2\",\"arrL\",\"parseInt\",\"_j\",\"undefined\",\"reverse\",\"Object\",\"defineProperty\",\"value\",\"bitAndBigNumber\",\"isNaN\",\"NaN\",\"isZero\",\"eq\",\"isNegative\",\"b\",\"bitOrBigNumber\",\"negOne\",\"bitXor\",\"Infinity\",\"leftShiftBigNumber\",\"lt\",\"Math\",\"pow\",\"toNumber\",\"rightArithShiftBigNumber\",\"div\",\"floor\"]\n}\n"]