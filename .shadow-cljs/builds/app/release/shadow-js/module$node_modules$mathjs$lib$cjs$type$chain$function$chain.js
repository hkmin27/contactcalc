["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/chain/function/chain.js"],"~:js","shadow$provide[521]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createChain=void 0;c=b(25);c=(0,c.factory)(\"chain\",[\"typed\",\"Chain\"],function(q){var f=q.typed,u=q.Chain;return f(\"chain\",{\"\":function(){return new u},any:function(k){return new u(k)}})});a.createChain=c}","~:source","shadow$provide[521] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChain = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'chain';\nvar dependencies = ['typed', 'Chain'];\nvar createChain = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Chain = _ref.Chain;\n\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done()     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done()     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.Chain} The created chain\n   */\n  return typed(name, {\n    '': function _() {\n      return new Chain();\n    },\n    any: function any(value) {\n      return new Chain(value);\n    }\n  });\n});\nexports.createChain = createChain;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","any","value","createChain"]],"~:compiled-at",1619135724015,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$chain$function$chain.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA6B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,OAAVA,CACc,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACrFC,EAAQD,CAAKC,CAAAA,KADwE,CAErFC,EAAQF,CAAKE,CAAAA,KAqCjB,OAAOD,EAAA,CAzCEH,OAyCF,CAAY,CACjB,GAAIK,QAAU,EAAG,CACf,MAAO,KAAID,CADI,CADA,CAIjBE,IAAKA,QAAY,CAACV,CAAD,CAAQ,CACvB,MAAO,KAAIQ,CAAJ,CAAUR,CAAV,CADgB,CAJR,CAAZ,CAvCkF,CAA1D,CAgDjCH,EAAQI,CAAAA,WAAR,CAAsBA,CA5DwC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/chain/function/chain.js\"],\n\"sourcesContent\":[\"shadow$provide[521] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createChain = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar name = 'chain';\\nvar dependencies = ['typed', 'Chain'];\\nvar createChain = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Chain = _ref.Chain;\\n\\n  /**\\n   * Wrap any value in a chain, allowing to perform chained operations on\\n   * the value.\\n   *\\n   * All methods available in the math.js library can be called upon the chain,\\n   * and then will be evaluated with the value itself as first argument.\\n   * The chain can be closed by executing `chain.done()`, which returns\\n   * the final value.\\n   *\\n   * The chain has a number of special functions:\\n   *\\n   * - `done()`     Finalize the chain and return the chain's value.\\n   * - `valueOf()`  The same as `done()`\\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\\n   *                a string representation of the value.\\n   *\\n   * Syntax:\\n   *\\n   *    math.chain(value)\\n   *\\n   * Examples:\\n   *\\n   *     math.chain(3)\\n   *         .add(4)\\n   *         .subtract(2)\\n   *         .done()     // 5\\n   *\\n   *     math.chain( [[1, 2], [3, 4]] )\\n   *         .subset(math.index(0, 0), 8)\\n   *         .multiply(3)\\n   *         .done()     // [[24, 6], [9, 12]]\\n   *\\n   * @param {*} [value]   A value of any type on which to start a chained operation.\\n   * @return {math.Chain} The created chain\\n   */\\n  return typed(name, {\\n    '': function _() {\\n      return new Chain();\\n    },\\n    any: function any(value) {\\n      return new Chain(value);\\n    }\\n  });\\n});\\nexports.createChain = createChain;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createChain\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Chain\",\"_\",\"any\"]\n}\n"]