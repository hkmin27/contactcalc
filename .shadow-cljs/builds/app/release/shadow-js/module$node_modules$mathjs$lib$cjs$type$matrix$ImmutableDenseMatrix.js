["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js"],"~:js","shadow$provide[198]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createImmutableDenseMatrixClass=void 0;var q=b(14),f=b(15);c=b(25);c=(0,c.factory)(\"ImmutableDenseMatrix\",[\"smaller\",\"DenseMatrix\"],function(u){function k(g,d){if(!(this instanceof k))throw new SyntaxError(\"Constructor must be called with the new operator\");if(d&&!(0,q.isString)(d))throw Error(\"Invalid datatype: \"+d);if((0,q.isMatrix)(g)||(0,q.isArray)(g))g=new p(g,d),this._data=g._data,this._size=g._size,this._datatype=\ng._datatype,this._max=this._min=null;else if(g&&(0,q.isArray)(g.data)&&(0,q.isArray)(g.size))this._data=g.data,this._size=g.size,this._datatype=g.datatype,this._min=\"undefined\"!==typeof g.min?g.min:null,this._max=\"undefined\"!==typeof g.max?g.max:null;else{if(g)throw new TypeError(\"Unsupported type of data (\"+(0,q.typeOf)(g)+\")\");this._data=[];this._size=[0];this._datatype=d;this._max=this._min=null}}var t=u.smaller,p=u.DenseMatrix;k.prototype=new p;k.prototype.type=\"ImmutableDenseMatrix\";k.prototype.isImmutableDenseMatrix=\n!0;k.prototype.subset=function(g){switch(arguments.length){case 1:var d=p.prototype.subset.call(this,g);return(0,q.isMatrix)(d)?new k({data:d._data,size:d._size,datatype:d._datatype}):d;case 2:case 3:throw Error(\"Cannot invoke set subset on an Immutable Matrix instance\");default:throw new SyntaxError(\"Wrong number of arguments\");}};k.prototype.set=function(){throw Error(\"Cannot invoke set on an Immutable Matrix instance\");};k.prototype.resize=function(){throw Error(\"Cannot invoke resize on an Immutable Matrix instance\");\n};k.prototype.reshape=function(){throw Error(\"Cannot invoke reshape on an Immutable Matrix instance\");};k.prototype.clone=function(){return new k({data:(0,f.clone)(this._data),size:(0,f.clone)(this._size),datatype:this._datatype})};k.prototype.toJSON=function(){return{mathjs:\"ImmutableDenseMatrix\",data:this._data,size:this._size,datatype:this._datatype}};k.fromJSON=function(g){return new k(g)};k.prototype.swapRows=function(){throw Error(\"Cannot invoke swapRows on an Immutable Matrix instance\");};\nk.prototype.min=function(){if(null===this._min){var g=null;this.forEach(function(d){if(null===g||t(d,g))g=d});this._min=null!==g?g:void 0}return this._min};k.prototype.max=function(){if(null===this._max){var g=null;this.forEach(function(d){if(null===g||t(g,d))g=d});this._max=null!==g?g:void 0}return this._max};return k},{isClass:!0});a.createImmutableDenseMatrixClass=c}","~:source","shadow$provide[198] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createImmutableDenseMatrixClass = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nvar createImmutableDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      DenseMatrix = _ref.DenseMatrix;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !(0, _is.isString)(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if ((0, _is.isMatrix)(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: (0, _object.clone)(this._data),\n      size: (0, _object.clone)(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});\nexports.createImmutableDenseMatrixClass = createImmutableDenseMatrixClass;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["min","subset","createImmutableDenseMatrixClass","_max","fromJSON","isClass","prototype","__esModule","_data","max","reshape","_datatype","_min","value","_size","mathjs","isImmutableDenseMatrix","type","clone","datatype","set","resize","size","swapRows","data","toJSON"]],"~:compiled-at",1619135723924,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$ImmutableDenseMatrix.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js\"],\n\"sourcesContent\":[\"shadow$provide[198] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createImmutableDenseMatrixClass = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'ImmutableDenseMatrix';\\nvar dependencies = ['smaller', 'DenseMatrix'];\\nvar createImmutableDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var smaller = _ref.smaller,\\n      DenseMatrix = _ref.DenseMatrix;\\n\\n  function ImmutableDenseMatrix(data, datatype) {\\n    if (!(this instanceof ImmutableDenseMatrix)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    if (datatype && !(0, _is.isString)(datatype)) {\\n      throw new Error('Invalid datatype: ' + datatype);\\n    }\\n\\n    if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {\\n      // use DenseMatrix implementation\\n      var matrix = new DenseMatrix(data, datatype); // internal structures\\n\\n      this._data = matrix._data;\\n      this._size = matrix._size;\\n      this._datatype = matrix._datatype;\\n      this._min = null;\\n      this._max = null;\\n    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {\\n      // initialize fields from JSON representation\\n      this._data = data.data;\\n      this._size = data.size;\\n      this._datatype = data.datatype;\\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\\n    } else if (data) {\\n      // unsupported type\\n      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');\\n    } else {\\n      // nothing provided\\n      this._data = [];\\n      this._size = [0];\\n      this._datatype = datatype;\\n      this._min = null;\\n      this._max = null;\\n    }\\n  }\\n\\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\\n  /**\\n   * Attach type information\\n   */\\n\\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\\n  /**\\n   * Get a subset of the matrix, or replace a subset of the matrix.\\n   *\\n   * Usage:\\n   *     const subset = matrix.subset(index)               // retrieve subset\\n   *     const value = matrix.subset(index, replacement)   // replace subset\\n   *\\n   * @param {Index} index\\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\\n   *                                  the matrix is resized. If not provided,\\n   *                                  new matrix elements will be filled with zeros.\\n   */\\n\\n  ImmutableDenseMatrix.prototype.subset = function (index) {\\n    switch (arguments.length) {\\n      case 1:\\n        {\\n          // use base implementation\\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\\n\\n          if ((0, _is.isMatrix)(m)) {\\n            // return immutable matrix\\n            return new ImmutableDenseMatrix({\\n              data: m._data,\\n              size: m._size,\\n              datatype: m._datatype\\n            });\\n          }\\n\\n          return m;\\n        }\\n      // intentional fall through\\n\\n      case 2:\\n      case 3:\\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\\n\\n      default:\\n        throw new SyntaxError('Wrong number of arguments');\\n    }\\n  };\\n  /**\\n   * Replace a single element in the matrix.\\n   * @param {Number[]} index   Zero-based index\\n   * @param {*} value\\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\\n   *                                  the matrix is resized. If not provided,\\n   *                                  new matrix elements will be left undefined.\\n   * @return {ImmutableDenseMatrix} self\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.set = function () {\\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\\n  };\\n  /**\\n   * Resize the matrix to the given size. Returns a copy of the matrix when\\n   * `copy=true`, otherwise return the matrix itself (resize in place).\\n   *\\n   * @param {Number[]} size           The new size the matrix should have.\\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\\n   *                                  If not provided, the matrix elements will\\n   *                                  be filled with zeros.\\n   * @param {boolean} [copy]          Return a resized copy of the matrix\\n   *\\n   * @return {Matrix}                 The resized matrix\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.resize = function () {\\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\\n  };\\n  /**\\n   * Disallows reshaping in favor of immutability.\\n   *\\n   * @throws {Error} Operation not allowed\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.reshape = function () {\\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\\n  };\\n  /**\\n   * Create a clone of the matrix\\n   * @return {ImmutableDenseMatrix} clone\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.clone = function () {\\n    return new ImmutableDenseMatrix({\\n      data: (0, _object.clone)(this._data),\\n      size: (0, _object.clone)(this._size),\\n      datatype: this._datatype\\n    });\\n  };\\n  /**\\n   * Get a JSON representation of the matrix\\n   * @returns {Object}\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'ImmutableDenseMatrix',\\n      data: this._data,\\n      size: this._size,\\n      datatype: this._datatype\\n    };\\n  };\\n  /**\\n   * Generate a matrix from a JSON object\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"ImmutableDenseMatrix\\\", data: [], size: []}`,\\n   *                       where mathjs is optional\\n   * @returns {ImmutableDenseMatrix}\\n   */\\n\\n\\n  ImmutableDenseMatrix.fromJSON = function (json) {\\n    return new ImmutableDenseMatrix(json);\\n  };\\n  /**\\n   * Swap rows i and j in Matrix.\\n   *\\n   * @param {Number} i       Matrix row index 1\\n   * @param {Number} j       Matrix row index 2\\n   *\\n   * @return {Matrix}        The matrix reference\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.swapRows = function () {\\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\\n  };\\n  /**\\n   * Calculate the minimum value in the set\\n   * @return {Number | undefined} min\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.min = function () {\\n    // check min has been calculated before\\n    if (this._min === null) {\\n      // minimum\\n      var m = null; // compute min\\n\\n      this.forEach(function (v) {\\n        if (m === null || smaller(v, m)) {\\n          m = v;\\n        }\\n      });\\n      this._min = m !== null ? m : undefined;\\n    }\\n\\n    return this._min;\\n  };\\n  /**\\n   * Calculate the maximum value in the set\\n   * @return {Number | undefined} max\\n   */\\n\\n\\n  ImmutableDenseMatrix.prototype.max = function () {\\n    // check max has been calculated before\\n    if (this._max === null) {\\n      // maximum\\n      var m = null; // compute max\\n\\n      this.forEach(function (v) {\\n        if (m === null || smaller(m, v)) {\\n          m = v;\\n        }\\n      });\\n      this._max = m !== null ? m : undefined;\\n    }\\n\\n    return this._max;\\n  };\\n\\n  return ImmutableDenseMatrix;\\n}, {\\n  isClass: true\\n});\\nexports.createImmutableDenseMatrixClass = createImmutableDenseMatrixClass;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createImmutableDenseMatrixClass\",\"_is\",\"_object\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"ImmutableDenseMatrix\",\"data\",\"datatype\",\"SyntaxError\",\"isString\",\"Error\",\"isMatrix\",\"isArray\",\"matrix\",\"DenseMatrix\",\"_data\",\"_size\",\"_datatype\",\"_max\",\"_min\",\"size\",\"min\",\"max\",\"TypeError\",\"typeOf\",\"smaller\",\"prototype\",\"type\",\"isImmutableDenseMatrix\",\"subset\",\"ImmutableDenseMatrix.prototype.subset\",\"index\",\"arguments\",\"length\",\"m\",\"call\",\"set\",\"ImmutableDenseMatrix.prototype.set\",\"resize\",\"ImmutableDenseMatrix.prototype.resize\",\"reshape\",\"ImmutableDenseMatrix.prototype.reshape\",\"clone\",\"ImmutableDenseMatrix.prototype.clone\",\"toJSON\",\"ImmutableDenseMatrix.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"ImmutableDenseMatrix.fromJSON\",\"json\",\"swapRows\",\"ImmutableDenseMatrix.prototype.swapRows\",\"ImmutableDenseMatrix.prototype.min\",\"forEach\",\"v\",\"undefined\",\"ImmutableDenseMatrix.prototype.max\",\"isClass\"]\n}\n"]