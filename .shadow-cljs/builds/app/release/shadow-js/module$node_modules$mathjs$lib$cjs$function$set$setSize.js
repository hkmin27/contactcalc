["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setSize.js"],"~:js","shadow$provide[239]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetSize=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setSize\",[\"typed\",\"compareNatural\"],function(f){var u=f.typed,k=f.compareNatural;return u(\"setSize\",{\"Array | Matrix\":function(t){return Array.isArray(t)?(0,q.flatten)(t).length:(0,q.flatten)(t.toArray()).length},\"Array | Matrix, boolean\":function(t,p){if(!1===p||0===t.length)return Array.isArray(t)?(0,q.flatten)(t).length:(0,q.flatten)(t.toArray()).length;\nt=(0,q.flatten)(Array.isArray(t)?t:t.toArray()).sort(k);for(var g=p=1;g<t.length;g++)0!==k(t[g],t[g-1])&&p++;return p}})});a.createSetSize=c}","~:source","shadow$provide[239] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetSize = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setSize';\nvar dependencies = ['typed', 'compareNatural'];\nvar createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareNatural = _ref.compareNatural;\n\n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4])          // returns 4\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            count++;\n          }\n        }\n\n        return count;\n      }\n    }\n  });\n});\nexports.createSetSize = createSetSize;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createSetSize","value"]],"~:compiled-at",1619135723950,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setSize.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA+B,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,gBAAVA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAAiBF,CAAKE,CAAAA,cAuB1B,OAAOD,EAAA,CA3BEH,SA2BF,CAAY,CACjB,iBAAkBK,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAOC,MAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA,CAAmB,CAAC,CAAA,CAAGT,CAAOY,CAAAA,OAAX,EAAoBH,CAApB,CAAuBI,CAAAA,MAA1C,CAAmD,CAAC,CAAA,CAAGb,CAAOY,CAAAA,OAAX,EAAoBH,CAAEK,CAAAA,OAAF,EAApB,CAAiCD,CAAAA,MADnD,CADzB,CAIjB,0BAA2BE,QAA2B,CAACN,CAAD,CAAIO,CAAJ,CAAY,CAChE,GAAe,CAAA,CAAf,GAAIA,CAAJ,EAAqC,CAArC,GAAwBP,CAAEI,CAAAA,MAA1B,CACE,MAAOH,MAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA,CAAmB,CAAC,CAAA,CAAGT,CAAOY,CAAAA,OAAX,EAAoBH,CAApB,CAAuBI,CAAAA,MAA1C,CAAmD,CAAC,CAAA,CAAGb,CAAOY,CAAAA,OAAX,EAAoBH,CAAEK,CAAAA,OAAF,EAApB,CAAiCD,CAAAA,MAEvFI;CAAAA,CAAI,CAAC,CAAA,CAAGjB,CAAOY,CAAAA,OAAX,EAAoBF,KAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAA,CAAmBA,CAAnB,CAAuBA,CAAEK,CAAAA,OAAF,EAA3C,CAAwDI,CAAAA,IAAxD,CAA6DX,CAA7D,CAGR,KAAK,IAAIY,EAFLC,CAEKD,CAFG,CAEZ,CAAgBA,CAAhB,CAAoBF,CAAEJ,CAAAA,MAAtB,CAA8BM,CAAA,EAA9B,CACyC,CAAvC,GAAIZ,CAAA,CAAeU,CAAA,CAAEE,CAAF,CAAf,CAAqBF,CAAA,CAAEE,CAAF,CAAM,CAAN,CAArB,CAAJ,EACEC,CAAA,EAIJ,OAAOA,EAbuD,CAJjD,CAAZ,CAzBoF,CAA1D,CA+CnCzB,EAAQI,CAAAA,aAAR,CAAwBA,CA7DsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setSize.js\"],\n\"sourcesContent\":[\"shadow$provide[239] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetSize = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setSize';\\nvar dependencies = ['typed', 'compareNatural'];\\nvar createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      compareNatural = _ref.compareNatural;\\n\\n  /**\\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setSize(set)\\n   *    math.setSize(set, unique)\\n   *\\n   * Examples:\\n   *\\n   *    math.setSize([1, 2, 2, 4])          // returns 4\\n   *    math.setSize([1, 2, 2, 4], true)    // returns 3\\n   *\\n   * See also:\\n   *\\n   *    setUnion, setIntersect, setDifference\\n   *\\n   * @param {Array | Matrix}    a  A multiset\\n   * @return {number}            The number of elements of the (multi)set\\n   */\\n  return typed(name, {\\n    'Array | Matrix': function ArrayMatrix(a) {\\n      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\\n    },\\n    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {\\n      if (unique === false || a.length === 0) {\\n        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;\\n      } else {\\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\\n        var count = 1;\\n\\n        for (var i = 1; i < b.length; i++) {\\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\\n            count++;\\n          }\\n        }\\n\\n        return count;\\n      }\\n    }\\n  });\\n});\\nexports.createSetSize = createSetSize;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetSize\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"compareNatural\",\"ArrayMatrix\",\"a\",\"Array\",\"isArray\",\"flatten\",\"length\",\"toArray\",\"ArrayMatrixBoolean\",\"unique\",\"b\",\"sort\",\"i\",\"count\"]\n}\n"]