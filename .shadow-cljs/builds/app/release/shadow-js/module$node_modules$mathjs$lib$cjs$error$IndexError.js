["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/error/IndexError.js"],"~:js","shadow$provide[23]=function(c,b,y,a){function q(f,u,k){if(!(this instanceof q))throw new SyntaxError(\"Constructor must be called with the new operator\");this.index=f;3>arguments.length?(this.min=0,this.max=u):(this.min=u,this.max=k);this.message=void 0!==this.min&&this.index<this.min?\"Index out of range (\"+this.index+\" \\x3c \"+this.min+\")\":void 0!==this.max&&this.index>=this.max?\"Index out of range (\"+this.index+\" \\x3e \"+(this.max-1)+\")\":\"Index out of range (\"+this.index+\")\";this.stack=Error().stack}\nObject.defineProperty(a,\"__esModule\",{value:!0});a.IndexError=q;q.prototype=new RangeError;q.prototype.constructor=RangeError;q.prototype.name=\"IndexError\";q.prototype.isIndexError=!0}","~:source","shadow$provide[23] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexError = IndexError;\n\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["message","min","index","prototype","IndexError","__esModule","max","name","value","isIndexError","stack","constructor"]],"~:compiled-at",1619135723714,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$error$IndexError.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAkB7DC,QAASA,EAAU,CAACC,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAAkB,CACnC,GAAI,EAAE,IAAF,WAAkBH,EAAlB,CAAJ,CACE,KAAM,KAAII,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKH,CAAAA,KAAL,CAAaA,CAEU,EAAvB,CAAII,SAAUC,CAAAA,MAAd,EACE,IAAKJ,CAAAA,GACL,CADW,CACX,CAAA,IAAKC,CAAAA,GAAL,CAAWD,CAFb,GAIE,IAAKA,CAAAA,GACL,CADWA,CACX,CAAA,IAAKC,CAAAA,GAAL,CAAWA,CALb,CASE,KAAKI,CAAAA,OAAL,CADeC,IAAAA,EAAjB,GAAI,IAAKN,CAAAA,GAAT,EAA8B,IAAKD,CAAAA,KAAnC,CAA2C,IAAKC,CAAAA,GAAhD,CACiB,sBADjB,CAC0C,IAAKD,CAAAA,KAD/C,CACuD,QADvD,CAC+D,IAAKC,CAAAA,GADpE,CAC0E,GAD1E,CAEwBM,IAAAA,EAAjB,GAAI,IAAKL,CAAAA,GAAT,EAA8B,IAAKF,CAAAA,KAAnC,EAA4C,IAAKE,CAAAA,GAAjD,CACU,sBADV,CACmC,IAAKF,CAAAA,KADxC,CACgD,QADhD,EACyD,IAAKE,CAAAA,GAD9D,CACoE,CADpE,EACyE,GADzE,CAGU,sBAHV,CAGmC,IAAKF,CAAAA,KAHxC,CAGgD,GAGvD,KAAKQ,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KAvBU;AAfrCE,MAAOC,CAAAA,cAAP,CAAsBb,CAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,EAAQC,CAAAA,UAAR,CAAqBA,CAsCrBA,EAAWc,CAAAA,SAAX,CAAuB,IAAIC,UAC3Bf,EAAWc,CAAAA,SAAUE,CAAAA,WAArB,CAAmCD,UACnCf,EAAWc,CAAAA,SAAUG,CAAAA,IAArB,CAA4B,YAC5BjB,EAAWc,CAAAA,SAAUI,CAAAA,YAArB,CAAoC,CAAA,CA/CyB;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/error/IndexError.js\"],\n\"sourcesContent\":[\"shadow$provide[23] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.IndexError = IndexError;\\n\\n/**\\n * Create a range error with the message:\\n *     'Index out of range (index < min)'\\n *     'Index out of range (index < max)'\\n *\\n * @param {number} index     The actual index\\n * @param {number} [min=0]   Minimum index (included)\\n * @param {number} [max]     Maximum index (excluded)\\n * @extends RangeError\\n */\\nfunction IndexError(index, min, max) {\\n  if (!(this instanceof IndexError)) {\\n    throw new SyntaxError('Constructor must be called with the new operator');\\n  }\\n\\n  this.index = index;\\n\\n  if (arguments.length < 3) {\\n    this.min = 0;\\n    this.max = min;\\n  } else {\\n    this.min = min;\\n    this.max = max;\\n  }\\n\\n  if (this.min !== undefined && this.index < this.min) {\\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\\n  } else if (this.max !== undefined && this.index >= this.max) {\\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\\n  } else {\\n    this.message = 'Index out of range (' + this.index + ')';\\n  }\\n\\n  this.stack = new Error().stack;\\n}\\n\\nIndexError.prototype = new RangeError();\\nIndexError.prototype.constructor = RangeError;\\nIndexError.prototype.name = 'IndexError';\\nIndexError.prototype.isIndexError = true;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"IndexError\",\"index\",\"min\",\"max\",\"SyntaxError\",\"arguments\",\"length\",\"message\",\"undefined\",\"stack\",\"Error\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"RangeError\",\"constructor\",\"name\",\"isIndexError\"]\n}\n"]