["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setDifference.js"],"~:js","shadow$provide[233]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetDifference=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setDifference\",\"typed size subset compareNatural Index DenseMatrix\".split(\" \"),function(f){var u=f.typed,k=f.size,t=f.subset,p=f.compareNatural,g=f.Index,d=f.DenseMatrix;return u(\"setDifference\",{\"Array | Matrix, Array | Matrix\":function(l,h){if(0===t(k(l),new g(0)))var n=[];else{if(0===t(k(h),new g(0)))return(0,q.flatten)(l.toArray());var r=(0,q.identify)((0,\nq.flatten)(Array.isArray(l)?l:l.toArray()).sort(p)),v=(0,q.identify)((0,q.flatten)(Array.isArray(h)?h:h.toArray()).sort(p));n=[];for(var C,z=0;z<r.length;z++){C=!1;for(var w=0;w<v.length;w++)if(0===p(r[z].value,v[w].value)&&r[z].identifier===v[w].identifier){C=!0;break}C||n.push(r[z])}}return Array.isArray(l)&&Array.isArray(h)?(0,q.generalize)(n):new d((0,q.generalize)(n))}})});a.createSetDifference=c}","~:source","shadow$provide[233] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDifference = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return (0, _array.flatten)(a1.toArray());\n      } else {\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return (0, _array.generalize)(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix((0, _array.generalize)(result));\n    }\n  });\n});\nexports.createSetDifference = createSetDifference;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSetDifference","__esModule","value"]],"~:compiled-at",1619135723949,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setDifference.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setDifference.js\"],\n\"sourcesContent\":[\"shadow$provide[233] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetDifference = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setDifference';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\\nvar createSetDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index,\\n      DenseMatrix = _ref.DenseMatrix;\\n\\n  /**\\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setDifference(set1, set2)\\n   *\\n   * Examples:\\n   *\\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\\n   *\\n   * See also:\\n   *\\n   *    setUnion, setIntersect, setSymDifference\\n   *\\n   * @param {Array | Matrix}    a1  A (multi)set\\n   * @param {Array | Matrix}    a2  A (multi)set\\n   * @return {Array | Matrix}    The difference of two (multi)sets\\n   */\\n  return typed(name, {\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\\n      var result;\\n\\n      if (subset(size(a1), new Index(0)) === 0) {\\n        // empty-anything=empty\\n        result = [];\\n      } else if (subset(size(a2), new Index(0)) === 0) {\\n        // anything-empty=anything\\n        return (0, _array.flatten)(a1.toArray());\\n      } else {\\n        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\\n        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\\n        result = [];\\n        var inb2;\\n\\n        for (var i = 0; i < b1.length; i++) {\\n          inb2 = false;\\n\\n          for (var j = 0; j < b2.length; j++) {\\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\\n              // the identifier is always a decimal int\\n              inb2 = true;\\n              break;\\n            }\\n          }\\n\\n          if (!inb2) {\\n            result.push(b1[i]);\\n          }\\n        }\\n      } // return an array, if both inputs were arrays\\n\\n\\n      if (Array.isArray(a1) && Array.isArray(a2)) {\\n        return (0, _array.generalize)(result);\\n      } // return a matrix otherwise\\n\\n\\n      return new DenseMatrix((0, _array.generalize)(result));\\n    }\\n  });\\n});\\nexports.createSetDifference = createSetDifference;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetDifference\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"DenseMatrix\",\"ArrayMatrixArrayMatrix\",\"a1\",\"a2\",\"result\",\"flatten\",\"toArray\",\"b1\",\"identify\",\"Array\",\"isArray\",\"sort\",\"b2\",\"inb2\",\"i\",\"length\",\"j\",\"identifier\",\"push\",\"generalize\"]\n}\n"]