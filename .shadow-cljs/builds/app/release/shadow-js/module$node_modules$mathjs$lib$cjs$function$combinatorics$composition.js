["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/combinatorics/composition.js"],"~:js","shadow$provide[561]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createComposition=void 0;c=b(25);c=(0,c.factory)(\"composition\",\"typed addScalar combinations isNegative isPositive isInteger larger\".split(\" \"),function(q){var f=q.typed,u=q.addScalar,k=q.combinations,t=q.isPositive,p=q.isInteger,g=q.larger;return f(\"composition\",{\"number | BigNumber, number | BigNumber\":function(d,l){if(!(p(d)&&t(d)&&p(l)&&t(l)))throw new TypeError(\"Positive integer value expected in function composition\");\nif(g(l,d))throw new TypeError(\"k must be less than or equal to n in function composition\");return k(u(d,-1),u(l,-1))}})});a.createComposition=c}","~:source","shadow$provide[561] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createComposition = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nvar createComposition = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      combinations = _ref.combinations,\n      isPositive = _ref.isPositive,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});\nexports.createComposition = createComposition;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createComposition","__esModule","value"]],"~:compiled-at",1619135724032,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$combinatorics$composition.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAmC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,qEAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC3FC,EAAQD,CAAKC,CAAAA,KAD8E,CAE3FC,EAAYF,CAAKE,CAAAA,SAF0E,CAG3FC,EAAeH,CAAKG,CAAAA,YAHuE,CAI3FC,EAAaJ,CAAKI,CAAAA,UAJyE,CAM3FC,EAAYL,CAAKK,CAAAA,SAN0E,CAO3FC,EAASN,CAAKM,CAAAA,MAwBlB,OAAOL,EAAA,CAjCEH,aAiCF,CAAY,CACjB,yCAA0CS,QAAuC,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACtF,GAAI,EAACJ,CAAA,CAAUG,CAAV,CAAD,EAAkBJ,CAAA,CAAWI,CAAX,CAAlB,EAAoCH,CAAA,CAAUI,CAAV,CAApC,EAAqDL,CAAA,CAAWK,CAAX,CAArD,CAAJ,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN;AACK,GAAIJ,CAAA,CAAOG,CAAP,CAAUD,CAAV,CAAJ,CACL,KAAM,KAAIE,SAAJ,CAAc,2DAAd,CAAN,CAGF,MAAOP,EAAA,CAAaD,CAAA,CAAUM,CAAV,CAAa,EAAb,CAAb,CAA+BN,CAAA,CAAUO,CAAV,CAAa,EAAb,CAA/B,CAP+E,CADvE,CAAZ,CA/BwF,CAA1D,CA2CvClB,EAAQI,CAAAA,iBAAR,CAA4BA,CAvDkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/combinatorics/composition.js\"],\n\"sourcesContent\":[\"shadow$provide[561] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createComposition = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'composition';\\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\\nvar createComposition = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      addScalar = _ref.addScalar,\\n      combinations = _ref.combinations,\\n      isPositive = _ref.isPositive,\\n      isNegative = _ref.isNegative,\\n      isInteger = _ref.isInteger,\\n      larger = _ref.larger;\\n\\n  /**\\n   * The composition counts of n into k parts.\\n   *\\n   * composition only takes integer arguments.\\n   * The following condition must be enforced: k <= n.\\n   *\\n   * Syntax:\\n   *\\n   *   math.composition(n, k)\\n   *\\n   * Examples:\\n   *\\n   *    math.composition(5, 3) // returns 6\\n   *\\n   * See also:\\n   *\\n   *    combinations\\n   *\\n   * @param {Number | BigNumber} n    Total number of objects in the set\\n   * @param {Number | BigNumber} k    Number of objects in the subset\\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\\n   */\\n  return typed(name, {\\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\\n        throw new TypeError('Positive integer value expected in function composition');\\n      } else if (larger(k, n)) {\\n        throw new TypeError('k must be less than or equal to n in function composition');\\n      }\\n\\n      return combinations(addScalar(n, -1), addScalar(k, -1));\\n    }\\n  });\\n});\\nexports.createComposition = createComposition;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createComposition\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"addScalar\",\"combinations\",\"isPositive\",\"isInteger\",\"larger\",\"numberBigNumberNumberBigNumber\",\"n\",\"k\",\"TypeError\"]\n}\n"]