["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js"],"~:js","shadow$provide[164]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createDivideScalar=void 0;c=b(25);var q=b(14);b=(0,c.factory)(\"divideScalar\",[\"typed\",\"numeric\"],function(f){var u=f.typed,k=f.numeric;return u(\"divideScalar\",{\"number, number\":function(t,p){return t/p},\"Complex, Complex\":function(t,p){return t.div(p)},\"BigNumber, BigNumber\":function(t,p){return t.div(p)},\"Fraction, Fraction\":function(t,p){return t.div(p)},\"Unit, number | Fraction | BigNumber\":function(t,p){t=\nt.clone();var g=k(1,(0,q.typeOf)(p));t.value=this(null===t.value?t._normalize(g):t.value,p);return t},\"number | Fraction | BigNumber, Unit\":function(t,p){var g=p.clone();g=g.pow(-1);var d=k(1,(0,q.typeOf)(t));g.value=this(t,null===p.value?p._normalize(d):p.value);return g},\"Unit, Unit\":function(t,p){return t.divide(p)}})});a.createDivideScalar=b}","~:source","shadow$provide[164] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivideScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nvar createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      numeric = _ref.numeric;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(y));\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, (0, _is.typeOf)(x));\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n});\nexports.createDivideScalar = createDivideScalar;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createDivideScalar","__esModule","value"]],"~:compiled-at",1619135723897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$divideScalar.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAMR,CAAA,CAAQ,EAAR,CAINM,EAAAA,CAAoC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,CAAC,OAADA,CAAU,SAAVA,CACqB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC5FC,EAAQD,CAAKC,CAAAA,KAD+E,CAE5FC,EAAUF,CAAKE,CAAAA,OAcnB,OAAOD,EAAA,CAlBEH,cAkBF,CAAY,CACjB,iBAAkBK,QAAqB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAOD,EAAP,CAAWC,CADiC,CAD7B,CAIjB,mBAAoBC,QAAuB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CADyC,CAJjC,CAOjB,uBAAwBG,QAA2B,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CADiD,CAPzC,CAUjB,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEG,CAAAA,GAAF,CAAMF,CAAN,CAD6C,CAVrC,CAajB,sCAAuCK,QAAoC,CAACN,CAAD,CAAIC,CAAJ,CAAO,CAC5EM,CAAAA;AAAMP,CAAEQ,CAAAA,KAAF,EAEV,KAAIC,EAAMX,CAAA,CAAQ,CAAR,CAAW,CAAC,CAAA,CAAGN,CAAIkB,CAAAA,MAAR,EAAgBT,CAAhB,CAAX,CACVM,EAAIlB,CAAAA,KAAJ,CAAY,IAAA,CAAmB,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAII,CAAAA,UAAJ,CAAeF,CAAf,CAArB,CAA2CF,CAAIlB,CAAAA,KAApD,CAA2DY,CAA3D,CACZ,OAAOM,EALyE,CAbjE,CAoBjB,sCAAuCK,QAAoC,CAACZ,CAAD,CAAIC,CAAJ,CAAO,CAChF,IAAIM,EAAMN,CAAEO,CAAAA,KAAF,EACVD,EAAA,CAAMA,CAAIM,CAAAA,GAAJ,CAAQ,EAAR,CAEN,KAAIJ,EAAMX,CAAA,CAAQ,CAAR,CAAW,CAAC,CAAA,CAAGN,CAAIkB,CAAAA,MAAR,EAAgBV,CAAhB,CAAX,CACVO,EAAIlB,CAAAA,KAAJ,CAAY,IAAA,CAAKW,CAAL,CAAoB,IAAZ,GAAAC,CAAEZ,CAAAA,KAAF,CAAmBY,CAAEU,CAAAA,UAAF,CAAaF,CAAb,CAAnB,CAAuCR,CAAEZ,CAAAA,KAAjD,CACZ,OAAOkB,EANyE,CApBjE,CA4BjB,aAAcO,QAAiB,CAACd,CAAD,CAAIC,CAAJ,CAAO,CACpC,MAAOD,EAAEe,CAAAA,MAAF,CAASd,CAAT,CAD6B,CA5BrB,CAAZ,CAhByF,CAA1D,CAiDxCf,EAAQI,CAAAA,kBAAR,CAA6BA,CA/DiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js\"],\n\"sourcesContent\":[\"shadow$provide[164] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDivideScalar = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar name = 'divideScalar';\\nvar dependencies = ['typed', 'numeric'];\\nvar createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      numeric = _ref.numeric;\\n\\n  /**\\n   * Divide two scalar values, `x / y`.\\n   * This function is meant for internal use: it is used by the public functions\\n   * `divide` and `inv`.\\n   *\\n   * This function does not support collections (Array or Matrix).\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\\n   * @private\\n   */\\n  return typed(name, {\\n    'number, number': function numberNumber(x, y) {\\n      return x / y;\\n    },\\n    'Complex, Complex': function ComplexComplex(x, y) {\\n      return x.div(y);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\\n      return x.div(y);\\n    },\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return x.div(y);\\n    },\\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\\n\\n      var one = numeric(1, (0, _is.typeOf)(y));\\n      res.value = this(res.value === null ? res._normalize(one) : res.value, y);\\n      return res;\\n    },\\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\\n      var res = y.clone();\\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\\n\\n      var one = numeric(1, (0, _is.typeOf)(x));\\n      res.value = this(x, y.value === null ? y._normalize(one) : y.value);\\n      return res;\\n    },\\n    'Unit, Unit': function UnitUnit(x, y) {\\n      return x.divide(y);\\n    }\\n  });\\n});\\nexports.createDivideScalar = createDivideScalar;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDivideScalar\",\"_factory\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"numeric\",\"numberNumber\",\"x\",\"y\",\"ComplexComplex\",\"div\",\"BigNumberBigNumber\",\"FractionFraction\",\"UnitNumberFractionBigNumber\",\"res\",\"clone\",\"one\",\"typeOf\",\"_normalize\",\"numberFractionBigNumberUnit\",\"pow\",\"UnitUnit\",\"divide\"]\n}\n"]