["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js"],"~:js","shadow$provide[558]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createStirlingS2=void 0;c=b(25);c=(0,c.factory)(\"stirlingS2\",\"typed addScalar subtract multiplyScalar divideScalar pow factorial combinations isNegative isInteger larger\".split(\" \"),function(q){var f=q.typed,u=q.addScalar,k=q.subtract,t=q.multiplyScalar,p=q.divideScalar,g=q.pow,d=q.factorial,l=q.combinations,h=q.isNegative,n=q.isInteger,r=q.larger;return f(\"stirlingS2\",{\"number | BigNumber, number | BigNumber\":function(v,\nC){if(!n(v)||h(v)||!n(C)||h(C))throw new TypeError(\"Non-negative integer value expected in function stirlingS2\");if(r(C,v))throw new TypeError(\"k must be less than or equal to n in function stirlingS2\");for(var z=d(C),w=0,B=0;B<=C;B++){var x=g(-1,k(C,B)),D=l(C,B),F=g(B,v);w=u(w,t(t(D,F),x))}return p(w,z)}})});a.createStirlingS2=c}","~:source","shadow$provide[558] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStirlingS2 = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];\nvar createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      factorial = _ref.factorial,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\n\n      var kFactorial = factorial(k);\n      var result = 0;\n\n      for (var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k, i));\n        var kChooseI = combinations(k, i);\n        var iPower = pow(i, n);\n        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));\n      }\n\n      return divideScalar(result, kFactorial);\n    }\n  });\n});\nexports.createStirlingS2 = createStirlingS2;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createStirlingS2","__esModule","value"]],"~:compiled-at",1619135724031,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$combinatorics$stirlingS2.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAkC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,6GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACmB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC1FC,EAAQD,CAAKC,CAAAA,KAD6E,CAE1FC,EAAYF,CAAKE,CAAAA,SAFyE,CAG1FC,EAAWH,CAAKG,CAAAA,QAH0E,CAI1FC,EAAiBJ,CAAKI,CAAAA,cAJoE,CAK1FC,EAAeL,CAAKK,CAAAA,YALsE,CAM1FC,EAAMN,CAAKM,CAAAA,GAN+E,CAO1FC,EAAYP,CAAKO,CAAAA,SAPyE,CAQ1FC,EAAeR,CAAKQ,CAAAA,YARsE,CAS1FC,EAAaT,CAAKS,CAAAA,UATwE,CAU1FC,EAAYV,CAAKU,CAAAA,SAVyE,CAW1FC,EAASX,CAAKW,CAAAA,MA0BlB,OAAOV,EAAA,CAvCEH,YAuCF,CAAY,CACjB,yCAA0Cc,QAAuC,CAACC,CAAD;AAAIC,CAAJ,CAAO,CACtF,GAAI,CAACJ,CAAA,CAAUG,CAAV,CAAL,EAAqBJ,CAAA,CAAWI,CAAX,CAArB,EAAsC,CAACH,CAAA,CAAUI,CAAV,CAAvC,EAAuDL,CAAA,CAAWK,CAAX,CAAvD,CACE,KAAM,KAAIC,SAAJ,CAAc,4DAAd,CAAN,CACK,GAAIJ,CAAA,CAAOG,CAAP,CAAUD,CAAV,CAAJ,CACL,KAAM,KAAIE,SAAJ,CAAc,0DAAd,CAAN,CAOF,IAHA,IAAIC,EAAaT,CAAA,CAAUO,CAAV,CAAjB,CACIG,EAAS,CADb,CAGSC,EAAI,CAAb,CAAgBA,CAAhB,EAAqBJ,CAArB,CAAwBI,CAAA,EAAxB,CAA6B,CAC3B,IAAIC,EAAcb,CAAA,CAAI,EAAJ,CAAQH,CAAA,CAASW,CAAT,CAAYI,CAAZ,CAAR,CAAlB,CACIE,EAAWZ,CAAA,CAAaM,CAAb,CAAgBI,CAAhB,CADf,CAEIG,EAASf,CAAA,CAAIY,CAAJ,CAAOL,CAAP,CACbI,EAAA,CAASf,CAAA,CAAUe,CAAV,CAAkBb,CAAA,CAAeA,CAAA,CAAegB,CAAf,CAAyBC,CAAzB,CAAf,CAAiDF,CAAjD,CAAlB,CAJkB,CAO7B,MAAOd,EAAA,CAAaY,CAAb,CAAqBD,CAArB,CAlB+E,CADvE,CAAZ,CArCuF,CAA1D,CA4DtCzB,EAAQI,CAAAA,gBAAR,CAA2BA,CAxEmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js\"],\n\"sourcesContent\":[\"shadow$provide[558] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createStirlingS2 = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'stirlingS2';\\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];\\nvar createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      addScalar = _ref.addScalar,\\n      subtract = _ref.subtract,\\n      multiplyScalar = _ref.multiplyScalar,\\n      divideScalar = _ref.divideScalar,\\n      pow = _ref.pow,\\n      factorial = _ref.factorial,\\n      combinations = _ref.combinations,\\n      isNegative = _ref.isNegative,\\n      isInteger = _ref.isInteger,\\n      larger = _ref.larger;\\n\\n  /**\\n   * The Stirling numbers of the second kind, counts the number of ways to partition\\n   * a set of n labelled objects into k nonempty unlabelled subsets.\\n   * stirlingS2 only takes integer arguments.\\n   * The following condition must be enforced: k <= n.\\n   *\\n   *  If n = k or k = 1, then s(n,k) = 1\\n   *\\n   * Syntax:\\n   *\\n   *   math.stirlingS2(n, k)\\n   *\\n   * Examples:\\n   *\\n   *    math.stirlingS2(5, 3) //returns 25\\n   *\\n   * See also:\\n   *\\n   *    bellNumbers\\n   *\\n   * @param {Number | BigNumber} n    Total number of objects in the set\\n   * @param {Number | BigNumber} k    Number of objects in the subset\\n   * @return {Number | BigNumber}     S(n,k)\\n   */\\n  return typed(name, {\\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\\n      } else if (larger(k, n)) {\\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\\n\\n\\n      var kFactorial = factorial(k);\\n      var result = 0;\\n\\n      for (var i = 0; i <= k; i++) {\\n        var negativeOne = pow(-1, subtract(k, i));\\n        var kChooseI = combinations(k, i);\\n        var iPower = pow(i, n);\\n        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));\\n      }\\n\\n      return divideScalar(result, kFactorial);\\n    }\\n  });\\n});\\nexports.createStirlingS2 = createStirlingS2;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createStirlingS2\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"addScalar\",\"subtract\",\"multiplyScalar\",\"divideScalar\",\"pow\",\"factorial\",\"combinations\",\"isNegative\",\"isInteger\",\"larger\",\"numberBigNumberNumberBigNumber\",\"n\",\"k\",\"TypeError\",\"kFactorial\",\"result\",\"i\",\"negativeOne\",\"kChooseI\",\"iPower\"]\n}\n"]