["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setDistinct.js"],"~:js","shadow$provide[234]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetDistinct=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setDistinct\",\"typed size subset compareNatural Index DenseMatrix\".split(\" \"),function(f){var u=f.typed,k=f.size,t=f.subset,p=f.compareNatural,g=f.Index,d=f.DenseMatrix;return u(\"setDistinct\",{\"Array | Matrix\":function(l){if(0===t(k(l),new g(0)))var h=[];else{var n=(0,q.flatten)(Array.isArray(l)?l:l.toArray()).sort(p);h=[];h.push(n[0]);for(var r=1;r<\nn.length;r++)0!==p(n[r],n[r-1])&&h.push(n[r])}return Array.isArray(l)?h:new d(h)}})});a.createSetDistinct=c}","~:source","shadow$provide[234] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetDistinct = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetDistinct = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetDistinct = createSetDistinct;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSetDistinct","__esModule","value"]],"~:compiled-at",1619135723949,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setDistinct.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAEjC,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAmC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,oDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC3FC,EAAQD,CAAKC,CAAAA,KAD8E,CAE3FC,EAAOF,CAAKE,CAAAA,IAF+E,CAG3FC,EAASH,CAAKG,CAAAA,MAH6E,CAI3FC,EAAiBJ,CAAKI,CAAAA,cAJqE,CAK3FC,EAAQL,CAAKK,CAAAA,KAL8E,CAM3FC,EAAcN,CAAKM,CAAAA,WAqBvB,OAAOL,EAAA,CA7BEH,aA6BF,CAAY,CACjB,iBAAkBS,QAAoB,CAACC,CAAD,CAAI,CAGxC,GAAsC,CAAtC,GAAIL,CAAA,CAAOD,CAAA,CAAKM,CAAL,CAAP,CAAgB,IAAIH,CAAJ,CAAU,CAAV,CAAhB,CAAJ,CAEE,IAAAI,EAAS,EAFX,KAGO,CACL,IAAIC,EAAI,CAAC,CAAA,CAAGf,CAAOgB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcL,CAAd,CAAA,CAAmBA,CAAnB,CAAuBA,CAAEM,CAAAA,OAAF,EAA3C,CAAwDC,CAAAA,IAAxD,CAA6DX,CAA7D,CACRK,EAAA,CAAS,EACTA,EAAOO,CAAAA,IAAP,CAAYN,CAAA,CAAE,CAAF,CAAZ,CAEA,KAAK,IAAIO,EAAI,CAAb,CAAgBA,CAAhB;AAAoBP,CAAEQ,CAAAA,MAAtB,CAA8BD,CAAA,EAA9B,CACyC,CAAvC,GAAIb,CAAA,CAAeM,CAAA,CAAEO,CAAF,CAAf,CAAqBP,CAAA,CAAEO,CAAF,CAAM,CAAN,CAArB,CAAJ,EACER,CAAOO,CAAAA,IAAP,CAAYN,CAAA,CAAEO,CAAF,CAAZ,CAPC,CAaP,MAAIL,MAAMC,CAAAA,OAAN,CAAcL,CAAd,CAAJ,CACSC,CADT,CAKO,IAAIH,CAAJ,CAAgBG,CAAhB,CAxBiC,CADzB,CAAZ,CA3BwF,CAA1D,CAwDvCnB,EAAQI,CAAAA,iBAAR,CAA4BA,CAtEkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setDistinct.js\"],\n\"sourcesContent\":[\"shadow$provide[234] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetDistinct = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setDistinct';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\\nvar createSetDistinct = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index,\\n      DenseMatrix = _ref.DenseMatrix;\\n\\n  /**\\n   * Collect the distinct elements of a multiset.\\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setDistinct(set)\\n   *\\n   * Examples:\\n   *\\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\\n   *\\n   * See also:\\n   *\\n   *    setMultiplicity\\n   *\\n   * @param {Array | Matrix}    a  A multiset\\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\\n   */\\n  return typed(name, {\\n    'Array | Matrix': function ArrayMatrix(a) {\\n      var result;\\n\\n      if (subset(size(a), new Index(0)) === 0) {\\n        // if empty, return empty\\n        result = [];\\n      } else {\\n        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\\n        result = [];\\n        result.push(b[0]);\\n\\n        for (var i = 1; i < b.length; i++) {\\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\\n            result.push(b[i]);\\n          }\\n        }\\n      } // return an array, if the input was an array\\n\\n\\n      if (Array.isArray(a)) {\\n        return result;\\n      } // return a matrix otherwise\\n\\n\\n      return new DenseMatrix(result);\\n    }\\n  });\\n});\\nexports.createSetDistinct = createSetDistinct;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetDistinct\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"DenseMatrix\",\"ArrayMatrix\",\"a\",\"result\",\"b\",\"flatten\",\"Array\",\"isArray\",\"toArray\",\"sort\",\"push\",\"i\",\"length\"]\n}\n"]