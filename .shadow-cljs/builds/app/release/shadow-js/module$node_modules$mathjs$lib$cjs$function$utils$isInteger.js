["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isInteger.js"],"~:js","shadow$provide[39]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIsInteger=void 0;var q=b(38),f=b(19);c=b(25);c=(0,c.factory)(\"isInteger\",[\"typed\"],function(u){u=u.typed;return u(\"isInteger\",{number:f.isInteger,BigNumber:function(k){return k.isInt()},Fraction:function(k){return 1===k.d&&isFinite(k.n)},\"Array | Matrix\":function(k){return(0,q.deepMap)(k,this)}})});a.createIsInteger=c}","~:source","shadow$provide[39] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsInteger = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nvar createIsInteger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _number.isInteger,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsInteger = createIsInteger;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","number","BigNumber","Fraction","createIsInteger"]],"~:compiled-at",1619135723747,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isInteger.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAAlB,CAEIQ,EAAUR,CAAA,CAAQ,EAAR,CAEVS,EAAAA,CAAWT,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAiC,CAAC,CAAA,CAAGG,CAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACzFC,CAAAA,CAAQD,CAAKC,CAAAA,KA+BjB,OAAOA,EAAA,CAlCEH,WAkCF,CAAY,CACjBI,OAAQP,CAAQQ,CAAAA,SADC,CAGjBC,UAAWA,QAAkB,CAACC,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,KAAF,EADwB,CAHhB,CAMjBC,SAAUA,QAAiB,CAACF,CAAD,CAAI,CAC7B,MAAe,EAAf,GAAOA,CAAEG,CAAAA,CAAT,EAAoBC,QAAA,CAASJ,CAAEK,CAAAA,CAAX,CADS,CANd,CASjB,iBAAkBC,QAAoB,CAACN,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,CAAYkB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4B,IAA5B,CADiC,CATzB,CAAZ,CAhCsF,CAA1D,CA8CrChB,EAAQI,CAAAA,eAAR,CAA0BA,CA9DmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isInteger.js\"],\n\"sourcesContent\":[\"shadow$provide[39] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsInteger = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'isInteger';\\nvar dependencies = ['typed'];\\nvar createIsInteger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is an integer number.\\n   * The function supports `number`, `BigNumber`, and `Fraction`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isInteger(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isInteger(2)                     // returns true\\n   *    math.isInteger(0)                     // returns true\\n   *    math.isInteger(0.5)                   // returns false\\n   *    math.isInteger(math.bignumber(500))   // returns true\\n   *    math.isInteger(math.fraction(4))      // returns true\\n   *    math.isInteger('3')                   // returns true\\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\\n   *    math.isInteger(math.complex('2-4i')   // throws an error\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isPositive, isNegative, isZero\\n   *\\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: _number.isInteger,\\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\\n    BigNumber: function BigNumber(x) {\\n      return x.isInt();\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.d === 1 && isFinite(x.n);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsInteger = createIsInteger;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsInteger\",\"_collection\",\"_number\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"isInteger\",\"BigNumber\",\"x\",\"isInt\",\"Fraction\",\"d\",\"isFinite\",\"n\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]