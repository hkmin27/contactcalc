["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js"],"~:js","shadow$provide[74]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAddScalar=void 0;c=b(25);var q=b(50);b=(0,c.factory)(\"addScalar\",[\"typed\"],function(f){f=f.typed;return f(\"addScalar\",{\"number, number\":q.addNumber,\"Complex, Complex\":function(u,k){return u.add(k)},\"BigNumber, BigNumber\":function(u,k){return u.plus(k)},\"Fraction, Fraction\":function(u,k){return u.add(k)},\"Unit, Unit\":function(u,k){if(null===u.value||void 0===u.value)throw Error(\"Parameter x contains a unit with undefined value\");\nif(null===k.value||void 0===k.value)throw Error(\"Parameter y contains a unit with undefined value\");if(!u.equalBase(k))throw Error(\"Units do not match\");u=u.clone();u.value=this(u.value,k.value);u.fixPrefix=!1;return u}})});a.createAddScalar=b}","~:source","shadow$provide[74] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = this(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n});\nexports.createAddScalar = createAddScalar;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createAddScalar","__esModule","value","fixPrefix"]],"~:compiled-at",1619135723768,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$addScalar.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAAiC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACzFC,CAAAA,CAAQD,CAAKC,CAAAA,KAcjB,OAAOA,EAAA,CAjBEH,WAiBF,CAAY,CACjB,iBAAkBF,CAAOM,CAAAA,SADR,CAEjB,mBAAoBC,QAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CADyC,CAFjC,CAKjB,uBAAwBE,QAA2B,CAACH,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEI,CAAAA,IAAF,CAAOH,CAAP,CADiD,CALzC,CAQjB,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CAD6C,CARrC,CAWjB,aAAcK,QAAiB,CAACN,CAAD,CAAIC,CAAJ,CAAO,CACpC,GAAgB,IAAhB,GAAID,CAAEX,CAAAA,KAAN,EAAoCkB,IAAAA,EAApC,GAAwBP,CAAEX,CAAAA,KAA1B,CAA+C,KAAUmB,MAAJ,CAAU,kDAAV,CAAN;AAC/C,GAAgB,IAAhB,GAAIP,CAAEZ,CAAAA,KAAN,EAAoCkB,IAAAA,EAApC,GAAwBN,CAAEZ,CAAAA,KAA1B,CAA+C,KAAUmB,MAAJ,CAAU,kDAAV,CAAN,CAC/C,GAAI,CAACR,CAAES,CAAAA,SAAF,CAAYR,CAAZ,CAAL,CAAqB,KAAUO,MAAJ,CAAU,oBAAV,CAAN,CACjBE,CAAAA,CAAMV,CAAEW,CAAAA,KAAF,EACVD,EAAIrB,CAAAA,KAAJ,CAAY,IAAA,CAAKqB,CAAIrB,CAAAA,KAAT,CAAgBY,CAAEZ,CAAAA,KAAlB,CACZqB,EAAIE,CAAAA,SAAJ,CAAgB,CAAA,CAChB,OAAOF,EAP6B,CAXrB,CAAZ,CAfsF,CAA1D,CAqCrCxB,EAAQI,CAAAA,eAAR,CAA0BA,CAnDmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js\"],\n\"sourcesContent\":[\"shadow$provide[74] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAddScalar = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'addScalar';\\nvar dependencies = ['typed'];\\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Add two scalar values, `x + y`.\\n   * This function is meant for internal use: it is used by the public function\\n   * `add`\\n   *\\n   * This function does not support collections (Array or Matrix).\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\\n   * @private\\n   */\\n  return typed(name, {\\n    'number, number': _index.addNumber,\\n    'Complex, Complex': function ComplexComplex(x, y) {\\n      return x.add(y);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\\n      return x.plus(y);\\n    },\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return x.add(y);\\n    },\\n    'Unit, Unit': function UnitUnit(x, y) {\\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\\n      if (!x.equalBase(y)) throw new Error('Units do not match');\\n      var res = x.clone();\\n      res.value = this(res.value, y.value);\\n      res.fixPrefix = false;\\n      return res;\\n    }\\n  });\\n});\\nexports.createAddScalar = createAddScalar;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAddScalar\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"addNumber\",\"ComplexComplex\",\"x\",\"y\",\"add\",\"BigNumberBigNumber\",\"plus\",\"FractionFraction\",\"UnitUnit\",\"undefined\",\"Error\",\"equalBase\",\"res\",\"clone\",\"fixPrefix\"]\n}\n"]