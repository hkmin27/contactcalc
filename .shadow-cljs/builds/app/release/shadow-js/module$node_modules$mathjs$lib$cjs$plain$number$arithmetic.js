["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/plain/number/arithmetic.js"],"~:js","shadow$provide[40]=function(c,b,y,a){function q(T){return Math.abs(T)}function f(T,Y){return T+Y}function u(T,Y){return T-Y}function k(T,Y){return T*Y}function t(T,Y){return T/Y}function p(T){return-T}function g(T){return T}function d(T){return(0,Q.cbrt)(T)}function l(T){return Math.ceil(T)}function h(T){return T*T*T}function n(T){return Math.exp(T)}function r(T){return(0,Q.expm1)(T)}function v(T){return 0<T?Math.floor(T):Math.ceil(T)}function C(T){return Math.floor(T)}function z(T,Y){if(!(0,Q.isInteger)(T)||\n!(0,Q.isInteger)(Y))throw Error(\"Parameters in function gcd must be integer numbers\");for(var ca;0!==Y;)ca=T%Y,T=Y,Y=ca;return 0>T?-T:T}function w(T,Y){if(!(0,Q.isInteger)(T)||!(0,Q.isInteger)(Y))throw Error(\"Parameters in function lcm must be integer numbers\");if(0===T||0===Y)return 0;for(var ca,ka=T*Y;0!==Y;)ca=Y,Y=T%ca,T=ca;return Math.abs(ka/T)}function B(T){return Math.log(T)}function x(T){return(0,Q.log10)(T)}function D(T){return(0,Q.log2)(T)}function F(T){return(0,Q.log1p)(T)}function E(T,\nY){if(0<Y)return T-Y*Math.floor(T/Y);if(0===Y)return T;throw Error(\"Cannot calculate mod for a negative divisor\");}function G(T,Y){var ca=0>Y;ca&&(Y=-Y);if(0===Y)throw Error(\"Root must be non-zero\");if(0>T&&1!==Math.abs(Y)%2)throw Error(\"Root must be odd when a is negative.\");if(0===T)return ca?Infinity:0;if(!isFinite(T))return ca?0:T;Y=Math.pow(Math.abs(T),1/Y);Y=0>T?-Y:Y;return ca?1/Y:Y}function I(T){return(0,Q.sign)(T)}function L(T){return Math.sqrt(T)}function M(T){return T*T}function S(T,Y){var ca=\n0,ka=1,ha=1,wa=0;if(!(0,Q.isInteger)(T)||!(0,Q.isInteger)(Y))throw Error(\"Parameters in function xgcd must be integer numbers\");for(;Y;){var Ia=Math.floor(T/Y);var Ha=T-Ia*Y;T=ca;ca=ka-Ia*ca;ka=T;T=ha;ha=wa-Ia*ha;wa=T;T=Y;Y=Ha}return 0>T?[-T,-ka,-wa]:[T,T?ka:0,wa]}function P(T,Y){return 1>T*T&&Infinity===Y||1<T*T&&-Infinity===Y?0:Math.pow(T,Y)}function R(T){var Y=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return parseFloat((0,Q.toFixed)(T,Y))}function ba(T){return Math.abs(T)}Object.defineProperty(a,\n\"__esModule\",{value:!0});a.absNumber=q;a.addNumber=f;a.subtractNumber=u;a.multiplyNumber=k;a.divideNumber=t;a.unaryMinusNumber=p;a.unaryPlusNumber=g;a.cbrtNumber=d;a.ceilNumber=l;a.cubeNumber=h;a.expNumber=n;a.expm1Number=r;a.fixNumber=v;a.floorNumber=C;a.gcdNumber=z;a.lcmNumber=w;a.logNumber=B;a.log10Number=x;a.log2Number=D;a.log1pNumber=F;a.modNumber=E;a.nthRootNumber=G;a.signNumber=I;a.sqrtNumber=L;a.squareNumber=M;a.xgcdNumber=S;a.powNumber=P;a.roundNumber=R;a.normNumber=ba;var Q=b(19);q.signature=\n\"number\";f.signature=\"number, number\";u.signature=\"number, number\";k.signature=\"number, number\";t.signature=\"number, number\";p.signature=\"number\";g.signature=\"number\";d.signature=\"number\";l.signature=\"number\";h.signature=\"number\";n.signature=\"number\";r.signature=\"number\";v.signature=\"number\";C.signature=\"number\";z.signature=\"number, number\";w.signature=\"number, number\";B.signature=\"number\";x.signature=\"number\";D.signature=\"number\";F.signature=\"number\";E.signature=\"number, number\";G.signature=\"number, number\";\nI.signature=\"number\";L.signature=\"number\";M.signature=\"number\";S.signature=\"number, number\";P.signature=\"number, number\";R.signature=\"number, number\";ba.signature=\"number\"}","~:source","shadow$provide[40] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.absNumber = absNumber;\nexports.addNumber = addNumber;\nexports.subtractNumber = subtractNumber;\nexports.multiplyNumber = multiplyNumber;\nexports.divideNumber = divideNumber;\nexports.unaryMinusNumber = unaryMinusNumber;\nexports.unaryPlusNumber = unaryPlusNumber;\nexports.cbrtNumber = cbrtNumber;\nexports.ceilNumber = ceilNumber;\nexports.cubeNumber = cubeNumber;\nexports.expNumber = expNumber;\nexports.expm1Number = expm1Number;\nexports.fixNumber = fixNumber;\nexports.floorNumber = floorNumber;\nexports.gcdNumber = gcdNumber;\nexports.lcmNumber = lcmNumber;\nexports.logNumber = logNumber;\nexports.log10Number = log10Number;\nexports.log2Number = log2Number;\nexports.log1pNumber = log1pNumber;\nexports.modNumber = modNumber;\nexports.nthRootNumber = nthRootNumber;\nexports.signNumber = signNumber;\nexports.sqrtNumber = sqrtNumber;\nexports.squareNumber = squareNumber;\nexports.xgcdNumber = xgcdNumber;\nexports.powNumber = powNumber;\nexports.roundNumber = roundNumber;\nexports.normNumber = normNumber;\n\nvar _number = require(\"../../utils/number.js\");\n\nvar n1 = 'number';\nvar n2 = 'number, number';\n\nfunction absNumber(a) {\n  return Math.abs(a);\n}\n\nabsNumber.signature = n1;\n\nfunction addNumber(a, b) {\n  return a + b;\n}\n\naddNumber.signature = n2;\n\nfunction subtractNumber(a, b) {\n  return a - b;\n}\n\nsubtractNumber.signature = n2;\n\nfunction multiplyNumber(a, b) {\n  return a * b;\n}\n\nmultiplyNumber.signature = n2;\n\nfunction divideNumber(a, b) {\n  return a / b;\n}\n\ndivideNumber.signature = n2;\n\nfunction unaryMinusNumber(x) {\n  return -x;\n}\n\nunaryMinusNumber.signature = n1;\n\nfunction unaryPlusNumber(x) {\n  return x;\n}\n\nunaryPlusNumber.signature = n1;\n\nfunction cbrtNumber(x) {\n  return (0, _number.cbrt)(x);\n}\n\ncbrtNumber.signature = n1;\n\nfunction ceilNumber(x) {\n  return Math.ceil(x);\n}\n\nceilNumber.signature = n1;\n\nfunction cubeNumber(x) {\n  return x * x * x;\n}\n\ncubeNumber.signature = n1;\n\nfunction expNumber(x) {\n  return Math.exp(x);\n}\n\nexpNumber.signature = n1;\n\nfunction expm1Number(x) {\n  return (0, _number.expm1)(x);\n}\n\nexpm1Number.signature = n1;\n\nfunction fixNumber(x) {\n  return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nfixNumber.signature = n1;\n\nfunction floorNumber(x) {\n  return Math.floor(x);\n}\n\nfloorNumber.signature = n1;\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\n\nfunction gcdNumber(a, b) {\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\n\ngcdNumber.signature = n2;\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\n\nfunction lcmNumber(a, b) {\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\n\nlcmNumber.signature = n2;\n/**\n * Calculate the logarithm of a value.\n * @param {number} x\n * @return {number}\n */\n\nfunction logNumber(x) {\n  return Math.log(x);\n}\n\nlogNumber.signature = n1;\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nfunction log10Number(x) {\n  return (0, _number.log10)(x);\n}\n\nlog10Number.signature = n1;\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nfunction log2Number(x) {\n  return (0, _number.log2)(x);\n}\n\nlog2Number.signature = n1;\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\n\nfunction log1pNumber(x) {\n  return (0, _number.log1p)(x);\n}\n\nlog1pNumber.signature = n1;\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\n\nfunction modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\n\nmodNumber.signature = n2;\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} root\n * @private\n */\n\nfunction nthRootNumber(a, root) {\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nnthRootNumber.signature = n2;\n\nfunction signNumber(x) {\n  return (0, _number.sign)(x);\n}\n\nsignNumber.signature = n1;\n\nfunction sqrtNumber(x) {\n  return Math.sqrt(x);\n}\n\nsqrtNumber.signature = n1;\n\nfunction squareNumber(x) {\n  return x * x;\n}\n\nsquareNumber.signature = n1;\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\n\nfunction xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\n\nxgcdNumber.signature = n2;\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\n\nfunction powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\n\npowNumber.signature = n2;\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\n\nfunction roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return parseFloat((0, _number.toFixed)(value, decimals));\n}\n\nroundNumber.signature = n2;\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\n\nfunction normNumber(x) {\n  return Math.abs(x);\n}\n\nnormNumber.signature = n1;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number"]],"~:properties",["^5",["lcmNumber","normNumber","log10Number","addNumber","unaryPlusNumber","nthRootNumber","unaryMinusNumber","expm1Number","__esModule","multiplyNumber","modNumber","cbrtNumber","floorNumber","logNumber","value","powNumber","squareNumber","signature","signNumber","divideNumber","absNumber","log2Number","gcdNumber","sqrtNumber","fixNumber","xgcdNumber","cubeNumber","roundNumber","subtractNumber","expNumber","ceilNumber","log1pNumber"]],"~:compiled-at",1619135723748,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$plain$number$arithmetic.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/plain/number/arithmetic.js\"],\n\"sourcesContent\":[\"shadow$provide[40] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.absNumber = absNumber;\\nexports.addNumber = addNumber;\\nexports.subtractNumber = subtractNumber;\\nexports.multiplyNumber = multiplyNumber;\\nexports.divideNumber = divideNumber;\\nexports.unaryMinusNumber = unaryMinusNumber;\\nexports.unaryPlusNumber = unaryPlusNumber;\\nexports.cbrtNumber = cbrtNumber;\\nexports.ceilNumber = ceilNumber;\\nexports.cubeNumber = cubeNumber;\\nexports.expNumber = expNumber;\\nexports.expm1Number = expm1Number;\\nexports.fixNumber = fixNumber;\\nexports.floorNumber = floorNumber;\\nexports.gcdNumber = gcdNumber;\\nexports.lcmNumber = lcmNumber;\\nexports.logNumber = logNumber;\\nexports.log10Number = log10Number;\\nexports.log2Number = log2Number;\\nexports.log1pNumber = log1pNumber;\\nexports.modNumber = modNumber;\\nexports.nthRootNumber = nthRootNumber;\\nexports.signNumber = signNumber;\\nexports.sqrtNumber = sqrtNumber;\\nexports.squareNumber = squareNumber;\\nexports.xgcdNumber = xgcdNumber;\\nexports.powNumber = powNumber;\\nexports.roundNumber = roundNumber;\\nexports.normNumber = normNumber;\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar n1 = 'number';\\nvar n2 = 'number, number';\\n\\nfunction absNumber(a) {\\n  return Math.abs(a);\\n}\\n\\nabsNumber.signature = n1;\\n\\nfunction addNumber(a, b) {\\n  return a + b;\\n}\\n\\naddNumber.signature = n2;\\n\\nfunction subtractNumber(a, b) {\\n  return a - b;\\n}\\n\\nsubtractNumber.signature = n2;\\n\\nfunction multiplyNumber(a, b) {\\n  return a * b;\\n}\\n\\nmultiplyNumber.signature = n2;\\n\\nfunction divideNumber(a, b) {\\n  return a / b;\\n}\\n\\ndivideNumber.signature = n2;\\n\\nfunction unaryMinusNumber(x) {\\n  return -x;\\n}\\n\\nunaryMinusNumber.signature = n1;\\n\\nfunction unaryPlusNumber(x) {\\n  return x;\\n}\\n\\nunaryPlusNumber.signature = n1;\\n\\nfunction cbrtNumber(x) {\\n  return (0, _number.cbrt)(x);\\n}\\n\\ncbrtNumber.signature = n1;\\n\\nfunction ceilNumber(x) {\\n  return Math.ceil(x);\\n}\\n\\nceilNumber.signature = n1;\\n\\nfunction cubeNumber(x) {\\n  return x * x * x;\\n}\\n\\ncubeNumber.signature = n1;\\n\\nfunction expNumber(x) {\\n  return Math.exp(x);\\n}\\n\\nexpNumber.signature = n1;\\n\\nfunction expm1Number(x) {\\n  return (0, _number.expm1)(x);\\n}\\n\\nexpm1Number.signature = n1;\\n\\nfunction fixNumber(x) {\\n  return x > 0 ? Math.floor(x) : Math.ceil(x);\\n}\\n\\nfixNumber.signature = n1;\\n\\nfunction floorNumber(x) {\\n  return Math.floor(x);\\n}\\n\\nfloorNumber.signature = n1;\\n/**\\n * Calculate gcd for numbers\\n * @param {number} a\\n * @param {number} b\\n * @returns {number} Returns the greatest common denominator of a and b\\n */\\n\\nfunction gcdNumber(a, b) {\\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\\n    throw new Error('Parameters in function gcd must be integer numbers');\\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\\n\\n\\n  var r;\\n\\n  while (b !== 0) {\\n    r = a % b;\\n    a = b;\\n    b = r;\\n  }\\n\\n  return a < 0 ? -a : a;\\n}\\n\\ngcdNumber.signature = n2;\\n/**\\n * Calculate lcm for two numbers\\n * @param {number} a\\n * @param {number} b\\n * @returns {number} Returns the least common multiple of a and b\\n */\\n\\nfunction lcmNumber(a, b) {\\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\\n    throw new Error('Parameters in function lcm must be integer numbers');\\n  }\\n\\n  if (a === 0 || b === 0) {\\n    return 0;\\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\\n  // evaluate lcm here inline to reduce overhead\\n\\n\\n  var t;\\n  var prod = a * b;\\n\\n  while (b !== 0) {\\n    t = b;\\n    b = a % t;\\n    a = t;\\n  }\\n\\n  return Math.abs(prod / a);\\n}\\n\\nlcmNumber.signature = n2;\\n/**\\n * Calculate the logarithm of a value.\\n * @param {number} x\\n * @return {number}\\n */\\n\\nfunction logNumber(x) {\\n  return Math.log(x);\\n}\\n\\nlogNumber.signature = n1;\\n/**\\n * Calculate the 10-base logarithm of a number\\n * @param {number} x\\n * @return {number}\\n */\\n\\nfunction log10Number(x) {\\n  return (0, _number.log10)(x);\\n}\\n\\nlog10Number.signature = n1;\\n/**\\n * Calculate the 2-base logarithm of a number\\n * @param {number} x\\n * @return {number}\\n */\\n\\nfunction log2Number(x) {\\n  return (0, _number.log2)(x);\\n}\\n\\nlog2Number.signature = n1;\\n/**\\n * Calculate the natural logarithm of a `number+1`\\n * @param {number} x\\n * @returns {number}\\n */\\n\\nfunction log1pNumber(x) {\\n  return (0, _number.log1p)(x);\\n}\\n\\nlog1pNumber.signature = n1;\\n/**\\n * Calculate the modulus of two numbers\\n * @param {number} x\\n * @param {number} y\\n * @returns {number} res\\n * @private\\n */\\n\\nfunction modNumber(x, y) {\\n  if (y > 0) {\\n    // We don't use JavaScript's % operator here as this doesn't work\\n    // correctly for x < 0 and x === 0\\n    // see https://en.wikipedia.org/wiki/Modulo_operation\\n    return x - y * Math.floor(x / y);\\n  } else if (y === 0) {\\n    return x;\\n  } else {\\n    // y < 0\\n    // TODO: implement mod for a negative divisor\\n    throw new Error('Cannot calculate mod for a negative divisor');\\n  }\\n}\\n\\nmodNumber.signature = n2;\\n/**\\n * Calculate the nth root of a, solve x^root == a\\n * http://rosettacode.org/wiki/Nth_root#JavaScript\\n * @param {number} a\\n * @param {number} root\\n * @private\\n */\\n\\nfunction nthRootNumber(a, root) {\\n  var inv = root < 0;\\n\\n  if (inv) {\\n    root = -root;\\n  }\\n\\n  if (root === 0) {\\n    throw new Error('Root must be non-zero');\\n  }\\n\\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\\n    throw new Error('Root must be odd when a is negative.');\\n  } // edge cases zero and infinity\\n\\n\\n  if (a === 0) {\\n    return inv ? Infinity : 0;\\n  }\\n\\n  if (!isFinite(a)) {\\n    return inv ? 0 : a;\\n  }\\n\\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\\n  // so (-1) ^ (1/root) = -1\\n\\n  x = a < 0 ? -x : x;\\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\\n  // Newton's method has some well-known problems at times:\\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\\n\\n  /*\\n  let x = 1 // Initial guess\\n  let xPrev = 1\\n  let i = 0\\n  const iMax = 10000\\n  do {\\n    const delta = (a / Math.pow(x, root - 1) - x) / root\\n    xPrev = x\\n    x = x + delta\\n    i++\\n  }\\n  while (xPrev !== x && i < iMax)\\n   if (xPrev !== x) {\\n    throw new Error('Function nthRoot failed to converge')\\n  }\\n   return inv ? 1 / x : x\\n  */\\n}\\n\\nnthRootNumber.signature = n2;\\n\\nfunction signNumber(x) {\\n  return (0, _number.sign)(x);\\n}\\n\\nsignNumber.signature = n1;\\n\\nfunction sqrtNumber(x) {\\n  return Math.sqrt(x);\\n}\\n\\nsqrtNumber.signature = n1;\\n\\nfunction squareNumber(x) {\\n  return x * x;\\n}\\n\\nsquareNumber.signature = n1;\\n/**\\n * Calculate xgcd for two numbers\\n * @param {number} a\\n * @param {number} b\\n * @return {number} result\\n * @private\\n */\\n\\nfunction xgcdNumber(a, b) {\\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\\n  var t; // used to swap two variables\\n\\n  var q; // quotient\\n\\n  var r; // remainder\\n\\n  var x = 0;\\n  var lastx = 1;\\n  var y = 1;\\n  var lasty = 0;\\n\\n  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {\\n    throw new Error('Parameters in function xgcd must be integer numbers');\\n  }\\n\\n  while (b) {\\n    q = Math.floor(a / b);\\n    r = a - q * b;\\n    t = x;\\n    x = lastx - q * x;\\n    lastx = t;\\n    t = y;\\n    y = lasty - q * y;\\n    lasty = t;\\n    a = b;\\n    b = r;\\n  }\\n\\n  var res;\\n\\n  if (a < 0) {\\n    res = [-a, -lastx, -lasty];\\n  } else {\\n    res = [a, a ? lastx : 0, lasty];\\n  }\\n\\n  return res;\\n}\\n\\nxgcdNumber.signature = n2;\\n/**\\n * Calculates the power of x to y, x^y, for two numbers.\\n * @param {number} x\\n * @param {number} y\\n * @return {number} res\\n */\\n\\nfunction powNumber(x, y) {\\n  // x^Infinity === 0 if -1 < x < 1\\n  // A real number 0 is returned instead of complex(0)\\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\\n    return 0;\\n  }\\n\\n  return Math.pow(x, y);\\n}\\n\\npowNumber.signature = n2;\\n/**\\n * round a number to the given number of decimals, or to zero if decimals is\\n * not provided\\n * @param {number} value\\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\\n * @return {number} roundedValue\\n */\\n\\nfunction roundNumber(value) {\\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n  return parseFloat((0, _number.toFixed)(value, decimals));\\n}\\n\\nroundNumber.signature = n2;\\n/**\\n * Calculate the norm of a number, the absolute value.\\n * @param {number} x\\n * @return {number}\\n */\\n\\nfunction normNumber(x) {\\n  return Math.abs(x);\\n}\\n\\nnormNumber.signature = n1;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"absNumber\",\"a\",\"Math\",\"abs\",\"addNumber\",\"b\",\"subtractNumber\",\"multiplyNumber\",\"divideNumber\",\"unaryMinusNumber\",\"x\",\"unaryPlusNumber\",\"cbrtNumber\",\"_number\",\"cbrt\",\"ceilNumber\",\"ceil\",\"cubeNumber\",\"expNumber\",\"exp\",\"expm1Number\",\"expm1\",\"fixNumber\",\"floor\",\"floorNumber\",\"gcdNumber\",\"isInteger\",\"Error\",\"r\",\"lcmNumber\",\"t\",\"prod\",\"logNumber\",\"log\",\"log10Number\",\"log10\",\"log2Number\",\"log2\",\"log1pNumber\",\"log1p\",\"modNumber\",\"y\",\"nthRootNumber\",\"root\",\"inv\",\"Infinity\",\"isFinite\",\"pow\",\"signNumber\",\"sign\",\"sqrtNumber\",\"sqrt\",\"squareNumber\",\"xgcdNumber\",\"lastx\",\"lasty\",\"q\",\"res\",\"powNumber\",\"roundNumber\",\"value\",\"decimals\",\"arguments\",\"length\",\"undefined\",\"parseFloat\",\"toFixed\",\"normNumber\",\"Object\",\"defineProperty\",\"signature\",\"n1\",\"n2\"]\n}\n"]