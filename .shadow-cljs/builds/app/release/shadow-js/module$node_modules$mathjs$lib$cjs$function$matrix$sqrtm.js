["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js"],"~:js","shadow$provide[526]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSqrtm=void 0;var q=b(14),f=b(21),u=b(24);c=b(25);c=(0,c.factory)(\"sqrtm\",\"typed abs add multiply sqrt subtract inv size max identity\".split(\" \"),function(k){var t=k.typed,p=k.abs,g=k.add,d=k.multiply,l=k.sqrt,h=k.subtract,n=k.inv,r=k.size,v=k.max,C=k.identity;return t(\"sqrtm\",{\"Array | Matrix\":function(z){var w=(0,q.isMatrix)(z)?z.size():(0,u.arraySize)(z);switch(w.length){case 1:if(1===w[0])return l(z);\nthrow new RangeError(\"Matrix must be square (size: \"+(0,f.format)(w)+\")\");case 2:if(w[0]===w[1]){w=0;var B=z;z=C(r(z));do{var x=B;B=d(.5,g(x,n(z)));z=d(.5,g(z,n(x)));x=v(p(h(B,x)));if(1E-6<x&&1E3<++w)throw Error(\"computing square root of matrix: iterative method could not converge\");}while(1E-6<x);return B}throw new RangeError(\"Matrix must be square (size: \"+(0,f.format)(w)+\")\");default:throw new RangeError(\"Matrix must be at most two dimensional (size: \"+(0,f.format)(w)+\")\");}}})});a.createSqrtm=\nc}","~:source","shadow$provide[526] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrtm = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nvar createSqrtm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      multiply = _ref.multiply,\n      sqrt = _ref.sqrt,\n      subtract = _ref.subtract,\n      inv = _ref.inv,\n      size = _ref.size,\n      max = _ref.max,\n      identity = _ref.identity;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n\n    return Y;\n  }\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);\n\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return sqrt(A);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n});\nexports.createSqrtm = createSqrtm;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createSqrtm"]],"~:compiled-at",1619135724019,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$sqrtm.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js\"],\n\"sourcesContent\":[\"shadow$provide[526] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSqrtm = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'sqrtm';\\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\\nvar createSqrtm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      abs = _ref.abs,\\n      add = _ref.add,\\n      multiply = _ref.multiply,\\n      sqrt = _ref.sqrt,\\n      subtract = _ref.subtract,\\n      inv = _ref.inv,\\n      size = _ref.size,\\n      max = _ref.max,\\n      identity = _ref.identity;\\n  var _maxIterations = 1e3;\\n  var _tolerance = 1e-6;\\n  /**\\n   * Calculate the principal square root matrix using the Denman\\u2013Beavers iterative method\\n   *\\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman\\u2013Beavers_iteration\\n   *\\n   * @param  {Array | Matrix} A   The square matrix `A`\\n   * @return {Array | Matrix}     The principal square root of matrix `A`\\n   * @private\\n   */\\n\\n  function _denmanBeavers(A) {\\n    var error;\\n    var iterations = 0;\\n    var Y = A;\\n    var Z = identity(size(A));\\n\\n    do {\\n      var Yk = Y;\\n      Y = multiply(0.5, add(Yk, inv(Z)));\\n      Z = multiply(0.5, add(Z, inv(Yk)));\\n      error = max(abs(subtract(Y, Yk)));\\n\\n      if (error > _tolerance && ++iterations > _maxIterations) {\\n        throw new Error('computing square root of matrix: iterative method could not converge');\\n      }\\n    } while (error > _tolerance);\\n\\n    return Y;\\n  }\\n  /**\\n   * Calculate the principal square root of a square matrix.\\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\\n   *\\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\\n   *\\n   * Syntax:\\n   *\\n   *     X = math.sqrtm(A)\\n   *\\n   * Examples:\\n   *\\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\\n   *\\n   * See also:\\n   *\\n   *     sqrt, pow\\n   *\\n   * @param  {Array | Matrix} A   The square matrix `A`\\n   * @return {Array | Matrix}     The principal square root of matrix `A`\\n   */\\n\\n\\n  return typed(name, {\\n    'Array | Matrix': function ArrayMatrix(A) {\\n      var size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);\\n\\n      switch (size.length) {\\n        case 1:\\n          // Single element Array | Matrix\\n          if (size[0] === 1) {\\n            return sqrt(A);\\n          } else {\\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n          }\\n\\n        case 2:\\n          {\\n            // Two-dimensional Array | Matrix\\n            var rows = size[0];\\n            var cols = size[1];\\n\\n            if (rows === cols) {\\n              return _denmanBeavers(A);\\n            } else {\\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n            }\\n          }\\n\\n        default:\\n          // Multi dimensional array\\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\\n      }\\n    }\\n  });\\n});\\nexports.createSqrtm = createSqrtm;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSqrtm\",\"_is\",\"_string\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"abs\",\"add\",\"multiply\",\"sqrt\",\"subtract\",\"inv\",\"size\",\"max\",\"identity\",\"ArrayMatrix\",\"A\",\"isMatrix\",\"arraySize\",\"length\",\"RangeError\",\"format\",\"rows\",\"cols\",\"iterations\",\"Y\",\"Z\",\"Yk\",\"error\",\"_tolerance\",\"_maxIterations\",\"Error\"]\n}\n"]