["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/function/evaluate.js"],"~:js","shadow$provide[273]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createEvaluate=void 0;var q=b(38);c=b(25);c=(0,c.factory)(\"evaluate\",[\"typed\",\"parse\"],function(f){var u=f.typed,k=f.parse;return u(\"evaluate\",{string:function(t){return k(t).compile().evaluate({})},\"string, Object\":function(t,p){return k(t).compile().evaluate(p)},\"Array | Matrix\":function(t){var p={};return(0,q.deepMap)(t,function(g){return k(g).compile().evaluate(p)})},\"Array | Matrix, Object\":function(t,p){return(0,\nq.deepMap)(t,function(g){return k(g).compile().evaluate(p)})}})});a.createEvaluate=c}","~:source","shadow$provide[273] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEvaluate = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nvar createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = {};\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});\nexports.createEvaluate = createEvaluate;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","__esModule","value","createEvaluate"]],"~:compiled-at",1619135723974,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$function$evaluate.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE9B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAgC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,CAAC,OAADA,CAAU,OAAVA,CACiB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACxFC,EAAQD,CAAKC,CAAAA,KAD2E,CAExFC,EAAQF,CAAKE,CAAAA,KAkCjB,OAAOD,EAAA,CAtCEH,UAsCF,CAAY,CACjBK,OAAQA,QAAe,CAACC,CAAD,CAAO,CAE5B,MAAOF,EAAA,CAAME,CAAN,CAAYC,CAAAA,OAAZ,EAAsBC,CAAAA,QAAtB,CADKC,EACL,CAFqB,CADb,CAKjB,iBAAkBC,QAAqB,CAACJ,CAAD,CAAOG,CAAP,CAAc,CACnD,MAAOL,EAAA,CAAME,CAAN,CAAYC,CAAAA,OAAZ,EAAsBC,CAAAA,QAAtB,CAA+BC,CAA/B,CAD4C,CALpC,CAQjB,iBAAkBE,QAAoB,CAACL,CAAD,CAAO,CAC3C,IAAIG,EAAQ,EACZ,OAAO,CAAC,CAAA,CAAGZ,CAAYe,CAAAA,OAAhB,EAAyBN,CAAzB,CAA+B,QAAS,CAACO,CAAD,CAAQ,CACrD,MAAOT,EAAA,CAAMS,CAAN,CAAaN,CAAAA,OAAb,EAAuBC,CAAAA,QAAvB,CAAgCC,CAAhC,CAD8C,CAAhD,CAFoC,CAR5B,CAcjB,yBAA0BK,QAA0B,CAACR,CAAD,CAAOG,CAAP,CAAc,CAChE,MAAO,CAAC,CAAA;AAAGZ,CAAYe,CAAAA,OAAhB,EAAyBN,CAAzB,CAA+B,QAAS,CAACO,CAAD,CAAQ,CACrD,MAAOT,EAAA,CAAMS,CAAN,CAAaN,CAAAA,OAAb,EAAuBC,CAAAA,QAAvB,CAAgCC,CAAhC,CAD8C,CAAhD,CADyD,CAdjD,CAAZ,CApCqF,CAA1D,CAyDpCjB,EAAQI,CAAAA,cAAR,CAAyBA,CAvEqC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/function/evaluate.js\"],\n\"sourcesContent\":[\"shadow$provide[273] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createEvaluate = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'evaluate';\\nvar dependencies = ['typed', 'parse'];\\nvar createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      parse = _ref.parse;\\n\\n  /**\\n   * Evaluate an expression.\\n   *\\n   * Note the evaluating arbitrary expressions may involve security risks,\\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\\n   *\\n   * Syntax:\\n   *\\n   *     math.evaluate(expr)\\n   *     math.evaluate(expr, scope)\\n   *     math.evaluate([expr1, expr2, expr3, ...])\\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\\n   *\\n   * Example:\\n   *\\n   *     math.evaluate('(2+3)/4')                // 1.25\\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\\n   *     math.evaluate('sqrt(-4)')               // 2i\\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\\n   *\\n   *     let scope = {a:3, b:4}\\n   *     math.evaluate('a * b', scope)           // 12\\n   *\\n   * See also:\\n   *\\n   *    parse, compile\\n   *\\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\\n   * @param {Object} [scope]                    Scope to read/write variables\\n   * @return {*} The result of the expression\\n   * @throws {Error}\\n   */\\n  return typed(name, {\\n    string: function string(expr) {\\n      var scope = {};\\n      return parse(expr).compile().evaluate(scope);\\n    },\\n    'string, Object': function stringObject(expr, scope) {\\n      return parse(expr).compile().evaluate(scope);\\n    },\\n    'Array | Matrix': function ArrayMatrix(expr) {\\n      var scope = {};\\n      return (0, _collection.deepMap)(expr, function (entry) {\\n        return parse(entry).compile().evaluate(scope);\\n      });\\n    },\\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\\n      return (0, _collection.deepMap)(expr, function (entry) {\\n        return parse(entry).compile().evaluate(scope);\\n      });\\n    }\\n  });\\n});\\nexports.createEvaluate = createEvaluate;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createEvaluate\",\"_collection\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"parse\",\"string\",\"expr\",\"compile\",\"evaluate\",\"scope\",\"stringObject\",\"ArrayMatrix\",\"deepMap\",\"entry\",\"ArrayMatrixObject\"]\n}\n"]