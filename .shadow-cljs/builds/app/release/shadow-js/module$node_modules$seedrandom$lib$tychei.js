["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/seedrandom/lib/tychei.js"],"~:js","shadow$provide[549]=function(c,b,y,a){(function(q,f,u){function k(g){var d=this,l=\"\";d.next=function(){var h=d.b,n=d.c,r=d.d,v=d.a;h=h<<25^h>>>7^n;n=n-r|0;r=r<<24^r>>>8^v;v=v-h|0;d.b=h=h<<20^h>>>12^n;d.c=n=n-r|0;d.d=r<<16^n>>>16^v;return d.a=v-h|0};d.a=0;d.b=0;d.c=-1640531527;d.d=1367130551;g===Math.floor(g)?(d.a=g/4294967296|0,d.b=g|0):l+=g;for(g=0;g<l.length+20;g++)d.b^=l.charCodeAt(g)|0,d.next()}function t(g,d){d.a=g.a;d.b=g.b;d.c=g.c;d.d=g.d;return d}function p(g,d){var l=new k(g);g=d&&d.state;\nd=function(){return(l.next()>>>0)/4294967296};d.double=function(){do{var h=l.next()>>>11,n=(l.next()>>>0)/4294967296;h=(h+n)/2097152}while(0===h);return h};d.int32=l.next;d.quick=d;g&&(\"object\"==typeof g&&t(g,l),d.state=function(){return t(l,{})});return d}f&&f.exports?f.exports=p:u&&u.amd?u(function(){return p}):this.tychei=p})(this,\"object\"==typeof y&&y,\"function\"==typeof define&&define)}","~:source","shadow$provide[549] = function(global,require,module,exports) {\n// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["d","next","int32","tychei","a","quick","b","state","double","c"]],"~:compiled-at",1619135724029,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$seedrandom$lib$tychei.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/seedrandom/lib/tychei.js\"],\n\"sourcesContent\":[\"shadow$provide[549] = function(global,require,module,exports) {\\n// A Javascript implementaion of the \\\"Tyche-i\\\" prng algorithm by\\n// Samuel Neves and Filipe Araujo.\\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\\n\\n(function(global, module, define) {\\n\\nfunction XorGen(seed) {\\n  var me = this, strseed = '';\\n\\n  // Set up generator function.\\n  me.next = function() {\\n    var b = me.b, c = me.c, d = me.d, a = me.a;\\n    b = (b << 25) ^ (b >>> 7) ^ c;\\n    c = (c - d) | 0;\\n    d = (d << 24) ^ (d >>> 8) ^ a;\\n    a = (a - b) | 0;\\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\\n    me.c = c = (c - d) | 0;\\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\\n    return me.a = (a - b) | 0;\\n  };\\n\\n  /* The following is non-inverted tyche, which has better internal\\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\\n  me.next = function() {\\n    var a = me.a, b = me.b, c = me.c, d = me.d;\\n    a = (me.a + me.b | 0) >>> 0;\\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\\n    c = me.c + d | 0;\\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\\n    me.a = a = a + b | 0;\\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\\n    me.c = c = c + d | 0;\\n    b = b ^ c;\\n    return me.b = (b << 7 ^ b >>> 25);\\n  }\\n  */\\n\\n  me.a = 0;\\n  me.b = 0;\\n  me.c = 2654435769 | 0;\\n  me.d = 1367130551;\\n\\n  if (seed === Math.floor(seed)) {\\n    // Integer seed.\\n    me.a = (seed / 0x100000000) | 0;\\n    me.b = seed | 0;\\n  } else {\\n    // String seed.\\n    strseed += seed;\\n  }\\n\\n  // Mix in string seed, then discard an initial batch of 64 values.\\n  for (var k = 0; k < strseed.length + 20; k++) {\\n    me.b ^= strseed.charCodeAt(k) | 0;\\n    me.next();\\n  }\\n}\\n\\nfunction copy(f, t) {\\n  t.a = f.a;\\n  t.b = f.b;\\n  t.c = f.c;\\n  t.d = f.d;\\n  return t;\\n};\\n\\nfunction impl(seed, opts) {\\n  var xg = new XorGen(seed),\\n      state = opts && opts.state,\\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\\n  prng.double = function() {\\n    do {\\n      var top = xg.next() >>> 11,\\n          bot = (xg.next() >>> 0) / 0x100000000,\\n          result = (top + bot) / (1 << 21);\\n    } while (result === 0);\\n    return result;\\n  };\\n  prng.int32 = xg.next;\\n  prng.quick = prng;\\n  if (state) {\\n    if (typeof(state) == 'object') copy(state, xg);\\n    prng.state = function() { return copy(xg, {}); }\\n  }\\n  return prng;\\n}\\n\\nif (module && module.exports) {\\n  module.exports = impl;\\n} else if (define && define.amd) {\\n  define(function() { return impl; });\\n} else {\\n  this.tychei = impl;\\n}\\n\\n})(\\n  this,\\n  (typeof module) == 'object' && module,    // present in node.js\\n  (typeof define) == 'function' && define   // present with an AMD loader\\n);\\n\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"define\",\"XorGen\",\"seed\",\"me\",\"strseed\",\"next\",\"me.next\",\"b\",\"c\",\"d\",\"a\",\"Math\",\"floor\",\"k\",\"length\",\"charCodeAt\",\"copy\",\"f\",\"t\",\"impl\",\"opts\",\"xg\",\"state\",\"prng\",\"double\",\"prng.double\",\"top\",\"bot\",\"result\",\"int32\",\"quick\",\"prng.state\",\"amd\",\"tychei\"]\n}\n"]