["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js"],"~:js","shadow$provide[538]=function(c,b,y,a){function q(k){return k.isInteger()&&k.gte(0)}Object.defineProperty(a,\"__esModule\",{value:!0});a.createCombinationsWithRep=void 0;c=b(25);var f=b(19),u=b(42);b=(0,c.factory)(\"combinationsWithRep\",[\"typed\"],function(k){k=k.typed;return k(\"combinationsWithRep\",{\"number, number\":function(t,p){if(!(0,f.isInteger)(t)||0>t)throw new TypeError(\"Positive integer value expected in function combinationsWithRep\");if(!(0,f.isInteger)(p)||0>p)throw new TypeError(\"Positive integer value expected in function combinationsWithRep\");\nif(1>t)throw new TypeError(\"k must be less than or equal to n + k - 1\");return p<t-1?(0,u.product)(t,t+p-1)/(0,u.product)(1,p):(0,u.product)(p+1,t+p-1)/(0,u.product)(1,t-1)},\"BigNumber, BigNumber\":function(t,p){var g,d=new t.constructor(1),l=t.minus(d);if(!q(t)||!q(p))throw new TypeError(\"Positive integer value expected in function combinationsWithRep\");if(t.lt(d))throw new TypeError(\"k must be less than or equal to n + k - 1 in function combinationsWithRep\");t=d;if(p.lt(l))for(g=d;g.lte(l);g=g.plus(d))t=\nt.times(p.plus(g)).dividedBy(g);else for(g=d;g.lte(p);g=g.plus(d))t=t.times(l.plus(g)).dividedBy(g);return t}})});a.createCombinationsWithRep=b}","~:source","shadow$provide[538] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinationsWithRep = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _product = require(\"../../utils/product.js\");\n\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nvar createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities, allowing individual outcomes to be repeated more than once.\n   *\n   * CombinationsWithRep only takes integer arguments.\n   * The following condition must be enforced: k <= n + k -1.\n   *\n   * Syntax:\n   *\n   *     math.combinationsWithRep(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinationsWithRep(7, 5) // returns 462\n   *\n   * See also:\n   *\n   *    combinations, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\n   */\n  return typed(name, {\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n\n      if (k < n - 1) {\n        var _prodrange = (0, _product.product)(n, n + k - 1);\n\n        return _prodrange / (0, _product.product)(1, k);\n      }\n\n      var prodrange = (0, _product.product)(k + 1, n + k - 1);\n      return prodrange / (0, _product.product)(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    }\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinationsWithRep = createCombinationsWithRep;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$product","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createCombinationsWithRep"]],"~:compiled-at",1619135724025,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$combinationsWithRep.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js\"],\n\"sourcesContent\":[\"shadow$provide[538] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCombinationsWithRep = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _product = require(\\\"../../utils/product.js\\\");\\n\\nvar name = 'combinationsWithRep';\\nvar dependencies = ['typed'];\\nvar createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\\n   * possibilities, allowing individual outcomes to be repeated more than once.\\n   *\\n   * CombinationsWithRep only takes integer arguments.\\n   * The following condition must be enforced: k <= n + k -1.\\n   *\\n   * Syntax:\\n   *\\n   *     math.combinationsWithRep(n, k)\\n   *\\n   * Examples:\\n   *\\n   *    math.combinationsWithRep(7, 5) // returns 462\\n   *\\n   * See also:\\n   *\\n   *    combinations, permutations, factorial\\n   *\\n   * @param {number | BigNumber} n    Total number of objects in the set\\n   * @param {number | BigNumber} k    Number of objects in the subset\\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\\n   */\\n  return typed(name, {\\n    'number, number': function numberNumber(n, k) {\\n      if (!(0, _number.isInteger)(n) || n < 0) {\\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\\n      }\\n\\n      if (!(0, _number.isInteger)(k) || k < 0) {\\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\\n      }\\n\\n      if (n < 1) {\\n        throw new TypeError('k must be less than or equal to n + k - 1');\\n      }\\n\\n      if (k < n - 1) {\\n        var _prodrange = (0, _product.product)(n, n + k - 1);\\n\\n        return _prodrange / (0, _product.product)(1, k);\\n      }\\n\\n      var prodrange = (0, _product.product)(k + 1, n + k - 1);\\n      return prodrange / (0, _product.product)(1, n - 1);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\\n      var BigNumber = n.constructor;\\n      var result, i;\\n      var one = new BigNumber(1);\\n      var nMinusOne = n.minus(one);\\n\\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\\n      }\\n\\n      if (n.lt(one)) {\\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\\n      }\\n\\n      result = one;\\n\\n      if (k.lt(nMinusOne)) {\\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\\n          result = result.times(k.plus(i)).dividedBy(i);\\n        }\\n      } else {\\n        for (i = one; i.lte(k); i = i.plus(one)) {\\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\\n        }\\n      }\\n\\n      return result;\\n    }\\n  });\\n});\\n/**\\n * Test whether BigNumber n is a positive integer\\n * @param {BigNumber} n\\n * @returns {boolean} isPositiveInteger\\n */\\n\\nexports.createCombinationsWithRep = createCombinationsWithRep;\\n\\nfunction isPositiveInteger(n) {\\n  return n.isInteger() && n.gte(0);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isPositiveInteger\",\"n\",\"isInteger\",\"gte\",\"Object\",\"defineProperty\",\"value\",\"createCombinationsWithRep\",\"_factory\",\"_number\",\"_product\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"numberNumber\",\"k\",\"TypeError\",\"_prodrange\",\"product\",\"prodrange\",\"BigNumberBigNumber\",\"i\",\"one\",\"constructor\",\"nMinusOne\",\"minus\",\"lt\",\"result\",\"lte\",\"plus\",\"times\",\"dividedBy\"]\n}\n"]