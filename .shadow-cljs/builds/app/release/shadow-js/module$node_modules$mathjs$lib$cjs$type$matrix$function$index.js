["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/function/index.js"],"~:js","shadow$provide[247]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIndex=void 0;c=b(25);var q=b(14);b=(0,c.factory)(\"index\",[\"typed\",\"Index\"],function(f){var u=f.typed,k=f.Index;return u(\"index\",{\"...number | string | BigNumber | Range | Array | Matrix\":function(t){t=t.map(function(g){return(0,q.isBigNumber)(g)?g.toNumber():Array.isArray(g)||(0,q.isMatrix)(g)?g.map(function(d){return(0,q.isBigNumber)(d)?d.toNumber():d}):g});var p=new k;k.apply(p,t);return p}})});a.createIndex=\nb}","~:source","shadow$provide[247] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndex = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _is = require(\"../../../utils/is.js\");\n\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nvar createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index;\n\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    const b = [1, 2, 3, 4, 5]\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\n   *\n   *    const a = math.matrix([[1, 2], [3, 4]])\n   *    a.subset(math.index(0, 1))             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if ((0, _is.isBigNumber)(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});\nexports.createIndex = createIndex;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createIndex"]],"~:compiled-at",1619135723953,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$function$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAMR,CAAA,CAAQ,EAAR,CAINM,EAAAA,CAA6B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,OAAVA,CACc,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACrFC,EAAQD,CAAKC,CAAAA,KADwE,CAErFC,EAAQF,CAAKE,CAAAA,KAmCjB,OAAOD,EAAA,CAvCEH,OAuCF,CAAY,CACjB,0DAA2DK,QAA8C,CAACC,CAAD,CAAO,CAC1GC,CAAAA,CAASD,CAAKE,CAAAA,GAAL,CAAS,QAAS,CAACC,CAAD,CAAM,CACnC,MAAI,CAAC,CAAA,CAAGX,CAAIY,CAAAA,WAAR,EAAqBD,CAArB,CAAJ,CACSA,CAAIE,CAAAA,QAAJ,EADT,CAEWC,KAAMC,CAAAA,OAAN,CAAcJ,CAAd,CAAJ,EAA0B,CAAC,CAAA,CAAGX,CAAIgB,CAAAA,QAAR,EAAkBL,CAAlB,CAA1B,CACEA,CAAID,CAAAA,GAAJ,CAAQ,QAAS,CAACO,CAAD,CAAO,CAE7B,MAAO,CAAC,CAAA,CAAGjB,CAAIY,CAAAA,WAAR,EAAqBK,CAArB,CAAA,CAA6BA,CAAKJ,CAAAA,QAAL,EAA7B,CAA+CI,CAFzB,CAAxB,CADF,CAMEN,CAT0B,CAAxB,CAYb,KAAIO,EAAM,IAAIZ,CACdA,EAAMa,CAAAA,KAAN,CAAYD,CAAZ,CAAiBT,CAAjB,CACA,OAAOS,EAfuG,CAD/F,CAAZ,CArCkF,CAA1D,CAyDjCxB,EAAQI,CAAAA,WAAR;AAAsBA,CAvEwC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/function/index.js\"],\n\"sourcesContent\":[\"shadow$provide[247] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIndex = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _is = require(\\\"../../../utils/is.js\\\");\\n\\nvar name = 'index';\\nvar dependencies = ['typed', 'Index'];\\nvar createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Index = _ref.Index;\\n\\n  /**\\n   * Create an index. An Index can store ranges having start, step, and end\\n   * for multiple dimensions.\\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.index(range1, range2, ...)\\n   *\\n   * Where each range can be any of:\\n   *\\n   * - A number\\n   * - A string for getting/setting an object property\\n   * - An instance of `Range`\\n   * - A one-dimensional Array or a Matrix with numbers\\n   *\\n   * Indexes must be zero-based, integer numbers.\\n   *\\n   * Examples:\\n   *\\n   *    const b = [1, 2, 3, 4, 5]\\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\\n   *\\n   *    const a = math.matrix([[1, 2], [3, 4]])\\n   *    a.subset(math.index(0, 1))             // returns 2\\n   *\\n   * See also:\\n   *\\n   *    bignumber, boolean, complex, matrix, number, string, unit\\n   *\\n   * @param {...*} ranges   Zero or more ranges or numbers.\\n   * @return {Index}        Returns the created index\\n   */\\n  return typed(name, {\\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\\n      var ranges = args.map(function (arg) {\\n        if ((0, _is.isBigNumber)(arg)) {\\n          return arg.toNumber(); // convert BigNumber to Number\\n        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {\\n          return arg.map(function (elem) {\\n            // convert BigNumber to Number\\n            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;\\n          });\\n        } else {\\n          return arg;\\n        }\\n      });\\n      var res = new Index();\\n      Index.apply(res, ranges);\\n      return res;\\n    }\\n  });\\n});\\nexports.createIndex = createIndex;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIndex\",\"_factory\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Index\",\"numberStringBigNumberRangeArrayMatrix\",\"args\",\"ranges\",\"map\",\"arg\",\"isBigNumber\",\"toNumber\",\"Array\",\"isArray\",\"isMatrix\",\"elem\",\"res\",\"apply\"]\n}\n"]