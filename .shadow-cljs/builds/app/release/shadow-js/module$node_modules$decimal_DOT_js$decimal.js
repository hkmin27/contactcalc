["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/decimal_DOT_js/decimal.js"],"~:js","shadow$provide[28]=function(c,b,y,a){(function(q){function f(J){var N,W=J.length-1,V=\"\";var X=J[0];if(0<W){V+=X;for(X=1;X<W;X++){var aa=J[X]+\"\";(N=7-aa.length)&&(V+=r(N));V+=aa}X=J[X];(N=7-(X+\"\").length)&&(V+=r(N))}else if(0===X)return\"0\";for(;0===X%10;)X/=10;return V+X}function u(J,N,W){if(J!==~~J||J<N||J>W)throw Error(\"[DecimalError] Invalid argument: \"+J);}function k(J,N,W,V){var X;for(X=J[0];10<=X;X/=10)--N;if(0>--N){N+=7;var aa=0}else aa=Math.ceil((N+1)/7),N%=7;X=rb(10,7-N);var sa=J[aa]%X|0;\nnull==V?3>N?(0==N?sa=sa/100|0:1==N&&(sa=sa/10|0),J=4>W&&99999==sa||3<W&&49999==sa||5E4==sa||0==sa):J=(4>W&&sa+1==X||3<W&&sa+1==X/2)&&(J[aa+1]/X/100|0)==rb(10,N-2)-1||(sa==X/2||0==sa)&&0==(J[aa+1]/X/100|0):4>N?(0==N?sa=sa/1E3|0:1==N?sa=sa/100|0:2==N&&(sa=sa/10|0),J=(V||4>W)&&9999==sa||!V&&3<W&&4999==sa):J=((V||4>W)&&sa+1==X||!V&&3<W&&sa+1==X/2)&&(J[aa+1]/X/1E3|0)==rb(10,N-3)-1;return J}function t(J,N,W){for(var V,X=[0],aa=0,sa=J.length;aa<sa;){for(V=X.length;V--;)X[V]*=N;X[0]+=\"0123456789abcdef\".indexOf(J.charAt(aa++));\nfor(V=0;V<X.length;V++)X[V]>W-1&&(void 0===X[V+1]&&(X[V+1]=0),X[V+1]+=X[V]/W|0,X[V]%=W)}return X.reverse()}function p(J,N,W,V){var X,aa,sa=J.constructor;a:if(null!=N){var ua=J.d;if(!ua)return J;var Aa=1;for(X=ua[0];10<=X;X/=10)Aa++;var Ba=N-Aa;if(0>Ba){Ba+=7;var Ga=N;var Ra=ua[aa=0];X=Ra/rb(10,Aa-Ga-1)%10|0}else if(aa=Math.ceil((Ba+1)/7),X=ua.length,aa>=X)if(V){for(;X++<=aa;)ua.push(0);Ra=X=0;Aa=1;Ba%=7;Ga=Ba-7+1}else break a;else{Ra=X=ua[aa];for(Aa=1;10<=X;X/=10)Aa++;Ba%=7;Ga=Ba-7+Aa;X=0>Ga?0:Ra/\nrb(10,Aa-Ga-1)%10|0}V=V||0>N||void 0!==ua[aa+1]||(0>Ga?Ra:Ra%rb(10,Aa-Ga-1));W=4>W?(X||V)&&(0==W||W==(0>J.s?3:2)):5<X||5==X&&(4==W||V||6==W&&(0<Ba?0<Ga?Ra/rb(10,Aa-Ga):0:ua[aa-1])%10&1||W==(0>J.s?8:7));if(1>N||!ua[0])return ua.length=0,W?(N-=J.e+1,ua[0]=rb(10,(7-N%7)%7),J.e=-N||0):ua[0]=J.e=0,J;0==Ba?(ua.length=aa,X=1,aa--):(ua.length=aa+1,X=rb(10,7-Ba),ua[aa]=0<Ga?(Ra/rb(10,Aa-Ga)%rb(10,Ga)|0)*X:0);if(W)for(;;)if(0==aa){Ba=1;for(Ga=ua[0];10<=Ga;Ga/=10)Ba++;Ga=ua[0]+=X;for(X=1;10<=Ga;Ga/=10)X++;Ba!=\nX&&(J.e++,1E7==ua[0]&&(ua[0]=1));break}else{ua[aa]+=X;if(1E7!=ua[aa])break;ua[aa--]=0;X=1}for(Ba=ua.length;0===ua[--Ba];)ua.pop()}Xa&&(J.e>sa.maxE?(J.d=null,J.e=NaN):J.e<sa.minE&&(J.e=0,J.d=[0]));return J}function g(J,N,W){if(!J.isFinite())return String(J.s*J.s/0);var V,X=J.e,aa=f(J.d),sa=aa.length;N?(W&&0<(V=W-sa)?aa=aa.charAt(0)+\".\"+aa.slice(1)+r(V):1<sa&&(aa=aa.charAt(0)+\".\"+aa.slice(1)),aa=aa+(0>J.e?\"e\":\"e+\")+J.e):0>X?(aa=\"0.\"+r(-X-1)+aa,W&&0<(V=W-sa)&&(aa+=r(V))):X>=sa?(aa+=r(X+1-sa),W&&0<(V=\nW-X-1)&&(aa=aa+\".\"+r(V))):((V=X+1)<sa&&(aa=aa.slice(0,V)+\".\"+aa.slice(V)),W&&0<(V=W-sa)&&(X+1===sa&&(aa+=\".\"),aa+=r(V)));return aa}function d(J,N){J=J[0];for(N*=7;10<=J;J/=10)N++;return N}function l(J,N,W){if(N>ad)throw Xa=!0,W&&(J.precision=W),Error(\"[DecimalError] Precision limit exceeded\");return p(new J(Ja),N,1,!0)}function h(J,N,W){if(N>Xb)throw Error(\"[DecimalError] Precision limit exceeded\");return p(new J(Ta),N,W,!0)}function n(J){var N=J.length-1,W=7*N+1;if(N=J[N]){for(;0==N%10;N/=10)W--;\nfor(N=J[0];10<=N;N/=10)W++}return W}function r(J){for(var N=\"\";J--;)N+=\"0\";return N}function v(J,N,W,V){var X;J=new J(1);V=Math.ceil(V/7+4);for(Xa=!1;;){W%2&&(J=J.times(N),I(J.d,V)&&(X=!0));W=yb(W/2);if(0===W){W=J.d.length-1;X&&0===J.d[W]&&++J.d[W];break}N=N.times(N);I(N.d,V)}Xa=!0;return J}function C(J,N,W){for(var V,X=new J(N[0]),aa=0;++aa<N.length;)if(V=new J(N[aa]),V.s)X[W](V)&&(X=V);else{X=V;break}return X}function z(J,N){var W,V,X,aa=0,sa=0,ua=0,Aa=J.constructor,Ba=Aa.rounding,Ga=Aa.precision;\nif(!J.d||!J.d[0]||17<J.e)return new Aa(J.d?J.d[0]?0>J.s?0:1/0:1:J.s?0>J.s?0:J:0/0);if(null==N){Xa=!1;var Ra=Ga}else Ra=N;for(X=new Aa(.03125);-2<J.e;)J=J.times(X),ua+=5;var db=Math.log(rb(2,ua))/Math.LN10*2+5|0;Ra+=db;var bb=W=V=new Aa(1);for(Aa.precision=Ra;;){W=p(W.times(J),Ra,1);bb=bb.times(++sa);X=V.plus(ob(W,bb,Ra,1));if(f(X.d).slice(0,Ra)===f(V.d).slice(0,Ra)){for(bb=ua;bb--;)V=p(V.times(V),Ra,1);if(null==N)if(3>aa&&k(V.d,Ra-db,Ba,aa))Aa.precision=Ra+=10,bb=W=X=new Aa(1),sa=0,aa++;else return p(V,\nAa.precision=Ga,Ba,Xa=!0);else return Aa.precision=Ga,V}V=X}}function w(J,N){var W,V=1;var X=J;var aa=X.d;var sa=X.constructor,ua=sa.rounding,Aa=sa.precision;if(0>X.s||!aa||!aa[0]||!X.e&&1==aa[0]&&1==aa.length)return new sa(aa&&!aa[0]?-1/0:1!=X.s?NaN:aa?0:X);if(null==N){Xa=!1;var Ba=Aa}else Ba=N;sa.precision=Ba+=10;var Ga=f(aa);var Ra=Ga.charAt(0);if(15E14>Math.abs(aa=X.e)){for(;7>Ra&&1!=Ra||1==Ra&&3<Ga.charAt(1);)X=X.times(J),Ga=f(X.d),Ra=Ga.charAt(0),V++;aa=X.e;1<Ra?(X=new sa(\"0.\"+Ga),aa++):X=new sa(Ra+\n\".\"+Ga.slice(1))}else return J=l(sa,Ba+2,Aa).times(aa+\"\"),X=w(new sa(Ra+\".\"+Ga.slice(1)),Ba-10).plus(J),sa.precision=Aa,null==N?p(X,Aa,ua,Xa=!0):X;var db=X;Ra=Ga=X=ob(X.minus(1),X.plus(1),Ba,1);var bb=p(X.times(X),Ba,1);for(X=3;;){Ga=p(Ga.times(bb),Ba,1);J=Ra.plus(ob(Ga,new sa(X),Ba,1));if(f(J.d).slice(0,Ba)===f(Ra.d).slice(0,Ba))if(Ra=Ra.times(2),0!==aa&&(Ra=Ra.plus(l(sa,Ba+2,Aa).times(aa+\"\"))),Ra=ob(Ra,new sa(V),Ba,1),null==N)if(k(Ra.d,Ba-10,ua,W))sa.precision=Ba+=10,J=Ga=X=ob(db.minus(1),db.plus(1),\nBa,1),bb=p(X.times(X),Ba,1),X=W=1;else return p(Ra,sa.precision=Aa,ua,Xa=!0);else return sa.precision=Aa,Ra;Ra=J;X+=2}}function B(J,N){var W,V,X;-1<(W=N.indexOf(\".\"))&&(N=N.replace(\".\",\"\"));0<(V=N.search(/e/i))?(0>W&&(W=V),W+=+N.slice(V+1),N=N.substring(0,V)):0>W&&(W=N.length);for(V=0;48===N.charCodeAt(V);V++);for(X=N.length;48===N.charCodeAt(X-1);--X);if(N=N.slice(V,X)){X-=V;J.e=W=W-V-1;J.d=[];V=(W+1)%7;0>W&&(V+=7);if(V<X){V&&J.d.push(+N.slice(0,V));for(X-=7;V<X;)J.d.push(+N.slice(V,V+=7));N=N.slice(V);\nV=7-N.length}else V-=X;for(;V--;)N+=\"0\";J.d.push(+N);Xa&&(J.e>J.constructor.maxE?(J.d=null,J.e=NaN):J.e<J.constructor.minE&&(J.e=0,J.d=[0]))}else J.e=0,J.d=[0];return J}function x(J,N){if(\"Infinity\"===N||\"NaN\"===N)return+N||(J.s=NaN),J.e=NaN,J.d=null,J;if(xc.test(N)){var W=16;N=N.toLowerCase()}else if(oc.test(N))W=2;else if(Rb.test(N))W=8;else throw Error(\"[DecimalError] Invalid argument: \"+N);var V=N.search(/p/i);if(0<V){var X=+N.slice(V+1);N=N.substring(2,V)}else N=N.slice(2);V=N.indexOf(\".\");var aa=\n0<=V;var sa=J.constructor;if(aa){N=N.replace(\".\",\"\");var ua=N.length;V=ua-V;var Aa=v(sa,new sa(W),V,2*V)}N=t(N,W,1E7);for(V=W=N.length-1;0===N[V];--V)N.pop();if(0>V)return new sa(0*J.s);J.e=d(N,W);J.d=N;Xa=!1;aa&&(J=ob(J,Aa,4*ua));X&&(J=J.times(54>Math.abs(X)?rb(2,X):zb.pow(2,X)));Xa=!0;return J}function D(J,N,W,V,X){var aa,sa=1,ua=J.precision,Aa=Math.ceil(ua/7);Xa=!1;var Ba=W.times(W);for(aa=new J(V);;){var Ga=ob(aa.times(Ba),new J(N++*N++),ua,1);aa=X?V.plus(Ga):V.minus(Ga);V=ob(Ga.times(Ba),new J(N++*\nN++),ua,1);Ga=aa.plus(V);if(void 0!==Ga.d[Aa]){for(W=Aa;Ga.d[W]===aa.d[W]&&W--;);if(-1==W)break}aa=V;V=Ga;sa++}Xa=!0;Ga.d.length=Aa+1;return Ga}function F(J,N){for(var W=J;--N;)W*=J;return W}function E(J,N){var W=0>N.s,V=h(J,J.precision,1),X=V.times(.5);N=N.abs();if(N.lte(X))return Ib=W?4:1,N;J=N.divToInt(V);if(J.isZero())Ib=W?3:2;else{N=N.minus(J.times(V));if(N.lte(X))return Ib=J.d[J.d.length-1]&1?W?2:3:W?4:1,N;Ib=J.d[J.d.length-1]&1?W?1:4:W?3:2}return N.minus(V).abs()}function G(J,N,W,V){var X,\naa,sa=J.constructor,ua=void 0!==W;ua?(u(W,1,1E9),void 0===V?V=sa.rounding:u(V,0,8)):(W=sa.precision,V=sa.rounding);if(J.isFinite()){var Aa=g(J);var Ba=Aa.indexOf(\".\");if(ua){var Ga=2;16==N?W=4*W-3:8==N&&(W=3*W-2)}else Ga=N;if(0<=Ba){Aa=Aa.replace(\".\",\"\");var Ra=new sa(1);Ra.e=Aa.length-Ba;Ra.d=t(g(Ra),10,Ga);Ra.e=Ra.d.length}var db=t(Aa,10,Ga);for(X=aa=db.length;0==db[--aa];)db.pop();if(db[0]){if(0>Ba)X--;else{J=new sa(J);J.d=db;J.e=X;J=ob(J,Ra,W,V,0,Ga);db=J.d;X=J.e;var bb=Ub}Ba=db[W];aa=Ga/2;bb=\nbb||void 0!==db[W+1];bb=4>V?(void 0!==Ba||bb)&&(0===V||V===(0>J.s?3:2)):Ba>aa||Ba===aa&&(4===V||bb||6===V&&db[W-1]&1||V===(0>J.s?8:7));db.length=W;if(bb)for(;++db[--W]>Ga-1;)db[W]=0,W||(++X,db.unshift(1));for(aa=db.length;!db[aa-1];--aa);Ba=0;for(Aa=\"\";Ba<aa;Ba++)Aa+=\"0123456789abcdef\".charAt(db[Ba]);if(ua){if(1<aa)if(16==N||8==N){Ba=16==N?4:3;for(--aa;aa%Ba;aa++)Aa+=\"0\";db=t(Aa,Ga,N);for(aa=db.length;!db[aa-1];--aa);Ba=1;for(Aa=\"1.\";Ba<aa;Ba++)Aa+=\"0123456789abcdef\".charAt(db[Ba])}else Aa=Aa.charAt(0)+\n\".\"+Aa.slice(1);Aa=Aa+(0>X?\"p\":\"p+\")+X}else if(0>X){for(;++X;)Aa=\"0\"+Aa;Aa=\"0.\"+Aa}else if(++X>aa)for(X-=aa;X--;)Aa+=\"0\";else X<aa&&(Aa=Aa.slice(0,X)+\".\"+Aa.slice(X))}else Aa=ua?\"0p+0\":\"0\";Aa=(16==N?\"0x\":2==N?\"0b\":8==N?\"0o\":\"\")+Aa}else Aa=String(J.s*J.s/0);return 0>J.s?\"-\"+Aa:Aa}function I(J,N){if(J.length>N)return J.length=N,!0}function L(J){return(new this(J)).abs()}function M(J){return(new this(J)).acos()}function S(J){return(new this(J)).acosh()}function P(J,N){return(new this(J)).plus(N)}function R(J){return(new this(J)).asin()}\nfunction ba(J){return(new this(J)).asinh()}function Q(J){return(new this(J)).atan()}function T(J){return(new this(J)).atanh()}function Y(J,N){J=new this(J);N=new this(N);var W=this.precision,V=this.rounding,X=W+4;if(J.s&&N.s)if(J.d||N.d)if(!N.d||J.isZero()){var aa=0>N.s?h(this,W,V):new this(0);aa.s=J.s}else!J.d||N.isZero()?(aa=h(this,X,1).times(.5),aa.s=J.s):0>N.s?(this.precision=X,this.rounding=1,aa=this.atan(ob(J,N,X,1)),N=h(this,X,1),this.precision=W,this.rounding=V,aa=0>J.s?aa.minus(N):aa.plus(N)):\naa=this.atan(ob(J,N,X,1));else aa=h(this,X,1).times(0<N.s?.25:.75),aa.s=J.s;else aa=new this(NaN);return aa}function ca(J){return(new this(J)).cbrt()}function ka(J){return p(J=new this(J),J.e+1,2)}function ha(J){if(!J||\"object\"!==typeof J)throw Error(\"[DecimalError] Object expected\");var N,W,V,X=!0===J.defaults,aa=[\"precision\",1,1E9,\"rounding\",0,8,\"toExpNeg\",-9E15,0,\"toExpPos\",0,9E15,\"maxE\",0,9E15,\"minE\",-9E15,0,\"modulo\",0,9];for(N=0;N<aa.length;N+=3){if(W=aa[N],X)this[W]=lb[W];if(void 0!==(V=J[W]))if(yb(V)===\nV&&V>=aa[N+1]&&V<=aa[N+2])this[W]=V;else throw Error(\"[DecimalError] Invalid argument: \"+W+\": \"+V);}if(W=\"crypto\",X)this[W]=lb[W];if(void 0!==(V=J[W]))if(!0===V||!1===V||0===V||1===V)if(V)if(\"undefined\"!=typeof crypto&&crypto&&(crypto.getRandomValues||crypto.randomBytes))this[W]=!0;else throw Error(\"[DecimalError] crypto unavailable\");else this[W]=!1;else throw Error(\"[DecimalError] Invalid argument: \"+W+\": \"+V);return this}function wa(J){return(new this(J)).cos()}function Ia(J){return(new this(J)).cosh()}\nfunction Ha(J){function N(aa){var sa;if(!(this instanceof N))return new N(aa);this.constructor=N;if(aa instanceof N)this.s=aa.s,Xa?!aa.d||aa.e>N.maxE?(this.e=NaN,this.d=null):aa.e<N.minE?(this.e=0,this.d=[0]):(this.e=aa.e,this.d=aa.d.slice()):(this.e=aa.e,this.d=aa.d?aa.d.slice():aa.d);else{var ua=typeof aa;if(\"number\"===ua){if(0===aa){this.s=0>1/aa?-1:1;this.e=0;this.d=[0];return}0>aa?(aa=-aa,this.s=-1):this.s=1;if(aa===~~aa&&1E7>aa){ua=0;for(sa=aa;10<=sa;sa/=10)ua++;Xa?ua>N.maxE?(this.e=NaN,this.d=\nnull):ua<N.minE?(this.e=0,this.d=[0]):(this.e=ua,this.d=[aa]):(this.e=ua,this.d=[aa]);return}if(0!==0*aa){aa||(this.s=NaN);this.e=NaN;this.d=null;return}return B(this,aa.toString())}if(\"string\"!==ua)throw Error(\"[DecimalError] Invalid argument: \"+aa);45===(sa=aa.charCodeAt(0))?(aa=aa.slice(1),this.s=-1):(43===sa&&(aa=aa.slice(1)),this.s=1);return $c.test(aa)?B(this,aa):x(this,aa)}}var W,V;N.prototype=La;N.ROUND_UP=0;N.ROUND_DOWN=1;N.ROUND_CEIL=2;N.ROUND_FLOOR=3;N.ROUND_HALF_UP=4;N.ROUND_HALF_DOWN=\n5;N.ROUND_HALF_EVEN=6;N.ROUND_HALF_CEIL=7;N.ROUND_HALF_FLOOR=8;N.EUCLID=9;N.config=N.set=ha;N.clone=Ha;N.isDecimal=da;N.abs=L;N.acos=M;N.acosh=S;N.add=P;N.asin=R;N.asinh=ba;N.atan=Q;N.atanh=T;N.atan2=Y;N.cbrt=ca;N.ceil=ka;N.cos=wa;N.cosh=Ia;N.div=oa;N.exp=Ka;N.floor=fa;N.hypot=va;N.ln=ja;N.log=na;N.log10=ta;N.log2=la;N.max=Fa;N.min=Sa;N.mod=Qa;N.mul=Ua;N.pow=ea;N.random=qa;N.round=ya;N.sign=Da;N.sin=Ea;N.sinh=ab;N.sqrt=fb;N.sub=hb;N.tan=gb;N.tanh=O;N.trunc=ma;void 0===J&&(J={});if(J&&!0!==J.defaults){var X=\n\"precision rounding toExpNeg toExpPos maxE minE modulo crypto\".split(\" \");for(W=0;W<X.length;)J.hasOwnProperty(V=X[W++])||(J[V]=this[V])}N.config(J);return N}function oa(J,N){return(new this(J)).div(N)}function Ka(J){return(new this(J)).exp()}function fa(J){return p(J=new this(J),J.e+1,3)}function va(){var J,N=new this(0);Xa=!1;for(J=0;J<arguments.length;){var W=new this(arguments[J++]);if(W.d)N.d&&(N=N.plus(W.times(W)));else{if(W.s)return Xa=!0,new this(1/0);N=W}}Xa=!0;return N.sqrt()}function da(J){return J instanceof\nzb||J&&\"[object Decimal]\"===J.name||!1}function ja(J){return(new this(J)).ln()}function na(J,N){return(new this(J)).log(N)}function la(J){return(new this(J)).log(2)}function ta(J){return(new this(J)).log(10)}function Fa(){return C(this,arguments,\"lt\")}function Sa(){return C(this,arguments,\"gt\")}function Qa(J,N){return(new this(J)).mod(N)}function Ua(J,N){return(new this(J)).mul(N)}function ea(J,N){return(new this(J)).pow(N)}function qa(J){var N,W=0,V=new this(1),X=[];void 0===J?J=this.precision:u(J,\n1,1E9);var aa=Math.ceil(J/7);if(this.crypto)if(crypto.getRandomValues)for(N=crypto.getRandomValues(new Uint32Array(aa));W<aa;){var sa=N[W];429E7<=sa?N[W]=crypto.getRandomValues(new Uint32Array(1))[0]:X[W++]=sa%1E7}else if(crypto.randomBytes){for(N=crypto.randomBytes(aa*=4);W<aa;)sa=N[W]+(N[W+1]<<8)+(N[W+2]<<16)+((N[W+3]&127)<<24),214E7<=sa?crypto.randomBytes(4).copy(N,W):(X.push(sa%1E7),W+=4);W=aa/4}else throw Error(\"[DecimalError] crypto unavailable\");else for(;W<aa;)X[W++]=1E7*Math.random()|0;aa=\nX[--W];J%=7;aa&&J&&(sa=rb(10,7-J),X[W]=(aa/sa|0)*sa);for(;0===X[W];W--)X.pop();if(0>W)J=0,X=[0];else{for(J=-1;0===X[0];J-=7)X.shift();aa=1;for(sa=X[0];10<=sa;sa/=10)aa++;7>aa&&(J-=7-aa)}V.e=J;V.d=X;return V}function ya(J){return p(J=new this(J),J.e+1,this.rounding)}function Da(J){J=new this(J);return J.d?J.d[0]?J.s:0*J.s:J.s||NaN}function Ea(J){return(new this(J)).sin()}function ab(J){return(new this(J)).sinh()}function fb(J){return(new this(J)).sqrt()}function hb(J,N){return(new this(J)).sub(N)}\nfunction gb(J){return(new this(J)).tan()}function O(J){return(new this(J)).tanh()}function ma(J){return p(J=new this(J),J.e+1,1)}var Ja=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",\nTa=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",\nlb={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-9E15,maxE:9E15,crypto:!1},Ub,Ib,Xa=!0,yb=Math.floor,rb=Math.pow,oc=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,xc=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,Rb=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,$c=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,ad=Ja.length-1,Xb=Ta.length-1,La={name:\"[object Decimal]\"};La.absoluteValue=La.abs=function(){var J=new this.constructor(this);0>J.s&&(J.s=1);return p(J)};La.ceil=function(){return p(new this.constructor(this),\nthis.e+1,2)};La.comparedTo=La.cmp=function(J){var N=this.d,W=(J=new this.constructor(J)).d,V=this.s;var X=J.s;if(!N||!W)return V&&X?V!==X?V:N===W?0:!N^0>V?1:-1:NaN;if(!N[0]||!W[0])return N[0]?V:W[0]?-X:0;if(V!==X)return V;if(this.e!==J.e)return this.e>J.e^0>V?1:-1;var aa=N.length;var sa=W.length;J=0;for(X=aa<sa?aa:sa;J<X;++J)if(N[J]!==W[J])return N[J]>W[J]^0>V?1:-1;return aa===sa?0:aa>sa^0>V?1:-1};La.cosine=La.cos=function(){var J=this,N=J.constructor;if(!J.d)return new N(NaN);if(!J.d[0])return new N(1);\nvar W=N.precision;var V=N.rounding;N.precision=W+Math.max(J.e,J.sd())+7;N.rounding=1;J=E(N,J);var X=J.d.length;if(32>X){X=Math.ceil(X/3);var aa=(1/F(4,X)).toString()}else X=16,aa=\"2.3283064365386962890625e-10\";N.precision+=X;J=D(N,1,J.times(aa),new N(1));for(aa=X;aa--;)J=J.times(J),J=J.times(J).minus(J).times(8).plus(1);N.precision-=X;N.precision=W;N.rounding=V;return p(2==Ib||3==Ib?J.neg():J,W,V,!0)};La.cubeRoot=La.cbrt=function(){var J,N=this.constructor;if(!this.isFinite()||this.isZero())return new N(this);\nXa=!1;if((J=this.s*rb(this.s*this,1/3))&&Math.abs(J)!=1/0)var W=new N(J.toString());else{var V=f(this.d);var X=this.e;if(J=(X-V.length+1)%3)V+=1==J||-2==J?\"0\":\"00\";J=rb(V,1/3);X=yb((X+1)/3)-(X%3==(0>X?-1:2));J==1/0?V=\"5e\"+X:(V=J.toExponential(),V=V.slice(0,V.indexOf(\"e\")+1)+X);W=new N(V);W.s=this.s}for(J=(X=N.precision)+3;;){var aa=W;V=aa.times(aa).times(aa);W=V.plus(this);W=ob(W.plus(this).times(aa),W.plus(V),J+2,1);if(f(aa.d).slice(0,J)===(V=f(W.d)).slice(0,J))if(V=V.slice(J-3,J+1),\"9999\"==V||!sa&&\n\"4999\"==V){if(!sa&&(p(aa,X+1,0),aa.times(aa).times(aa).eq(this))){W=aa;break}J+=4;var sa=1}else{if(!+V||!+V.slice(1)&&\"5\"==V.charAt(0)){p(W,X+1,1);var ua=!W.times(W).times(W).eq(this)}break}}Xa=!0;return p(W,X,N.rounding,ua)};La.decimalPlaces=La.dp=function(){var J=this.d,N=NaN;if(J){var W=J.length-1;N=7*(W-yb(this.e/7));if(W=J[W])for(;0==W%10;W/=10)N--;0>N&&(N=0)}return N};La.dividedBy=La.div=function(J){return ob(this,new this.constructor(J))};La.dividedToIntegerBy=La.divToInt=function(J){var N=\nthis.constructor;return p(ob(this,new N(J),0,1,1),N.precision,N.rounding)};La.equals=La.eq=function(J){return 0===this.cmp(J)};La.floor=function(){return p(new this.constructor(this),this.e+1,3)};La.greaterThan=La.gt=function(J){return 0<this.cmp(J)};La.greaterThanOrEqualTo=La.gte=function(J){J=this.cmp(J);return 1==J||0===J};La.hyperbolicCosine=La.cosh=function(){var J=this,N=J.constructor,W=new N(1);if(!J.isFinite())return new N(J.s?1/0:NaN);if(J.isZero())return W;var V=N.precision;var X=N.rounding;\nN.precision=V+Math.max(J.e,J.sd())+4;N.rounding=1;var aa=J.d.length;if(32>aa){aa=Math.ceil(aa/3);var sa=(1/F(4,aa)).toString()}else aa=16,sa=\"2.3283064365386962890625e-10\";J=D(N,1,J.times(sa),new N(1),!0);for(sa=new N(8);aa--;)J=J.times(J),J=W.minus(J.times(sa.minus(J.times(sa))));return p(J,N.precision=V,N.rounding=X,!0)};La.hyperbolicSine=La.sinh=function(){var J=this,N=J.constructor;if(!J.isFinite()||J.isZero())return new N(J);var W=N.precision;var V=N.rounding;N.precision=W+Math.max(J.e,J.sd())+\n4;N.rounding=1;var X=J.d.length;if(3>X)J=D(N,2,J,J,!0);else{X=1.4*Math.sqrt(X);X=16<X?16:X|0;J=J.times(1/F(5,X));J=D(N,2,J,J,!0);for(var aa,sa=new N(5),ua=new N(16),Aa=new N(20);X--;)aa=J.times(J),J=J.times(sa.plus(aa.times(ua.times(aa).plus(Aa))))}N.precision=W;N.rounding=V;return p(J,W,V,!0)};La.hyperbolicTangent=La.tanh=function(){var J=this.constructor;if(!this.isFinite())return new J(this.s);if(this.isZero())return new J(this);var N=J.precision;var W=J.rounding;J.precision=N+7;J.rounding=1;return ob(this.sinh(),\nthis.cosh(),J.precision=N,J.rounding=W)};La.inverseCosine=La.acos=function(){var J=this,N=J.constructor;var W=J.abs().cmp(1);var V=N.precision,X=N.rounding;if(-1!==W)return 0===W?J.isNeg()?h(N,V,X):new N(0):new N(NaN);if(J.isZero())return h(N,V+4,X).times(.5);N.precision=V+6;N.rounding=1;J=J.asin();W=h(N,V+4,X).times(.5);N.precision=V;N.rounding=X;return W.minus(J)};La.inverseHyperbolicCosine=La.acosh=function(){var J=this,N=J.constructor;if(J.lte(1))return new N(J.eq(1)?0:NaN);if(!J.isFinite())return new N(J);\nvar W=N.precision;var V=N.rounding;N.precision=W+Math.max(Math.abs(J.e),J.sd())+4;N.rounding=1;Xa=!1;J=J.times(J).minus(1).sqrt().plus(J);Xa=!0;N.precision=W;N.rounding=V;return J.ln()};La.inverseHyperbolicSine=La.asinh=function(){var J=this,N=J.constructor;if(!J.isFinite()||J.isZero())return new N(J);var W=N.precision;var V=N.rounding;N.precision=W+2*Math.max(Math.abs(J.e),J.sd())+6;N.rounding=1;Xa=!1;J=J.times(J).plus(1).sqrt().plus(J);Xa=!0;N.precision=W;N.rounding=V;return J.ln()};La.inverseHyperbolicTangent=\nLa.atanh=function(){var J=this,N=J.constructor;if(!J.isFinite())return new N(NaN);if(0<=J.e)return new N(J.abs().eq(1)?J.s/0:J.isZero()?J:NaN);var W=N.precision;var V=N.rounding;var X=J.sd();if(Math.max(X,W)<2*-J.e-1)return p(new N(J),W,V,!0);N.precision=X-=J.e;J=ob(J.plus(1),(new N(1)).minus(J),X+W,1);N.precision=W+4;N.rounding=1;J=J.ln();N.precision=W;N.rounding=V;return J.times(.5)};La.inverseSine=La.asin=function(){var J=this,N=J.constructor;if(J.isZero())return new N(J);var W=J.abs().cmp(1);\nvar V=N.precision;var X=N.rounding;if(-1!==W)return 0===W?(W=h(N,V+4,X).times(.5),W.s=J.s,W):new N(NaN);N.precision=V+6;N.rounding=1;J=J.div((new N(1)).minus(J.times(J)).sqrt().plus(1)).atan();N.precision=V;N.rounding=X;return J.times(2)};La.inverseTangent=La.atan=function(){var J,N,W;var V=this;var X=V.constructor,aa=X.precision,sa=X.rounding;if(V.isFinite()){if(V.isZero())return new X(V);if(V.abs().eq(1)&&aa+4<=Xb){var ua=h(X,aa+4,sa).times(.25);ua.s=V.s;return ua}}else{if(!V.s)return new X(NaN);\nif(aa+4<=Xb)return ua=h(X,aa+4,sa).times(.5),ua.s=V.s,ua}X.precision=N=aa+10;X.rounding=1;for(J=W=Math.min(28,N/7+2|0);J;--J)V=V.div(V.times(V).plus(1).sqrt().plus(1));Xa=!1;N=Math.ceil(N/7);var Aa=1;var Ba=V.times(V);for(ua=new X(V);-1!==J;){V=V.times(Ba);var Ga=ua.minus(V.div(Aa+=2));V=V.times(Ba);ua=Ga.plus(V.div(Aa+=2));if(void 0!==ua.d[N])for(J=N;ua.d[J]===Ga.d[J]&&J--;);}W&&(ua=ua.times(2<<W-1));Xa=!0;return p(ua,X.precision=aa,X.rounding=sa,!0)};La.isFinite=function(){return!!this.d};La.isInteger=\nLa.isInt=function(){return!!this.d&&yb(this.e/7)>this.d.length-2};La.isNaN=function(){return!this.s};La.isNegative=La.isNeg=function(){return 0>this.s};La.isPositive=La.isPos=function(){return 0<this.s};La.isZero=function(){return!!this.d&&0===this.d[0]};La.lessThan=La.lt=function(J){return 0>this.cmp(J)};La.lessThanOrEqualTo=La.lte=function(J){return 1>this.cmp(J)};La.logarithm=La.log=function(J){var N=this.constructor,W=N.precision,V=N.rounding;if(null==J){J=new N(10);var X=!0}else{J=new N(J);var aa=\nJ.d;if(0>J.s||!aa||!aa[0]||J.eq(1))return new N(NaN);X=J.eq(10)}aa=this.d;if(0>this.s||!aa||!aa[0]||this.eq(1))return new N(aa&&!aa[0]?-1/0:1!=this.s?NaN:aa?0:1/0);if(X)if(1<aa.length)var sa=!0;else{for(aa=aa[0];0===aa%10;)aa/=10;sa=1!==aa}Xa=!1;var ua=W+5;var Aa=w(this,ua);var Ba=X?l(N,ua+10):w(J,ua);Ba=ob(Aa,Ba,ua,1);if(k(Ba.d,aa=W,V)){do if(ua+=10,Aa=w(this,ua),Ba=X?l(N,ua+10):w(J,ua),Ba=ob(Aa,Ba,ua,1),!sa){1E14==+f(Ba.d).slice(aa+1,aa+15)+1&&(Ba=p(Ba,W+1,0));break}while(k(Ba.d,aa+=10,V))}Xa=!0;\nreturn p(Ba,W,V)};La.minus=La.sub=function(J){var N,W,V=this.constructor;J=new V(J);if(!this.d||!J.d)return this.s&&J.s?this.d?J.s=-J.s:J=new V(J.d||this.s!==J.s?this:NaN):J=new V(NaN),J;if(this.s!=J.s)return J.s=-J.s,this.plus(J);var X=this.d;var aa=J.d;var sa=V.precision;var ua=V.rounding;if(!X[0]||!aa[0]){if(aa[0])J.s=-J.s;else if(X[0])J=new V(this);else return new V(3===ua?-0:0);return Xa?p(J,sa,ua):J}var Aa=yb(J.e/7);var Ba=yb(this.e/7);X=X.slice();if(N=Ba-Aa){if(W=0>N){var Ga=X;N=-N;var Ra=\naa.length}else Ga=aa,Aa=Ba,Ra=X.length;Ba=Math.max(Math.ceil(sa/7),Ra)+2;N>Ba&&(N=Ba,Ga.length=1);Ga.reverse();for(Ba=N;Ba--;)Ga.push(0);Ga.reverse()}else{Ba=X.length;Ra=aa.length;(W=Ba<Ra)&&(Ra=Ba);for(Ba=0;Ba<Ra;Ba++)if(X[Ba]!=aa[Ba]){W=X[Ba]<aa[Ba];break}N=0}W&&(Ga=X,X=aa,aa=Ga,J.s=-J.s);Ra=X.length;for(Ba=aa.length-Ra;0<Ba;--Ba)X[Ra++]=0;for(Ba=aa.length;Ba>N;){if(X[--Ba]<aa[Ba]){for(Ga=Ba;Ga&&0===X[--Ga];)X[Ga]=9999999;--X[Ga];X[Ba]+=1E7}X[Ba]-=aa[Ba]}for(;0===X[--Ra];)X.pop();for(;0===X[0];X.shift())--Aa;\nif(!X[0])return new V(3===ua?-0:0);J.d=X;J.e=d(X,Aa);return Xa?p(J,sa,ua):J};La.modulo=La.mod=function(J){var N=this.constructor;J=new N(J);if(!this.d||!J.s||J.d&&!J.d[0])return new N(NaN);if(!J.d||this.d&&!this.d[0])return p(new N(this),N.precision,N.rounding);Xa=!1;9==N.modulo?(N=ob(this,J.abs(),0,3,1),N.s*=J.s):N=ob(this,J,0,N.modulo,1);N=N.times(J);Xa=!0;return this.minus(N)};La.naturalExponential=La.exp=function(){return z(this)};La.naturalLogarithm=La.ln=function(){return w(this)};La.negated=\nLa.neg=function(){var J=new this.constructor(this);J.s=-J.s;return p(J)};La.plus=La.add=function(J){var N;var W=this.constructor;J=new W(J);if(!this.d||!J.d)return this.s&&J.s?this.d||(J=new W(J.d||this.s===J.s?this:NaN)):J=new W(NaN),J;if(this.s!=J.s)return J.s=-J.s,this.minus(J);var V=this.d;var X=J.d;var aa=W.precision;var sa=W.rounding;if(!V[0]||!X[0])return X[0]||(J=new W(this)),Xa?p(J,aa,sa):J;var ua=yb(this.e/7);W=yb(J.e/7);V=V.slice();if(N=ua-W){if(0>N){var Aa=V;N=-N;var Ba=X.length}else Aa=\nX,W=ua,Ba=V.length;ua=Math.ceil(aa/7);Ba=ua>Ba?ua+1:Ba+1;N>Ba&&(N=Ba,Aa.length=1);for(Aa.reverse();N--;)Aa.push(0);Aa.reverse()}Ba=V.length;N=X.length;0>Ba-N&&(N=Ba,Aa=X,X=V,V=Aa);for(Aa=0;N;)Aa=(V[--N]=V[N]+X[N]+Aa)/1E7|0,V[N]%=1E7;Aa&&(V.unshift(Aa),++W);for(Ba=V.length;0==V[--Ba];)V.pop();J.d=V;J.e=d(V,W);return Xa?p(J,aa,sa):J};La.precision=La.sd=function(J){if(void 0!==J&&J!==!!J&&1!==J&&0!==J)throw Error(\"[DecimalError] Invalid argument: \"+J);if(this.d){var N=n(this.d);J&&this.e+1>N&&(N=this.e+\n1)}else N=NaN;return N};La.round=function(){var J=this.constructor;return p(new J(this),this.e+1,J.rounding)};La.sine=La.sin=function(){var J=this,N=J.constructor;if(!J.isFinite())return new N(NaN);if(J.isZero())return new N(J);var W=N.precision;var V=N.rounding;N.precision=W+Math.max(J.e,J.sd())+7;N.rounding=1;J=E(N,J);var X=J.d.length;if(3>X)J=D(N,2,J,J);else{X=1.4*Math.sqrt(X);X=16<X?16:X|0;J=J.times(1/F(5,X));J=D(N,2,J,J);for(var aa,sa=new N(5),ua=new N(16),Aa=new N(20);X--;)aa=J.times(J),J=J.times(sa.plus(aa.times(ua.times(aa).minus(Aa))))}N.precision=\nW;N.rounding=V;return p(2<Ib?J.neg():J,W,V,!0)};La.squareRoot=La.sqrt=function(){var J=this.d;var N=this.e;var W=this.s;var V=this.constructor;if(1!==W||!J||!J[0])return new V(!W||0>W&&(!J||J[0])?NaN:J?this:1/0);Xa=!1;W=Math.sqrt(+this);if(0==W||W==1/0){J=f(J);0==(J.length+N)%2&&(J+=\"0\");W=Math.sqrt(J);N=yb((N+1)/2)-(0>N||N%2);W==1/0?J=\"5e\"+N:(J=W.toExponential(),J=J.slice(0,J.indexOf(\"e\")+1)+N);var X=new V(J)}else X=new V(W.toString());for(W=(N=V.precision)+3;;){var aa=X;X=aa.plus(ob(this,aa,W+2,\n1)).times(.5);if(f(aa.d).slice(0,W)===(J=f(X.d)).slice(0,W))if(J=J.slice(W-3,W+1),\"9999\"==J||!sa&&\"4999\"==J){if(!sa&&(p(aa,N+1,0),aa.times(aa).eq(this))){X=aa;break}W+=4;var sa=1}else{if(!+J||!+J.slice(1)&&\"5\"==J.charAt(0)){p(X,N+1,1);var ua=!X.times(X).eq(this)}break}}Xa=!0;return p(X,N,V.rounding,ua)};La.tangent=La.tan=function(){var J=this,N=J.constructor;if(!J.isFinite())return new N(NaN);if(J.isZero())return new N(J);var W=N.precision;var V=N.rounding;N.precision=W+10;N.rounding=1;J=J.sin();\nJ.s=1;J=ob(J,(new N(1)).minus(J.times(J)).sqrt(),W+10,0);N.precision=W;N.rounding=V;return p(2==Ib||4==Ib?J.neg():J,W,V,!0)};La.times=La.mul=function(J){var N,W=this.constructor,V=this.d,X=(J=new W(J)).d;J.s*=this.s;if(!(V&&V[0]&&X&&X[0]))return new W(!J.s||V&&!V[0]&&!X||X&&!X[0]&&!V?NaN:V&&X?0*J.s:J.s/0);var aa=yb(this.e/7)+yb(J.e/7);var sa=V.length;var ua=X.length;if(sa<ua){var Aa=V;V=X;X=Aa;var Ba=sa;sa=ua;ua=Ba}Aa=[];for(N=Ba=sa+ua;N--;)Aa.push(0);for(N=ua;0<=--N;){var Ga=0;for(ua=sa+N;ua>N;)Ga=\nAa[ua]+X[N]*V[ua-N-1]+Ga,Aa[ua--]=Ga%1E7|0,Ga=Ga/1E7|0;Aa[ua]=(Aa[ua]+Ga)%1E7|0}for(;!Aa[--Ba];)Aa.pop();Ga?++aa:Aa.shift();J.d=Aa;J.e=d(Aa,aa);return Xa?p(J,W.precision,W.rounding):J};La.toBinary=function(J,N){return G(this,2,J,N)};La.toDecimalPlaces=La.toDP=function(J,N){var W=this,V=W.constructor;W=new V(W);if(void 0===J)return W;u(J,0,1E9);void 0===N?N=V.rounding:u(N,0,8);return p(W,J+W.e+1,N)};La.toExponential=function(J,N){var W=this,V=W.constructor;void 0===J?J=g(W,!0):(u(J,0,1E9),void 0===\nN?N=V.rounding:u(N,0,8),W=p(new V(W),J+1,N),J=g(W,!0,J+1));return W.isNeg()&&!W.isZero()?\"-\"+J:J};La.toFixed=function(J,N){var W=this.constructor;void 0===J?J=g(this):(u(J,0,1E9),void 0===N?N=W.rounding:u(N,0,8),N=p(new W(this),J+this.e+1,N),J=g(N,!1,J+N.e+1));return this.isNeg()&&!this.isZero()?\"-\"+J:J};La.toFraction=function(J){var N,W;var V=this.d;var X=this.constructor;if(!V)return new X(this);var aa=N=new X(1);var sa=W=new X(0);var ua=new X(sa);var Aa=ua.e=n(V)-this.e-1;var Ba=Aa%7;ua.d[0]=rb(10,\n0>Ba?7+Ba:Ba);if(null==J)J=0<Aa?ua:aa;else{var Ga=new X(J);if(!Ga.isInt()||Ga.lt(aa))throw Error(\"[DecimalError] Invalid argument: \"+Ga);J=Ga.gt(ua)?0<Aa?ua:aa:Ga}Xa=!1;Ga=new X(f(V));Ba=X.precision;for(X.precision=Aa=14*V.length;;){var Ra=ob(Ga,ua,0,1,1);V=N.plus(Ra.times(sa));if(1==V.cmp(J))break;N=sa;sa=V;V=aa;aa=W.plus(Ra.times(V));W=V;V=ua;ua=Ga.minus(Ra.times(V));Ga=V}V=ob(J.minus(N),sa,0,1,1);W=W.plus(V.times(aa));N=N.plus(V.times(sa));W.s=aa.s=this.s;J=1>ob(aa,sa,Aa,1).minus(this).abs().cmp(ob(W,\nN,Aa,1).minus(this).abs())?[aa,sa]:[W,N];X.precision=Ba;Xa=!0;return J};La.toHexadecimal=La.toHex=function(J,N){return G(this,16,J,N)};La.toNearest=function(J,N){var W=this,V=W.constructor;W=new V(W);if(null==J){if(!W.d)return W;J=new V(1);N=V.rounding}else{J=new V(J);void 0===N?N=V.rounding:u(N,0,8);if(!W.d)return J.s?W:J;if(!J.d)return J.s&&(J.s=W.s),J}J.d[0]?(Xa=!1,W=ob(W,J,0,N,1).times(J),Xa=!0,p(W)):(J.s=W.s,W=J);return W};La.toNumber=function(){return+this};La.toOctal=function(J,N){return G(this,\n8,J,N)};La.toPower=La.pow=function(J){var N,W=this,V=W.constructor,X=+(J=new V(J));if(!(W.d&&J.d&&W.d[0]&&J.d[0]))return new V(rb(+W,X));W=new V(W);if(W.eq(1))return W;var aa=V.precision;var sa=V.rounding;if(J.eq(1))return p(W,aa,sa);var ua=yb(J.e/7);if(ua>=J.d.length-1&&9007199254740991>=(N=0>X?-X:X))return ua=v(V,W,N,aa),0>J.s?(new V(1)).div(ua):p(ua,aa,sa);var Aa=W.s;if(0>Aa){if(ua<J.d.length-1)return new V(NaN);0==(J.d[ua]&1)&&(Aa=1);if(0==W.e&&1==W.d[0]&&1==W.d.length)return W.s=Aa,W}N=rb(+W,\nX);ua=0!=N&&isFinite(N)?(new V(N+\"\")).e:yb(X*(Math.log(\"0.\"+f(W.d))/Math.LN10+W.e+1));if(ua>V.maxE+1||ua<V.minE-1)return new V(0<ua?Aa/0:0);Xa=!1;V.rounding=W.s=1;N=Math.min(12,(ua+\"\").length);ua=z(J.times(w(W,aa+N)),aa);ua.d&&(ua=p(ua,aa+5,1),k(ua.d,aa,sa)&&(ua=aa+10,ua=p(z(J.times(w(W,ua+N)),ua),ua+5,1),1E14==+f(ua.d).slice(aa+1,aa+15)+1&&(ua=p(ua,aa+1,0))));ua.s=Aa;Xa=!0;V.rounding=sa;return p(ua,aa,sa)};La.toPrecision=function(J,N){var W=this,V=W.constructor;void 0===J?J=g(W,W.e<=V.toExpNeg||\nW.e>=V.toExpPos):(u(J,1,1E9),void 0===N?N=V.rounding:u(N,0,8),W=p(new V(W),J,N),J=g(W,J<=W.e||W.e<=V.toExpNeg,J));return W.isNeg()&&!W.isZero()?\"-\"+J:J};La.toSignificantDigits=La.toSD=function(J,N){var W=this.constructor;void 0===J?(J=W.precision,N=W.rounding):(u(J,1,1E9),void 0===N?N=W.rounding:u(N,0,8));return p(new W(this),J,N)};La.toString=function(){var J=this.constructor;J=g(this,this.e<=J.toExpNeg||this.e>=J.toExpPos);return this.isNeg()&&!this.isZero()?\"-\"+J:J};La.truncated=La.trunc=function(){return p(new this.constructor(this),\nthis.e+1,1)};La.valueOf=La.toJSON=function(){var J=this.constructor;J=g(this,this.e<=J.toExpNeg||this.e>=J.toExpPos);return this.isNeg()?\"-\"+J:J};var ob=function(){function J(V,X,aa){var sa=0;var ua=V.length;for(V=V.slice();ua--;)sa=V[ua]*X+sa,V[ua]=sa%aa|0,sa=sa/aa|0;sa&&V.unshift(sa);return V}function N(V,X,aa,sa){if(aa!=sa)var ua=aa>sa?1:-1;else for(sa=ua=0;sa<aa;sa++)if(V[sa]!=X[sa]){ua=V[sa]>X[sa]?1:-1;break}return ua}function W(V,X,aa,sa){for(var ua=0;aa--;)V[aa]-=ua,ua=V[aa]<X[aa]?1:0,V[aa]=\nua*sa+V[aa]-X[aa];for(;!V[0]&&1<V.length;)V.shift()}return function(V,X,aa,sa,ua,Aa){var Ba;var Ga=V.constructor;var Ra=V.s==X.s?1:-1;var db=V.d,bb=X.d;if(!(db&&db[0]&&bb&&bb[0]))return new Ga(V.s&&X.s&&(db?!bb||db[0]!=bb[0]:bb)?db&&0==db[0]||!bb?0*Ra:Ra/0:NaN);if(Aa){var gc=1;var pc=V.e-X.e}else Aa=1E7,gc=7,pc=yb(V.e/gc)-yb(X.e/gc);var Jb=bb.length;var Ac=db.length;var hc=new Ga(Ra);var Sb=hc.d=[];for(Ra=0;bb[Ra]==(db[Ra]||0);Ra++);bb[Ra]>(db[Ra]||0)&&pc--;null==aa?(V=aa=Ga.precision,sa=Ga.rounding):\nV=ua?aa+(V.e-X.e)+1:aa;if(0>V)Sb.push(1),Aa=!0;else{V=V/gc+2|0;Ra=0;if(1==Jb){X=0;bb=bb[0];for(V++;(Ra<Ac||X)&&V--;Ra++)Jb=X*Aa+(db[Ra]||0),Sb[Ra]=Jb/bb|0,X=Jb%bb|0;Aa=X||Ra<Ac}else{X=Aa/(bb[0]+1)|0;1<X&&(bb=J(bb,X,Aa),db=J(db,X,Aa),Jb=bb.length,Ac=db.length);var Gb=Jb;var Pa=db.slice(0,Jb);for(Ba=Pa.length;Ba<Jb;)Pa[Ba++]=0;var Nc=bb.slice();Nc.unshift(0);var bd=bb[0];bb[1]>=Aa/2&&++bd;do{X=0;Ga=N(bb,Pa,Jb,Ba);if(0>Ga){X=Pa[0];Jb!=Ba&&(X=X*Aa+(Pa[1]||0));X=X/bd|0;if(1<X){X>=Aa&&(X=Aa-1);var ic=J(bb,\nX,Aa);var Bc=ic.length;Ba=Pa.length;Ga=N(ic,Pa,Bc,Ba);1==Ga&&(X--,W(ic,Jb<Bc?Nc:bb,Bc,Aa))}else 0==X&&(Ga=X=1),ic=bb.slice();Bc=ic.length;Bc<Ba&&ic.unshift(0);W(Pa,ic,Ba,Aa);-1==Ga&&(Ba=Pa.length,Ga=N(bb,Pa,Jb,Ba),1>Ga&&(X++,W(Pa,Jb<Ba?Nc:bb,Ba,Aa)));Ba=Pa.length}else 0===Ga&&(X++,Pa=[0]);Sb[Ra++]=X;Ga&&Pa[0]?Pa[Ba++]=db[Gb]||0:(Pa=[db[Gb]],Ba=1)}while((Gb++<Ac||void 0!==Pa[0])&&V--);Aa=void 0!==Pa[0]}Sb[0]||Sb.shift()}if(1==gc)hc.e=pc,Ub=Aa;else{Ra=1;for(X=Sb[0];10<=X;X/=10)Ra++;hc.e=Ra+pc*gc-1;\np(hc,ua?aa+hc.e+1:aa,sa,Aa)}return hc}}();var zb=Ha(lb);zb[\"default\"]=zb.Decimal=zb;Ja=new zb(Ja);Ta=new zb(Ta);if(\"function\"==typeof define&&define.amd)define(function(){return zb});else if(\"undefined\"!=typeof y&&y.exports)\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(La[Symbol.for(\"nodejs.util.inspect.custom\")]=La.toString,La[Symbol.toStringTag]=\"Decimal\"),y.exports=zb;else{q||(q=\"undefined\"!=typeof self&&self&&self.self==self?self:window);var yc=q.Decimal;zb.noConflict=function(){q.Decimal=\nyc;return zb};q.Decimal=zb}})(this)}","~:source","shadow$provide[28] = function(global,require,module,exports) {\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.2.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["inverseSine","toExpPos","d","floor","ceil","toFraction","decimalPlaces","hyperbolicSine","random","cosh","min","ROUND_CEIL","ROUND_DOWN","s","ROUND_HALF_DOWN","truncated","precision","absoluteValue","valueOf","lt","isNegative","dp","minE","inverseTangent","isZero","sub","config","e","isPositive","toFixed","prototype","greaterThan","ROUND_FLOOR","isNeg","naturalLogarithm","toHexadecimal","eq","tangent","atan2","cubeRoot","plus","dividedBy","cbrt","logarithm","isDecimal","maxE","max","toNearest","isInt","toOctal","pow","toString","naturalExponential","EUCLID","minus","modulo","ROUND_HALF_CEIL","atan","gt","log","ln","acosh","gte","hyperbolicTangent","greaterThanOrEqualTo","inverseCosine","times","name","sin","lessThanOrEqualTo","Decimal","toPrecision","hypot","toSD","exp","ROUND_HALF_FLOOR","squareRoot","neg","dividedToIntegerBy","log10","toHex","toDecimalPlaces","crypto","divToInt","isInteger","sqrt","rounding","toSignificantDigits","negated","cosine","length","tan","cos","ROUND_HALF_EVEN","lessThan","trunc","mod","mul","div","inverseHyperbolicTangent","abs","isNaN","toExponential","clone","lte","isFinite","add","toNumber","set","toBinary","atanh","sd","isPos","hyperbolicCosine","sinh","asinh","round","toExpNeg","ROUND_UP","noConflict","inverseHyperbolicSine","asin","toDP","sign","toPower","equals","sine","tanh","inverseHyperbolicCosine","log2","comparedTo","constructor","ROUND_HALF_UP","toJSON","acos","cmp"]],"~:compiled-at",1619135723733,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$decimal_DOT_js$decimal.js\",\n\"lineCount\":66,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/decimal_DOT_js/decimal.js\"],\n\"sourcesContent\":[\"shadow$provide[28] = function(global,require,module,exports) {\\n;(function (globalScope) {\\r\\n  'use strict';\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  decimal.js v10.2.1\\r\\n   *  An arbitrary-precision Decimal type for JavaScript.\\r\\n   *  https://github.com/MikeMcl/decimal.js\\r\\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\\r\\n   *  MIT Licence\\r\\n   */\\r\\n\\r\\n\\r\\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\\r\\n\\r\\n\\r\\n    // The maximum exponent magnitude.\\r\\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\\r\\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\\r\\n\\r\\n    // The limit on the value of `precision`, and on the value of the first argument to\\r\\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\\r\\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\\r\\n\\r\\n    // Base conversion alphabet.\\r\\n    NUMERALS = '0123456789abcdef',\\r\\n\\r\\n    // The natural logarithm of 10 (1025 digits).\\r\\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\\r\\n\\r\\n    // Pi (1025 digits).\\r\\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\\r\\n\\r\\n\\r\\n    // The initial configuration properties of the Decimal constructor.\\r\\n    DEFAULTS = {\\r\\n\\r\\n      // These values must be integers within the stated ranges (inclusive).\\r\\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\\r\\n\\r\\n      // The maximum number of significant digits of the result of a calculation or base conversion.\\r\\n      // E.g. `Decimal.config({ precision: 20 });`\\r\\n      precision: 20,                         // 1 to MAX_DIGITS\\r\\n\\r\\n      // The rounding mode used when rounding to `precision`.\\r\\n      //\\r\\n      // ROUND_UP         0 Away from zero.\\r\\n      // ROUND_DOWN       1 Towards zero.\\r\\n      // ROUND_CEIL       2 Towards +Infinity.\\r\\n      // ROUND_FLOOR      3 Towards -Infinity.\\r\\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\\r\\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\\r\\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\\r\\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\\r\\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\\r\\n      //\\r\\n      // E.g.\\r\\n      // `Decimal.rounding = 4;`\\r\\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\\r\\n      rounding: 4,                           // 0 to 8\\r\\n\\r\\n      // The modulo mode used when calculating the modulus: a mod n.\\r\\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\\r\\n      // The remainder (r) is calculated as: r = a - n * q.\\r\\n      //\\r\\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\\r\\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\\r\\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\\r\\n      // HALF_EVEN  6 The IEEE 754 remainder function.\\r\\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\\r\\n      //\\r\\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\\r\\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\\r\\n      // be used, but they may not give useful results.\\r\\n      modulo: 1,                             // 0 to 9\\r\\n\\r\\n      // The exponent value at and beneath which `toString` returns exponential notation.\\r\\n      // JavaScript numbers: -7\\r\\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\\r\\n\\r\\n      // The exponent value at and above which `toString` returns exponential notation.\\r\\n      // JavaScript numbers: 21\\r\\n      toExpPos:  21,                         // 0 to EXP_LIMIT\\r\\n\\r\\n      // The minimum exponent value, beneath which underflow to zero occurs.\\r\\n      // JavaScript numbers: -324  (5e-324)\\r\\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\\r\\n\\r\\n      // The maximum exponent value, above which overflow to Infinity occurs.\\r\\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\\r\\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\\r\\n\\r\\n      // Whether to use cryptographically-secure random number generation, if available.\\r\\n      crypto: false                          // true/false\\r\\n    },\\r\\n\\r\\n\\r\\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\\r\\n\\r\\n\\r\\n    Decimal, inexact, noConflict, quadrant,\\r\\n    external = true,\\r\\n\\r\\n    decimalError = '[DecimalError] ',\\r\\n    invalidArgument = decimalError + 'Invalid argument: ',\\r\\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\\r\\n    cryptoUnavailable = decimalError + 'crypto unavailable',\\r\\n\\r\\n    mathfloor = Math.floor,\\r\\n    mathpow = Math.pow,\\r\\n\\r\\n    isBinary = /^0b([01]+(\\\\.[01]*)?|\\\\.[01]+)(p[+-]?\\\\d+)?$/i,\\r\\n    isHex = /^0x([0-9a-f]+(\\\\.[0-9a-f]*)?|\\\\.[0-9a-f]+)(p[+-]?\\\\d+)?$/i,\\r\\n    isOctal = /^0o([0-7]+(\\\\.[0-7]*)?|\\\\.[0-7]+)(p[+-]?\\\\d+)?$/i,\\r\\n    isDecimal = /^(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(e[+-]?\\\\d+)?$/i,\\r\\n\\r\\n    BASE = 1e7,\\r\\n    LOG_BASE = 7,\\r\\n    MAX_SAFE_INTEGER = 9007199254740991,\\r\\n\\r\\n    LN10_PRECISION = LN10.length - 1,\\r\\n    PI_PRECISION = PI.length - 1,\\r\\n\\r\\n    // Decimal.prototype object\\r\\n    P = { name: '[object Decimal]' };\\r\\n\\r\\n\\r\\n  // Decimal prototype methods\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  absoluteValue             abs\\r\\n   *  ceil\\r\\n   *  comparedTo                cmp\\r\\n   *  cosine                    cos\\r\\n   *  cubeRoot                  cbrt\\r\\n   *  decimalPlaces             dp\\r\\n   *  dividedBy                 div\\r\\n   *  dividedToIntegerBy        divToInt\\r\\n   *  equals                    eq\\r\\n   *  floor\\r\\n   *  greaterThan               gt\\r\\n   *  greaterThanOrEqualTo      gte\\r\\n   *  hyperbolicCosine          cosh\\r\\n   *  hyperbolicSine            sinh\\r\\n   *  hyperbolicTangent         tanh\\r\\n   *  inverseCosine             acos\\r\\n   *  inverseHyperbolicCosine   acosh\\r\\n   *  inverseHyperbolicSine     asinh\\r\\n   *  inverseHyperbolicTangent  atanh\\r\\n   *  inverseSine               asin\\r\\n   *  inverseTangent            atan\\r\\n   *  isFinite\\r\\n   *  isInteger                 isInt\\r\\n   *  isNaN\\r\\n   *  isNegative                isNeg\\r\\n   *  isPositive                isPos\\r\\n   *  isZero\\r\\n   *  lessThan                  lt\\r\\n   *  lessThanOrEqualTo         lte\\r\\n   *  logarithm                 log\\r\\n   *  [maximum]                 [max]\\r\\n   *  [minimum]                 [min]\\r\\n   *  minus                     sub\\r\\n   *  modulo                    mod\\r\\n   *  naturalExponential        exp\\r\\n   *  naturalLogarithm          ln\\r\\n   *  negated                   neg\\r\\n   *  plus                      add\\r\\n   *  precision                 sd\\r\\n   *  round\\r\\n   *  sine                      sin\\r\\n   *  squareRoot                sqrt\\r\\n   *  tangent                   tan\\r\\n   *  times                     mul\\r\\n   *  toBinary\\r\\n   *  toDecimalPlaces           toDP\\r\\n   *  toExponential\\r\\n   *  toFixed\\r\\n   *  toFraction\\r\\n   *  toHexadecimal             toHex\\r\\n   *  toNearest\\r\\n   *  toNumber\\r\\n   *  toOctal\\r\\n   *  toPower                   pow\\r\\n   *  toPrecision\\r\\n   *  toSignificantDigits       toSD\\r\\n   *  toString\\r\\n   *  truncated                 trunc\\r\\n   *  valueOf                   toJSON\\r\\n   */\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the absolute value of this Decimal.\\r\\n   *\\r\\n   */\\r\\n  P.absoluteValue = P.abs = function () {\\r\\n    var x = new this.constructor(this);\\r\\n    if (x.s < 0) x.s = 1;\\r\\n    return finalise(x);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\\r\\n   * direction of positive Infinity.\\r\\n   *\\r\\n   */\\r\\n  P.ceil = function () {\\r\\n    return finalise(new this.constructor(this), this.e + 1, 2);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return\\r\\n   *   1    if the value of this Decimal is greater than the value of `y`,\\r\\n   *  -1    if the value of this Decimal is less than the value of `y`,\\r\\n   *   0    if they have the same value,\\r\\n   *   NaN  if the value of either Decimal is NaN.\\r\\n   *\\r\\n   */\\r\\n  P.comparedTo = P.cmp = function (y) {\\r\\n    var i, j, xdL, ydL,\\r\\n      x = this,\\r\\n      xd = x.d,\\r\\n      yd = (y = new x.constructor(y)).d,\\r\\n      xs = x.s,\\r\\n      ys = y.s;\\r\\n\\r\\n    // Either NaN or \\u00b1Infinity?\\r\\n    if (!xd || !yd) {\\r\\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\\r\\n    }\\r\\n\\r\\n    // Either zero?\\r\\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\\r\\n\\r\\n    // Signs differ?\\r\\n    if (xs !== ys) return xs;\\r\\n\\r\\n    // Compare exponents.\\r\\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\\r\\n\\r\\n    xdL = xd.length;\\r\\n    ydL = yd.length;\\r\\n\\r\\n    // Compare digit by digit.\\r\\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\\r\\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\\r\\n    }\\r\\n\\r\\n    // Compare lengths.\\r\\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-1, 1]\\r\\n   *\\r\\n   * cos(0)         = 1\\r\\n   * cos(-0)        = 1\\r\\n   * cos(Infinity)  = NaN\\r\\n   * cos(-Infinity) = NaN\\r\\n   * cos(NaN)       = NaN\\r\\n   *\\r\\n   */\\r\\n  P.cosine = P.cos = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.d) return new Ctor(NaN);\\r\\n\\r\\n    // cos(0) = cos(-0) = 1\\r\\n    if (!x.d[0]) return new Ctor(1);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   *\\r\\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   *  cbrt(0)  =  0\\r\\n   *  cbrt(-0) = -0\\r\\n   *  cbrt(1)  =  1\\r\\n   *  cbrt(-1) = -1\\r\\n   *  cbrt(N)  =  N\\r\\n   *  cbrt(-I) = -I\\r\\n   *  cbrt(I)  =  I\\r\\n   *\\r\\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\\r\\n   *\\r\\n   */\\r\\n  P.cubeRoot = P.cbrt = function () {\\r\\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\\r\\n    external = false;\\r\\n\\r\\n    // Initial estimate.\\r\\n    s = x.s * mathpow(x.s * x, 1 / 3);\\r\\n\\r\\n     // Math.cbrt underflow/overflow?\\r\\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\\r\\n    if (!s || Math.abs(s) == 1 / 0) {\\r\\n      n = digitsToString(x.d);\\r\\n      e = x.e;\\r\\n\\r\\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\\r\\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\\r\\n      s = mathpow(n, 1 / 3);\\r\\n\\r\\n      // Rarely, e may be one less than the result exponent value.\\r\\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\\r\\n\\r\\n      if (s == 1 / 0) {\\r\\n        n = '5e' + e;\\r\\n      } else {\\r\\n        n = s.toExponential();\\r\\n        n = n.slice(0, n.indexOf('e') + 1) + e;\\r\\n      }\\r\\n\\r\\n      r = new Ctor(n);\\r\\n      r.s = x.s;\\r\\n    } else {\\r\\n      r = new Ctor(s.toString());\\r\\n    }\\r\\n\\r\\n    sd = (e = Ctor.precision) + 3;\\r\\n\\r\\n    // Halley's method.\\r\\n    // TODO? Compare Newton's method.\\r\\n    for (;;) {\\r\\n      t = r;\\r\\n      t3 = t.times(t).times(t);\\r\\n      t3plusx = t3.plus(x);\\r\\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\\r\\n\\r\\n      // TODO? Replace with for-loop and checkRoundingDigits.\\r\\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\\r\\n        n = n.slice(sd - 3, sd + 1);\\r\\n\\r\\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\\r\\n        // , i.e. approaching a rounding boundary, continue the iteration.\\r\\n        if (n == '9999' || !rep && n == '4999') {\\r\\n\\r\\n          // On the first iteration only, check to see if rounding up gives the exact result as the\\r\\n          // nines may infinitely repeat.\\r\\n          if (!rep) {\\r\\n            finalise(t, e + 1, 0);\\r\\n\\r\\n            if (t.times(t).times(t).eq(x)) {\\r\\n              r = t;\\r\\n              break;\\r\\n            }\\r\\n          }\\r\\n\\r\\n          sd += 4;\\r\\n          rep = 1;\\r\\n        } else {\\r\\n\\r\\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\\r\\n          // If not, then there are further digits and m will be truthy.\\r\\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\\r\\n\\r\\n            // Truncate to the first rounding digit.\\r\\n            finalise(r, e + 1, 1);\\r\\n            m = !r.times(r).times(r).eq(x);\\r\\n          }\\r\\n\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return finalise(r, e, Ctor.rounding, m);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return the number of decimal places of the value of this Decimal.\\r\\n   *\\r\\n   */\\r\\n  P.decimalPlaces = P.dp = function () {\\r\\n    var w,\\r\\n      d = this.d,\\r\\n      n = NaN;\\r\\n\\r\\n    if (d) {\\r\\n      w = d.length - 1;\\r\\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\\r\\n\\r\\n      // Subtract the number of trailing zeros of the last word.\\r\\n      w = d[w];\\r\\n      if (w) for (; w % 10 == 0; w /= 10) n--;\\r\\n      if (n < 0) n = 0;\\r\\n    }\\r\\n\\r\\n    return n;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  n / 0 = I\\r\\n   *  n / N = N\\r\\n   *  n / I = 0\\r\\n   *  0 / n = 0\\r\\n   *  0 / 0 = N\\r\\n   *  0 / N = N\\r\\n   *  0 / I = 0\\r\\n   *  N / n = N\\r\\n   *  N / 0 = N\\r\\n   *  N / N = N\\r\\n   *  N / I = N\\r\\n   *  I / n = I\\r\\n   *  I / 0 = I\\r\\n   *  I / N = N\\r\\n   *  I / I = N\\r\\n   *\\r\\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.dividedBy = P.div = function (y) {\\r\\n    return divide(this, new this.constructor(y));\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\\r\\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.dividedToIntegerBy = P.divToInt = function (y) {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor;\\r\\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.equals = P.eq = function (y) {\\r\\n    return this.cmp(y) === 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\\r\\n   * direction of negative Infinity.\\r\\n   *\\r\\n   */\\r\\n  P.floor = function () {\\r\\n    return finalise(new this.constructor(this), this.e + 1, 3);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\\r\\n   * false.\\r\\n   *\\r\\n   */\\r\\n  P.greaterThan = P.gt = function (y) {\\r\\n    return this.cmp(y) > 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\\r\\n   * otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.greaterThanOrEqualTo = P.gte = function (y) {\\r\\n    var k = this.cmp(y);\\r\\n    return k == 1 || k === 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\\r\\n   * Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [1, Infinity]\\r\\n   *\\r\\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\\r\\n   *\\r\\n   * cosh(0)         = 1\\r\\n   * cosh(-0)        = 1\\r\\n   * cosh(Infinity)  = Infinity\\r\\n   * cosh(-Infinity) = Infinity\\r\\n   * cosh(NaN)       = NaN\\r\\n   *\\r\\n   *  x        time taken (ms)   result\\r\\n   * 1000      9                 9.8503555700852349694e+433\\r\\n   * 10000     25                4.4034091128314607936e+4342\\r\\n   * 100000    171               1.4033316802130615897e+43429\\r\\n   * 1000000   3817              1.5166076984010437725e+434294\\r\\n   * 10000000  abandoned after 2 minute wait\\r\\n   *\\r\\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\\r\\n   *\\r\\n   */\\r\\n  P.hyperbolicCosine = P.cosh = function () {\\r\\n    var k, n, pr, rm, len,\\r\\n      x = this,\\r\\n      Ctor = x.constructor,\\r\\n      one = new Ctor(1);\\r\\n\\r\\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\\r\\n    if (x.isZero()) return one;\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\\r\\n    Ctor.rounding = 1;\\r\\n    len = x.d.length;\\r\\n\\r\\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\\r\\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\\r\\n\\r\\n    // Estimate the optimum number of times to use the argument reduction.\\r\\n    // TODO? Estimation reused from cosine() and may not be optimal here.\\r\\n    if (len < 32) {\\r\\n      k = Math.ceil(len / 3);\\r\\n      n = (1 / tinyPow(4, k)).toString();\\r\\n    } else {\\r\\n      k = 16;\\r\\n      n = '2.3283064365386962890625e-10';\\r\\n    }\\r\\n\\r\\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\\r\\n\\r\\n    // Reverse argument reduction\\r\\n    var cosh2_x,\\r\\n      i = k,\\r\\n      d8 = new Ctor(8);\\r\\n    for (; i--;) {\\r\\n      cosh2_x = x.times(x);\\r\\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\\r\\n    }\\r\\n\\r\\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\\r\\n   * Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-Infinity, Infinity]\\r\\n   *\\r\\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\\r\\n   *\\r\\n   * sinh(0)         = 0\\r\\n   * sinh(-0)        = -0\\r\\n   * sinh(Infinity)  = Infinity\\r\\n   * sinh(-Infinity) = -Infinity\\r\\n   * sinh(NaN)       = NaN\\r\\n   *\\r\\n   * x        time taken (ms)\\r\\n   * 10       2 ms\\r\\n   * 100      5 ms\\r\\n   * 1000     14 ms\\r\\n   * 10000    82 ms\\r\\n   * 100000   886 ms            1.4033316802130615897e+43429\\r\\n   * 200000   2613 ms\\r\\n   * 300000   5407 ms\\r\\n   * 400000   8824 ms\\r\\n   * 500000   13026 ms          8.7080643612718084129e+217146\\r\\n   * 1000000  48543 ms\\r\\n   *\\r\\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\\r\\n   *\\r\\n   */\\r\\n  P.hyperbolicSine = P.sinh = function () {\\r\\n    var k, pr, rm, len,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\\r\\n    Ctor.rounding = 1;\\r\\n    len = x.d.length;\\r\\n\\r\\n    if (len < 3) {\\r\\n      x = taylorSeries(Ctor, 2, x, x, true);\\r\\n    } else {\\r\\n\\r\\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\\r\\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\\r\\n      // 3 multiplications and 1 addition\\r\\n\\r\\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\\r\\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\\r\\n      // 4 multiplications and 2 additions\\r\\n\\r\\n      // Estimate the optimum number of times to use the argument reduction.\\r\\n      k = 1.4 * Math.sqrt(len);\\r\\n      k = k > 16 ? 16 : k | 0;\\r\\n\\r\\n      x = x.times(1 / tinyPow(5, k));\\r\\n      x = taylorSeries(Ctor, 2, x, x, true);\\r\\n\\r\\n      // Reverse argument reduction\\r\\n      var sinh2_x,\\r\\n        d5 = new Ctor(5),\\r\\n        d16 = new Ctor(16),\\r\\n        d20 = new Ctor(20);\\r\\n      for (; k--;) {\\r\\n        sinh2_x = x.times(x);\\r\\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return finalise(x, pr, rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\\r\\n   * Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-1, 1]\\r\\n   *\\r\\n   * tanh(x) = sinh(x) / cosh(x)\\r\\n   *\\r\\n   * tanh(0)         = 0\\r\\n   * tanh(-0)        = -0\\r\\n   * tanh(Infinity)  = 1\\r\\n   * tanh(-Infinity) = -1\\r\\n   * tanh(NaN)       = NaN\\r\\n   *\\r\\n   */\\r\\n  P.hyperbolicTangent = P.tanh = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite()) return new Ctor(x.s);\\r\\n    if (x.isZero()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + 7;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\\r\\n   * this Decimal.\\r\\n   *\\r\\n   * Domain: [-1, 1]\\r\\n   * Range: [0, pi]\\r\\n   *\\r\\n   * acos(x) = pi/2 - asin(x)\\r\\n   *\\r\\n   * acos(0)       = pi/2\\r\\n   * acos(-0)      = pi/2\\r\\n   * acos(1)       = 0\\r\\n   * acos(-1)      = pi\\r\\n   * acos(1/2)     = pi/3\\r\\n   * acos(-1/2)    = 2*pi/3\\r\\n   * acos(|x| > 1) = NaN\\r\\n   * acos(NaN)     = NaN\\r\\n   *\\r\\n   */\\r\\n  P.inverseCosine = P.acos = function () {\\r\\n    var halfPi,\\r\\n      x = this,\\r\\n      Ctor = x.constructor,\\r\\n      k = x.abs().cmp(1),\\r\\n      pr = Ctor.precision,\\r\\n      rm = Ctor.rounding;\\r\\n\\r\\n    if (k !== -1) {\\r\\n      return k === 0\\r\\n        // |x| is 1\\r\\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\\r\\n        // |x| > 1 or x is NaN\\r\\n        : new Ctor(NaN);\\r\\n    }\\r\\n\\r\\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\\r\\n\\r\\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\\r\\n\\r\\n    Ctor.precision = pr + 6;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = x.asin();\\r\\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return halfPi.minus(x);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\\r\\n   * value of this Decimal.\\r\\n   *\\r\\n   * Domain: [1, Infinity]\\r\\n   * Range: [0, Infinity]\\r\\n   *\\r\\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\\r\\n   *\\r\\n   * acosh(x < 1)     = NaN\\r\\n   * acosh(NaN)       = NaN\\r\\n   * acosh(Infinity)  = Infinity\\r\\n   * acosh(-Infinity) = NaN\\r\\n   * acosh(0)         = NaN\\r\\n   * acosh(-0)        = NaN\\r\\n   * acosh(1)         = 0\\r\\n   * acosh(-1)        = NaN\\r\\n   *\\r\\n   */\\r\\n  P.inverseHyperbolicCosine = P.acosh = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\\r\\n    if (!x.isFinite()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\\r\\n    Ctor.rounding = 1;\\r\\n    external = false;\\r\\n\\r\\n    x = x.times(x).minus(1).sqrt().plus(x);\\r\\n\\r\\n    external = true;\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return x.ln();\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\\r\\n   * of this Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-Infinity, Infinity]\\r\\n   *\\r\\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\\r\\n   *\\r\\n   * asinh(NaN)       = NaN\\r\\n   * asinh(Infinity)  = Infinity\\r\\n   * asinh(-Infinity) = -Infinity\\r\\n   * asinh(0)         = 0\\r\\n   * asinh(-0)        = -0\\r\\n   *\\r\\n   */\\r\\n  P.inverseHyperbolicSine = P.asinh = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\\r\\n    Ctor.rounding = 1;\\r\\n    external = false;\\r\\n\\r\\n    x = x.times(x).plus(1).sqrt().plus(x);\\r\\n\\r\\n    external = true;\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return x.ln();\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\\r\\n   * value of this Decimal.\\r\\n   *\\r\\n   * Domain: [-1, 1]\\r\\n   * Range: [-Infinity, Infinity]\\r\\n   *\\r\\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\\r\\n   *\\r\\n   * atanh(|x| > 1)   = NaN\\r\\n   * atanh(NaN)       = NaN\\r\\n   * atanh(Infinity)  = NaN\\r\\n   * atanh(-Infinity) = NaN\\r\\n   * atanh(0)         = 0\\r\\n   * atanh(-0)        = -0\\r\\n   * atanh(1)         = Infinity\\r\\n   * atanh(-1)        = -Infinity\\r\\n   *\\r\\n   */\\r\\n  P.inverseHyperbolicTangent = P.atanh = function () {\\r\\n    var pr, rm, wpr, xsd,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite()) return new Ctor(NaN);\\r\\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    xsd = x.sd();\\r\\n\\r\\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\\r\\n\\r\\n    Ctor.precision = wpr = xsd - x.e;\\r\\n\\r\\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\\r\\n\\r\\n    Ctor.precision = pr + 4;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = x.ln();\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return x.times(0.5);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\\r\\n   * Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-pi/2, pi/2]\\r\\n   *\\r\\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\\r\\n   *\\r\\n   * asin(0)       = 0\\r\\n   * asin(-0)      = -0\\r\\n   * asin(1/2)     = pi/6\\r\\n   * asin(-1/2)    = -pi/6\\r\\n   * asin(1)       = pi/2\\r\\n   * asin(-1)      = -pi/2\\r\\n   * asin(|x| > 1) = NaN\\r\\n   * asin(NaN)     = NaN\\r\\n   *\\r\\n   * TODO? Compare performance of Taylor series.\\r\\n   *\\r\\n   */\\r\\n  P.inverseSine = P.asin = function () {\\r\\n    var halfPi, k,\\r\\n      pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (x.isZero()) return new Ctor(x);\\r\\n\\r\\n    k = x.abs().cmp(1);\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n\\r\\n    if (k !== -1) {\\r\\n\\r\\n      // |x| is 1\\r\\n      if (k === 0) {\\r\\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\\r\\n        halfPi.s = x.s;\\r\\n        return halfPi;\\r\\n      }\\r\\n\\r\\n      // |x| > 1 or x is NaN\\r\\n      return new Ctor(NaN);\\r\\n    }\\r\\n\\r\\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\\r\\n\\r\\n    Ctor.precision = pr + 6;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return x.times(2);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\\r\\n   * of this Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-pi/2, pi/2]\\r\\n   *\\r\\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\\r\\n   *\\r\\n   * atan(0)         = 0\\r\\n   * atan(-0)        = -0\\r\\n   * atan(1)         = pi/4\\r\\n   * atan(-1)        = -pi/4\\r\\n   * atan(Infinity)  = pi/2\\r\\n   * atan(-Infinity) = -pi/2\\r\\n   * atan(NaN)       = NaN\\r\\n   *\\r\\n   */\\r\\n  P.inverseTangent = P.atan = function () {\\r\\n    var i, j, k, n, px, t, r, wpr, x2,\\r\\n      x = this,\\r\\n      Ctor = x.constructor,\\r\\n      pr = Ctor.precision,\\r\\n      rm = Ctor.rounding;\\r\\n\\r\\n    if (!x.isFinite()) {\\r\\n      if (!x.s) return new Ctor(NaN);\\r\\n      if (pr + 4 <= PI_PRECISION) {\\r\\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\\r\\n        r.s = x.s;\\r\\n        return r;\\r\\n      }\\r\\n    } else if (x.isZero()) {\\r\\n      return new Ctor(x);\\r\\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\\r\\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\\r\\n      r.s = x.s;\\r\\n      return r;\\r\\n    }\\r\\n\\r\\n    Ctor.precision = wpr = pr + 10;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\\r\\n\\r\\n    // Argument reduction\\r\\n    // Ensure |x| < 0.42\\r\\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\\r\\n\\r\\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\\r\\n\\r\\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\\r\\n\\r\\n    external = false;\\r\\n\\r\\n    j = Math.ceil(wpr / LOG_BASE);\\r\\n    n = 1;\\r\\n    x2 = x.times(x);\\r\\n    r = new Ctor(x);\\r\\n    px = x;\\r\\n\\r\\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\\r\\n    for (; i !== -1;) {\\r\\n      px = px.times(x2);\\r\\n      t = r.minus(px.div(n += 2));\\r\\n\\r\\n      px = px.times(x2);\\r\\n      r = t.plus(px.div(n += 2));\\r\\n\\r\\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\\r\\n    }\\r\\n\\r\\n    if (k) r = r.times(2 << (k - 1));\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isFinite = function () {\\r\\n    return !!this.d;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is an integer, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isInteger = P.isInt = function () {\\r\\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is NaN, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isNaN = function () {\\r\\n    return !this.s;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is negative, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isNegative = P.isNeg = function () {\\r\\n    return this.s < 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is positive, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isPositive = P.isPos = function () {\\r\\n    return this.s > 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.isZero = function () {\\r\\n    return !!this.d && this.d[0] === 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.lessThan = P.lt = function (y) {\\r\\n    return this.cmp(y) < 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  P.lessThanOrEqualTo = P.lte = function (y) {\\r\\n    return this.cmp(y) < 1;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * If no base is specified, return log[10](arg).\\r\\n   *\\r\\n   * log[base](arg) = ln(arg) / ln(base)\\r\\n   *\\r\\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\\r\\n   * otherwise:\\r\\n   *\\r\\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\\r\\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\\r\\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\\r\\n   *\\r\\n   * log[-b](a)       = NaN\\r\\n   * log[0](a)        = NaN\\r\\n   * log[1](a)        = NaN\\r\\n   * log[NaN](a)      = NaN\\r\\n   * log[Infinity](a) = NaN\\r\\n   * log[b](0)        = -Infinity\\r\\n   * log[b](-0)       = -Infinity\\r\\n   * log[b](-a)       = NaN\\r\\n   * log[b](1)        = 0\\r\\n   * log[b](Infinity) = Infinity\\r\\n   * log[b](NaN)      = NaN\\r\\n   *\\r\\n   * [base] {number|string|Decimal} The base of the logarithm.\\r\\n   *\\r\\n   */\\r\\n  P.logarithm = P.log = function (base) {\\r\\n    var isBase10, d, denominator, k, inf, num, sd, r,\\r\\n      arg = this,\\r\\n      Ctor = arg.constructor,\\r\\n      pr = Ctor.precision,\\r\\n      rm = Ctor.rounding,\\r\\n      guard = 5;\\r\\n\\r\\n    // Default base is 10.\\r\\n    if (base == null) {\\r\\n      base = new Ctor(10);\\r\\n      isBase10 = true;\\r\\n    } else {\\r\\n      base = new Ctor(base);\\r\\n      d = base.d;\\r\\n\\r\\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\\r\\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\\r\\n\\r\\n      isBase10 = base.eq(10);\\r\\n    }\\r\\n\\r\\n    d = arg.d;\\r\\n\\r\\n    // Is arg negative, non-finite, 0 or 1?\\r\\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\\r\\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\\r\\n    }\\r\\n\\r\\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\\r\\n    // integer power of 10.\\r\\n    if (isBase10) {\\r\\n      if (d.length > 1) {\\r\\n        inf = true;\\r\\n      } else {\\r\\n        for (k = d[0]; k % 10 === 0;) k /= 10;\\r\\n        inf = k !== 1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    external = false;\\r\\n    sd = pr + guard;\\r\\n    num = naturalLogarithm(arg, sd);\\r\\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\\r\\n\\r\\n    // The result will have 5 rounding digits.\\r\\n    r = divide(num, denominator, sd, 1);\\r\\n\\r\\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\\r\\n    // calculate 10 further digits.\\r\\n    //\\r\\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\\r\\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\\r\\n    // further digits, the last 14 are nines, round up and assume the result is exact.\\r\\n    // Also assume the result is exact if the last 14 are zero.\\r\\n    //\\r\\n    // Example of a result that will be incorrectly rounded:\\r\\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\\r\\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\\r\\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\\r\\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\\r\\n    // place is still 2.6.\\r\\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\\r\\n\\r\\n      do {\\r\\n        sd += 10;\\r\\n        num = naturalLogarithm(arg, sd);\\r\\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\\r\\n        r = divide(num, denominator, sd, 1);\\r\\n\\r\\n        if (!inf) {\\r\\n\\r\\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\\r\\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\\r\\n            r = finalise(r, pr + 1, 0);\\r\\n          }\\r\\n\\r\\n          break;\\r\\n        }\\r\\n      } while (checkRoundingDigits(r.d, k += 10, rm));\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return finalise(r, pr, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\\r\\n   *\\r\\n   * arguments {number|string|Decimal}\\r\\n   *\\r\\n  P.max = function () {\\r\\n    Array.prototype.push.call(arguments, this);\\r\\n    return maxOrMin(this.constructor, arguments, 'lt');\\r\\n  };\\r\\n   */\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\\r\\n   *\\r\\n   * arguments {number|string|Decimal}\\r\\n   *\\r\\n  P.min = function () {\\r\\n    Array.prototype.push.call(arguments, this);\\r\\n    return maxOrMin(this.constructor, arguments, 'gt');\\r\\n  };\\r\\n   */\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  n - 0 = n\\r\\n   *  n - N = N\\r\\n   *  n - I = -I\\r\\n   *  0 - n = -n\\r\\n   *  0 - 0 = 0\\r\\n   *  0 - N = N\\r\\n   *  0 - I = -I\\r\\n   *  N - n = N\\r\\n   *  N - 0 = N\\r\\n   *  N - N = N\\r\\n   *  N - I = N\\r\\n   *  I - n = I\\r\\n   *  I - 0 = I\\r\\n   *  I - N = N\\r\\n   *  I - I = N\\r\\n   *\\r\\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.minus = P.sub = function (y) {\\r\\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    y = new Ctor(y);\\r\\n\\r\\n    // If either is not finite...\\r\\n    if (!x.d || !y.d) {\\r\\n\\r\\n      // Return NaN if either is NaN.\\r\\n      if (!x.s || !y.s) y = new Ctor(NaN);\\r\\n\\r\\n      // Return y negated if x is finite and y is \\u00b1Infinity.\\r\\n      else if (x.d) y.s = -y.s;\\r\\n\\r\\n      // Return x if y is finite and x is \\u00b1Infinity.\\r\\n      // Return x if both are \\u00b1Infinity with different signs.\\r\\n      // Return NaN if both are \\u00b1Infinity with the same sign.\\r\\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\\r\\n\\r\\n      return y;\\r\\n    }\\r\\n\\r\\n    // If signs differ...\\r\\n    if (x.s != y.s) {\\r\\n      y.s = -y.s;\\r\\n      return x.plus(y);\\r\\n    }\\r\\n\\r\\n    xd = x.d;\\r\\n    yd = y.d;\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n\\r\\n    // If either is zero...\\r\\n    if (!xd[0] || !yd[0]) {\\r\\n\\r\\n      // Return y negated if x is zero and y is non-zero.\\r\\n      if (yd[0]) y.s = -y.s;\\r\\n\\r\\n      // Return x if y is zero and x is non-zero.\\r\\n      else if (xd[0]) y = new Ctor(x);\\r\\n\\r\\n      // Return zero if both are zero.\\r\\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\\r\\n      else return new Ctor(rm === 3 ? -0 : 0);\\r\\n\\r\\n      return external ? finalise(y, pr, rm) : y;\\r\\n    }\\r\\n\\r\\n    // x and y are finite, non-zero numbers with the same sign.\\r\\n\\r\\n    // Calculate base 1e7 exponents.\\r\\n    e = mathfloor(y.e / LOG_BASE);\\r\\n    xe = mathfloor(x.e / LOG_BASE);\\r\\n\\r\\n    xd = xd.slice();\\r\\n    k = xe - e;\\r\\n\\r\\n    // If base 1e7 exponents differ...\\r\\n    if (k) {\\r\\n      xLTy = k < 0;\\r\\n\\r\\n      if (xLTy) {\\r\\n        d = xd;\\r\\n        k = -k;\\r\\n        len = yd.length;\\r\\n      } else {\\r\\n        d = yd;\\r\\n        e = xe;\\r\\n        len = xd.length;\\r\\n      }\\r\\n\\r\\n      // Numbers with massively different exponents would result in a very high number of\\r\\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\\r\\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\\r\\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\\r\\n\\r\\n      if (k > i) {\\r\\n        k = i;\\r\\n        d.length = 1;\\r\\n      }\\r\\n\\r\\n      // Prepend zeros to equalise exponents.\\r\\n      d.reverse();\\r\\n      for (i = k; i--;) d.push(0);\\r\\n      d.reverse();\\r\\n\\r\\n    // Base 1e7 exponents equal.\\r\\n    } else {\\r\\n\\r\\n      // Check digits to determine which is the bigger number.\\r\\n\\r\\n      i = xd.length;\\r\\n      len = yd.length;\\r\\n      xLTy = i < len;\\r\\n      if (xLTy) len = i;\\r\\n\\r\\n      for (i = 0; i < len; i++) {\\r\\n        if (xd[i] != yd[i]) {\\r\\n          xLTy = xd[i] < yd[i];\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      k = 0;\\r\\n    }\\r\\n\\r\\n    if (xLTy) {\\r\\n      d = xd;\\r\\n      xd = yd;\\r\\n      yd = d;\\r\\n      y.s = -y.s;\\r\\n    }\\r\\n\\r\\n    len = xd.length;\\r\\n\\r\\n    // Append zeros to `xd` if shorter.\\r\\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\\r\\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\\r\\n\\r\\n    // Subtract yd from xd.\\r\\n    for (i = yd.length; i > k;) {\\r\\n\\r\\n      if (xd[--i] < yd[i]) {\\r\\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\\r\\n        --xd[j];\\r\\n        xd[i] += BASE;\\r\\n      }\\r\\n\\r\\n      xd[i] -= yd[i];\\r\\n    }\\r\\n\\r\\n    // Remove trailing zeros.\\r\\n    for (; xd[--len] === 0;) xd.pop();\\r\\n\\r\\n    // Remove leading zeros and adjust exponent accordingly.\\r\\n    for (; xd[0] === 0; xd.shift()) --e;\\r\\n\\r\\n    // Zero?\\r\\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\\r\\n\\r\\n    y.d = xd;\\r\\n    y.e = getBase10Exponent(xd, e);\\r\\n\\r\\n    return external ? finalise(y, pr, rm) : y;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   *   n % 0 =  N\\r\\n   *   n % N =  N\\r\\n   *   n % I =  n\\r\\n   *   0 % n =  0\\r\\n   *  -0 % n = -0\\r\\n   *   0 % 0 =  N\\r\\n   *   0 % N =  N\\r\\n   *   0 % I =  0\\r\\n   *   N % n =  N\\r\\n   *   N % 0 =  N\\r\\n   *   N % N =  N\\r\\n   *   N % I =  N\\r\\n   *   I % n =  N\\r\\n   *   I % 0 =  N\\r\\n   *   I % N =  N\\r\\n   *   I % I =  N\\r\\n   *\\r\\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * The result depends on the modulo mode.\\r\\n   *\\r\\n   */\\r\\n  P.modulo = P.mod = function (y) {\\r\\n    var q,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    y = new Ctor(y);\\r\\n\\r\\n    // Return NaN if x is \\u00b1Infinity or NaN, or y is NaN or \\u00b10.\\r\\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\\r\\n\\r\\n    // Return x if y is \\u00b1Infinity or x is \\u00b10.\\r\\n    if (!y.d || x.d && !x.d[0]) {\\r\\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\\r\\n    }\\r\\n\\r\\n    // Prevent rounding of intermediate calculations.\\r\\n    external = false;\\r\\n\\r\\n    if (Ctor.modulo == 9) {\\r\\n\\r\\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\\r\\n      // result = x - q * y    where  0 <= result < abs(y)\\r\\n      q = divide(x, y.abs(), 0, 3, 1);\\r\\n      q.s *= y.s;\\r\\n    } else {\\r\\n      q = divide(x, y, 0, Ctor.modulo, 1);\\r\\n    }\\r\\n\\r\\n    q = q.times(y);\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return x.minus(q);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\\r\\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.naturalExponential = P.exp = function () {\\r\\n    return naturalExponential(this);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\\r\\n   * rounded to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.naturalLogarithm = P.ln = function () {\\r\\n    return naturalLogarithm(this);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\\r\\n   * -1.\\r\\n   *\\r\\n   */\\r\\n  P.negated = P.neg = function () {\\r\\n    var x = new this.constructor(this);\\r\\n    x.s = -x.s;\\r\\n    return finalise(x);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  n + 0 = n\\r\\n   *  n + N = N\\r\\n   *  n + I = I\\r\\n   *  0 + n = n\\r\\n   *  0 + 0 = 0\\r\\n   *  0 + N = N\\r\\n   *  0 + I = I\\r\\n   *  N + n = N\\r\\n   *  N + 0 = N\\r\\n   *  N + N = N\\r\\n   *  N + I = N\\r\\n   *  I + n = I\\r\\n   *  I + 0 = I\\r\\n   *  I + N = N\\r\\n   *  I + I = I\\r\\n   *\\r\\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.plus = P.add = function (y) {\\r\\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    y = new Ctor(y);\\r\\n\\r\\n    // If either is not finite...\\r\\n    if (!x.d || !y.d) {\\r\\n\\r\\n      // Return NaN if either is NaN.\\r\\n      if (!x.s || !y.s) y = new Ctor(NaN);\\r\\n\\r\\n      // Return x if y is finite and x is \\u00b1Infinity.\\r\\n      // Return x if both are \\u00b1Infinity with the same sign.\\r\\n      // Return NaN if both are \\u00b1Infinity with different signs.\\r\\n      // Return y if x is finite and y is \\u00b1Infinity.\\r\\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\\r\\n\\r\\n      return y;\\r\\n    }\\r\\n\\r\\n     // If signs differ...\\r\\n    if (x.s != y.s) {\\r\\n      y.s = -y.s;\\r\\n      return x.minus(y);\\r\\n    }\\r\\n\\r\\n    xd = x.d;\\r\\n    yd = y.d;\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n\\r\\n    // If either is zero...\\r\\n    if (!xd[0] || !yd[0]) {\\r\\n\\r\\n      // Return x if y is zero.\\r\\n      // Return y if y is non-zero.\\r\\n      if (!yd[0]) y = new Ctor(x);\\r\\n\\r\\n      return external ? finalise(y, pr, rm) : y;\\r\\n    }\\r\\n\\r\\n    // x and y are finite, non-zero numbers with the same sign.\\r\\n\\r\\n    // Calculate base 1e7 exponents.\\r\\n    k = mathfloor(x.e / LOG_BASE);\\r\\n    e = mathfloor(y.e / LOG_BASE);\\r\\n\\r\\n    xd = xd.slice();\\r\\n    i = k - e;\\r\\n\\r\\n    // If base 1e7 exponents differ...\\r\\n    if (i) {\\r\\n\\r\\n      if (i < 0) {\\r\\n        d = xd;\\r\\n        i = -i;\\r\\n        len = yd.length;\\r\\n      } else {\\r\\n        d = yd;\\r\\n        e = k;\\r\\n        len = xd.length;\\r\\n      }\\r\\n\\r\\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\\r\\n      k = Math.ceil(pr / LOG_BASE);\\r\\n      len = k > len ? k + 1 : len + 1;\\r\\n\\r\\n      if (i > len) {\\r\\n        i = len;\\r\\n        d.length = 1;\\r\\n      }\\r\\n\\r\\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\\r\\n      d.reverse();\\r\\n      for (; i--;) d.push(0);\\r\\n      d.reverse();\\r\\n    }\\r\\n\\r\\n    len = xd.length;\\r\\n    i = yd.length;\\r\\n\\r\\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\\r\\n    if (len - i < 0) {\\r\\n      i = len;\\r\\n      d = yd;\\r\\n      yd = xd;\\r\\n      xd = d;\\r\\n    }\\r\\n\\r\\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\\r\\n    for (carry = 0; i;) {\\r\\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\\r\\n      xd[i] %= BASE;\\r\\n    }\\r\\n\\r\\n    if (carry) {\\r\\n      xd.unshift(carry);\\r\\n      ++e;\\r\\n    }\\r\\n\\r\\n    // Remove trailing zeros.\\r\\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\\r\\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\\r\\n\\r\\n    y.d = xd;\\r\\n    y.e = getBase10Exponent(xd, e);\\r\\n\\r\\n    return external ? finalise(y, pr, rm) : y;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return the number of significant digits of the value of this Decimal.\\r\\n   *\\r\\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\\r\\n   *\\r\\n   */\\r\\n  P.precision = P.sd = function (z) {\\r\\n    var k,\\r\\n      x = this;\\r\\n\\r\\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\\r\\n\\r\\n    if (x.d) {\\r\\n      k = getPrecision(x.d);\\r\\n      if (z && x.e + 1 > k) k = x.e + 1;\\r\\n    } else {\\r\\n      k = NaN;\\r\\n    }\\r\\n\\r\\n    return k;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\\r\\n   * rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.round = function () {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-1, 1]\\r\\n   *\\r\\n   * sin(x) = x - x^3/3! + x^5/5! - ...\\r\\n   *\\r\\n   * sin(0)         = 0\\r\\n   * sin(-0)        = -0\\r\\n   * sin(Infinity)  = NaN\\r\\n   * sin(-Infinity) = NaN\\r\\n   * sin(NaN)       = NaN\\r\\n   *\\r\\n   */\\r\\n  P.sine = P.sin = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite()) return new Ctor(NaN);\\r\\n    if (x.isZero()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   *  sqrt(-n) =  N\\r\\n   *  sqrt(N)  =  N\\r\\n   *  sqrt(-I) =  N\\r\\n   *  sqrt(I)  =  I\\r\\n   *  sqrt(0)  =  0\\r\\n   *  sqrt(-0) = -0\\r\\n   *\\r\\n   */\\r\\n  P.squareRoot = P.sqrt = function () {\\r\\n    var m, n, sd, r, rep, t,\\r\\n      x = this,\\r\\n      d = x.d,\\r\\n      e = x.e,\\r\\n      s = x.s,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    // Negative/NaN/Infinity/zero?\\r\\n    if (s !== 1 || !d || !d[0]) {\\r\\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\\r\\n    }\\r\\n\\r\\n    external = false;\\r\\n\\r\\n    // Initial estimate.\\r\\n    s = Math.sqrt(+x);\\r\\n\\r\\n    // Math.sqrt underflow/overflow?\\r\\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\\r\\n    if (s == 0 || s == 1 / 0) {\\r\\n      n = digitsToString(d);\\r\\n\\r\\n      if ((n.length + e) % 2 == 0) n += '0';\\r\\n      s = Math.sqrt(n);\\r\\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\\r\\n\\r\\n      if (s == 1 / 0) {\\r\\n        n = '5e' + e;\\r\\n      } else {\\r\\n        n = s.toExponential();\\r\\n        n = n.slice(0, n.indexOf('e') + 1) + e;\\r\\n      }\\r\\n\\r\\n      r = new Ctor(n);\\r\\n    } else {\\r\\n      r = new Ctor(s.toString());\\r\\n    }\\r\\n\\r\\n    sd = (e = Ctor.precision) + 3;\\r\\n\\r\\n    // Newton-Raphson iteration.\\r\\n    for (;;) {\\r\\n      t = r;\\r\\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\\r\\n\\r\\n      // TODO? Replace with for-loop and checkRoundingDigits.\\r\\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\\r\\n        n = n.slice(sd - 3, sd + 1);\\r\\n\\r\\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\\r\\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\\r\\n        if (n == '9999' || !rep && n == '4999') {\\r\\n\\r\\n          // On the first iteration only, check to see if rounding up gives the exact result as the\\r\\n          // nines may infinitely repeat.\\r\\n          if (!rep) {\\r\\n            finalise(t, e + 1, 0);\\r\\n\\r\\n            if (t.times(t).eq(x)) {\\r\\n              r = t;\\r\\n              break;\\r\\n            }\\r\\n          }\\r\\n\\r\\n          sd += 4;\\r\\n          rep = 1;\\r\\n        } else {\\r\\n\\r\\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\\r\\n          // If not, then there are further digits and m will be truthy.\\r\\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\\r\\n\\r\\n            // Truncate to the first rounding digit.\\r\\n            finalise(r, e + 1, 1);\\r\\n            m = !r.times(r).eq(x);\\r\\n          }\\r\\n\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return finalise(r, e, Ctor.rounding, m);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-Infinity, Infinity]\\r\\n   *\\r\\n   * tan(0)         = 0\\r\\n   * tan(-0)        = -0\\r\\n   * tan(Infinity)  = NaN\\r\\n   * tan(-Infinity) = NaN\\r\\n   * tan(NaN)       = NaN\\r\\n   *\\r\\n   */\\r\\n  P.tangent = P.tan = function () {\\r\\n    var pr, rm,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!x.isFinite()) return new Ctor(NaN);\\r\\n    if (x.isZero()) return new Ctor(x);\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n    Ctor.precision = pr + 10;\\r\\n    Ctor.rounding = 1;\\r\\n\\r\\n    x = x.sin();\\r\\n    x.s = 1;\\r\\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  n * 0 = 0\\r\\n   *  n * N = N\\r\\n   *  n * I = I\\r\\n   *  0 * n = 0\\r\\n   *  0 * 0 = 0\\r\\n   *  0 * N = N\\r\\n   *  0 * I = N\\r\\n   *  N * n = N\\r\\n   *  N * 0 = N\\r\\n   *  N * N = N\\r\\n   *  N * I = N\\r\\n   *  I * n = I\\r\\n   *  I * 0 = N\\r\\n   *  I * N = N\\r\\n   *  I * I = I\\r\\n   *\\r\\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   */\\r\\n  P.times = P.mul = function (y) {\\r\\n    var carry, e, i, k, r, rL, t, xdL, ydL,\\r\\n      x = this,\\r\\n      Ctor = x.constructor,\\r\\n      xd = x.d,\\r\\n      yd = (y = new Ctor(y)).d;\\r\\n\\r\\n    y.s *= x.s;\\r\\n\\r\\n     // If either is NaN, \\u00b1Infinity or \\u00b10...\\r\\n    if (!xd || !xd[0] || !yd || !yd[0]) {\\r\\n\\r\\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\\r\\n\\r\\n        // Return NaN if either is NaN.\\r\\n        // Return NaN if x is \\u00b10 and y is \\u00b1Infinity, or y is \\u00b10 and x is \\u00b1Infinity.\\r\\n        ? NaN\\r\\n\\r\\n        // Return \\u00b1Infinity if either is \\u00b1Infinity.\\r\\n        // Return \\u00b10 if either is \\u00b10.\\r\\n        : !xd || !yd ? y.s / 0 : y.s * 0);\\r\\n    }\\r\\n\\r\\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\\r\\n    xdL = xd.length;\\r\\n    ydL = yd.length;\\r\\n\\r\\n    // Ensure xd points to the longer array.\\r\\n    if (xdL < ydL) {\\r\\n      r = xd;\\r\\n      xd = yd;\\r\\n      yd = r;\\r\\n      rL = xdL;\\r\\n      xdL = ydL;\\r\\n      ydL = rL;\\r\\n    }\\r\\n\\r\\n    // Initialise the result array with zeros.\\r\\n    r = [];\\r\\n    rL = xdL + ydL;\\r\\n    for (i = rL; i--;) r.push(0);\\r\\n\\r\\n    // Multiply!\\r\\n    for (i = ydL; --i >= 0;) {\\r\\n      carry = 0;\\r\\n      for (k = xdL + i; k > i;) {\\r\\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\\r\\n        r[k--] = t % BASE | 0;\\r\\n        carry = t / BASE | 0;\\r\\n      }\\r\\n\\r\\n      r[k] = (r[k] + carry) % BASE | 0;\\r\\n    }\\r\\n\\r\\n    // Remove trailing zeros.\\r\\n    for (; !r[--rL];) r.pop();\\r\\n\\r\\n    if (carry) ++e;\\r\\n    else r.shift();\\r\\n\\r\\n    y.d = r;\\r\\n    y.e = getBase10Exponent(r, e);\\r\\n\\r\\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\\r\\n   * digits using rounding mode `rm`.\\r\\n   *\\r\\n   * If the optional `sd` argument is present then return binary exponential notation.\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toBinary = function (sd, rm) {\\r\\n    return toStringBinary(this, 2, sd, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\\r\\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\\r\\n   *\\r\\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\\r\\n   *\\r\\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    x = new Ctor(x);\\r\\n    if (dp === void 0) return x;\\r\\n\\r\\n    checkInt32(dp, 0, MAX_DIGITS);\\r\\n\\r\\n    if (rm === void 0) rm = Ctor.rounding;\\r\\n    else checkInt32(rm, 0, 8);\\r\\n\\r\\n    return finalise(x, dp + x.e + 1, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal in exponential notation rounded to\\r\\n   * `dp` fixed decimal places using rounding mode `rounding`.\\r\\n   *\\r\\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toExponential = function (dp, rm) {\\r\\n    var str,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (dp === void 0) {\\r\\n      str = finiteToString(x, true);\\r\\n    } else {\\r\\n      checkInt32(dp, 0, MAX_DIGITS);\\r\\n\\r\\n      if (rm === void 0) rm = Ctor.rounding;\\r\\n      else checkInt32(rm, 0, 8);\\r\\n\\r\\n      x = finalise(new Ctor(x), dp + 1, rm);\\r\\n      str = finiteToString(x, true, dp + 1);\\r\\n    }\\r\\n\\r\\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\\r\\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\\r\\n   * omitted.\\r\\n   *\\r\\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\\r\\n   *\\r\\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\\r\\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\\r\\n   * (-0).toFixed(3) is '0.000'.\\r\\n   * (-0.5).toFixed(0) is '-0'.\\r\\n   *\\r\\n   */\\r\\n  P.toFixed = function (dp, rm) {\\r\\n    var str, y,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (dp === void 0) {\\r\\n      str = finiteToString(x);\\r\\n    } else {\\r\\n      checkInt32(dp, 0, MAX_DIGITS);\\r\\n\\r\\n      if (rm === void 0) rm = Ctor.rounding;\\r\\n      else checkInt32(rm, 0, 8);\\r\\n\\r\\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\\r\\n      str = finiteToString(y, false, dp + y.e + 1);\\r\\n    }\\r\\n\\r\\n    // To determine whether to add the minus sign look at the value before it was rounded,\\r\\n    // i.e. look at `x` rather than `y`.\\r\\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\\r\\n   * numerator and an integer denominator.\\r\\n   *\\r\\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\\r\\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\\r\\n   * value necessary to represent the number exactly.\\r\\n   *\\r\\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\\r\\n   *\\r\\n   */\\r\\n  P.toFraction = function (maxD) {\\r\\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\\r\\n      x = this,\\r\\n      xd = x.d,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (!xd) return new Ctor(x);\\r\\n\\r\\n    n1 = d0 = new Ctor(1);\\r\\n    d1 = n0 = new Ctor(0);\\r\\n\\r\\n    d = new Ctor(d1);\\r\\n    e = d.e = getPrecision(xd) - x.e - 1;\\r\\n    k = e % LOG_BASE;\\r\\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\\r\\n\\r\\n    if (maxD == null) {\\r\\n\\r\\n      // d is 10**e, the minimum max-denominator needed.\\r\\n      maxD = e > 0 ? d : n1;\\r\\n    } else {\\r\\n      n = new Ctor(maxD);\\r\\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\\r\\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\\r\\n    }\\r\\n\\r\\n    external = false;\\r\\n    n = new Ctor(digitsToString(xd));\\r\\n    pr = Ctor.precision;\\r\\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\\r\\n\\r\\n    for (;;)  {\\r\\n      q = divide(n, d, 0, 1, 1);\\r\\n      d2 = d0.plus(q.times(d1));\\r\\n      if (d2.cmp(maxD) == 1) break;\\r\\n      d0 = d1;\\r\\n      d1 = d2;\\r\\n      d2 = n1;\\r\\n      n1 = n0.plus(q.times(d2));\\r\\n      n0 = d2;\\r\\n      d2 = d;\\r\\n      d = n.minus(q.times(d2));\\r\\n      n = d2;\\r\\n    }\\r\\n\\r\\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\\r\\n    n0 = n0.plus(d2.times(n1));\\r\\n    d0 = d0.plus(d2.times(d1));\\r\\n    n0.s = n1.s = x.s;\\r\\n\\r\\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\\r\\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\\r\\n        ? [n1, d1] : [n0, d0];\\r\\n\\r\\n    Ctor.precision = pr;\\r\\n    external = true;\\r\\n\\r\\n    return r;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\\r\\n   * digits using rounding mode `rm`.\\r\\n   *\\r\\n   * If the optional `sd` argument is present then return binary exponential notation.\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toHexadecimal = P.toHex = function (sd, rm) {\\r\\n    return toStringBinary(this, 16, sd, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\\r\\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\\r\\n   *\\r\\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\\r\\n   * or `y` is NaN, in which case the return value will be also be NaN.\\r\\n   *\\r\\n   * The return value is not affected by the value of `precision`.\\r\\n   *\\r\\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   * 'toNearest() rounding mode not an integer: {rm}'\\r\\n   * 'toNearest() rounding mode out of range: {rm}'\\r\\n   *\\r\\n   */\\r\\n  P.toNearest = function (y, rm) {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    x = new Ctor(x);\\r\\n\\r\\n    if (y == null) {\\r\\n\\r\\n      // If x is not finite, return x.\\r\\n      if (!x.d) return x;\\r\\n\\r\\n      y = new Ctor(1);\\r\\n      rm = Ctor.rounding;\\r\\n    } else {\\r\\n      y = new Ctor(y);\\r\\n      if (rm === void 0) {\\r\\n        rm = Ctor.rounding;\\r\\n      } else {\\r\\n        checkInt32(rm, 0, 8);\\r\\n      }\\r\\n\\r\\n      // If x is not finite, return x if y is not NaN, else NaN.\\r\\n      if (!x.d) return y.s ? x : y;\\r\\n\\r\\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\\r\\n      if (!y.d) {\\r\\n        if (y.s) y.s = x.s;\\r\\n        return y;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // If y is not zero, calculate the nearest multiple of y to x.\\r\\n    if (y.d[0]) {\\r\\n      external = false;\\r\\n      x = divide(x, y, 0, rm, 1).times(y);\\r\\n      external = true;\\r\\n      finalise(x);\\r\\n\\r\\n    // If y is zero, return zero with the sign of x.\\r\\n    } else {\\r\\n      y.s = x.s;\\r\\n      x = y;\\r\\n    }\\r\\n\\r\\n    return x;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return the value of this Decimal converted to a number primitive.\\r\\n   * Zero keeps its sign.\\r\\n   *\\r\\n   */\\r\\n  P.toNumber = function () {\\r\\n    return +this;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\\r\\n   * digits using rounding mode `rm`.\\r\\n   *\\r\\n   * If the optional `sd` argument is present then return binary exponential notation.\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toOctal = function (sd, rm) {\\r\\n    return toStringBinary(this, 8, sd, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\\r\\n   * to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * ECMAScript compliant.\\r\\n   *\\r\\n   *   pow(x, NaN)                           = NaN\\r\\n   *   pow(x, \\u00b10)                            = 1\\r\\n\\r\\n   *   pow(NaN, non-zero)                    = NaN\\r\\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\\r\\n   *   pow(abs(x) > 1, -Infinity)            = +0\\r\\n   *   pow(abs(x) == 1, \\u00b1Infinity)           = NaN\\r\\n   *   pow(abs(x) < 1, +Infinity)            = +0\\r\\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\\r\\n   *   pow(+Infinity, y > 0)                 = +Infinity\\r\\n   *   pow(+Infinity, y < 0)                 = +0\\r\\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\\r\\n   *   pow(-Infinity, even integer > 0)      = +Infinity\\r\\n   *   pow(-Infinity, odd integer < 0)       = -0\\r\\n   *   pow(-Infinity, even integer < 0)      = +0\\r\\n   *   pow(+0, y > 0)                        = +0\\r\\n   *   pow(+0, y < 0)                        = +Infinity\\r\\n   *   pow(-0, odd integer > 0)              = -0\\r\\n   *   pow(-0, even integer > 0)             = +0\\r\\n   *   pow(-0, odd integer < 0)              = -Infinity\\r\\n   *   pow(-0, even integer < 0)             = +Infinity\\r\\n   *   pow(finite x < 0, finite non-integer) = NaN\\r\\n   *\\r\\n   * For non-integer or very large exponents pow(x, y) is calculated using\\r\\n   *\\r\\n   *   x^y = exp(y*ln(x))\\r\\n   *\\r\\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\\r\\n   * probability of an incorrectly rounded result\\r\\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\\r\\n   * i.e. 1 in 250,000,000,000,000\\r\\n   *\\r\\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\\r\\n   *\\r\\n   * y {number|string|Decimal} The power to which to raise this Decimal.\\r\\n   *\\r\\n   */\\r\\n  P.toPower = P.pow = function (y) {\\r\\n    var e, k, pr, r, rm, s,\\r\\n      x = this,\\r\\n      Ctor = x.constructor,\\r\\n      yn = +(y = new Ctor(y));\\r\\n\\r\\n    // Either \\u00b1Infinity, NaN or \\u00b10?\\r\\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\\r\\n\\r\\n    x = new Ctor(x);\\r\\n\\r\\n    if (x.eq(1)) return x;\\r\\n\\r\\n    pr = Ctor.precision;\\r\\n    rm = Ctor.rounding;\\r\\n\\r\\n    if (y.eq(1)) return finalise(x, pr, rm);\\r\\n\\r\\n    // y exponent\\r\\n    e = mathfloor(y.e / LOG_BASE);\\r\\n\\r\\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\\r\\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\\r\\n      r = intPow(Ctor, x, k, pr);\\r\\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\\r\\n    }\\r\\n\\r\\n    s = x.s;\\r\\n\\r\\n    // if x is negative\\r\\n    if (s < 0) {\\r\\n\\r\\n      // if y is not an integer\\r\\n      if (e < y.d.length - 1) return new Ctor(NaN);\\r\\n\\r\\n      // Result is positive if x is negative and the last digit of integer y is even.\\r\\n      if ((y.d[e] & 1) == 0) s = 1;\\r\\n\\r\\n      // if x.eq(-1)\\r\\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\\r\\n        x.s = s;\\r\\n        return x;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Estimate result exponent.\\r\\n    // x^y = 10^e,  where e = y * log10(x)\\r\\n    // log10(x) = log10(x_significand) + x_exponent\\r\\n    // log10(x_significand) = ln(x_significand) / ln(10)\\r\\n    k = mathpow(+x, yn);\\r\\n    e = k == 0 || !isFinite(k)\\r\\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\\r\\n      : new Ctor(k + '').e;\\r\\n\\r\\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\\r\\n\\r\\n    // Overflow/underflow?\\r\\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\\r\\n\\r\\n    external = false;\\r\\n    Ctor.rounding = x.s = 1;\\r\\n\\r\\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\\r\\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\\r\\n    // new Decimal(2.32456).pow('2087987436534566.46411')\\r\\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\\r\\n    k = Math.min(12, (e + '').length);\\r\\n\\r\\n    // r = x^y = exp(y*ln(x))\\r\\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\\r\\n\\r\\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\\r\\n    if (r.d) {\\r\\n\\r\\n      // Truncate to the required precision plus five rounding digits.\\r\\n      r = finalise(r, pr + 5, 1);\\r\\n\\r\\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\\r\\n      // the result.\\r\\n      if (checkRoundingDigits(r.d, pr, rm)) {\\r\\n        e = pr + 10;\\r\\n\\r\\n        // Truncate to the increased precision plus five rounding digits.\\r\\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\\r\\n\\r\\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\\r\\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\\r\\n          r = finalise(r, pr + 1, 0);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    r.s = s;\\r\\n    external = true;\\r\\n    Ctor.rounding = rm;\\r\\n\\r\\n    return finalise(r, pr, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\\r\\n   * using rounding mode `rounding`.\\r\\n   *\\r\\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\\r\\n   * the integer part of the value in normal notation.\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   */\\r\\n  P.toPrecision = function (sd, rm) {\\r\\n    var str,\\r\\n      x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (sd === void 0) {\\r\\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\\r\\n    } else {\\r\\n      checkInt32(sd, 1, MAX_DIGITS);\\r\\n\\r\\n      if (rm === void 0) rm = Ctor.rounding;\\r\\n      else checkInt32(rm, 0, 8);\\r\\n\\r\\n      x = finalise(new Ctor(x), sd, rm);\\r\\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\\r\\n    }\\r\\n\\r\\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\\r\\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\\r\\n   * omitted.\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\\r\\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\\r\\n   *\\r\\n   * 'toSD() digits out of range: {sd}'\\r\\n   * 'toSD() digits not an integer: {sd}'\\r\\n   * 'toSD() rounding mode not an integer: {rm}'\\r\\n   * 'toSD() rounding mode out of range: {rm}'\\r\\n   *\\r\\n   */\\r\\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    if (sd === void 0) {\\r\\n      sd = Ctor.precision;\\r\\n      rm = Ctor.rounding;\\r\\n    } else {\\r\\n      checkInt32(sd, 1, MAX_DIGITS);\\r\\n\\r\\n      if (rm === void 0) rm = Ctor.rounding;\\r\\n      else checkInt32(rm, 0, 8);\\r\\n    }\\r\\n\\r\\n    return finalise(new Ctor(x), sd, rm);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal.\\r\\n   *\\r\\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\\r\\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\\r\\n   *\\r\\n   */\\r\\n  P.toString = function () {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor,\\r\\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\\r\\n\\r\\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\\r\\n   *\\r\\n   */\\r\\n  P.truncated = P.trunc = function () {\\r\\n    return finalise(new this.constructor(this), this.e + 1, 1);\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a string representing the value of this Decimal.\\r\\n   * Unlike `toString`, negative zero will include the minus sign.\\r\\n   *\\r\\n   */\\r\\n  P.valueOf = P.toJSON = function () {\\r\\n    var x = this,\\r\\n      Ctor = x.constructor,\\r\\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\\r\\n\\r\\n    return x.isNeg() ? '-' + str : str;\\r\\n  };\\r\\n\\r\\n\\r\\n  /*\\r\\n  // Add aliases to match BigDecimal method names.\\r\\n  // P.add = P.plus;\\r\\n  P.subtract = P.minus;\\r\\n  P.multiply = P.times;\\r\\n  P.divide = P.div;\\r\\n  P.remainder = P.mod;\\r\\n  P.compareTo = P.cmp;\\r\\n  P.negate = P.neg;\\r\\n   */\\r\\n\\r\\n\\r\\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\\r\\n   *                           finiteToString, naturalExponential, naturalLogarithm\\r\\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\\r\\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\\r\\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\\r\\n   *  convertBase              toStringBinary, parseOther\\r\\n   *  cos                      P.cos\\r\\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\\r\\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\\r\\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\\r\\n   *                           taylorSeries, atan2, parseOther\\r\\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\\r\\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\\r\\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\\r\\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\\r\\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\\r\\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\\r\\n   *                           naturalLogarithm, ceil, floor, round, trunc\\r\\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\\r\\n   *                           toStringBinary\\r\\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\\r\\n   *  getLn10                  P.logarithm, naturalLogarithm\\r\\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\\r\\n   *  getPrecision             P.precision, P.toFraction\\r\\n   *  getZeroString            digitsToString, finiteToString\\r\\n   *  intPow                   P.toPower, parseOther\\r\\n   *  isOdd                    toLessThanHalfPi\\r\\n   *  maxOrMin                 max, min\\r\\n   *  naturalExponential       P.naturalExponential, P.toPower\\r\\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\\r\\n   *                           P.toPower, naturalExponential\\r\\n   *  nonFiniteToString        finiteToString, toStringBinary\\r\\n   *  parseDecimal             Decimal\\r\\n   *  parseOther               Decimal\\r\\n   *  sin                      P.sin\\r\\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\\r\\n   *  toLessThanHalfPi         P.cos, P.sin\\r\\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\\r\\n   *  truncate                 intPow\\r\\n   *\\r\\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\\r\\n   *                           naturalLogarithm, config, parseOther, random, Decimal\\r\\n   */\\r\\n\\r\\n\\r\\n  function digitsToString(d) {\\r\\n    var i, k, ws,\\r\\n      indexOfLastWord = d.length - 1,\\r\\n      str = '',\\r\\n      w = d[0];\\r\\n\\r\\n    if (indexOfLastWord > 0) {\\r\\n      str += w;\\r\\n      for (i = 1; i < indexOfLastWord; i++) {\\r\\n        ws = d[i] + '';\\r\\n        k = LOG_BASE - ws.length;\\r\\n        if (k) str += getZeroString(k);\\r\\n        str += ws;\\r\\n      }\\r\\n\\r\\n      w = d[i];\\r\\n      ws = w + '';\\r\\n      k = LOG_BASE - ws.length;\\r\\n      if (k) str += getZeroString(k);\\r\\n    } else if (w === 0) {\\r\\n      return '0';\\r\\n    }\\r\\n\\r\\n    // Remove trailing zeros of last w.\\r\\n    for (; w % 10 === 0;) w /= 10;\\r\\n\\r\\n    return str + w;\\r\\n  }\\r\\n\\r\\n\\r\\n  function checkInt32(i, min, max) {\\r\\n    if (i !== ~~i || i < min || i > max) {\\r\\n      throw Error(invalidArgument + i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\\r\\n   * `repeating == null` if caller is `log` or `pow`,\\r\\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\\r\\n   */\\r\\n  function checkRoundingDigits(d, i, rm, repeating) {\\r\\n    var di, k, r, rd;\\r\\n\\r\\n    // Get the length of the first word of the array d.\\r\\n    for (k = d[0]; k >= 10; k /= 10) --i;\\r\\n\\r\\n    // Is the rounding digit in the first word of d?\\r\\n    if (--i < 0) {\\r\\n      i += LOG_BASE;\\r\\n      di = 0;\\r\\n    } else {\\r\\n      di = Math.ceil((i + 1) / LOG_BASE);\\r\\n      i %= LOG_BASE;\\r\\n    }\\r\\n\\r\\n    // i is the index (0 - 6) of the rounding digit.\\r\\n    // E.g. if within the word 3487563 the first rounding digit is 5,\\r\\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\\r\\n    k = mathpow(10, LOG_BASE - i);\\r\\n    rd = d[di] % k | 0;\\r\\n\\r\\n    if (repeating == null) {\\r\\n      if (i < 3) {\\r\\n        if (i == 0) rd = rd / 100 | 0;\\r\\n        else if (i == 1) rd = rd / 10 | 0;\\r\\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\\r\\n      } else {\\r\\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\\r\\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\\r\\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\\r\\n      }\\r\\n    } else {\\r\\n      if (i < 4) {\\r\\n        if (i == 0) rd = rd / 1000 | 0;\\r\\n        else if (i == 1) rd = rd / 100 | 0;\\r\\n        else if (i == 2) rd = rd / 10 | 0;\\r\\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\\r\\n      } else {\\r\\n        r = ((repeating || rm < 4) && rd + 1 == k ||\\r\\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\\r\\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return r;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\\r\\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\\r\\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\\r\\n  function convertBase(str, baseIn, baseOut) {\\r\\n    var j,\\r\\n      arr = [0],\\r\\n      arrL,\\r\\n      i = 0,\\r\\n      strL = str.length;\\r\\n\\r\\n    for (; i < strL;) {\\r\\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\\r\\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\\r\\n      for (j = 0; j < arr.length; j++) {\\r\\n        if (arr[j] > baseOut - 1) {\\r\\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\\r\\n          arr[j + 1] += arr[j] / baseOut | 0;\\r\\n          arr[j] %= baseOut;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return arr.reverse();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\\r\\n   * |x| < pi/2\\r\\n   *\\r\\n   */\\r\\n  function cosine(Ctor, x) {\\r\\n    var k, y,\\r\\n      len = x.d.length;\\r\\n\\r\\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\\r\\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\\r\\n\\r\\n    // Estimate the optimum number of times to use the argument reduction.\\r\\n    if (len < 32) {\\r\\n      k = Math.ceil(len / 3);\\r\\n      y = (1 / tinyPow(4, k)).toString();\\r\\n    } else {\\r\\n      k = 16;\\r\\n      y = '2.3283064365386962890625e-10';\\r\\n    }\\r\\n\\r\\n    Ctor.precision += k;\\r\\n\\r\\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\\r\\n\\r\\n    // Reverse argument reduction\\r\\n    for (var i = k; i--;) {\\r\\n      var cos2x = x.times(x);\\r\\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\\r\\n    }\\r\\n\\r\\n    Ctor.precision -= k;\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Perform division in the specified base.\\r\\n   */\\r\\n  var divide = (function () {\\r\\n\\r\\n    // Assumes non-zero x and k, and hence non-zero result.\\r\\n    function multiplyInteger(x, k, base) {\\r\\n      var temp,\\r\\n        carry = 0,\\r\\n        i = x.length;\\r\\n\\r\\n      for (x = x.slice(); i--;) {\\r\\n        temp = x[i] * k + carry;\\r\\n        x[i] = temp % base | 0;\\r\\n        carry = temp / base | 0;\\r\\n      }\\r\\n\\r\\n      if (carry) x.unshift(carry);\\r\\n\\r\\n      return x;\\r\\n    }\\r\\n\\r\\n    function compare(a, b, aL, bL) {\\r\\n      var i, r;\\r\\n\\r\\n      if (aL != bL) {\\r\\n        r = aL > bL ? 1 : -1;\\r\\n      } else {\\r\\n        for (i = r = 0; i < aL; i++) {\\r\\n          if (a[i] != b[i]) {\\r\\n            r = a[i] > b[i] ? 1 : -1;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return r;\\r\\n    }\\r\\n\\r\\n    function subtract(a, b, aL, base) {\\r\\n      var i = 0;\\r\\n\\r\\n      // Subtract b from a.\\r\\n      for (; aL--;) {\\r\\n        a[aL] -= i;\\r\\n        i = a[aL] < b[aL] ? 1 : 0;\\r\\n        a[aL] = i * base + a[aL] - b[aL];\\r\\n      }\\r\\n\\r\\n      // Remove leading zeros.\\r\\n      for (; !a[0] && a.length > 1;) a.shift();\\r\\n    }\\r\\n\\r\\n    return function (x, y, pr, rm, dp, base) {\\r\\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\\r\\n        yL, yz,\\r\\n        Ctor = x.constructor,\\r\\n        sign = x.s == y.s ? 1 : -1,\\r\\n        xd = x.d,\\r\\n        yd = y.d;\\r\\n\\r\\n      // Either NaN, Infinity or 0?\\r\\n      if (!xd || !xd[0] || !yd || !yd[0]) {\\r\\n\\r\\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\\r\\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\\r\\n\\r\\n          // Return \\u00b10 if x is 0 or y is \\u00b1Infinity, or return \\u00b1Infinity as y is 0.\\r\\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\\r\\n      }\\r\\n\\r\\n      if (base) {\\r\\n        logBase = 1;\\r\\n        e = x.e - y.e;\\r\\n      } else {\\r\\n        base = BASE;\\r\\n        logBase = LOG_BASE;\\r\\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\\r\\n      }\\r\\n\\r\\n      yL = yd.length;\\r\\n      xL = xd.length;\\r\\n      q = new Ctor(sign);\\r\\n      qd = q.d = [];\\r\\n\\r\\n      // Result exponent may be one less than e.\\r\\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\\r\\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\\r\\n\\r\\n      if (yd[i] > (xd[i] || 0)) e--;\\r\\n\\r\\n      if (pr == null) {\\r\\n        sd = pr = Ctor.precision;\\r\\n        rm = Ctor.rounding;\\r\\n      } else if (dp) {\\r\\n        sd = pr + (x.e - y.e) + 1;\\r\\n      } else {\\r\\n        sd = pr;\\r\\n      }\\r\\n\\r\\n      if (sd < 0) {\\r\\n        qd.push(1);\\r\\n        more = true;\\r\\n      } else {\\r\\n\\r\\n        // Convert precision in number of base 10 digits to base 1e7 digits.\\r\\n        sd = sd / logBase + 2 | 0;\\r\\n        i = 0;\\r\\n\\r\\n        // divisor < 1e7\\r\\n        if (yL == 1) {\\r\\n          k = 0;\\r\\n          yd = yd[0];\\r\\n          sd++;\\r\\n\\r\\n          // k is the carry.\\r\\n          for (; (i < xL || k) && sd--; i++) {\\r\\n            t = k * base + (xd[i] || 0);\\r\\n            qd[i] = t / yd | 0;\\r\\n            k = t % yd | 0;\\r\\n          }\\r\\n\\r\\n          more = k || i < xL;\\r\\n\\r\\n        // divisor >= 1e7\\r\\n        } else {\\r\\n\\r\\n          // Normalise xd and yd so highest order digit of yd is >= base/2\\r\\n          k = base / (yd[0] + 1) | 0;\\r\\n\\r\\n          if (k > 1) {\\r\\n            yd = multiplyInteger(yd, k, base);\\r\\n            xd = multiplyInteger(xd, k, base);\\r\\n            yL = yd.length;\\r\\n            xL = xd.length;\\r\\n          }\\r\\n\\r\\n          xi = yL;\\r\\n          rem = xd.slice(0, yL);\\r\\n          remL = rem.length;\\r\\n\\r\\n          // Add zeros to make remainder as long as divisor.\\r\\n          for (; remL < yL;) rem[remL++] = 0;\\r\\n\\r\\n          yz = yd.slice();\\r\\n          yz.unshift(0);\\r\\n          yd0 = yd[0];\\r\\n\\r\\n          if (yd[1] >= base / 2) ++yd0;\\r\\n\\r\\n          do {\\r\\n            k = 0;\\r\\n\\r\\n            // Compare divisor and remainder.\\r\\n            cmp = compare(yd, rem, yL, remL);\\r\\n\\r\\n            // If divisor < remainder.\\r\\n            if (cmp < 0) {\\r\\n\\r\\n              // Calculate trial digit, k.\\r\\n              rem0 = rem[0];\\r\\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\\r\\n\\r\\n              // k will be how many times the divisor goes into the current remainder.\\r\\n              k = rem0 / yd0 | 0;\\r\\n\\r\\n              //  Algorithm:\\r\\n              //  1. product = divisor * trial digit (k)\\r\\n              //  2. if product > remainder: product -= divisor, k--\\r\\n              //  3. remainder -= product\\r\\n              //  4. if product was < remainder at 2:\\r\\n              //    5. compare new remainder and divisor\\r\\n              //    6. If remainder > divisor: remainder -= divisor, k++\\r\\n\\r\\n              if (k > 1) {\\r\\n                if (k >= base) k = base - 1;\\r\\n\\r\\n                // product = divisor * trial digit.\\r\\n                prod = multiplyInteger(yd, k, base);\\r\\n                prodL = prod.length;\\r\\n                remL = rem.length;\\r\\n\\r\\n                // Compare product and remainder.\\r\\n                cmp = compare(prod, rem, prodL, remL);\\r\\n\\r\\n                // product > remainder.\\r\\n                if (cmp == 1) {\\r\\n                  k--;\\r\\n\\r\\n                  // Subtract divisor from product.\\r\\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\\r\\n                }\\r\\n              } else {\\r\\n\\r\\n                // cmp is -1.\\r\\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\\r\\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\\r\\n                if (k == 0) cmp = k = 1;\\r\\n                prod = yd.slice();\\r\\n              }\\r\\n\\r\\n              prodL = prod.length;\\r\\n              if (prodL < remL) prod.unshift(0);\\r\\n\\r\\n              // Subtract product from remainder.\\r\\n              subtract(rem, prod, remL, base);\\r\\n\\r\\n              // If product was < previous remainder.\\r\\n              if (cmp == -1) {\\r\\n                remL = rem.length;\\r\\n\\r\\n                // Compare divisor and new remainder.\\r\\n                cmp = compare(yd, rem, yL, remL);\\r\\n\\r\\n                // If divisor < new remainder, subtract divisor from remainder.\\r\\n                if (cmp < 1) {\\r\\n                  k++;\\r\\n\\r\\n                  // Subtract divisor from remainder.\\r\\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\\r\\n                }\\r\\n              }\\r\\n\\r\\n              remL = rem.length;\\r\\n            } else if (cmp === 0) {\\r\\n              k++;\\r\\n              rem = [0];\\r\\n            }    // if cmp === 1, k will be 0\\r\\n\\r\\n            // Add the next digit, k, to the result array.\\r\\n            qd[i++] = k;\\r\\n\\r\\n            // Update the remainder.\\r\\n            if (cmp && rem[0]) {\\r\\n              rem[remL++] = xd[xi] || 0;\\r\\n            } else {\\r\\n              rem = [xd[xi]];\\r\\n              remL = 1;\\r\\n            }\\r\\n\\r\\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\\r\\n\\r\\n          more = rem[0] !== void 0;\\r\\n        }\\r\\n\\r\\n        // Leading zero?\\r\\n        if (!qd[0]) qd.shift();\\r\\n      }\\r\\n\\r\\n      // logBase is 1 when divide is being used for base conversion.\\r\\n      if (logBase == 1) {\\r\\n        q.e = e;\\r\\n        inexact = more;\\r\\n      } else {\\r\\n\\r\\n        // To calculate q.e, first get the number of digits of qd[0].\\r\\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\\r\\n        q.e = i + e * logBase - 1;\\r\\n\\r\\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\\r\\n      }\\r\\n\\r\\n      return q;\\r\\n    };\\r\\n  })();\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\\r\\n   * Check for over/under-flow.\\r\\n   */\\r\\n   function finalise(x, sd, rm, isTruncated) {\\r\\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\\r\\n      Ctor = x.constructor;\\r\\n\\r\\n    // Don't round if sd is null or undefined.\\r\\n    out: if (sd != null) {\\r\\n      xd = x.d;\\r\\n\\r\\n      // Infinity/NaN.\\r\\n      if (!xd) return x;\\r\\n\\r\\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\\r\\n      // w: the word of xd containing rd, a base 1e7 number.\\r\\n      // xdi: the index of w within xd.\\r\\n      // digits: the number of digits of w.\\r\\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\\r\\n      // they had leading zeros)\\r\\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\\r\\n\\r\\n      // Get the length of the first word of the digits array xd.\\r\\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\\r\\n      i = sd - digits;\\r\\n\\r\\n      // Is the rounding digit in the first word of xd?\\r\\n      if (i < 0) {\\r\\n        i += LOG_BASE;\\r\\n        j = sd;\\r\\n        w = xd[xdi = 0];\\r\\n\\r\\n        // Get the rounding digit at index j of w.\\r\\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\\r\\n      } else {\\r\\n        xdi = Math.ceil((i + 1) / LOG_BASE);\\r\\n        k = xd.length;\\r\\n        if (xdi >= k) {\\r\\n          if (isTruncated) {\\r\\n\\r\\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\\r\\n            for (; k++ <= xdi;) xd.push(0);\\r\\n            w = rd = 0;\\r\\n            digits = 1;\\r\\n            i %= LOG_BASE;\\r\\n            j = i - LOG_BASE + 1;\\r\\n          } else {\\r\\n            break out;\\r\\n          }\\r\\n        } else {\\r\\n          w = k = xd[xdi];\\r\\n\\r\\n          // Get the number of digits of w.\\r\\n          for (digits = 1; k >= 10; k /= 10) digits++;\\r\\n\\r\\n          // Get the index of rd within w.\\r\\n          i %= LOG_BASE;\\r\\n\\r\\n          // Get the index of rd within w, adjusted for leading zeros.\\r\\n          // The number of leading zeros of w is given by LOG_BASE - digits.\\r\\n          j = i - LOG_BASE + digits;\\r\\n\\r\\n          // Get the rounding digit at index j of w.\\r\\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // Are there any non-zero digits after the rounding digit?\\r\\n      isTruncated = isTruncated || sd < 0 ||\\r\\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\\r\\n\\r\\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\\r\\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\\r\\n      // will give 714.\\r\\n\\r\\n      roundUp = rm < 4\\r\\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\\r\\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\\r\\n\\r\\n          // Check whether the digit to the left of the rounding digit is odd.\\r\\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\\r\\n            rm == (x.s < 0 ? 8 : 7));\\r\\n\\r\\n      if (sd < 1 || !xd[0]) {\\r\\n        xd.length = 0;\\r\\n        if (roundUp) {\\r\\n\\r\\n          // Convert sd to decimal places.\\r\\n          sd -= x.e + 1;\\r\\n\\r\\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\\r\\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\\r\\n          x.e = -sd || 0;\\r\\n        } else {\\r\\n\\r\\n          // Zero.\\r\\n          xd[0] = x.e = 0;\\r\\n        }\\r\\n\\r\\n        return x;\\r\\n      }\\r\\n\\r\\n      // Remove excess digits.\\r\\n      if (i == 0) {\\r\\n        xd.length = xdi;\\r\\n        k = 1;\\r\\n        xdi--;\\r\\n      } else {\\r\\n        xd.length = xdi + 1;\\r\\n        k = mathpow(10, LOG_BASE - i);\\r\\n\\r\\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\\r\\n        // j > 0 means i > number of leading zeros of w.\\r\\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\\r\\n      }\\r\\n\\r\\n      if (roundUp) {\\r\\n        for (;;) {\\r\\n\\r\\n          // Is the digit to be rounded up in the first word of xd?\\r\\n          if (xdi == 0) {\\r\\n\\r\\n            // i will be the length of xd[0] before k is added.\\r\\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\\r\\n            j = xd[0] += k;\\r\\n            for (k = 1; j >= 10; j /= 10) k++;\\r\\n\\r\\n            // if i != k the length has increased.\\r\\n            if (i != k) {\\r\\n              x.e++;\\r\\n              if (xd[0] == BASE) xd[0] = 1;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n          } else {\\r\\n            xd[xdi] += k;\\r\\n            if (xd[xdi] != BASE) break;\\r\\n            xd[xdi--] = 0;\\r\\n            k = 1;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // Remove trailing zeros.\\r\\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\\r\\n    }\\r\\n\\r\\n    if (external) {\\r\\n\\r\\n      // Overflow?\\r\\n      if (x.e > Ctor.maxE) {\\r\\n\\r\\n        // Infinity.\\r\\n        x.d = null;\\r\\n        x.e = NaN;\\r\\n\\r\\n      // Underflow?\\r\\n      } else if (x.e < Ctor.minE) {\\r\\n\\r\\n        // Zero.\\r\\n        x.e = 0;\\r\\n        x.d = [0];\\r\\n        // Ctor.underflow = true;\\r\\n      } // else Ctor.underflow = false;\\r\\n    }\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  function finiteToString(x, isExp, sd) {\\r\\n    if (!x.isFinite()) return nonFiniteToString(x);\\r\\n    var k,\\r\\n      e = x.e,\\r\\n      str = digitsToString(x.d),\\r\\n      len = str.length;\\r\\n\\r\\n    if (isExp) {\\r\\n      if (sd && (k = sd - len) > 0) {\\r\\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\\r\\n      } else if (len > 1) {\\r\\n        str = str.charAt(0) + '.' + str.slice(1);\\r\\n      }\\r\\n\\r\\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\\r\\n    } else if (e < 0) {\\r\\n      str = '0.' + getZeroString(-e - 1) + str;\\r\\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\\r\\n    } else if (e >= len) {\\r\\n      str += getZeroString(e + 1 - len);\\r\\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\\r\\n    } else {\\r\\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\\r\\n      if (sd && (k = sd - len) > 0) {\\r\\n        if (e + 1 === len) str += '.';\\r\\n        str += getZeroString(k);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return str;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Calculate the base 10 exponent from the base 1e7 exponent.\\r\\n  function getBase10Exponent(digits, e) {\\r\\n    var w = digits[0];\\r\\n\\r\\n    // Add the number of digits of the first word of the digits array.\\r\\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\\r\\n    return e;\\r\\n  }\\r\\n\\r\\n\\r\\n  function getLn10(Ctor, sd, pr) {\\r\\n    if (sd > LN10_PRECISION) {\\r\\n\\r\\n      // Reset global state in case the exception is caught.\\r\\n      external = true;\\r\\n      if (pr) Ctor.precision = pr;\\r\\n      throw Error(precisionLimitExceeded);\\r\\n    }\\r\\n    return finalise(new Ctor(LN10), sd, 1, true);\\r\\n  }\\r\\n\\r\\n\\r\\n  function getPi(Ctor, sd, rm) {\\r\\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\\r\\n    return finalise(new Ctor(PI), sd, rm, true);\\r\\n  }\\r\\n\\r\\n\\r\\n  function getPrecision(digits) {\\r\\n    var w = digits.length - 1,\\r\\n      len = w * LOG_BASE + 1;\\r\\n\\r\\n    w = digits[w];\\r\\n\\r\\n    // If non-zero...\\r\\n    if (w) {\\r\\n\\r\\n      // Subtract the number of trailing zeros of the last word.\\r\\n      for (; w % 10 == 0; w /= 10) len--;\\r\\n\\r\\n      // Add the number of digits of the first word.\\r\\n      for (w = digits[0]; w >= 10; w /= 10) len++;\\r\\n    }\\r\\n\\r\\n    return len;\\r\\n  }\\r\\n\\r\\n\\r\\n  function getZeroString(k) {\\r\\n    var zs = '';\\r\\n    for (; k--;) zs += '0';\\r\\n    return zs;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\\r\\n   * integer of type number.\\r\\n   *\\r\\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\\r\\n   *\\r\\n   */\\r\\n  function intPow(Ctor, x, n, pr) {\\r\\n    var isTruncated,\\r\\n      r = new Ctor(1),\\r\\n\\r\\n      // Max n of 9007199254740991 takes 53 loop iterations.\\r\\n      // Maximum digits array length; leaves [28, 34] guard digits.\\r\\n      k = Math.ceil(pr / LOG_BASE + 4);\\r\\n\\r\\n    external = false;\\r\\n\\r\\n    for (;;) {\\r\\n      if (n % 2) {\\r\\n        r = r.times(x);\\r\\n        if (truncate(r.d, k)) isTruncated = true;\\r\\n      }\\r\\n\\r\\n      n = mathfloor(n / 2);\\r\\n      if (n === 0) {\\r\\n\\r\\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\\r\\n        n = r.d.length - 1;\\r\\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\\r\\n        break;\\r\\n      }\\r\\n\\r\\n      x = x.times(x);\\r\\n      truncate(x.d, k);\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return r;\\r\\n  }\\r\\n\\r\\n\\r\\n  function isOdd(n) {\\r\\n    return n.d[n.d.length - 1] & 1;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\\r\\n   */\\r\\n  function maxOrMin(Ctor, args, ltgt) {\\r\\n    var y,\\r\\n      x = new Ctor(args[0]),\\r\\n      i = 0;\\r\\n\\r\\n    for (; ++i < args.length;) {\\r\\n      y = new Ctor(args[i]);\\r\\n      if (!y.s) {\\r\\n        x = y;\\r\\n        break;\\r\\n      } else if (x[ltgt](y)) {\\r\\n        x = y;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\\r\\n   * digits.\\r\\n   *\\r\\n   * Taylor/Maclaurin series.\\r\\n   *\\r\\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\\r\\n   *\\r\\n   * Argument reduction:\\r\\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\\r\\n   *   exp(x) = exp(x / 2^k)^(2^k)\\r\\n   *\\r\\n   * Previously, the argument was initially reduced by\\r\\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\\r\\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\\r\\n   * found to be slower than just dividing repeatedly by 32 as above.\\r\\n   *\\r\\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\\r\\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\\r\\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\\r\\n   *\\r\\n   *  exp(Infinity)  = Infinity\\r\\n   *  exp(-Infinity) = 0\\r\\n   *  exp(NaN)       = NaN\\r\\n   *  exp(\\u00b10)        = 1\\r\\n   *\\r\\n   *  exp(x) is non-terminating for any finite, non-zero x.\\r\\n   *\\r\\n   *  The result will always be correctly rounded.\\r\\n   *\\r\\n   */\\r\\n  function naturalExponential(x, sd) {\\r\\n    var denominator, guard, j, pow, sum, t, wpr,\\r\\n      rep = 0,\\r\\n      i = 0,\\r\\n      k = 0,\\r\\n      Ctor = x.constructor,\\r\\n      rm = Ctor.rounding,\\r\\n      pr = Ctor.precision;\\r\\n\\r\\n    // 0/NaN/Infinity?\\r\\n    if (!x.d || !x.d[0] || x.e > 17) {\\r\\n\\r\\n      return new Ctor(x.d\\r\\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\\r\\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\\r\\n    }\\r\\n\\r\\n    if (sd == null) {\\r\\n      external = false;\\r\\n      wpr = pr;\\r\\n    } else {\\r\\n      wpr = sd;\\r\\n    }\\r\\n\\r\\n    t = new Ctor(0.03125);\\r\\n\\r\\n    // while abs(x) >= 0.1\\r\\n    while (x.e > -2) {\\r\\n\\r\\n      // x = x / 2^5\\r\\n      x = x.times(t);\\r\\n      k += 5;\\r\\n    }\\r\\n\\r\\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\\r\\n    // necessary to ensure the first 4 rounding digits are correct.\\r\\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\\r\\n    wpr += guard;\\r\\n    denominator = pow = sum = new Ctor(1);\\r\\n    Ctor.precision = wpr;\\r\\n\\r\\n    for (;;) {\\r\\n      pow = finalise(pow.times(x), wpr, 1);\\r\\n      denominator = denominator.times(++i);\\r\\n      t = sum.plus(divide(pow, denominator, wpr, 1));\\r\\n\\r\\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\\r\\n        j = k;\\r\\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\\r\\n\\r\\n        // Check to see if the first 4 rounding digits are [49]999.\\r\\n        // If so, repeat the summation with a higher precision, otherwise\\r\\n        // e.g. with precision: 18, rounding: 1\\r\\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\\r\\n        // `wpr - guard` is the index of first rounding digit.\\r\\n        if (sd == null) {\\r\\n\\r\\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\\r\\n            Ctor.precision = wpr += 10;\\r\\n            denominator = pow = t = new Ctor(1);\\r\\n            i = 0;\\r\\n            rep++;\\r\\n          } else {\\r\\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\\r\\n          }\\r\\n        } else {\\r\\n          Ctor.precision = pr;\\r\\n          return sum;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      sum = t;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\\r\\n   * digits.\\r\\n   *\\r\\n   *  ln(-n)        = NaN\\r\\n   *  ln(0)         = -Infinity\\r\\n   *  ln(-0)        = -Infinity\\r\\n   *  ln(1)         = 0\\r\\n   *  ln(Infinity)  = Infinity\\r\\n   *  ln(-Infinity) = NaN\\r\\n   *  ln(NaN)       = NaN\\r\\n   *\\r\\n   *  ln(n) (n != 1) is non-terminating.\\r\\n   *\\r\\n   */\\r\\n  function naturalLogarithm(y, sd) {\\r\\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\\r\\n      n = 1,\\r\\n      guard = 10,\\r\\n      x = y,\\r\\n      xd = x.d,\\r\\n      Ctor = x.constructor,\\r\\n      rm = Ctor.rounding,\\r\\n      pr = Ctor.precision;\\r\\n\\r\\n    // Is x negative or Infinity, NaN, 0 or 1?\\r\\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\\r\\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\\r\\n    }\\r\\n\\r\\n    if (sd == null) {\\r\\n      external = false;\\r\\n      wpr = pr;\\r\\n    } else {\\r\\n      wpr = sd;\\r\\n    }\\r\\n\\r\\n    Ctor.precision = wpr += guard;\\r\\n    c = digitsToString(xd);\\r\\n    c0 = c.charAt(0);\\r\\n\\r\\n    if (Math.abs(e = x.e) < 1.5e15) {\\r\\n\\r\\n      // Argument reduction.\\r\\n      // The series converges faster the closer the argument is to 1, so using\\r\\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\\r\\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\\r\\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\\r\\n      // later be divided by this number, then separate out the power of 10 using\\r\\n      // ln(a*10^b) = ln(a) + b*ln(10).\\r\\n\\r\\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\\r\\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\\r\\n      // max n is 6 (gives 0.7 - 1.3)\\r\\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\\r\\n        x = x.times(y);\\r\\n        c = digitsToString(x.d);\\r\\n        c0 = c.charAt(0);\\r\\n        n++;\\r\\n      }\\r\\n\\r\\n      e = x.e;\\r\\n\\r\\n      if (c0 > 1) {\\r\\n        x = new Ctor('0.' + c);\\r\\n        e++;\\r\\n      } else {\\r\\n        x = new Ctor(c0 + '.' + c.slice(1));\\r\\n      }\\r\\n    } else {\\r\\n\\r\\n      // The argument reduction method above may result in overflow if the argument y is a massive\\r\\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\\r\\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\\r\\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\\r\\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\\r\\n      Ctor.precision = pr;\\r\\n\\r\\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\\r\\n    }\\r\\n\\r\\n    // x1 is x reduced to a value near 1.\\r\\n    x1 = x;\\r\\n\\r\\n    // Taylor series.\\r\\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\\r\\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\\r\\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\\r\\n    x2 = finalise(x.times(x), wpr, 1);\\r\\n    denominator = 3;\\r\\n\\r\\n    for (;;) {\\r\\n      numerator = finalise(numerator.times(x2), wpr, 1);\\r\\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\\r\\n\\r\\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\\r\\n        sum = sum.times(2);\\r\\n\\r\\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\\r\\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\\r\\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\\r\\n        sum = divide(sum, new Ctor(n), wpr, 1);\\r\\n\\r\\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\\r\\n        // been repeated previously) and the first 4 rounding digits 9999?\\r\\n        // If so, restart the summation with a higher precision, otherwise\\r\\n        // e.g. with precision: 12, rounding: 1\\r\\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\\r\\n        // `wpr - guard` is the index of first rounding digit.\\r\\n        if (sd == null) {\\r\\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\\r\\n            Ctor.precision = wpr += guard;\\r\\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\\r\\n            x2 = finalise(x.times(x), wpr, 1);\\r\\n            denominator = rep = 1;\\r\\n          } else {\\r\\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\\r\\n          }\\r\\n        } else {\\r\\n          Ctor.precision = pr;\\r\\n          return sum;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      sum = t;\\r\\n      denominator += 2;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  // \\u00b1Infinity, NaN.\\r\\n  function nonFiniteToString(x) {\\r\\n    // Unsigned.\\r\\n    return String(x.s * x.s / 0);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Parse the value of a new Decimal `x` from string `str`.\\r\\n   */\\r\\n  function parseDecimal(x, str) {\\r\\n    var e, i, len;\\r\\n\\r\\n    // Decimal point?\\r\\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\\r\\n\\r\\n    // Exponential form?\\r\\n    if ((i = str.search(/e/i)) > 0) {\\r\\n\\r\\n      // Determine exponent.\\r\\n      if (e < 0) e = i;\\r\\n      e += +str.slice(i + 1);\\r\\n      str = str.substring(0, i);\\r\\n    } else if (e < 0) {\\r\\n\\r\\n      // Integer.\\r\\n      e = str.length;\\r\\n    }\\r\\n\\r\\n    // Determine leading zeros.\\r\\n    for (i = 0; str.charCodeAt(i) === 48; i++);\\r\\n\\r\\n    // Determine trailing zeros.\\r\\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\\r\\n    str = str.slice(i, len);\\r\\n\\r\\n    if (str) {\\r\\n      len -= i;\\r\\n      x.e = e = e - i - 1;\\r\\n      x.d = [];\\r\\n\\r\\n      // Transform base\\r\\n\\r\\n      // e is the base 10 exponent.\\r\\n      // i is where to slice str to get the first word of the digits array.\\r\\n      i = (e + 1) % LOG_BASE;\\r\\n      if (e < 0) i += LOG_BASE;\\r\\n\\r\\n      if (i < len) {\\r\\n        if (i) x.d.push(+str.slice(0, i));\\r\\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\\r\\n        str = str.slice(i);\\r\\n        i = LOG_BASE - str.length;\\r\\n      } else {\\r\\n        i -= len;\\r\\n      }\\r\\n\\r\\n      for (; i--;) str += '0';\\r\\n      x.d.push(+str);\\r\\n\\r\\n      if (external) {\\r\\n\\r\\n        // Overflow?\\r\\n        if (x.e > x.constructor.maxE) {\\r\\n\\r\\n          // Infinity.\\r\\n          x.d = null;\\r\\n          x.e = NaN;\\r\\n\\r\\n        // Underflow?\\r\\n        } else if (x.e < x.constructor.minE) {\\r\\n\\r\\n          // Zero.\\r\\n          x.e = 0;\\r\\n          x.d = [0];\\r\\n          // x.constructor.underflow = true;\\r\\n        } // else x.constructor.underflow = false;\\r\\n      }\\r\\n    } else {\\r\\n\\r\\n      // Zero.\\r\\n      x.e = 0;\\r\\n      x.d = [0];\\r\\n    }\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\\r\\n   */\\r\\n  function parseOther(x, str) {\\r\\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\\r\\n\\r\\n    if (str === 'Infinity' || str === 'NaN') {\\r\\n      if (!+str) x.s = NaN;\\r\\n      x.e = NaN;\\r\\n      x.d = null;\\r\\n      return x;\\r\\n    }\\r\\n\\r\\n    if (isHex.test(str))  {\\r\\n      base = 16;\\r\\n      str = str.toLowerCase();\\r\\n    } else if (isBinary.test(str))  {\\r\\n      base = 2;\\r\\n    } else if (isOctal.test(str))  {\\r\\n      base = 8;\\r\\n    } else {\\r\\n      throw Error(invalidArgument + str);\\r\\n    }\\r\\n\\r\\n    // Is there a binary exponent part?\\r\\n    i = str.search(/p/i);\\r\\n\\r\\n    if (i > 0) {\\r\\n      p = +str.slice(i + 1);\\r\\n      str = str.substring(2, i);\\r\\n    } else {\\r\\n      str = str.slice(2);\\r\\n    }\\r\\n\\r\\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\\r\\n    // fraction part will be restored.\\r\\n    i = str.indexOf('.');\\r\\n    isFloat = i >= 0;\\r\\n    Ctor = x.constructor;\\r\\n\\r\\n    if (isFloat) {\\r\\n      str = str.replace('.', '');\\r\\n      len = str.length;\\r\\n      i = len - i;\\r\\n\\r\\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\\r\\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\\r\\n    }\\r\\n\\r\\n    xd = convertBase(str, base, BASE);\\r\\n    xe = xd.length - 1;\\r\\n\\r\\n    // Remove trailing zeros.\\r\\n    for (i = xe; xd[i] === 0; --i) xd.pop();\\r\\n    if (i < 0) return new Ctor(x.s * 0);\\r\\n    x.e = getBase10Exponent(xd, xe);\\r\\n    x.d = xd;\\r\\n    external = false;\\r\\n\\r\\n    // At what precision to perform the division to ensure exact conversion?\\r\\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\\r\\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\\r\\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\\r\\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\\r\\n    // Therefore using 4 * the number of digits of str will always be enough.\\r\\n    if (isFloat) x = divide(x, divisor, len * 4);\\r\\n\\r\\n    // Multiply by the binary exponent part if present.\\r\\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\\r\\n    external = true;\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * sin(x) = x - x^3/3! + x^5/5! - ...\\r\\n   * |x| < pi/2\\r\\n   *\\r\\n   */\\r\\n  function sine(Ctor, x) {\\r\\n    var k,\\r\\n      len = x.d.length;\\r\\n\\r\\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\\r\\n\\r\\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\\r\\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\\r\\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\\r\\n\\r\\n    // Estimate the optimum number of times to use the argument reduction.\\r\\n    k = 1.4 * Math.sqrt(len);\\r\\n    k = k > 16 ? 16 : k | 0;\\r\\n\\r\\n    x = x.times(1 / tinyPow(5, k));\\r\\n    x = taylorSeries(Ctor, 2, x, x);\\r\\n\\r\\n    // Reverse argument reduction\\r\\n    var sin2_x,\\r\\n      d5 = new Ctor(5),\\r\\n      d16 = new Ctor(16),\\r\\n      d20 = new Ctor(20);\\r\\n    for (; k--;) {\\r\\n      sin2_x = x.times(x);\\r\\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\\r\\n    }\\r\\n\\r\\n    return x;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\\r\\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\\r\\n    var j, t, u, x2,\\r\\n      i = 1,\\r\\n      pr = Ctor.precision,\\r\\n      k = Math.ceil(pr / LOG_BASE);\\r\\n\\r\\n    external = false;\\r\\n    x2 = x.times(x);\\r\\n    u = new Ctor(y);\\r\\n\\r\\n    for (;;) {\\r\\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\\r\\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\\r\\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\\r\\n      t = u.plus(y);\\r\\n\\r\\n      if (t.d[k] !== void 0) {\\r\\n        for (j = k; t.d[j] === u.d[j] && j--;);\\r\\n        if (j == -1) break;\\r\\n      }\\r\\n\\r\\n      j = u;\\r\\n      u = y;\\r\\n      y = t;\\r\\n      t = j;\\r\\n      i++;\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n    t.d.length = k + 1;\\r\\n\\r\\n    return t;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Exponent e must be positive and non-zero.\\r\\n  function tinyPow(b, e) {\\r\\n    var n = b;\\r\\n    while (--e) n *= b;\\r\\n    return n;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\\r\\n  function toLessThanHalfPi(Ctor, x) {\\r\\n    var t,\\r\\n      isNeg = x.s < 0,\\r\\n      pi = getPi(Ctor, Ctor.precision, 1),\\r\\n      halfPi = pi.times(0.5);\\r\\n\\r\\n    x = x.abs();\\r\\n\\r\\n    if (x.lte(halfPi)) {\\r\\n      quadrant = isNeg ? 4 : 1;\\r\\n      return x;\\r\\n    }\\r\\n\\r\\n    t = x.divToInt(pi);\\r\\n\\r\\n    if (t.isZero()) {\\r\\n      quadrant = isNeg ? 3 : 2;\\r\\n    } else {\\r\\n      x = x.minus(t.times(pi));\\r\\n\\r\\n      // 0 <= x < pi\\r\\n      if (x.lte(halfPi)) {\\r\\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\\r\\n        return x;\\r\\n      }\\r\\n\\r\\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\\r\\n    }\\r\\n\\r\\n    return x.minus(pi).abs();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return the value of Decimal `x` as a string in base `baseOut`.\\r\\n   *\\r\\n   * If the optional `sd` argument is present include a binary exponent suffix.\\r\\n   */\\r\\n  function toStringBinary(x, baseOut, sd, rm) {\\r\\n    var base, e, i, k, len, roundUp, str, xd, y,\\r\\n      Ctor = x.constructor,\\r\\n      isExp = sd !== void 0;\\r\\n\\r\\n    if (isExp) {\\r\\n      checkInt32(sd, 1, MAX_DIGITS);\\r\\n      if (rm === void 0) rm = Ctor.rounding;\\r\\n      else checkInt32(rm, 0, 8);\\r\\n    } else {\\r\\n      sd = Ctor.precision;\\r\\n      rm = Ctor.rounding;\\r\\n    }\\r\\n\\r\\n    if (!x.isFinite()) {\\r\\n      str = nonFiniteToString(x);\\r\\n    } else {\\r\\n      str = finiteToString(x);\\r\\n      i = str.indexOf('.');\\r\\n\\r\\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\\r\\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\\r\\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\\r\\n      // log[2](10) = 3.321928094887362347870319429489390175864\\r\\n\\r\\n      if (isExp) {\\r\\n        base = 2;\\r\\n        if (baseOut == 16) {\\r\\n          sd = sd * 4 - 3;\\r\\n        } else if (baseOut == 8) {\\r\\n          sd = sd * 3 - 2;\\r\\n        }\\r\\n      } else {\\r\\n        base = baseOut;\\r\\n      }\\r\\n\\r\\n      // Convert the number as an integer then divide the result by its base raised to a power such\\r\\n      // that the fraction part will be restored.\\r\\n\\r\\n      // Non-integer.\\r\\n      if (i >= 0) {\\r\\n        str = str.replace('.', '');\\r\\n        y = new Ctor(1);\\r\\n        y.e = str.length - i;\\r\\n        y.d = convertBase(finiteToString(y), 10, base);\\r\\n        y.e = y.d.length;\\r\\n      }\\r\\n\\r\\n      xd = convertBase(str, 10, base);\\r\\n      e = len = xd.length;\\r\\n\\r\\n      // Remove trailing zeros.\\r\\n      for (; xd[--len] == 0;) xd.pop();\\r\\n\\r\\n      if (!xd[0]) {\\r\\n        str = isExp ? '0p+0' : '0';\\r\\n      } else {\\r\\n        if (i < 0) {\\r\\n          e--;\\r\\n        } else {\\r\\n          x = new Ctor(x);\\r\\n          x.d = xd;\\r\\n          x.e = e;\\r\\n          x = divide(x, y, sd, rm, 0, base);\\r\\n          xd = x.d;\\r\\n          e = x.e;\\r\\n          roundUp = inexact;\\r\\n        }\\r\\n\\r\\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\\r\\n        i = xd[sd];\\r\\n        k = base / 2;\\r\\n        roundUp = roundUp || xd[sd + 1] !== void 0;\\r\\n\\r\\n        roundUp = rm < 4\\r\\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\\r\\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\\r\\n            rm === (x.s < 0 ? 8 : 7));\\r\\n\\r\\n        xd.length = sd;\\r\\n\\r\\n        if (roundUp) {\\r\\n\\r\\n          // Rounding up may mean the previous digit has to be rounded up and so on.\\r\\n          for (; ++xd[--sd] > base - 1;) {\\r\\n            xd[sd] = 0;\\r\\n            if (!sd) {\\r\\n              ++e;\\r\\n              xd.unshift(1);\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Determine trailing zeros.\\r\\n        for (len = xd.length; !xd[len - 1]; --len);\\r\\n\\r\\n        // E.g. [4, 11, 15] becomes 4bf.\\r\\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\\r\\n\\r\\n        // Add binary exponent suffix?\\r\\n        if (isExp) {\\r\\n          if (len > 1) {\\r\\n            if (baseOut == 16 || baseOut == 8) {\\r\\n              i = baseOut == 16 ? 4 : 3;\\r\\n              for (--len; len % i; len++) str += '0';\\r\\n              xd = convertBase(str, base, baseOut);\\r\\n              for (len = xd.length; !xd[len - 1]; --len);\\r\\n\\r\\n              // xd[0] will always be be 1\\r\\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\\r\\n            } else {\\r\\n              str = str.charAt(0) + '.' + str.slice(1);\\r\\n            }\\r\\n          }\\r\\n\\r\\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\\r\\n        } else if (e < 0) {\\r\\n          for (; ++e;) str = '0' + str;\\r\\n          str = '0.' + str;\\r\\n        } else {\\r\\n          if (++e > len) for (e -= len; e-- ;) str += '0';\\r\\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\\r\\n    }\\r\\n\\r\\n    return x.s < 0 ? '-' + str : str;\\r\\n  }\\r\\n\\r\\n\\r\\n  // Does not strip trailing zeros.\\r\\n  function truncate(arr, len) {\\r\\n    if (arr.length > len) {\\r\\n      arr.length = len;\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  // Decimal methods\\r\\n\\r\\n\\r\\n  /*\\r\\n   *  abs\\r\\n   *  acos\\r\\n   *  acosh\\r\\n   *  add\\r\\n   *  asin\\r\\n   *  asinh\\r\\n   *  atan\\r\\n   *  atanh\\r\\n   *  atan2\\r\\n   *  cbrt\\r\\n   *  ceil\\r\\n   *  clone\\r\\n   *  config\\r\\n   *  cos\\r\\n   *  cosh\\r\\n   *  div\\r\\n   *  exp\\r\\n   *  floor\\r\\n   *  hypot\\r\\n   *  ln\\r\\n   *  log\\r\\n   *  log2\\r\\n   *  log10\\r\\n   *  max\\r\\n   *  min\\r\\n   *  mod\\r\\n   *  mul\\r\\n   *  pow\\r\\n   *  random\\r\\n   *  round\\r\\n   *  set\\r\\n   *  sign\\r\\n   *  sin\\r\\n   *  sinh\\r\\n   *  sqrt\\r\\n   *  sub\\r\\n   *  tan\\r\\n   *  tanh\\r\\n   *  trunc\\r\\n   */\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the absolute value of `x`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function abs(x) {\\r\\n    return new this(x).abs();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function acos(x) {\\r\\n    return new this(x).acos();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function acosh(x) {\\r\\n    return new this(x).acosh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   * y {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function add(x, y) {\\r\\n    return new this(x).plus(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function asin(x) {\\r\\n    return new this(x).asin();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function asinh(x) {\\r\\n    return new this(x).asinh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function atan(x) {\\r\\n    return new this(x).atan();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\\r\\n   * `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function atanh(x) {\\r\\n    return new this(x).atanh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\\r\\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * Domain: [-Infinity, Infinity]\\r\\n   * Range: [-pi, pi]\\r\\n   *\\r\\n   * y {number|string|Decimal} The y-coordinate.\\r\\n   * x {number|string|Decimal} The x-coordinate.\\r\\n   *\\r\\n   * atan2(\\u00b10, -0)               = \\u00b1pi\\r\\n   * atan2(\\u00b10, +0)               = \\u00b10\\r\\n   * atan2(\\u00b10, -x)               = \\u00b1pi for x > 0\\r\\n   * atan2(\\u00b10, x)                = \\u00b10 for x > 0\\r\\n   * atan2(-y, \\u00b10)               = -pi/2 for y > 0\\r\\n   * atan2(y, \\u00b10)                = pi/2 for y > 0\\r\\n   * atan2(\\u00b1y, -Infinity)        = \\u00b1pi for finite y > 0\\r\\n   * atan2(\\u00b1y, +Infinity)        = \\u00b10 for finite y > 0\\r\\n   * atan2(\\u00b1Infinity, x)         = \\u00b1pi/2 for finite x\\r\\n   * atan2(\\u00b1Infinity, -Infinity) = \\u00b13*pi/4\\r\\n   * atan2(\\u00b1Infinity, +Infinity) = \\u00b1pi/4\\r\\n   * atan2(NaN, x) = NaN\\r\\n   * atan2(y, NaN) = NaN\\r\\n   *\\r\\n   */\\r\\n  function atan2(y, x) {\\r\\n    y = new this(y);\\r\\n    x = new this(x);\\r\\n    var r,\\r\\n      pr = this.precision,\\r\\n      rm = this.rounding,\\r\\n      wpr = pr + 4;\\r\\n\\r\\n    // Either NaN\\r\\n    if (!y.s || !x.s) {\\r\\n      r = new this(NaN);\\r\\n\\r\\n    // Both \\u00b1Infinity\\r\\n    } else if (!y.d && !x.d) {\\r\\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\\r\\n      r.s = y.s;\\r\\n\\r\\n    // x is \\u00b1Infinity or y is \\u00b10\\r\\n    } else if (!x.d || y.isZero()) {\\r\\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\\r\\n      r.s = y.s;\\r\\n\\r\\n    // y is \\u00b1Infinity or x is \\u00b10\\r\\n    } else if (!y.d || x.isZero()) {\\r\\n      r = getPi(this, wpr, 1).times(0.5);\\r\\n      r.s = y.s;\\r\\n\\r\\n    // Both non-zero and finite\\r\\n    } else if (x.s < 0) {\\r\\n      this.precision = wpr;\\r\\n      this.rounding = 1;\\r\\n      r = this.atan(divide(y, x, wpr, 1));\\r\\n      x = getPi(this, wpr, 1);\\r\\n      this.precision = pr;\\r\\n      this.rounding = rm;\\r\\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\\r\\n    } else {\\r\\n      r = this.atan(divide(y, x, wpr, 1));\\r\\n    }\\r\\n\\r\\n    return r;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function cbrt(x) {\\r\\n    return new this(x).cbrt();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function ceil(x) {\\r\\n    return finalise(x = new this(x), x.e + 1, 2);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Configure global settings for a Decimal constructor.\\r\\n   *\\r\\n   * `obj` is an object with one or more of the following properties,\\r\\n   *\\r\\n   *   precision  {number}\\r\\n   *   rounding   {number}\\r\\n   *   toExpNeg   {number}\\r\\n   *   toExpPos   {number}\\r\\n   *   maxE       {number}\\r\\n   *   minE       {number}\\r\\n   *   modulo     {number}\\r\\n   *   crypto     {boolean|number}\\r\\n   *   defaults   {true}\\r\\n   *\\r\\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\\r\\n   *\\r\\n   */\\r\\n  function config(obj) {\\r\\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\\r\\n    var i, p, v,\\r\\n      useDefaults = obj.defaults === true,\\r\\n      ps = [\\r\\n        'precision', 1, MAX_DIGITS,\\r\\n        'rounding', 0, 8,\\r\\n        'toExpNeg', -EXP_LIMIT, 0,\\r\\n        'toExpPos', 0, EXP_LIMIT,\\r\\n        'maxE', 0, EXP_LIMIT,\\r\\n        'minE', -EXP_LIMIT, 0,\\r\\n        'modulo', 0, 9\\r\\n      ];\\r\\n\\r\\n    for (i = 0; i < ps.length; i += 3) {\\r\\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\\r\\n      if ((v = obj[p]) !== void 0) {\\r\\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\\r\\n        else throw Error(invalidArgument + p + ': ' + v);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\\r\\n    if ((v = obj[p]) !== void 0) {\\r\\n      if (v === true || v === false || v === 0 || v === 1) {\\r\\n        if (v) {\\r\\n          if (typeof crypto != 'undefined' && crypto &&\\r\\n            (crypto.getRandomValues || crypto.randomBytes)) {\\r\\n            this[p] = true;\\r\\n          } else {\\r\\n            throw Error(cryptoUnavailable);\\r\\n          }\\r\\n        } else {\\r\\n          this[p] = false;\\r\\n        }\\r\\n      } else {\\r\\n        throw Error(invalidArgument + p + ': ' + v);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return this;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function cos(x) {\\r\\n    return new this(x).cos();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function cosh(x) {\\r\\n    return new this(x).cosh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\\r\\n   * constructor.\\r\\n   *\\r\\n   */\\r\\n  function clone(obj) {\\r\\n    var i, p, ps;\\r\\n\\r\\n    /*\\r\\n     * The Decimal constructor and exported function.\\r\\n     * Return a new Decimal instance.\\r\\n     *\\r\\n     * v {number|string|Decimal} A numeric value.\\r\\n     *\\r\\n     */\\r\\n    function Decimal(v) {\\r\\n      var e, i, t,\\r\\n        x = this;\\r\\n\\r\\n      // Decimal called without new.\\r\\n      if (!(x instanceof Decimal)) return new Decimal(v);\\r\\n\\r\\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\\r\\n      // which points to Object.\\r\\n      x.constructor = Decimal;\\r\\n\\r\\n      // Duplicate.\\r\\n      if (v instanceof Decimal) {\\r\\n        x.s = v.s;\\r\\n\\r\\n        if (external) {\\r\\n          if (!v.d || v.e > Decimal.maxE) {\\r\\n\\r\\n            // Infinity.\\r\\n            x.e = NaN;\\r\\n            x.d = null;\\r\\n          } else if (v.e < Decimal.minE) {\\r\\n\\r\\n            // Zero.\\r\\n            x.e = 0;\\r\\n            x.d = [0];\\r\\n          } else {\\r\\n            x.e = v.e;\\r\\n            x.d = v.d.slice();\\r\\n          }\\r\\n        } else {\\r\\n          x.e = v.e;\\r\\n          x.d = v.d ? v.d.slice() : v.d;\\r\\n        }\\r\\n\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      t = typeof v;\\r\\n\\r\\n      if (t === 'number') {\\r\\n        if (v === 0) {\\r\\n          x.s = 1 / v < 0 ? -1 : 1;\\r\\n          x.e = 0;\\r\\n          x.d = [0];\\r\\n          return;\\r\\n        }\\r\\n\\r\\n        if (v < 0) {\\r\\n          v = -v;\\r\\n          x.s = -1;\\r\\n        } else {\\r\\n          x.s = 1;\\r\\n        }\\r\\n\\r\\n        // Fast path for small integers.\\r\\n        if (v === ~~v && v < 1e7) {\\r\\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\\r\\n\\r\\n          if (external) {\\r\\n            if (e > Decimal.maxE) {\\r\\n              x.e = NaN;\\r\\n              x.d = null;\\r\\n            } else if (e < Decimal.minE) {\\r\\n              x.e = 0;\\r\\n              x.d = [0];\\r\\n            } else {\\r\\n              x.e = e;\\r\\n              x.d = [v];\\r\\n            }\\r\\n          } else {\\r\\n            x.e = e;\\r\\n            x.d = [v];\\r\\n          }\\r\\n\\r\\n          return;\\r\\n\\r\\n        // Infinity, NaN.\\r\\n        } else if (v * 0 !== 0) {\\r\\n          if (!v) x.s = NaN;\\r\\n          x.e = NaN;\\r\\n          x.d = null;\\r\\n          return;\\r\\n        }\\r\\n\\r\\n        return parseDecimal(x, v.toString());\\r\\n\\r\\n      } else if (t !== 'string') {\\r\\n        throw Error(invalidArgument + v);\\r\\n      }\\r\\n\\r\\n      // Minus sign?\\r\\n      if ((i = v.charCodeAt(0)) === 45) {\\r\\n        v = v.slice(1);\\r\\n        x.s = -1;\\r\\n      } else {\\r\\n        // Plus sign?\\r\\n        if (i === 43) v = v.slice(1);\\r\\n        x.s = 1;\\r\\n      }\\r\\n\\r\\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\\r\\n    }\\r\\n\\r\\n    Decimal.prototype = P;\\r\\n\\r\\n    Decimal.ROUND_UP = 0;\\r\\n    Decimal.ROUND_DOWN = 1;\\r\\n    Decimal.ROUND_CEIL = 2;\\r\\n    Decimal.ROUND_FLOOR = 3;\\r\\n    Decimal.ROUND_HALF_UP = 4;\\r\\n    Decimal.ROUND_HALF_DOWN = 5;\\r\\n    Decimal.ROUND_HALF_EVEN = 6;\\r\\n    Decimal.ROUND_HALF_CEIL = 7;\\r\\n    Decimal.ROUND_HALF_FLOOR = 8;\\r\\n    Decimal.EUCLID = 9;\\r\\n\\r\\n    Decimal.config = Decimal.set = config;\\r\\n    Decimal.clone = clone;\\r\\n    Decimal.isDecimal = isDecimalInstance;\\r\\n\\r\\n    Decimal.abs = abs;\\r\\n    Decimal.acos = acos;\\r\\n    Decimal.acosh = acosh;        // ES6\\r\\n    Decimal.add = add;\\r\\n    Decimal.asin = asin;\\r\\n    Decimal.asinh = asinh;        // ES6\\r\\n    Decimal.atan = atan;\\r\\n    Decimal.atanh = atanh;        // ES6\\r\\n    Decimal.atan2 = atan2;\\r\\n    Decimal.cbrt = cbrt;          // ES6\\r\\n    Decimal.ceil = ceil;\\r\\n    Decimal.cos = cos;\\r\\n    Decimal.cosh = cosh;          // ES6\\r\\n    Decimal.div = div;\\r\\n    Decimal.exp = exp;\\r\\n    Decimal.floor = floor;\\r\\n    Decimal.hypot = hypot;        // ES6\\r\\n    Decimal.ln = ln;\\r\\n    Decimal.log = log;\\r\\n    Decimal.log10 = log10;        // ES6\\r\\n    Decimal.log2 = log2;          // ES6\\r\\n    Decimal.max = max;\\r\\n    Decimal.min = min;\\r\\n    Decimal.mod = mod;\\r\\n    Decimal.mul = mul;\\r\\n    Decimal.pow = pow;\\r\\n    Decimal.random = random;\\r\\n    Decimal.round = round;\\r\\n    Decimal.sign = sign;          // ES6\\r\\n    Decimal.sin = sin;\\r\\n    Decimal.sinh = sinh;          // ES6\\r\\n    Decimal.sqrt = sqrt;\\r\\n    Decimal.sub = sub;\\r\\n    Decimal.tan = tan;\\r\\n    Decimal.tanh = tanh;          // ES6\\r\\n    Decimal.trunc = trunc;        // ES6\\r\\n\\r\\n    if (obj === void 0) obj = {};\\r\\n    if (obj) {\\r\\n      if (obj.defaults !== true) {\\r\\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\\r\\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Decimal.config(obj);\\r\\n\\r\\n    return Decimal;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   * y {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function div(x, y) {\\r\\n    return new this(x).div(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\\r\\n   *\\r\\n   */\\r\\n  function exp(x) {\\r\\n    return new this(x).exp();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function floor(x) {\\r\\n    return finalise(x = new this(x), x.e + 1, 3);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\\r\\n   * rounded to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\\r\\n   *\\r\\n   * arguments {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function hypot() {\\r\\n    var i, n,\\r\\n      t = new this(0);\\r\\n\\r\\n    external = false;\\r\\n\\r\\n    for (i = 0; i < arguments.length;) {\\r\\n      n = new this(arguments[i++]);\\r\\n      if (!n.d) {\\r\\n        if (n.s) {\\r\\n          external = true;\\r\\n          return new this(1 / 0);\\r\\n        }\\r\\n        t = n;\\r\\n      } else if (t.d) {\\r\\n        t = t.plus(n.times(n));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    external = true;\\r\\n\\r\\n    return t.sqrt();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\\r\\n   * otherwise return false.\\r\\n   *\\r\\n   */\\r\\n  function isDecimalInstance(obj) {\\r\\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function ln(x) {\\r\\n    return new this(x).ln();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\\r\\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * log[y](x)\\r\\n   *\\r\\n   * x {number|string|Decimal} The argument of the logarithm.\\r\\n   * y {number|string|Decimal} The base of the logarithm.\\r\\n   *\\r\\n   */\\r\\n  function log(x, y) {\\r\\n    return new this(x).log(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function log2(x) {\\r\\n    return new this(x).log(2);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function log10(x) {\\r\\n    return new this(x).log(10);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the maximum of the arguments.\\r\\n   *\\r\\n   * arguments {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function max() {\\r\\n    return maxOrMin(this, arguments, 'lt');\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the minimum of the arguments.\\r\\n   *\\r\\n   * arguments {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function min() {\\r\\n    return maxOrMin(this, arguments, 'gt');\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\\r\\n   * using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   * y {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function mod(x, y) {\\r\\n    return new this(x).mod(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   * y {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function mul(x, y) {\\r\\n    return new this(x).mul(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} The base.\\r\\n   * y {number|string|Decimal} The exponent.\\r\\n   *\\r\\n   */\\r\\n  function pow(x, y) {\\r\\n    return new this(x).pow(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\\r\\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\\r\\n   * are produced).\\r\\n   *\\r\\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\\r\\n   *\\r\\n   */\\r\\n  function random(sd) {\\r\\n    var d, e, k, n,\\r\\n      i = 0,\\r\\n      r = new this(1),\\r\\n      rd = [];\\r\\n\\r\\n    if (sd === void 0) sd = this.precision;\\r\\n    else checkInt32(sd, 1, MAX_DIGITS);\\r\\n\\r\\n    k = Math.ceil(sd / LOG_BASE);\\r\\n\\r\\n    if (!this.crypto) {\\r\\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\\r\\n\\r\\n    // Browsers supporting crypto.getRandomValues.\\r\\n    } else if (crypto.getRandomValues) {\\r\\n      d = crypto.getRandomValues(new Uint32Array(k));\\r\\n\\r\\n      for (; i < k;) {\\r\\n        n = d[i];\\r\\n\\r\\n        // 0 <= n < 4294967296\\r\\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\\r\\n        if (n >= 4.29e9) {\\r\\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\\r\\n        } else {\\r\\n\\r\\n          // 0 <= n <= 4289999999\\r\\n          // 0 <= (n % 1e7) <= 9999999\\r\\n          rd[i++] = n % 1e7;\\r\\n        }\\r\\n      }\\r\\n\\r\\n    // Node.js supporting crypto.randomBytes.\\r\\n    } else if (crypto.randomBytes) {\\r\\n\\r\\n      // buffer\\r\\n      d = crypto.randomBytes(k *= 4);\\r\\n\\r\\n      for (; i < k;) {\\r\\n\\r\\n        // 0 <= n < 2147483648\\r\\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\\r\\n\\r\\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\\r\\n        if (n >= 2.14e9) {\\r\\n          crypto.randomBytes(4).copy(d, i);\\r\\n        } else {\\r\\n\\r\\n          // 0 <= n <= 2139999999\\r\\n          // 0 <= (n % 1e7) <= 9999999\\r\\n          rd.push(n % 1e7);\\r\\n          i += 4;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      i = k / 4;\\r\\n    } else {\\r\\n      throw Error(cryptoUnavailable);\\r\\n    }\\r\\n\\r\\n    k = rd[--i];\\r\\n    sd %= LOG_BASE;\\r\\n\\r\\n    // Convert trailing digits to zeros according to sd.\\r\\n    if (k && sd) {\\r\\n      n = mathpow(10, LOG_BASE - sd);\\r\\n      rd[i] = (k / n | 0) * n;\\r\\n    }\\r\\n\\r\\n    // Remove trailing words which are zero.\\r\\n    for (; rd[i] === 0; i--) rd.pop();\\r\\n\\r\\n    // Zero?\\r\\n    if (i < 0) {\\r\\n      e = 0;\\r\\n      rd = [0];\\r\\n    } else {\\r\\n      e = -1;\\r\\n\\r\\n      // Remove leading words which are zero and adjust exponent accordingly.\\r\\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\\r\\n\\r\\n      // Count the digits of the first word of rd to determine leading zeros.\\r\\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\\r\\n\\r\\n      // Adjust the exponent for leading zeros of the first word of rd.\\r\\n      if (k < LOG_BASE) e -= LOG_BASE - k;\\r\\n    }\\r\\n\\r\\n    r.e = e;\\r\\n    r.d = rd;\\r\\n\\r\\n    return r;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\\r\\n   *\\r\\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function round(x) {\\r\\n    return finalise(x = new this(x), x.e + 1, this.rounding);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return\\r\\n   *   1    if x > 0,\\r\\n   *  -1    if x < 0,\\r\\n   *   0    if x is 0,\\r\\n   *  -0    if x is -0,\\r\\n   *   NaN  otherwise\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function sign(x) {\\r\\n    x = new this(x);\\r\\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\\r\\n   * using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function sin(x) {\\r\\n    return new this(x).sin();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function sinh(x) {\\r\\n    return new this(x).sinh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function sqrt(x) {\\r\\n    return new this(x).sqrt();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\\r\\n   * using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   * y {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function sub(x, y) {\\r\\n    return new this(x).sub(y);\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\\r\\n   * digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function tan(x) {\\r\\n    return new this(x).tan();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\\r\\n   * significant digits using rounding mode `rounding`.\\r\\n   *\\r\\n   * x {number|string|Decimal} A value in radians.\\r\\n   *\\r\\n   */\\r\\n  function tanh(x) {\\r\\n    return new this(x).tanh();\\r\\n  }\\r\\n\\r\\n\\r\\n  /*\\r\\n   * Return a new Decimal whose value is `x` truncated to an integer.\\r\\n   *\\r\\n   * x {number|string|Decimal}\\r\\n   *\\r\\n   */\\r\\n  function trunc(x) {\\r\\n    return finalise(x = new this(x), x.e + 1, 1);\\r\\n  }\\r\\n\\r\\n\\r\\n  // Create and configure initial Decimal constructor.\\r\\n  Decimal = clone(DEFAULTS);\\r\\n\\r\\n  Decimal['default'] = Decimal.Decimal = Decimal;\\r\\n\\r\\n  // Create the internal constants from their string values.\\r\\n  LN10 = new Decimal(LN10);\\r\\n  PI = new Decimal(PI);\\r\\n\\r\\n\\r\\n  // Export.\\r\\n\\r\\n\\r\\n  // AMD.\\r\\n  if (typeof define == 'function' && define.amd) {\\r\\n    define(function () {\\r\\n      return Decimal;\\r\\n    });\\r\\n\\r\\n  // Node and other environments that support module.exports.\\r\\n  } else if (typeof module != 'undefined' && module.exports) {\\r\\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\\r\\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\\r\\n      P[Symbol.toStringTag] = 'Decimal';\\r\\n    }\\r\\n\\r\\n    module.exports = Decimal;\\r\\n\\r\\n  // Browser.\\r\\n  } else {\\r\\n    if (!globalScope) {\\r\\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\\r\\n    }\\r\\n\\r\\n    noConflict = globalScope.Decimal;\\r\\n    Decimal.noConflict = function () {\\r\\n      globalScope.Decimal = noConflict;\\r\\n      return Decimal;\\r\\n    };\\r\\n\\r\\n    globalScope.Decimal = Decimal;\\r\\n  }\\r\\n})(this);\\r\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"globalScope\",\"digitsToString\",\"d\",\"k\",\"indexOfLastWord\",\"length\",\"str\",\"w\",\"i\",\"ws\",\"LOG_BASE\",\"getZeroString\",\"checkInt32\",\"min\",\"max\",\"Error\",\"invalidArgument\",\"checkRoundingDigits\",\"rm\",\"repeating\",\"di\",\"Math\",\"ceil\",\"mathpow\",\"rd\",\"r\",\"convertBase\",\"baseIn\",\"baseOut\",\"j\",\"arr\",\"strL\",\"arrL\",\"NUMERALS\",\"indexOf\",\"charAt\",\"reverse\",\"finalise\",\"x\",\"sd\",\"isTruncated\",\"xdi\",\"Ctor\",\"constructor\",\"xd\",\"digits\",\"push\",\"roundUp\",\"s\",\"e\",\"BASE\",\"pop\",\"external\",\"maxE\",\"NaN\",\"minE\",\"finiteToString\",\"isExp\",\"isFinite\",\"String\",\"len\",\"slice\",\"getBase10Exponent\",\"getLn10\",\"pr\",\"LN10_PRECISION\",\"precision\",\"precisionLimitExceeded\",\"LN10\",\"getPi\",\"PI_PRECISION\",\"PI\",\"getPrecision\",\"zs\",\"intPow\",\"n\",\"times\",\"truncate\",\"mathfloor\",\"maxOrMin\",\"args\",\"ltgt\",\"y\",\"naturalExponential\",\"pow\",\"sum\",\"t\",\"rep\",\"rounding\",\"wpr\",\"guard\",\"log\",\"denominator\",\"plus\",\"divide\",\"naturalLogarithm\",\"c\",\"c0\",\"abs\",\"x1\",\"numerator\",\"minus\",\"x2\",\"parseDecimal\",\"replace\",\"search\",\"substring\",\"charCodeAt\",\"parseOther\",\"isHex\",\"test\",\"base\",\"toLowerCase\",\"isBinary\",\"isOctal\",\"p\",\"isFloat\",\"divisor\",\"xe\",\"Decimal\",\"taylorSeries\",\"isHyperbolic\",\"u\",\"tinyPow\",\"b\",\"toLessThanHalfPi\",\"isNeg\",\"pi\",\"halfPi\",\"lte\",\"quadrant\",\"divToInt\",\"isZero\",\"toStringBinary\",\"MAX_DIGITS\",\"inexact\",\"unshift\",\"acos\",\"acosh\",\"add\",\"asin\",\"asinh\",\"atan\",\"atanh\",\"atan2\",\"cbrt\",\"config\",\"obj\",\"v\",\"useDefaults\",\"defaults\",\"ps\",\"EXP_LIMIT\",\"DEFAULTS\",\"crypto\",\"getRandomValues\",\"randomBytes\",\"cryptoUnavailable\",\"cos\",\"cosh\",\"clone\",\"toString\",\"isDecimal\",\"prototype\",\"P\",\"ROUND_UP\",\"ROUND_DOWN\",\"ROUND_CEIL\",\"ROUND_FLOOR\",\"ROUND_HALF_UP\",\"ROUND_HALF_DOWN\",\"ROUND_HALF_EVEN\",\"ROUND_HALF_CEIL\",\"ROUND_HALF_FLOOR\",\"EUCLID\",\"set\",\"isDecimalInstance\",\"div\",\"exp\",\"floor\",\"hypot\",\"ln\",\"log10\",\"log2\",\"mod\",\"mul\",\"random\",\"round\",\"sign\",\"sin\",\"sinh\",\"sqrt\",\"sub\",\"tan\",\"tanh\",\"trunc\",\"hasOwnProperty\",\"arguments\",\"name\",\"Uint32Array\",\"copy\",\"shift\",\"modulo\",\"toExpNeg\",\"toExpPos\",\"absoluteValue\",\"P.abs\",\"P.ceil\",\"comparedTo\",\"cmp\",\"P.cmp\",\"yd\",\"xs\",\"ys\",\"xdL\",\"ydL\",\"cosine\",\"P.cos\",\"cos2x\",\"neg\",\"cubeRoot\",\"P.cbrt\",\"toExponential\",\"t3\",\"t3plusx\",\"eq\",\"m\",\"decimalPlaces\",\"dp\",\"P.dp\",\"dividedBy\",\"P.div\",\"dividedToIntegerBy\",\"P.divToInt\",\"equals\",\"P.eq\",\"P.floor\",\"greaterThan\",\"gt\",\"P.gt\",\"greaterThanOrEqualTo\",\"gte\",\"P.gte\",\"hyperbolicCosine\",\"P.cosh\",\"one\",\"d8\",\"cosh2_x\",\"hyperbolicSine\",\"P.sinh\",\"sinh2_x\",\"d5\",\"d16\",\"d20\",\"hyperbolicTangent\",\"P.tanh\",\"inverseCosine\",\"P.acos\",\"inverseHyperbolicCosine\",\"P.acosh\",\"inverseHyperbolicSine\",\"P.asinh\",\"inverseHyperbolicTangent\",\"P.atanh\",\"xsd\",\"inverseSine\",\"P.asin\",\"inverseTangent\",\"P.atan\",\"px\",\"P.isFinite\",\"isInteger\",\"isInt\",\"P.isInt\",\"isNaN\",\"P.isNaN\",\"isNegative\",\"P.isNeg\",\"isPositive\",\"isPos\",\"P.isPos\",\"P.isZero\",\"lessThan\",\"lt\",\"P.lt\",\"lessThanOrEqualTo\",\"P.lte\",\"logarithm\",\"P.log\",\"arg\",\"isBase10\",\"inf\",\"num\",\"P.sub\",\"xLTy\",\"P.mod\",\"q\",\"P.exp\",\"P.ln\",\"negated\",\"P.neg\",\"P.add\",\"carry\",\"P.sd\",\"z\",\"P.round\",\"sine\",\"P.sin\",\"sin2_x\",\"squareRoot\",\"P.sqrt\",\"tangent\",\"P.tan\",\"P.mul\",\"rL\",\"toBinary\",\"P.toBinary\",\"toDecimalPlaces\",\"toDP\",\"P.toDP\",\"P.toExponential\",\"toFixed\",\"P.toFixed\",\"toFraction\",\"P.toFraction\",\"maxD\",\"d0\",\"n0\",\"n1\",\"d1\",\"d2\",\"toHexadecimal\",\"toHex\",\"P.toHex\",\"toNearest\",\"P.toNearest\",\"toNumber\",\"P.toNumber\",\"toOctal\",\"P.toOctal\",\"toPower\",\"P.pow\",\"yn\",\"MAX_SAFE_INTEGER\",\"toPrecision\",\"P.toPrecision\",\"toSignificantDigits\",\"toSD\",\"P.toSD\",\"P.toString\",\"truncated\",\"P.trunc\",\"valueOf\",\"toJSON\",\"P.toJSON\",\"multiplyInteger\",\"temp\",\"compare\",\"a\",\"aL\",\"bL\",\"subtract\",\"remL\",\"logBase\",\"yL\",\"xL\",\"qd\",\"more\",\"xi\",\"rem\",\"yz\",\"yd0\",\"rem0\",\"prod\",\"prodL\",\"define\",\"amd\",\"Symbol\",\"iterator\",\"for\",\"toStringTag\",\"self\",\"window\",\"noConflict\",\"Decimal.noConflict\"]\n}\n"]