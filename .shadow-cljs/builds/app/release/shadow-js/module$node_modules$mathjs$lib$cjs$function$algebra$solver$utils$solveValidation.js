["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js"],"~:js","shadow$provide[172]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSolveValidation=function(k){var t=k.DenseMatrix;return function(p,g,d){var l=p.size();if(2!==l.length)throw new RangeError(\"Matrix must be two dimensional (size: \"+(0,u.format)(l)+\")\");p=l[0];if(p!==l[1])throw new RangeError(\"Matrix must be square (size: \"+(0,u.format)(l)+\")\");l=[];if((0,q.isMatrix)(g)){var h=g.size(),n=g._data;if(1===h.length){if(h[0]!==p)throw new RangeError(\"Dimension mismatch. Matrix columns must match vector length.\");\nfor(d=0;d<p;d++)l[d]=[n[d]];return new t({data:l,size:[p,1],datatype:g._datatype})}if(2===h.length){if(h[0]!==p||1!==h[1])throw new RangeError(\"Dimension mismatch. Matrix columns must match vector length.\");if((0,q.isDenseMatrix)(g)){if(d){l=[];for(d=0;d<p;d++)l[d]=[n[d][0]];return new t({data:l,size:[p,1],datatype:g._datatype})}return g}if((0,q.isSparseMatrix)(g)){for(d=0;d<p;d++)l[d]=[0];d=g._values;n=g._index;var r=g._ptr;h=r[1];for(r=r[0];r<h;r++)l[n[r]][0]=d[r];return new t({data:l,size:[p,1],\ndatatype:g._datatype})}}throw new RangeError(\"Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.\");}if((0,q.isArray)(g)){d=(0,f.arraySize)(g);if(1===d.length){if(d[0]!==p)throw new RangeError(\"Dimension mismatch. Matrix columns must match vector length.\");for(d=0;d<p;d++)l[d]=[g[d]];return new t({data:l,size:[p,1]})}if(2===d.length){if(d[0]!==p||1!==d[1])throw new RangeError(\"Dimension mismatch. Matrix columns must match vector length.\");for(d=0;d<p;d++)l[d]=[g[d][0]];\nreturn new t({data:l,size:[p,1]})}throw new RangeError(\"Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.\");}}};var q=b(14),f=b(24),u=b(21)}","~:source","shadow$provide[172] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSolveValidation = createSolveValidation;\n\nvar _is = require(\"../../../../utils/is.js\");\n\nvar _array = require(\"../../../../utils/array.js\");\n\nvar _string = require(\"../../../../utils/string.js\");\n\nfunction createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');\n    }\n\n    var data = [];\n\n    if ((0, _is.isMatrix)(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if ((0, _is.isDenseMatrix)(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if ((0, _is.isSparseMatrix)(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if ((0, _is.isArray)(b)) {\n      var bsize = (0, _array.arraySize)(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array"]],"~:properties",["^5",["__esModule","createSolveValidation","value","datatype","size","data"]],"~:compiled-at",1619135723901,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$algebra$solver$utils$solveValidation.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,qBAAR,CAQAA,QAA8B,CAACC,CAAD,CAAO,CACnC,IAAIC,EAAcD,CAAKC,CAAAA,WAWvB,OAAOC,SAAwB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAa,CAC1C,IAAIC,EAAQH,CAAEI,CAAAA,IAAF,EAEZ,IAAqB,CAArB,GAAID,CAAME,CAAAA,MAAV,CACE,KAAM,KAAIC,UAAJ,CAAe,wCAAf,CAA0D,CAAC,CAAA,CAAGC,CAAQC,CAAAA,MAAZ,EAAoBL,CAApB,CAA1D,CAAuF,GAAvF,CAAN,CAGEM,CAAAA,CAAON,CAAA,CAAM,CAAN,CAGX,IAAIM,CAAJ,GAFcN,CAAAO,CAAM,CAANA,CAEd,CACE,KAAM,KAAIJ,UAAJ,CAAe,+BAAf,CAAiD,CAAC,CAAA,CAAGC,CAAQC,CAAAA,MAAZ,EAAoBL,CAApB,CAAjD,CAA8E,GAA9E,CAAN,CAGEQ,CAAAA,CAAO,EAEX,IAAI,CAAC,CAAA,CAAGC,CAAIC,CAAAA,QAAR,EAAkBZ,CAAlB,CAAJ,CAA0B,CACxB,IAAIa,EAAQb,CAAEG,CAAAA,IAAF,EAAZ,CACIW,EAAQd,CAAEe,CAAAA,KAEd,IAAqB,CAArB,GAAIF,CAAMT,CAAAA,MAAV,CAAwB,CACtB,GAAIS,CAAA,CAAM,CAAN,CAAJ,GAAiBL,CAAjB,CACE,KAAM,KAAIH,UAAJ,CAAe,8DAAf,CAAN;AAGF,IAASW,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBR,CAApB,CAA0BQ,CAAA,EAA1B,CACEN,CAAA,CAAKM,CAAL,CAAA,CAAU,CAACF,CAAA,CAAME,CAAN,CAAD,CAGZ,OAAO,KAAInB,CAAJ,CAAgB,CACrBa,KAAMA,CADe,CAErBP,KAAM,CAACK,CAAD,CAAO,CAAP,CAFe,CAGrBS,SAAUjB,CAAEkB,CAAAA,SAHS,CAAhB,CATe,CAiBxB,GAAqB,CAArB,GAAIL,CAAMT,CAAAA,MAAV,CAAwB,CACtB,GAAIS,CAAA,CAAM,CAAN,CAAJ,GAAiBL,CAAjB,EAAsC,CAAtC,GAAyBK,CAAA,CAAM,CAAN,CAAzB,CACE,KAAM,KAAIR,UAAJ,CAAe,8DAAf,CAAN,CAGF,GAAI,CAAC,CAAA,CAAGM,CAAIQ,CAAAA,aAAR,EAAuBnB,CAAvB,CAAJ,CAA+B,CAC7B,GAAIC,CAAJ,CAAU,CACRS,CAAA,CAAO,EAEP,KAASU,CAAT,CAAc,CAAd,CAAiBA,CAAjB,CAAsBZ,CAAtB,CAA4BY,CAAA,EAA5B,CACEV,CAAA,CAAKU,CAAL,CAAA,CAAW,CAACN,CAAA,CAAMM,CAAN,CAAA,CAAU,CAAV,CAAD,CAGb,OAAO,KAAIvB,CAAJ,CAAgB,CACrBa,KAAMA,CADe,CAErBP,KAAM,CAACK,CAAD,CAAO,CAAP,CAFe,CAGrBS,SAAUjB,CAAEkB,CAAAA,SAHS,CAAhB,CAPC,CAcV,MAAOlB,EAfsB,CAkB/B,GAAI,CAAC,CAAA,CAAGW,CAAIU,CAAAA,cAAR,EAAwBrB,CAAxB,CAAJ,CAAgC,CAC9B,IAASsB,CAAT,CAAe,CAAf,CAAkBA,CAAlB,CAAwBd,CAAxB,CAA8Bc,CAAA,EAA9B,CACEZ,CAAA,CAAKY,CAAL,CAAA,CAAY,CAAC,CAAD,CAGVC,EAAAA,CAASvB,CAAEwB,CAAAA,OACXC,EAAAA,CAAQzB,CAAE0B,CAAAA,MACd,KAAIC,EAAM3B,CAAE4B,CAAAA,IAEHC,EAAAA,CAAKF,CAAA,CAAI,CAAJ,CAAd,KAAsBG,CAAtB,CAA0BH,CAAA,CAAI,CAAJ,CAA1B,CAAkCG,CAAlC,CAAsCD,CAAtC,CAA0CC,CAAA,EAA1C,CAEEpB,CAAA,CADUe,CAAAM,CAAMD,CAANC,CACV,CAAA,CAAU,CAAV,CAAA,CAAeR,CAAA,CAAOO,CAAP,CAGjB,OAAO,KAAIjC,CAAJ,CAAgB,CACrBa,KAAMA,CADe,CAErBP,KAAM,CAACK,CAAD,CAAO,CAAP,CAFe;AAGrBS,SAAUjB,CAAEkB,CAAAA,SAHS,CAAhB,CAduB,CAvBV,CA6CxB,KAAM,KAAIb,UAAJ,CAAe,iFAAf,CAAN,CAlEwB,CAqE1B,GAAI,CAAC,CAAA,CAAGM,CAAIqB,CAAAA,OAAR,EAAiBhC,CAAjB,CAAJ,CAAyB,CACnBiC,CAAAA,CAAQ,CAAC,CAAA,CAAGC,CAAOC,CAAAA,SAAX,EAAsBnC,CAAtB,CAEZ,IAAqB,CAArB,GAAIiC,CAAM7B,CAAAA,MAAV,CAAwB,CACtB,GAAI6B,CAAA,CAAM,CAAN,CAAJ,GAAiBzB,CAAjB,CACE,KAAM,KAAIH,UAAJ,CAAe,8DAAf,CAAN,CAGF,IAAS+B,CAAT,CAAe,CAAf,CAAkBA,CAAlB,CAAwB5B,CAAxB,CAA8B4B,CAAA,EAA9B,CACE1B,CAAA,CAAK0B,CAAL,CAAA,CAAY,CAACpC,CAAA,CAAEoC,CAAF,CAAD,CAGd,OAAO,KAAIvC,CAAJ,CAAgB,CACrBa,KAAMA,CADe,CAErBP,KAAM,CAACK,CAAD,CAAO,CAAP,CAFe,CAAhB,CATe,CAexB,GAAqB,CAArB,GAAIyB,CAAM7B,CAAAA,MAAV,CAAwB,CACtB,GAAI6B,CAAA,CAAM,CAAN,CAAJ,GAAiBzB,CAAjB,EAAsC,CAAtC,GAAyByB,CAAA,CAAM,CAAN,CAAzB,CACE,KAAM,KAAI5B,UAAJ,CAAe,8DAAf,CAAN,CAGF,IAASgC,CAAT,CAAe,CAAf,CAAkBA,CAAlB,CAAwB7B,CAAxB,CAA8B6B,CAAA,EAA9B,CACE3B,CAAA,CAAK2B,CAAL,CAAA,CAAY,CAACrC,CAAA,CAAEqC,CAAF,CAAA,CAAO,CAAP,CAAD,CAGd;MAAO,KAAIxC,CAAJ,CAAgB,CACrBa,KAAMA,CADe,CAErBP,KAAM,CAACK,CAAD,CAAO,CAAP,CAFe,CAAhB,CATe,CAexB,KAAM,KAAIH,UAAJ,CAAe,iFAAf,CAAN,CAjCuB,CArFiB,CAZT,CANrC,KAAIM,EAAMtB,CAAA,CAAQ,EAAR,CAAV,CAEI6C,EAAS7C,CAAA,CAAQ,EAAR,CAFb,CAIIiB,EAAUjB,CAAA,CAAQ,EAAR,CAZgD;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js\"],\n\"sourcesContent\":[\"shadow$provide[172] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSolveValidation = createSolveValidation;\\n\\nvar _is = require(\\\"../../../../utils/is.js\\\");\\n\\nvar _array = require(\\\"../../../../utils/array.js\\\");\\n\\nvar _string = require(\\\"../../../../utils/string.js\\\");\\n\\nfunction createSolveValidation(_ref) {\\n  var DenseMatrix = _ref.DenseMatrix;\\n\\n  /**\\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\\n   *\\n   * @param {Matrix} m            An N x N matrix\\n   * @param {Array | Matrix} b    A column vector\\n   * @param {Boolean} copy        Return a copy of vector b\\n   *\\n   * @return {DenseMatrix}        Dense column vector b\\n   */\\n  return function solveValidation(m, b, copy) {\\n    var mSize = m.size();\\n\\n    if (mSize.length !== 2) {\\n      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');\\n    }\\n\\n    var rows = mSize[0];\\n    var columns = mSize[1];\\n\\n    if (rows !== columns) {\\n      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');\\n    }\\n\\n    var data = [];\\n\\n    if ((0, _is.isMatrix)(b)) {\\n      var bSize = b.size();\\n      var bdata = b._data; // 1-dim vector\\n\\n      if (bSize.length === 1) {\\n        if (bSize[0] !== rows) {\\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\\n        }\\n\\n        for (var i = 0; i < rows; i++) {\\n          data[i] = [bdata[i]];\\n        }\\n\\n        return new DenseMatrix({\\n          data: data,\\n          size: [rows, 1],\\n          datatype: b._datatype\\n        });\\n      } // 2-dim column\\n\\n\\n      if (bSize.length === 2) {\\n        if (bSize[0] !== rows || bSize[1] !== 1) {\\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\\n        }\\n\\n        if ((0, _is.isDenseMatrix)(b)) {\\n          if (copy) {\\n            data = [];\\n\\n            for (var _i = 0; _i < rows; _i++) {\\n              data[_i] = [bdata[_i][0]];\\n            }\\n\\n            return new DenseMatrix({\\n              data: data,\\n              size: [rows, 1],\\n              datatype: b._datatype\\n            });\\n          }\\n\\n          return b;\\n        }\\n\\n        if ((0, _is.isSparseMatrix)(b)) {\\n          for (var _i2 = 0; _i2 < rows; _i2++) {\\n            data[_i2] = [0];\\n          }\\n\\n          var values = b._values;\\n          var index = b._index;\\n          var ptr = b._ptr;\\n\\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\\n            var _i3 = index[k];\\n            data[_i3][0] = values[k];\\n          }\\n\\n          return new DenseMatrix({\\n            data: data,\\n            size: [rows, 1],\\n            datatype: b._datatype\\n          });\\n        }\\n      }\\n\\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\\n    }\\n\\n    if ((0, _is.isArray)(b)) {\\n      var bsize = (0, _array.arraySize)(b);\\n\\n      if (bsize.length === 1) {\\n        if (bsize[0] !== rows) {\\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\\n        }\\n\\n        for (var _i4 = 0; _i4 < rows; _i4++) {\\n          data[_i4] = [b[_i4]];\\n        }\\n\\n        return new DenseMatrix({\\n          data: data,\\n          size: [rows, 1]\\n        });\\n      }\\n\\n      if (bsize.length === 2) {\\n        if (bsize[0] !== rows || bsize[1] !== 1) {\\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\\n        }\\n\\n        for (var _i5 = 0; _i5 < rows; _i5++) {\\n          data[_i5] = [b[_i5][0]];\\n        }\\n\\n        return new DenseMatrix({\\n          data: data,\\n          size: [rows, 1]\\n        });\\n      }\\n\\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\\n    }\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSolveValidation\",\"_ref\",\"DenseMatrix\",\"solveValidation\",\"m\",\"b\",\"copy\",\"mSize\",\"size\",\"length\",\"RangeError\",\"_string\",\"format\",\"rows\",\"columns\",\"data\",\"_is\",\"isMatrix\",\"bSize\",\"bdata\",\"_data\",\"i\",\"datatype\",\"_datatype\",\"isDenseMatrix\",\"_i\",\"isSparseMatrix\",\"_i2\",\"values\",\"_values\",\"index\",\"_index\",\"ptr\",\"_ptr\",\"k1\",\"k\",\"_i3\",\"isArray\",\"bsize\",\"_array\",\"arraySize\",\"_i4\",\"_i5\"]\n}\n"]