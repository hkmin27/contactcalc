["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/hasNumericValue.js"],"~:js","shadow$provide[53]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createHasNumericValue=void 0;c=b(25);c=(0,c.factory)(\"hasNumericValue\",[\"typed\",\"isNumeric\"],function(q){var f=q.typed,u=q.isNumeric;return f(\"hasNumericValue\",{string:function(k){return 0<k.trim().length&&!isNaN(Number(k))},any:function(k){return u(k)}})});a.createHasNumericValue=c}","~:source","shadow$provide[53] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHasNumericValue = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'hasNumericValue';\nvar dependencies = ['typed', 'isNumeric'];\nvar createHasNumericValue = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNumeric = _ref.isNumeric;\n\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * In case of a string, true is returned if the string contains a numeric value.\n   *\n   * Syntax:\n   *\n   *     math.hasNumericValue(x)\n   *\n   * Examples:\n   *\n   *    math.hasNumericValue(2)                     // returns true\n   *    math.hasNumericValue('2')                   // returns true\n   *    math.isNumeric('2')                         // returns false\n   *    math.hasNumericValue(0)                     // returns true\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\n   *    math.hasNumericValue(math.fraction(4))      // returns true\n   *    math.hasNumericValue(math.complex('2-4i')   // returns false\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    string: function string(x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    any: function any(x) {\n      return isNumeric(x);\n    }\n  });\n});\nexports.createHasNumericValue = createHasNumericValue;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","createHasNumericValue","__esModule","any","value"]],"~:compiled-at",1619135723755,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$hasNumericValue.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAEjCC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAuC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFhCC,iBAEgC,CADxBC,CAAC,OAADA,CAAU,WAAVA,CACwB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC/FC,EAAQD,CAAKC,CAAAA,KADkF,CAE/FC,EAAYF,CAAKE,CAAAA,SA+BrB,OAAOD,EAAA,CAnCEH,iBAmCF,CAAY,CACjBK,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAyB,EAAzB,CAAOA,CAAEC,CAAAA,IAAF,EAASC,CAAAA,MAAhB,EAA8B,CAACC,KAAA,CAAMC,MAAA,CAAOJ,CAAP,CAAN,CADN,CADV,CAIjBK,IAAKA,QAAY,CAACL,CAAD,CAAI,CACnB,MAAOF,EAAA,CAAUE,CAAV,CADY,CAJJ,CAAZ,CAjC4F,CAA1D,CA0C3Cb,EAAQI,CAAAA,qBAAR,CAAgCA,CAtD6B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/hasNumericValue.js\"],\n\"sourcesContent\":[\"shadow$provide[53] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createHasNumericValue = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'hasNumericValue';\\nvar dependencies = ['typed', 'isNumeric'];\\nvar createHasNumericValue = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      isNumeric = _ref.isNumeric;\\n\\n  /**\\n   * Test whether a value is an numeric value.\\n   *\\n   * In case of a string, true is returned if the string contains a numeric value.\\n   *\\n   * Syntax:\\n   *\\n   *     math.hasNumericValue(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.hasNumericValue(2)                     // returns true\\n   *    math.hasNumericValue('2')                   // returns true\\n   *    math.isNumeric('2')                         // returns false\\n   *    math.hasNumericValue(0)                     // returns true\\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\\n   *    math.hasNumericValue(math.fraction(4))      // returns true\\n   *    math.hasNumericValue(math.complex('2-4i')   // returns false\\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\\n   *\\n   * See also:\\n   *\\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\\n   *\\n   * @param {*} x       Value to be tested\\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\\n   *                    Throws an error in case of unknown types.\\n   */\\n  return typed(name, {\\n    string: function string(x) {\\n      return x.trim().length > 0 && !isNaN(Number(x));\\n    },\\n    any: function any(x) {\\n      return isNumeric(x);\\n    }\\n  });\\n});\\nexports.createHasNumericValue = createHasNumericValue;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createHasNumericValue\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"isNumeric\",\"string\",\"x\",\"trim\",\"length\",\"isNaN\",\"Number\",\"any\"]\n}\n"]