["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/log.js"],"~:js","shadow$provide[167]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createLog=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"log\",[\"config\",\"typed\",\"divideScalar\",\"Complex\"],function(u){var k=u.typed,t=u.config,p=u.divideScalar,g=u.Complex;return k(\"log\",{number:function(d){return 0<=d||t.predictable?(0,f.logNumber)(d):(new g(d,0)).log()},Complex:function(d){return d.log()},BigNumber:function(d){return!d.isNegative()||t.predictable?d.ln():(new g(d.toNumber(),0)).log()},\"Array | Matrix\":function(d){return(0,\nq.deepMap)(d,this)},\"any, any\":function(d,l){return p(this(d),this(l))}})});a.createLog=b}","~:source","shadow$provide[167] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nvar createLog = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.logNumber)(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(this(x), this(base));\n    }\n  });\n});\nexports.createLog = createLog;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createLog"]],"~:compiled-at",1619135723899,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,QAADA,CAAW,OAAXA,CAAoB,cAApBA,CAAoC,SAApCA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACnFC,EAAQD,CAAKC,CAAAA,KADsE,CAEnFC,EAASF,CAAKE,CAAAA,MAFqE,CAGnFC,EAAeH,CAAKG,CAAAA,YAH+D,CAInFC,EAAUJ,CAAKI,CAAAA,OAoCnB,OAAOH,EAAA,CA1CEH,KA0CF,CAAY,CACjBO,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAcJ,CAAOK,CAAAA,WAArB,CACS,CAAC,CAAA,CAAGX,CAAOY,CAAAA,SAAX,EAAsBF,CAAtB,CADT,CAI2BG,CAAlB,IAAIL,CAAJ,CAAYE,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,GAAlB,EALgB,CADV,CASjBL,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,GAAF,EADoB,CATZ,CAYjBC,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEK,CAAAA,UAAF,EAAL,EAAuBT,CAAOK,CAAAA,WAA9B,CACSD,CAAEM,CAAAA,EAAF,EADT,CAIsCH,CAA7B,IAAIL,CAAJ,CAAYE,CAAEO,CAAAA,QAAF,EAAZ,CAA0B,CAA1B,CAA6BJ,EAAAA,GAA7B,EALsB,CAZhB,CAoBjB,iBAAkBK,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA;AAAGX,CAAYoB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CApBzB,CAuBjB,WAAYU,QAAe,CAACV,CAAD,CAAIW,CAAJ,CAAU,CAEnC,MAAOd,EAAA,CAAa,IAAA,CAAKG,CAAL,CAAb,CAAsB,IAAA,CAAKW,CAAL,CAAtB,CAF4B,CAvBpB,CAAZ,CAxCgF,CAA1D,CAqE/B5B,EAAQI,CAAAA,SAAR,CAAoBA,CArF0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/log.js\"],\n\"sourcesContent\":[\"shadow$provide[167] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createLog = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'log';\\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\\nvar createLog = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      divideScalar = _ref.divideScalar,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the logarithm of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.log(x)\\n   *    math.log(x, base)\\n   *\\n   * Examples:\\n   *\\n   *    math.log(3.5)                  // returns 1.252762968495368\\n   *    math.exp(math.log(2.4))        // returns 2.4\\n   *\\n   *    math.pow(10, 4)                // returns 10000\\n   *    math.log(10000, 10)            // returns 4\\n   *    math.log(10000) / math.log(10) // returns 4\\n   *\\n   *    math.log(1024, 2)              // returns 10\\n   *    math.pow(2, 10)                // returns 1024\\n   *\\n   * See also:\\n   *\\n   *    exp, log2, log10, log1p\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            Value for which to calculate the logarithm.\\n   * @param {number | BigNumber | Complex} [base=e]\\n   *            Optional base for the logarithm. If not provided, the natural\\n   *            logarithm of `x` is calculated.\\n   * @return {number | BigNumber | Complex | Array | Matrix}\\n   *            Returns the logarithm of `x`\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x >= 0 || config.predictable) {\\n        return (0, _index.logNumber)(x);\\n      } else {\\n        // negative value -> complex value computation\\n        return new Complex(x, 0).log();\\n      }\\n    },\\n    Complex: function Complex(x) {\\n      return x.log();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      if (!x.isNegative() || config.predictable) {\\n        return x.ln();\\n      } else {\\n        // downgrade to number, return Complex valued result\\n        return new Complex(x.toNumber(), 0).log();\\n      }\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    },\\n    'any, any': function anyAny(x, base) {\\n      // calculate logarithm for a specified base, log(x, base)\\n      return divideScalar(this(x), this(base));\\n    }\\n  });\\n});\\nexports.createLog = createLog;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createLog\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"divideScalar\",\"Complex\",\"number\",\"x\",\"predictable\",\"logNumber\",\"log\",\"BigNumber\",\"isNegative\",\"ln\",\"toNumber\",\"ArrayMatrix\",\"deepMap\",\"anyAny\",\"base\"]\n}\n"]