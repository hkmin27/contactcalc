["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/relational/equalText.js"],"~:js","shadow$provide[187]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createEqualText=void 0;c=b(25);c=(0,c.factory)(\"equalText\",[\"typed\",\"compareText\",\"isZero\"],function(q){var f=q.typed,u=q.compareText,k=q.isZero;return f(\"equalText\",{\"any, any\":function(t,p){return k(u(t,p))}})});a.createEqualText=c}","~:source","shadow$provide[187] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualText = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'equalText';\nvar dependencies = ['typed', 'compareText', 'isZero'];\nvar createEqualText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      compareText = _ref.compareText,\n      isZero = _ref.isZero;\n\n  /**\n   * Check equality of two strings. Comparison is case sensitive.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.equalText(x, y)\n   *\n   * Examples:\n   *\n   *    math.equalText('Hello', 'Hello')     // returns true\n   *    math.equalText('a', 'A')             // returns false\n   *    math.equal('2e3', '2000')            // returns true\n   *    math.equalText('2e3', '2000')        // returns false\n   *\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    equal, compareText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n});\nexports.createEqualText = createEqualText;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createEqualText","__esModule","value"]],"~:compiled-at",1619135723913,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$relational$equalText.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAiC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,aAAVA,CAAyB,QAAzBA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACzFC,EAAQD,CAAKC,CAAAA,KAD4E,CAEzFC,EAAcF,CAAKE,CAAAA,WAFsE,CAGzFC,EAASH,CAAKG,CAAAA,MA4BlB,OAAOF,EAAA,CAjCEH,WAiCF,CAAY,CACjB,WAAYM,QAAe,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChC,MAAOH,EAAA,CAAOD,CAAA,CAAYG,CAAZ,CAAeC,CAAf,CAAP,CADyB,CADjB,CAAZ,CA/BsF,CAA1D,CAqCrCf,EAAQI,CAAAA,eAAR,CAA0BA,CAjDoC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/relational/equalText.js\"],\n\"sourcesContent\":[\"shadow$provide[187] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createEqualText = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'equalText';\\nvar dependencies = ['typed', 'compareText', 'isZero'];\\nvar createEqualText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      compareText = _ref.compareText,\\n      isZero = _ref.isZero;\\n\\n  /**\\n   * Check equality of two strings. Comparison is case sensitive.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.equalText(x, y)\\n   *\\n   * Examples:\\n   *\\n   *    math.equalText('Hello', 'Hello')     // returns true\\n   *    math.equalText('a', 'A')             // returns false\\n   *    math.equal('2e3', '2000')            // returns true\\n   *    math.equalText('2e3', '2000')        // returns false\\n   *\\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\\n   *\\n   * See also:\\n   *\\n   *    equal, compareText, compare, compareNatural\\n   *\\n   * @param  {string | Array | DenseMatrix} x First string to compare\\n   * @param  {string | Array | DenseMatrix} y Second string to compare\\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\\n   */\\n  return typed(name, {\\n    'any, any': function anyAny(x, y) {\\n      return isZero(compareText(x, y));\\n    }\\n  });\\n});\\nexports.createEqualText = createEqualText;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createEqualText\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"compareText\",\"isZero\",\"anyAny\",\"x\",\"y\"]\n}\n"]