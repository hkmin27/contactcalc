["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/getMatrixDataType.js"],"~:js","shadow$provide[131]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createGetMatrixDataType=void 0;c=b(25);var q=b(24),f=b(14);b=(0,c.factory)(\"getMatrixDataType\",[\"typed\"],function(u){u=u.typed;return u(\"getMatrixDataType\",{Array:function(k){return(0,q.getArrayDataType)(k,f.typeOf)},Matrix:function(k){return k.getDataType()}})});a.createGetMatrixDataType=b}","~:source","shadow$provide[131] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGetMatrixDataType = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nvar createGetMatrixDataType = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Find the data type of all elements in a matrix or array,\n   * for example 'number' if all items are a number and 'Complex' if all values\n   * are complex numbers.\n   * If a matrix contains more than one data type, it will return 'mixed'.\n   *\n   * Syntax:\n   *\n   *    math.getMatrixDataType(x)\n   *\n   * Examples:\n   *\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\n   *    const mixedX = [ [1, true], [2, 3] ]\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\n   *    const sparse = math.sparse(x)\n   *    const dense = math.matrix(x)\n   *    math.getMatrixDataType(x)   // returns 'number'\n   *    math.getMatrixDataType(sparse)   // returns 'number'\n   *    math.getMatrixDataType(dense)   // returns 'number'\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\n   *\n   * See also:\n   *  SparseMatrix, DenseMatrix\n   *\n   * @param {...Matrix | Array} x   The Matrix with values.\n   *\n   * @return {string} A string representation of the matrix type\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.getArrayDataType)(x, _is.typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});\nexports.createGetMatrixDataType = createGetMatrixDataType;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","Matrix","Array","createGetMatrixDataType"]],"~:compiled-at",1619135723805,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$getMatrixDataType.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,uBAAR,CAAkC,IAAK,EAEnCC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,EAAR,CAAb,CAEIS,EAAMT,CAAA,CAAQ,EAAR,CAINM,EAAAA,CAAyC,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFlCC,mBAEkC,CAD1BC,CAAC,OAADA,CAC0B,CAA0C,QAAS,CAACC,CAAD,CAAO,CACjGC,CAAAA,CAAQD,CAAKC,CAAAA,KAoCjB,OAAOA,EAAA,CAvCEH,mBAuCF,CAAY,CACjBI,MAAOA,QAAc,CAACC,CAAD,CAAI,CACvB,MAAO,CAAC,CAAA,CAAGR,CAAOS,CAAAA,gBAAX,EAA6BD,CAA7B,CAAgCP,CAAIS,CAAAA,MAApC,CADgB,CADR,CAIjBC,OAAQA,QAAe,CAACH,CAAD,CAAI,CACzB,MAAOA,EAAEI,CAAAA,WAAF,EADkB,CAJV,CAAZ,CArC8F,CAA1D,CA8C7ClB,EAAQI,CAAAA,uBAAR,CAAkCA,CA9D4B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/getMatrixDataType.js\"],\n\"sourcesContent\":[\"shadow$provide[131] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createGetMatrixDataType = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar name = 'getMatrixDataType';\\nvar dependencies = ['typed'];\\nvar createGetMatrixDataType = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Find the data type of all elements in a matrix or array,\\n   * for example 'number' if all items are a number and 'Complex' if all values\\n   * are complex numbers.\\n   * If a matrix contains more than one data type, it will return 'mixed'.\\n   *\\n   * Syntax:\\n   *\\n   *    math.getMatrixDataType(x)\\n   *\\n   * Examples:\\n   *\\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\\n   *    const mixedX = [ [1, true], [2, 3] ]\\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\\n   *    const sparse = math.sparse(x)\\n   *    const dense = math.matrix(x)\\n   *    math.getMatrixDataType(x)   // returns 'number'\\n   *    math.getMatrixDataType(sparse)   // returns 'number'\\n   *    math.getMatrixDataType(dense)   // returns 'number'\\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\\n   *\\n   * See also:\\n   *  SparseMatrix, DenseMatrix\\n   *\\n   * @param {...Matrix | Array} x   The Matrix with values.\\n   *\\n   * @return {string} A string representation of the matrix type\\n   */\\n  return typed(name, {\\n    Array: function Array(x) {\\n      return (0, _array.getArrayDataType)(x, _is.typeOf);\\n    },\\n    Matrix: function Matrix(x) {\\n      return x.getDataType();\\n    }\\n  });\\n});\\nexports.createGetMatrixDataType = createGetMatrixDataType;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createGetMatrixDataType\",\"_factory\",\"_array\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Array\",\"x\",\"getArrayDataType\",\"typeOf\",\"Matrix\",\"getDataType\"]\n}\n"]