["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/eigs.js"],"~:js","shadow$provide[524]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createEigs=void 0;var q=b(15);c=b(25);var f=b(21);b=(0,c.factory)(\"eigs\",\"config typed matrix addScalar equal subtract abs atan cos sin multiplyScalar inv bignumber multiply add\".split(\" \"),function(u){function k(M,S){var P=M.datatype();void 0===P&&(P=M.getDataType());if(\"number\"!==P&&\"BigNumber\"!==P&&\"Fraction\"!==P){if(\"mixed\"===P)throw new TypeError(\"Mixed matrix element type is not supported\");throw new TypeError(\"Matrix element type not supported (\"+\nP+\")\");}for(var R=M.toArray(),ba=0;ba<S;ba++)for(var Q=ba;Q<S;Q++)if(!z(R[ba][Q],R[Q][ba]))throw new TypeError(\"Input matrix is not symmetric\");if(\"number\"===P)return t(M.toArray());if(\"Fraction\"===P){P=M.toArray();for(R=0;R<S;R++)for(ba=R;ba<S;ba++)P[R][ba]=P[R][ba].valueOf(),P[ba][R]=P[R][ba];return t(M.toArray())}if(\"BigNumber\"===P){Q=M.toArray();M=Q.length;S=w(h.epsilon/M);P=Array(M);for(R=0;R<M;R++)P[R]=l(M,0),P[R][R]=1;for(ba=g(Q);w(ba[1])>=w(S);){R=ba[0][0];ba=ba[0][1];var T=Q[R][ba];var Y=\nC(Q[ba][ba],Q[R][R]),ca=T=w(Y)<=h.epsilon?G(-1).acos().div(4):F(.5,B(I(2,T,E(Y))));Y=R;var ka=ba,ha=Q.length,wa=G(x(ca)),Ia=G(D(ca)),Ha=F(wa,wa),oa=F(Ia,Ia);ca=l(ha,G(0));var Ka=l(ha,G(0)),fa=I(G(2),wa,Ia,Q[Y][ka]),va=v(C(F(Ha,Q[Y][Y]),fa),F(oa,Q[ka][ka]));Ha=L(F(oa,Q[Y][Y]),fa,F(Ha,Q[ka][ka]));for(oa=0;oa<ha;oa++)ca[oa]=C(F(wa,Q[Y][oa]),F(Ia,Q[ka][oa])),Ka[oa]=v(F(Ia,Q[Y][oa]),F(wa,Q[ka][oa]));Q[Y][Y]=va;Q[ka][ka]=Ha;Q[Y][ka]=G(0);Q[ka][Y]=G(0);for(wa=0;wa<ha;wa++)wa!==Y&&wa!==ka&&(Q[Y][wa]=ca[wa],\nQ[wa][Y]=ca[wa],Q[ka][wa]=Ka[wa],Q[wa][ka]=Ka[wa]);ka=T;T=P.length;Y=x(ka);wa=D(ka);ka=l(T,G(0));ha=l(T,G(0));for(ca=0;ca<T;ca++)ka[ca]=C(F(Y,P[ca][R]),F(wa,P[ca][ba])),ha[ca]=v(F(wa,P[ca][R]),F(Y,P[ca][ba]));for(Y=0;Y<T;Y++)P[Y][R]=ka[Y],P[Y][ba]=ha[Y];ba=g(Q)}S=l(M,0);for(R=0;R<M;R++)S[R]=Q[R][R];return d((0,q.clone)(S),(0,q.clone)(P))}}function t(M){var S=M.length,P=Math.abs(h.epsilon/S),R,ba=Array(S);for(R=0;R<S;R++)ba[R]=l(S,0),ba[R][R]=1;for(R=p(M);Math.abs(R[1])>=Math.abs(P);){var Q=R[0][0],\nT=R[0][1];R=M[Q][Q];var Y=M[T][T];R=Math.abs(Y-R)<=h.epsilon?Math.PI/4:.5*Math.atan(2*M[Q][T]/(Y-R));Y=Q;var ca=T,ka=M.length,ha=Math.cos(R),wa=Math.sin(R),Ia=ha*ha,Ha=wa*wa,oa=l(ka,0),Ka=l(ka,0),fa=Ia*M[Y][Y]-2*ha*wa*M[Y][ca]+Ha*M[ca][ca];Ia=Ha*M[Y][Y]+2*ha*wa*M[Y][ca]+Ia*M[ca][ca];for(Ha=0;Ha<ka;Ha++)oa[Ha]=ha*M[Y][Ha]-wa*M[ca][Ha],Ka[Ha]=wa*M[Y][Ha]+ha*M[ca][Ha];M[Y][Y]=fa;M[ca][ca]=Ia;M[Y][ca]=0;for(ha=M[ca][Y]=0;ha<ka;ha++)ha!==Y&&ha!==ca&&(M[Y][ha]=oa[ha],M[ha][Y]=oa[ha],M[ca][ha]=Ka[ha],M[ha][ca]=\nKa[ha]);Y=ba.length;ca=Math.cos(R);oa=Math.sin(R);R=l(Y,0);ka=l(Y,0);for(Ka=0;Ka<Y;Ka++)R[Ka]=ca*ba[Ka][Q]-oa*ba[Ka][T],ka[Ka]=oa*ba[Ka][Q]+ca*ba[Ka][T];for(ca=0;ca<Y;ca++)ba[ca][Q]=R[ca],ba[ca][T]=ka[ca];R=p(M)}P=l(S,0);for(R=0;R<S;R++)P[R]=M[R][R];return d((0,q.clone)(P),(0,q.clone)(ba))}function p(M){for(var S=M.length,P=0,R=[0,1],ba=0;ba<S;ba++)for(var Q=ba+1;Q<S;Q++)Math.abs(P)<Math.abs(M[ba][Q])&&(P=Math.abs(M[ba][Q]),R=[ba,Q]);return[R,P]}function g(M){for(var S=M.length,P=0,R=[0,1],ba=0;ba<\nS;ba++)for(var Q=ba+1;Q<S;Q++)w(P)<w(M[ba][Q])&&(P=w(M[ba][Q]),R=[ba,Q]);return[R,P]}function d(M,S){for(var P=M.length,R=Array(P),ba=Array(P),Q=0;Q<P;Q++)ba[Q]=Array(P);for(Q=0;Q<P;Q++){for(var T=0,Y=M[0],ca=0;ca<M.length;ca++)M[ca]<Y&&(T=ca,Y=M[T]);R[Q]=M.splice(T,1)[0];for(Y=0;Y<P;Y++)ba[Y][Q]=S[Y][T],S[Y].splice(T,1)}return[(0,q.clone)(R),(0,q.clone)(ba)]}function l(M,S){for(var P=Array(M),R=0;R<M;R++)P[R]=S;return P}var h=u.config,n=u.typed,r=u.matrix,v=u.addScalar,C=u.subtract,z=u.equal,w=u.abs,\nB=u.atan,x=u.cos,D=u.sin,F=u.multiplyScalar,E=u.inv,G=u.bignumber,I=u.multiply,L=u.add;return n(\"eigs\",{Array:function(M){M=r(M);var S=M.size();if(2!==S.length||S[0]!==S[1])throw new RangeError(\"Matrix must be square (size: \"+(0,f.format)(S)+\")\");M=k(M,S[0]);return{values:M[0],vectors:M[1]}},Matrix:function(M){var S=M.size();if(2!==S.length||S[0]!==S[1])throw new RangeError(\"Matrix must be square (size: \"+(0,f.format)(S)+\")\");M=k(M,S[0]);return{values:r(M[0]),vectors:r(M[1])}}})});a.createEigs=b}","~:source","shadow$provide[524] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEigs = void 0;\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar name = 'eigs';\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\nvar createEigs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      equal = _ref.equal,\n      abs = _ref.abs,\n      atan = _ref.atan,\n      cos = _ref.cos,\n      sin = _ref.sin,\n      multiplyScalar = _ref.multiplyScalar,\n      inv = _ref.inv,\n      bignumber = _ref.bignumber,\n      multiply = _ref.multiply,\n      add = _ref.add;\n\n  /**\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\n   * of elements are not supported. Input matrix or 2D array should contain all elements\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\n   * Eigenvectors are always of 'number' type.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x)\n   *\n   * Examples:\n   *\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\n   *     E[0] == UTxHxU[0][0]  // returns true\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      // check array size\n      var mat = matrix(x);\n      var size = mat.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n      } // use dense 2D matrix implementation\n\n\n      var ans = checkAndSubmit(mat, size[0]);\n      return {\n        values: ans[0],\n        vectors: ans[1]\n      };\n    },\n    Matrix: function Matrix(x) {\n      // use dense 2D array implementation\n      // dense matrix\n      var size = x.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n\n      var ans = checkAndSubmit(x, size[0]);\n      return {\n        values: matrix(ans[0]),\n        vectors: matrix(ans[1])\n      };\n    }\n  }); // Is the matrix\n  // symmetric ?\n\n  function isSymmetric(x, n) {\n    for (var i = 0; i < n; i++) {\n      for (var j = i; j < n; j++) {\n        // not symmtric\n        if (!equal(x[i][j], x[j][i])) {\n          throw new TypeError('Input matrix is not symmetric');\n        }\n      }\n    }\n  } // check input for possible problems\n  // and perform diagonalization efficiently for\n  // specific type of number\n\n\n  function checkAndSubmit(x, n) {\n    var type = x.datatype(); // type check\n\n    if (type === undefined) {\n      type = x.getDataType();\n    }\n\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\n      if (type === 'mixed') {\n        throw new TypeError('Mixed matrix element type is not supported');\n      } else {\n        throw new TypeError('Matrix element type not supported (' + type + ')');\n      }\n    } else {\n      isSymmetric(x.toArray(), n);\n    } // perform efficient calculation for 'numbers'\n\n\n    if (type === 'number') {\n      return diag(x.toArray());\n    } else if (type === 'Fraction') {\n      var xArr = x.toArray(); // convert fraction to numbers\n\n      for (var i = 0; i < n; i++) {\n        for (var j = i; j < n; j++) {\n          xArr[i][j] = xArr[i][j].valueOf();\n          xArr[j][i] = xArr[i][j];\n        }\n      }\n\n      return diag(x.toArray());\n    } else if (type === 'BigNumber') {\n      return diagBig(x.toArray());\n    }\n  } // diagonalization implementation for number (efficient)\n\n\n  function diag(x) {\n    var N = x.length;\n    var e0 = Math.abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAij(x);\n\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n\n    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));\n  } // diagonalization implementation for bigNumber\n\n\n  function diagBig(x) {\n    var N = x.length;\n    var e0 = abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAijBig(x);\n\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    } // return [clone(Ei), clone(Sij)]\n\n\n    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));\n  } // get angle\n\n\n  function getTheta(aii, ajj, aij) {\n    var denom = ajj - aii;\n\n    if (Math.abs(denom) <= config.epsilon) {\n      return Math.PI / 4;\n    } else {\n      return 0.5 * Math.atan(2 * aij / (ajj - aii));\n    }\n  } // get angle\n\n\n  function getThetaBig(aii, ajj, aij) {\n    var denom = subtract(ajj, aii);\n\n    if (abs(denom) <= config.epsilon) {\n      return bignumber(-1).acos().div(4);\n    } else {\n      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));\n    }\n  } // update eigvec\n\n\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n\n    return Sij;\n  } // update eigvec for overlap\n\n\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, bignumber(0));\n    var Skj = createArray(N, bignumber(0));\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n\n    return Sij;\n  } // update matrix\n\n\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, bignumber(0));\n    var Akj = createArray(N, bignumber(0)); // 2cs Hij\n\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii\n\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = bignumber(0);\n    Hij[j][i] = bignumber(0); // 0  to i\n\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n\n    return Hij;\n  } // update matrix\n\n\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); //  Aii\n\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n\n    return Hij;\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // sort results\n\n\n  function sorting(E, S) {\n    var N = E.length;\n    var Ef = Array(N);\n    var Sf = Array(N);\n\n    for (var k = 0; k < N; k++) {\n      Sf[k] = Array(N);\n    }\n\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n\n      for (var j = 0; j < E.length; j++) {\n        if (E[j] < minE) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n\n      Ef[i] = E.splice(minID, 1)[0];\n\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        Sf[_k5][i] = S[_k5][minID];\n\n        S[_k5].splice(minID, 1);\n      }\n    }\n\n    return [(0, _object.clone)(Ef), (0, _object.clone)(Sf)];\n  }\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n\n\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n\n    return array;\n  }\n});\nexports.createEigs = createEigs;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["vectors","values","createEigs","__esModule","value","Matrix","Array"]],"~:compiled-at",1619135724018,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$eigs.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/eigs.js\"],\n\"sourcesContent\":[\"shadow$provide[524] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createEigs = void 0;\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar name = 'eigs';\\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\\nvar createEigs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var config = _ref.config,\\n      typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      addScalar = _ref.addScalar,\\n      subtract = _ref.subtract,\\n      equal = _ref.equal,\\n      abs = _ref.abs,\\n      atan = _ref.atan,\\n      cos = _ref.cos,\\n      sin = _ref.sin,\\n      multiplyScalar = _ref.multiplyScalar,\\n      inv = _ref.inv,\\n      bignumber = _ref.bignumber,\\n      multiply = _ref.multiply,\\n      add = _ref.add;\\n\\n  /**\\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\\n   * of elements are not supported. Input matrix or 2D array should contain all elements\\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\\n   * Eigenvectors are always of 'number' type.\\n   *\\n   * Syntax:\\n   *\\n   *     math.eigs(x)\\n   *\\n   * Examples:\\n   *\\n   *     const H = [[5, 2.3], [2.3, 1]]\\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\\n   *     const E = ans.values\\n   *     const U = ans.vectors\\n   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))\\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\\n   *     E[0] == UTxHxU[0][0]  // returns true\\n   * See also:\\n   *\\n   *     inv\\n   *\\n   * @param {Array | Matrix} x  Matrix to be diagonalized\\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).\\n   */\\n  return typed('eigs', {\\n    Array: function Array(x) {\\n      // check array size\\n      var mat = matrix(x);\\n      var size = mat.size();\\n\\n      if (size.length !== 2 || size[0] !== size[1]) {\\n        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n      } // use dense 2D matrix implementation\\n\\n\\n      var ans = checkAndSubmit(mat, size[0]);\\n      return {\\n        values: ans[0],\\n        vectors: ans[1]\\n      };\\n    },\\n    Matrix: function Matrix(x) {\\n      // use dense 2D array implementation\\n      // dense matrix\\n      var size = x.size();\\n\\n      if (size.length !== 2 || size[0] !== size[1]) {\\n        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n      }\\n\\n      var ans = checkAndSubmit(x, size[0]);\\n      return {\\n        values: matrix(ans[0]),\\n        vectors: matrix(ans[1])\\n      };\\n    }\\n  }); // Is the matrix\\n  // symmetric ?\\n\\n  function isSymmetric(x, n) {\\n    for (var i = 0; i < n; i++) {\\n      for (var j = i; j < n; j++) {\\n        // not symmtric\\n        if (!equal(x[i][j], x[j][i])) {\\n          throw new TypeError('Input matrix is not symmetric');\\n        }\\n      }\\n    }\\n  } // check input for possible problems\\n  // and perform diagonalization efficiently for\\n  // specific type of number\\n\\n\\n  function checkAndSubmit(x, n) {\\n    var type = x.datatype(); // type check\\n\\n    if (type === undefined) {\\n      type = x.getDataType();\\n    }\\n\\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\\n      if (type === 'mixed') {\\n        throw new TypeError('Mixed matrix element type is not supported');\\n      } else {\\n        throw new TypeError('Matrix element type not supported (' + type + ')');\\n      }\\n    } else {\\n      isSymmetric(x.toArray(), n);\\n    } // perform efficient calculation for 'numbers'\\n\\n\\n    if (type === 'number') {\\n      return diag(x.toArray());\\n    } else if (type === 'Fraction') {\\n      var xArr = x.toArray(); // convert fraction to numbers\\n\\n      for (var i = 0; i < n; i++) {\\n        for (var j = i; j < n; j++) {\\n          xArr[i][j] = xArr[i][j].valueOf();\\n          xArr[j][i] = xArr[i][j];\\n        }\\n      }\\n\\n      return diag(x.toArray());\\n    } else if (type === 'BigNumber') {\\n      return diagBig(x.toArray());\\n    }\\n  } // diagonalization implementation for number (efficient)\\n\\n\\n  function diag(x) {\\n    var N = x.length;\\n    var e0 = Math.abs(config.epsilon / N);\\n    var psi;\\n    var Sij = new Array(N); // Sij is Identity Matrix\\n\\n    for (var i = 0; i < N; i++) {\\n      Sij[i] = createArray(N, 0);\\n      Sij[i][i] = 1.0;\\n    } // initial error\\n\\n\\n    var Vab = getAij(x);\\n\\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\\n      var _i = Vab[0][0];\\n      var j = Vab[0][1];\\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\\n      x = x1(x, psi, _i, j);\\n      Sij = Sij1(Sij, psi, _i, j);\\n      Vab = getAij(x);\\n    }\\n\\n    var Ei = createArray(N, 0); // eigenvalues\\n\\n    for (var _i2 = 0; _i2 < N; _i2++) {\\n      Ei[_i2] = x[_i2][_i2];\\n    }\\n\\n    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));\\n  } // diagonalization implementation for bigNumber\\n\\n\\n  function diagBig(x) {\\n    var N = x.length;\\n    var e0 = abs(config.epsilon / N);\\n    var psi;\\n    var Sij = new Array(N); // Sij is Identity Matrix\\n\\n    for (var i = 0; i < N; i++) {\\n      Sij[i] = createArray(N, 0);\\n      Sij[i][i] = 1.0;\\n    } // initial error\\n\\n\\n    var Vab = getAijBig(x);\\n\\n    while (abs(Vab[1]) >= abs(e0)) {\\n      var _i3 = Vab[0][0];\\n      var j = Vab[0][1];\\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\\n      x = x1Big(x, psi, _i3, j);\\n      Sij = Sij1Big(Sij, psi, _i3, j);\\n      Vab = getAijBig(x);\\n    }\\n\\n    var Ei = createArray(N, 0); // eigenvalues\\n\\n    for (var _i4 = 0; _i4 < N; _i4++) {\\n      Ei[_i4] = x[_i4][_i4];\\n    } // return [clone(Ei), clone(Sij)]\\n\\n\\n    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));\\n  } // get angle\\n\\n\\n  function getTheta(aii, ajj, aij) {\\n    var denom = ajj - aii;\\n\\n    if (Math.abs(denom) <= config.epsilon) {\\n      return Math.PI / 4;\\n    } else {\\n      return 0.5 * Math.atan(2 * aij / (ajj - aii));\\n    }\\n  } // get angle\\n\\n\\n  function getThetaBig(aii, ajj, aij) {\\n    var denom = subtract(ajj, aii);\\n\\n    if (abs(denom) <= config.epsilon) {\\n      return bignumber(-1).acos().div(4);\\n    } else {\\n      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));\\n    }\\n  } // update eigvec\\n\\n\\n  function Sij1(Sij, theta, i, j) {\\n    var N = Sij.length;\\n    var c = Math.cos(theta);\\n    var s = Math.sin(theta);\\n    var Ski = createArray(N, 0);\\n    var Skj = createArray(N, 0);\\n\\n    for (var k = 0; k < N; k++) {\\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\\n    }\\n\\n    for (var _k = 0; _k < N; _k++) {\\n      Sij[_k][i] = Ski[_k];\\n      Sij[_k][j] = Skj[_k];\\n    }\\n\\n    return Sij;\\n  } // update eigvec for overlap\\n\\n\\n  function Sij1Big(Sij, theta, i, j) {\\n    var N = Sij.length;\\n    var c = cos(theta);\\n    var s = sin(theta);\\n    var Ski = createArray(N, bignumber(0));\\n    var Skj = createArray(N, bignumber(0));\\n\\n    for (var k = 0; k < N; k++) {\\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\\n    }\\n\\n    for (var _k2 = 0; _k2 < N; _k2++) {\\n      Sij[_k2][i] = Ski[_k2];\\n      Sij[_k2][j] = Skj[_k2];\\n    }\\n\\n    return Sij;\\n  } // update matrix\\n\\n\\n  function x1Big(Hij, theta, i, j) {\\n    var N = Hij.length;\\n    var c = bignumber(cos(theta));\\n    var s = bignumber(sin(theta));\\n    var c2 = multiplyScalar(c, c);\\n    var s2 = multiplyScalar(s, s);\\n    var Aki = createArray(N, bignumber(0));\\n    var Akj = createArray(N, bignumber(0)); // 2cs Hij\\n\\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii\\n\\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\\n\\n    for (var k = 0; k < N; k++) {\\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\\n    } // Modify Hij\\n\\n\\n    Hij[i][i] = Aii;\\n    Hij[j][j] = Ajj;\\n    Hij[i][j] = bignumber(0);\\n    Hij[j][i] = bignumber(0); // 0  to i\\n\\n    for (var _k3 = 0; _k3 < N; _k3++) {\\n      if (_k3 !== i && _k3 !== j) {\\n        Hij[i][_k3] = Aki[_k3];\\n        Hij[_k3][i] = Aki[_k3];\\n        Hij[j][_k3] = Akj[_k3];\\n        Hij[_k3][j] = Akj[_k3];\\n      }\\n    }\\n\\n    return Hij;\\n  } // update matrix\\n\\n\\n  function x1(Hij, theta, i, j) {\\n    var N = Hij.length;\\n    var c = Math.cos(theta);\\n    var s = Math.sin(theta);\\n    var c2 = c * c;\\n    var s2 = s * s;\\n    var Aki = createArray(N, 0);\\n    var Akj = createArray(N, 0); //  Aii\\n\\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\\n\\n    for (var k = 0; k < N; k++) {\\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\\n    } // Modify Hij\\n\\n\\n    Hij[i][i] = Aii;\\n    Hij[j][j] = Ajj;\\n    Hij[i][j] = 0;\\n    Hij[j][i] = 0; // 0  to i\\n\\n    for (var _k4 = 0; _k4 < N; _k4++) {\\n      if (_k4 !== i && _k4 !== j) {\\n        Hij[i][_k4] = Aki[_k4];\\n        Hij[_k4][i] = Aki[_k4];\\n        Hij[j][_k4] = Akj[_k4];\\n        Hij[_k4][j] = Akj[_k4];\\n      }\\n    }\\n\\n    return Hij;\\n  } // get max off-diagonal value from Upper Diagonal\\n\\n\\n  function getAij(Mij) {\\n    var N = Mij.length;\\n    var maxMij = 0;\\n    var maxIJ = [0, 1];\\n\\n    for (var i = 0; i < N; i++) {\\n      for (var j = i + 1; j < N; j++) {\\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\\n          maxMij = Math.abs(Mij[i][j]);\\n          maxIJ = [i, j];\\n        }\\n      }\\n    }\\n\\n    return [maxIJ, maxMij];\\n  } // get max off-diagonal value from Upper Diagonal\\n\\n\\n  function getAijBig(Mij) {\\n    var N = Mij.length;\\n    var maxMij = 0;\\n    var maxIJ = [0, 1];\\n\\n    for (var i = 0; i < N; i++) {\\n      for (var j = i + 1; j < N; j++) {\\n        if (abs(maxMij) < abs(Mij[i][j])) {\\n          maxMij = abs(Mij[i][j]);\\n          maxIJ = [i, j];\\n        }\\n      }\\n    }\\n\\n    return [maxIJ, maxMij];\\n  } // sort results\\n\\n\\n  function sorting(E, S) {\\n    var N = E.length;\\n    var Ef = Array(N);\\n    var Sf = Array(N);\\n\\n    for (var k = 0; k < N; k++) {\\n      Sf[k] = Array(N);\\n    }\\n\\n    for (var i = 0; i < N; i++) {\\n      var minID = 0;\\n      var minE = E[0];\\n\\n      for (var j = 0; j < E.length; j++) {\\n        if (E[j] < minE) {\\n          minID = j;\\n          minE = E[minID];\\n        }\\n      }\\n\\n      Ef[i] = E.splice(minID, 1)[0];\\n\\n      for (var _k5 = 0; _k5 < N; _k5++) {\\n        Sf[_k5][i] = S[_k5][minID];\\n\\n        S[_k5].splice(minID, 1);\\n      }\\n    }\\n\\n    return [(0, _object.clone)(Ef), (0, _object.clone)(Sf)];\\n  }\\n  /**\\n   * Create an array of a certain size and fill all items with an initial value\\n   * @param {number} size\\n   * @param {number} value\\n   * @return {number[]}\\n   */\\n\\n\\n  function createArray(size, value) {\\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\\n    var array = new Array(size);\\n\\n    for (var i = 0; i < size; i++) {\\n      array[i] = value;\\n    }\\n\\n    return array;\\n  }\\n});\\nexports.createEigs = createEigs;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createEigs\",\"_object\",\"_factory\",\"_string\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"checkAndSubmit\",\"x\",\"n\",\"type\",\"datatype\",\"undefined\",\"getDataType\",\"TypeError\",\"toArray\",\"i\",\"j\",\"equal\",\"diag\",\"xArr\",\"valueOf\",\"N\",\"length\",\"e0\",\"abs\",\"config\",\"epsilon\",\"Sij\",\"Array\",\"createArray\",\"Vab\",\"getAijBig\",\"_i3\",\"denom\",\"subtract\",\"ajj\",\"aii\",\"psi\",\"bignumber\",\"acos\",\"div\",\"multiplyScalar\",\"atan\",\"multiply\",\"aij\",\"inv\",\"Hij\",\"c\",\"cos\",\"theta\",\"s\",\"sin\",\"c2\",\"s2\",\"Aki\",\"Akj\",\"csHij\",\"Aii\",\"addScalar\",\"Ajj\",\"add\",\"k\",\"_k3\",\"Ski\",\"Skj\",\"_k2\",\"Ei\",\"_i4\",\"sorting\",\"clone\",\"Math\",\"getAij\",\"_i\",\"PI\",\"_k4\",\"_k\",\"_i2\",\"Mij\",\"maxMij\",\"maxIJ\",\"E\",\"S\",\"Ef\",\"Sf\",\"minID\",\"minE\",\"splice\",\"_k5\",\"size\",\"array\",\"typed\",\"matrix\",\"mat\",\"RangeError\",\"format\",\"ans\",\"values\",\"vectors\",\"Matrix\"]\n}\n"]