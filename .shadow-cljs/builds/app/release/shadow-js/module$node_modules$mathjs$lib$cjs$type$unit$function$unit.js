["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/unit/function/unit.js"],"~:js","shadow$provide[204]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createUnitFunction=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"unit\",[\"typed\",\"Unit\"],function(f){var u=f.typed,k=f.Unit;return u(\"unit\",{Unit:function(t){return t.clone()},string:function(t){return k.isValuelessUnit(t)?new k(null,t):k.parse(t,{allowNoUnits:!0})},\"number | BigNumber | Fraction | Complex, string\":function(t,p){return new k(t,p)},\"Array | Matrix\":function(t){return(0,q.deepMap)(t,this)}})});a.createUnitFunction=\nb}","~:source","shadow$provide[204] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnitFunction = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\n\nvar createUnitFunction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Unit = _ref.Unit;\n\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, unit : string)\n   *\n   * Examples:\n   *\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\n      return new Unit(value, unit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createUnitFunction = createUnitFunction;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","string","allowNoUnits","__esModule","createUnitFunction","value"]],"~:compiled-at",1619135723935,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$unit$function$unit.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAKdM,EAAAA,CAAoC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAH7BC,MAG6B,CAFrBC,CAAC,OAADA,CAAU,MAAVA,CAEqB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC5FC,EAAQD,CAAKC,CAAAA,KAD+E,CAE5FC,EAAOF,CAAKE,CAAAA,IAyBhB,OAAOD,EAAA,CA9BEH,MA8BF,CAAY,CACjBI,KAAMA,QAAa,CAACC,CAAD,CAAI,CACrB,MAAOA,EAAEC,CAAAA,KAAF,EADc,CADN,CAIjBC,OAAQA,QAAe,CAACF,CAAD,CAAI,CACzB,MAAID,EAAKI,CAAAA,eAAL,CAAqBH,CAArB,CAAJ,CACS,IAAID,CAAJ,CAAS,IAAT,CAAeC,CAAf,CADT,CAIOD,CAAKK,CAAAA,KAAL,CAAWJ,CAAX,CAAc,CACnBK,aAAc,CAAA,CADK,CAAd,CALkB,CAJV,CAajB,kDAAmDC,QAA6C,CAAChB,CAAD,CAAQiB,CAAR,CAAc,CAC5G,MAAO,KAAIR,CAAJ,CAAST,CAAT,CAAgBiB,CAAhB,CADqG,CAb7F,CAgBjB,iBAAkBC,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,CAAYgB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CAhBzB,CAAZ,CA3ByF,CAA1D,CAgDxCb,EAAQI,CAAAA,kBAAR;AAA6BA,CA/DiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/unit/function/unit.js\"],\n\"sourcesContent\":[\"shadow$provide[204] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createUnitFunction = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../../utils/collection.js\\\");\\n\\nvar name = 'unit';\\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\\n\\nvar createUnitFunction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Unit = _ref.Unit;\\n\\n  /**\\n   * Create a unit. Depending on the passed arguments, the function\\n   * will create and return a new math.Unit object.\\n   * When a matrix is provided, all elements will be converted to units.\\n   *\\n   * Syntax:\\n   *\\n   *     math.unit(unit : string)\\n   *     math.unit(value : number, unit : string)\\n   *\\n   * Examples:\\n   *\\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\\n   *    a.to('m')                       // returns Unit 0.05 m\\n   *\\n   * See also:\\n   *\\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\\n   *\\n   * @param {* | Array | Matrix} args   A number and unit.\\n   * @return {Unit | Array | Matrix}    The created unit\\n   */\\n  return typed(name, {\\n    Unit: function Unit(x) {\\n      return x.clone();\\n    },\\n    string: function string(x) {\\n      if (Unit.isValuelessUnit(x)) {\\n        return new Unit(null, x); // a pure unit\\n      }\\n\\n      return Unit.parse(x, {\\n        allowNoUnits: true\\n      }); // a unit with value, like '5cm'\\n    },\\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\\n      return new Unit(value, unit);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createUnitFunction = createUnitFunction;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createUnitFunction\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Unit\",\"x\",\"clone\",\"string\",\"isValuelessUnit\",\"parse\",\"allowNoUnits\",\"numberBigNumberFractionComplexString\",\"unit\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]