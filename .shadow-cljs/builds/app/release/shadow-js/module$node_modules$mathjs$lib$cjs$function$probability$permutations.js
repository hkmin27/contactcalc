["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/permutations.js"],"~:js","shadow$provide[543]=function(c,b,y,a){function q(k){return k.isInteger()&&k.gte(0)}Object.defineProperty(a,\"__esModule\",{value:!0});a.createPermutations=void 0;var f=b(19),u=b(42);c=b(25);c=(0,c.factory)(\"permutations\",[\"typed\",\"factorial\"],function(k){var t=k.typed;return t(\"permutations\",{\"number | BigNumber\":k.factorial,\"number, number\":function(p,g){if(!(0,f.isInteger)(p)||0>p)throw new TypeError(\"Positive integer value expected in function permutations\");if(!(0,f.isInteger)(g)||0>g)throw new TypeError(\"Positive integer value expected in function permutations\");\nif(g>p)throw new TypeError(\"second argument k must be less than or equal to first argument n\");return(0,u.product)(p-g+1,p)},\"BigNumber, BigNumber\":function(p,g){if(!q(p)||!q(g))throw new TypeError(\"Positive integer value expected in function permutations\");if(g.gt(p))throw new TypeError(\"second argument k must be less than or equal to first argument n\");var d=p.mul(0).add(1);for(g=p.minus(g).plus(1);g.lte(p);g=g.plus(1))d=d.times(g);return d}})});a.createPermutations=c}","~:source","shadow$provide[543] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPermutations = void 0;\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _product = require(\"../../utils/product.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nvar createPermutations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      factorial = _ref.factorial;\n\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      } // Permute n objects, k at a time\n\n\n      return (0, _product.product)(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      var one = n.mul(0).add(1);\n      result = one;\n\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    } // TODO: implement support for collection in permutations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createPermutations = createPermutations;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$product","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createPermutations"]],"~:compiled-at",1619135724026,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$permutations.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CA8F9DC,QAASA,EAAiB,CAACC,CAAD,CAAI,CAC5B,MAAOA,EAAEC,CAAAA,SAAF,EAAP,EAAwBD,CAAEE,CAAAA,GAAF,CAAM,CAAN,CADI,CA3F9BC,MAAOC,CAAAA,cAAP,CAAsBN,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,EAAQQ,CAAAA,kBAAR,CAA6B,IAAK,EAElC,KAAIC,EAAUX,CAAA,CAAQ,EAAR,CAAd,CAEIY,EAAWZ,CAAA,CAAQ,EAAR,CAEXa,EAAAA,CAAWb,CAAA,CAAQ,EAAR,CAIXU,EAAAA,CAAoC,CAAC,CAAA,CAAGG,CAASC,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,CAAC,OAADA,CAAU,WAAVA,CACqB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC5FC,EAAQD,CAAKC,CAAAA,KA4BjB,OAAOA,EAAA,CA/BEH,cA+BF,CAAY,CACjB,qBA5BcE,CAAKE,CAAAA,SA2BF,CAEjB,iBAAkBC,QAAqB,CAAChB,CAAD,CAAIiB,CAAJ,CAAO,CAC5C,GAAI,CAAC,CAAC,CAAA,CAAGV,CAAQN,CAAAA,SAAZ,EAAuBD,CAAvB,CAAL,EAAsC,CAAtC,CAAkCA,CAAlC,CACE,KAAM,KAAIkB,SAAJ,CAAc,0DAAd,CAAN,CAGF,GAAI,CAAC,CAAC,CAAA,CAAGX,CAAQN,CAAAA,SAAZ,EAAuBgB,CAAvB,CAAL,EAAsC,CAAtC,CAAkCA,CAAlC,CACE,KAAM,KAAIC,SAAJ,CAAc,0DAAd,CAAN;AAGF,GAAID,CAAJ,CAAQjB,CAAR,CACE,KAAM,KAAIkB,SAAJ,CAAc,kEAAd,CAAN,CAIF,MAAO,CAAC,CAAA,CAAGV,CAASW,CAAAA,OAAb,EAAsBnB,CAAtB,CAA0BiB,CAA1B,CAA8B,CAA9B,CAAiCjB,CAAjC,CAdqC,CAF7B,CAkBjB,uBAAwBoB,QAA2B,CAACpB,CAAD,CAAIiB,CAAJ,CAAO,CAGxD,GAAI,CAAClB,CAAA,CAAkBC,CAAlB,CAAL,EAA6B,CAACD,CAAA,CAAkBkB,CAAlB,CAA9B,CACE,KAAM,KAAIC,SAAJ,CAAc,0DAAd,CAAN,CAGF,GAAID,CAAEI,CAAAA,EAAF,CAAKrB,CAAL,CAAJ,CACE,KAAM,KAAIkB,SAAJ,CAAc,kEAAd,CAAN,CAIF,IAAAI,EADUtB,CAAEuB,CAAAA,GAAF,CAAM,CAAN,CAASC,CAAAA,GAATC,CAAa,CAAbA,CAGV,KAAKC,CAAL,CAAS1B,CAAE2B,CAAAA,KAAF,CAAQV,CAAR,CAAWW,CAAAA,IAAX,CAAgB,CAAhB,CAAT,CAA6BF,CAAEG,CAAAA,GAAF,CAAM7B,CAAN,CAA7B,CAAuC0B,CAAvC,CAA2CA,CAAEE,CAAAA,IAAF,CAAO,CAAP,CAA3C,CACEN,CAAA,CAASA,CAAOQ,CAAAA,KAAP,CAAaJ,CAAb,CAGX,OAAOJ,EAlBiD,CAlBzC,CAAZ,CA7ByF,CAA1D,CA4ExCxB,EAAQQ,CAAAA,kBAAR,CAA6BA,CA5FiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/permutations.js\"],\n\"sourcesContent\":[\"shadow$provide[543] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createPermutations = void 0;\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _product = require(\\\"../../utils/product.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'permutations';\\nvar dependencies = ['typed', 'factorial'];\\nvar createPermutations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      factorial = _ref.factorial;\\n\\n  /**\\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\\n   * from a set of `n` elements.\\n   *\\n   * Permutations only takes integer arguments.\\n   * The following condition must be enforced: k <= n.\\n   *\\n   * Syntax:\\n   *\\n   *     math.permutations(n)\\n   *     math.permutations(n, k)\\n   *\\n   * Examples:\\n   *\\n   *    math.permutations(5)     // 120\\n   *    math.permutations(5, 3)  // 60\\n   *\\n   * See also:\\n   *\\n   *    combinations, combinationsWithRep, factorial\\n   *\\n   * @param {number | BigNumber} n   The number of objects in total\\n   * @param {number | BigNumber} [k] The number of objects in the subset\\n   * @return {number | BigNumber}    The number of permutations\\n   */\\n  return typed(name, {\\n    'number | BigNumber': factorial,\\n    'number, number': function numberNumber(n, k) {\\n      if (!(0, _number.isInteger)(n) || n < 0) {\\n        throw new TypeError('Positive integer value expected in function permutations');\\n      }\\n\\n      if (!(0, _number.isInteger)(k) || k < 0) {\\n        throw new TypeError('Positive integer value expected in function permutations');\\n      }\\n\\n      if (k > n) {\\n        throw new TypeError('second argument k must be less than or equal to first argument n');\\n      } // Permute n objects, k at a time\\n\\n\\n      return (0, _product.product)(n - k + 1, n);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\\n      var result, i;\\n\\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\\n        throw new TypeError('Positive integer value expected in function permutations');\\n      }\\n\\n      if (k.gt(n)) {\\n        throw new TypeError('second argument k must be less than or equal to first argument n');\\n      }\\n\\n      var one = n.mul(0).add(1);\\n      result = one;\\n\\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\\n        result = result.times(i);\\n      }\\n\\n      return result;\\n    } // TODO: implement support for collection in permutations\\n\\n  });\\n});\\n/**\\n * Test whether BigNumber n is a positive integer\\n * @param {BigNumber} n\\n * @returns {boolean} isPositiveInteger\\n */\\n\\nexports.createPermutations = createPermutations;\\n\\nfunction isPositiveInteger(n) {\\n  return n.isInteger() && n.gte(0);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isPositiveInteger\",\"n\",\"isInteger\",\"gte\",\"Object\",\"defineProperty\",\"value\",\"createPermutations\",\"_number\",\"_product\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"factorial\",\"numberNumber\",\"k\",\"TypeError\",\"product\",\"BigNumberBigNumber\",\"gt\",\"result\",\"mul\",\"add\",\"one\",\"i\",\"minus\",\"plus\",\"lte\",\"times\"]\n}\n"]