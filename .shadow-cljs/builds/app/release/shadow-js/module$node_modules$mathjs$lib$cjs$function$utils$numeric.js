["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/numeric.js"],"~:js","shadow$provide[163]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createNumeric=void 0;var q=b(14);c=b(25);var f=b(137);b=(0,c.factory)(\"numeric\",[\"number\",\"?bignumber\",\"?fraction\"],function(u){var k=u.number,t=u.bignumber,p=u.fraction,g={string:!0,number:!0,BigNumber:!0,Fraction:!0},d={number:function(l){return k(l)},BigNumber:t?function(l){return t(l)}:f.noBignumber,Fraction:p?function(l){return p(l)}:f.noFraction};return function(l,h){var n=(0,q.typeOf)(l);if(!(n in g))throw new TypeError(\"Cannot convert \"+\nl+' of type \"'+n+'\"; valid input types are '+Object.keys(g).join(\", \"));if(!(h in d))throw new TypeError(\"Cannot convert \"+l+' to type \"'+h+'\"; valid output types are '+Object.keys(d).join(\", \"));return h===n?l:d[h](l)}});a.createNumeric=b}","~:source","shadow$provide[163] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumeric = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _noop = require(\"../../utils/noop.js\");\n\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nvar createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : _noop.noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : _noop.noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = (0, _is.typeOf)(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});\nexports.createNumeric = createNumeric;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$noop","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","__esModule","value","createNumeric","number","BigNumber","Fraction"]],"~:compiled-at",1619135723897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$numeric.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,EAAMP,CAAA,CAAQ,EAAR,CAENQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAQT,CAAA,CAAQ,GAAR,CAIRM,EAAAA,CAA+B,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,QAADA,CAAW,YAAXA,CAAyB,WAAzBA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAUD,CAAKE,CAAAA,MADwE,CAEvFC,EAAYH,CAAKG,CAAAA,SAFsE,CAGvFC,EAAWJ,CAAKI,CAAAA,QAHuE,CAIvFC,EAAkB,CACpBC,OAAQ,CAAA,CADY,CAEpBJ,OAAQ,CAAA,CAFY,CAGpBK,UAAW,CAAA,CAHS,CAIpBC,SAAU,CAAA,CAJU,CAJqE,CAWvFC,EAAmB,CACrBP,OAAQA,QAAe,CAACQ,CAAD,CAAI,CACzB,MAAOT,EAAA,CAAQS,CAAR,CADkB,CADN,CAIrBH,UAAWJ,CAAA,CAAY,QAAS,CAACO,CAAD,CAAI,CAClC,MAAOP,EAAA,CAAUO,CAAV,CAD2B,CAAzB,CAEPd,CAAMe,CAAAA,WANW,CAOrBH,SAAUJ,CAAA,CAAW,QAAS,CAACM,CAAD,CAAI,CAChC,MAAON,EAAA,CAASM,CAAT,CADyB,CAAxB,CAENd,CAAMgB,CAAAA,UATW,CAwCvB,OAAOC,SAAgB,CAACrB,CAAD,CAAQsB,CAAR,CAAoB,CACzC,IAAIC,EAAY,CAAC,CAAA,CAAGrB,CAAIsB,CAAAA,MAAR,EAAgBxB,CAAhB,CAEhB,IAAI,EAAEuB,CAAF,GAAeV,EAAf,CAAJ,CACE,KAAM,KAAIY,SAAJ,CAAc,iBAAd;AAAkCzB,CAAlC,CAA0C,YAA1C,CAAyDuB,CAAzD,CAAqE,2BAArE,CAAmGzB,MAAO4B,CAAAA,IAAP,CAAYb,CAAZ,CAA6Bc,CAAAA,IAA7B,CAAkC,IAAlC,CAAnG,CAAN,CAGF,GAAI,EAAEL,CAAF,GAAgBL,EAAhB,CAAJ,CACE,KAAM,KAAIQ,SAAJ,CAAc,iBAAd,CAAkCzB,CAAlC,CAA0C,YAA1C,CAAyDsB,CAAzD,CAAsE,4BAAtE,CAAqGxB,MAAO4B,CAAAA,IAAP,CAAYT,CAAZ,CAA8BU,CAAAA,IAA9B,CAAmC,IAAnC,CAArG,CAAN,CAGF,MAAIL,EAAJ,GAAmBC,CAAnB,CACSvB,CADT,CAGSiB,CAAA,CAAiBK,CAAjB,CAAA,CAA6BtB,CAA7B,CAdgC,CAnDgD,CAA1D,CAqEnCH,EAAQI,CAAAA,aAAR,CAAwBA,CArFsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/numeric.js\"],\n\"sourcesContent\":[\"shadow$provide[163] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createNumeric = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _noop = require(\\\"../../utils/noop.js\\\");\\n\\nvar name = 'numeric';\\nvar dependencies = ['number', '?bignumber', '?fraction'];\\nvar createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var _number = _ref.number,\\n      bignumber = _ref.bignumber,\\n      fraction = _ref.fraction;\\n  var validInputTypes = {\\n    string: true,\\n    number: true,\\n    BigNumber: true,\\n    Fraction: true\\n  }; // Load the conversion functions for each output type\\n\\n  var validOutputTypes = {\\n    number: function number(x) {\\n      return _number(x);\\n    },\\n    BigNumber: bignumber ? function (x) {\\n      return bignumber(x);\\n    } : _noop.noBignumber,\\n    Fraction: fraction ? function (x) {\\n      return fraction(x);\\n    } : _noop.noFraction\\n  };\\n  /**\\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\\n   *\\n   * Syntax:\\n   *\\n   *    math.numeric(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.numeric('4')                           // returns number 4\\n   *    math.numeric('4', 'number')                 // returns number 4\\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\\n   *\\n   * See also:\\n   *\\n   *    number, fraction, bignumber, string, format\\n   *\\n   * @param {string | number | BigNumber | Fraction } value\\n   *              A numeric value or a string containing a numeric value\\n   * @param {string} outputType\\n   *              Desired numeric output type.\\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\\n   * @return {number | BigNumber | Fraction}\\n   *              Returns an instance of the numeric in the requested type\\n   */\\n\\n  return function numeric(value, outputType) {\\n    var inputType = (0, _is.typeOf)(value);\\n\\n    if (!(inputType in validInputTypes)) {\\n      throw new TypeError('Cannot convert ' + value + ' of type \\\"' + inputType + '\\\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\\n    }\\n\\n    if (!(outputType in validOutputTypes)) {\\n      throw new TypeError('Cannot convert ' + value + ' to type \\\"' + outputType + '\\\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\\n    }\\n\\n    if (outputType === inputType) {\\n      return value;\\n    } else {\\n      return validOutputTypes[outputType](value);\\n    }\\n  };\\n});\\nexports.createNumeric = createNumeric;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createNumeric\",\"_is\",\"_factory\",\"_noop\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_number\",\"number\",\"bignumber\",\"fraction\",\"validInputTypes\",\"string\",\"BigNumber\",\"Fraction\",\"validOutputTypes\",\"x\",\"noBignumber\",\"noFraction\",\"numeric\",\"outputType\",\"inputType\",\"typeOf\",\"TypeError\",\"keys\",\"join\"]\n}\n"]