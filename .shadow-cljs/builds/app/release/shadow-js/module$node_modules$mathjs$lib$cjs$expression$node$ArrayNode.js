["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js"],"~:js","shadow$provide[253]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createArrayNode=void 0;var q=b(14),f=b(24);c=b(25);c=(0,c.factory)(\"ArrayNode\",[\"Node\"],function(u){function k(t){if(!(this instanceof k))throw new SyntaxError(\"Constructor must be called with the new operator\");this.items=t||[];if(!Array.isArray(this.items)||!this.items.every(q.isNode))throw new TypeError(\"Array containing Nodes expected\");}k.prototype=new u.Node;k.prototype.type=\"ArrayNode\";k.prototype.isArrayNode=\n!0;k.prototype._compile=function(t,p){var g=(0,f.map)(this.items,function(l){return l._compile(t,p)});if(\"Array\"!==t.config.matrix){var d=t.matrix;return function(l,h,n){return d((0,f.map)(g,function(r){return r(l,h,n)}))}}return function(l,h,n){return(0,f.map)(g,function(r){return r(l,h,n)})}};k.prototype.forEach=function(t){for(var p=0;p<this.items.length;p++)t(this.items[p],\"items[\"+p+\"]\",this)};k.prototype.map=function(t){for(var p=[],g=0;g<this.items.length;g++)p[g]=this._ifNode(t(this.items[g],\n\"items[\"+g+\"]\",this));return new k(p)};k.prototype.clone=function(){return new k(this.items.slice(0))};k.prototype._toString=function(t){return\"[\"+this.items.map(function(p){return p.toString(t)}).join(\", \")+\"]\"};k.prototype.toJSON=function(){return{mathjs:\"ArrayNode\",items:this.items}};k.fromJSON=function(t){return new k(t.items)};k.prototype.toHTML=function(t){return'\\x3cspan class\\x3d\"math-parenthesis math-square-parenthesis\"\\x3e[\\x3c/span\\x3e'+this.items.map(function(p){return p.toHTML(t)}).join('\\x3cspan class\\x3d\"math-separator\"\\x3e,\\x3c/span\\x3e')+\n'\\x3cspan class\\x3d\"math-parenthesis math-square-parenthesis\"\\x3e]\\x3c/span\\x3e'};k.prototype._toTex=function(t){var p=\"\\\\begin{bmatrix}\";this.items.forEach(function(g){p=g.items?p+g.items.map(function(d){return d.toTex(t)}).join(\"\\x26\"):p+g.toTex(t);p+=\"\\\\\\\\\"});return p+=\"\\\\end{bmatrix}\"};return k},{isClass:!0,isNode:!0});a.createArrayNode=c}","~:source","shadow$provide[253] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createArrayNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nvar createArrayNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = (0, _array.map)(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config.matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix((0, _array.map)(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return (0, _array.map)(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createArrayNode = createArrayNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["map","forEach","fromJSON","isClass","toHTML","prototype","_toString","isNode","_toTex","__esModule","isArrayNode","value","items","mathjs","type","clone","_compile","createArrayNode","toJSON"]],"~:compiled-at",1619135723955,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$node$ArrayNode.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js\"],\n\"sourcesContent\":[\"shadow$provide[253] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createArrayNode = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'ArrayNode';\\nvar dependencies = ['Node'];\\nvar createArrayNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var Node = _ref.Node;\\n\\n  /**\\n   * @constructor ArrayNode\\n   * @extends {Node}\\n   * Holds an 1-dimensional array with items\\n   * @param {Node[]} [items]   1 dimensional array with items\\n   */\\n  function ArrayNode(items) {\\n    if (!(this instanceof ArrayNode)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    this.items = items || []; // validate input\\n\\n    if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {\\n      throw new TypeError('Array containing Nodes expected');\\n    }\\n  }\\n\\n  ArrayNode.prototype = new Node();\\n  ArrayNode.prototype.type = 'ArrayNode';\\n  ArrayNode.prototype.isArrayNode = true;\\n  /**\\n   * Compile a node into a JavaScript function.\\n   * This basically pre-calculates as much as possible and only leaves open\\n   * calculations which depend on a dynamic scope with variables.\\n   * @param {Object} math     Math.js namespace with functions and constants.\\n   * @param {Object} argNames An object with argument names as key and `true`\\n   *                          as value. Used in the SymbolNode to optimize\\n   *                          for arguments from user assigned functions\\n   *                          (see FunctionAssignmentNode) or special symbols\\n   *                          like `end` (see IndexNode).\\n   * @return {function} Returns a function which can be called like:\\n   *                        evalNode(scope: Object, args: Object, context: *)\\n   */\\n\\n  ArrayNode.prototype._compile = function (math, argNames) {\\n    var evalItems = (0, _array.map)(this.items, function (item) {\\n      return item._compile(math, argNames);\\n    });\\n    var asMatrix = math.config.matrix !== 'Array';\\n\\n    if (asMatrix) {\\n      var matrix = math.matrix;\\n      return function evalArrayNode(scope, args, context) {\\n        return matrix((0, _array.map)(evalItems, function (evalItem) {\\n          return evalItem(scope, args, context);\\n        }));\\n      };\\n    } else {\\n      return function evalArrayNode(scope, args, context) {\\n        return (0, _array.map)(evalItems, function (evalItem) {\\n          return evalItem(scope, args, context);\\n        });\\n      };\\n    }\\n  };\\n  /**\\n   * Execute a callback for each of the child nodes of this node\\n   * @param {function(child: Node, path: string, parent: Node)} callback\\n   */\\n\\n\\n  ArrayNode.prototype.forEach = function (callback) {\\n    for (var i = 0; i < this.items.length; i++) {\\n      var node = this.items[i];\\n      callback(node, 'items[' + i + ']', this);\\n    }\\n  };\\n  /**\\n   * Create a new ArrayNode having it's childs be the results of calling\\n   * the provided callback function for each of the childs of the original node.\\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\\n   * @returns {ArrayNode} Returns a transformed copy of the node\\n   */\\n\\n\\n  ArrayNode.prototype.map = function (callback) {\\n    var items = [];\\n\\n    for (var i = 0; i < this.items.length; i++) {\\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\\n    }\\n\\n    return new ArrayNode(items);\\n  };\\n  /**\\n   * Create a clone of this node, a shallow copy\\n   * @return {ArrayNode}\\n   */\\n\\n\\n  ArrayNode.prototype.clone = function () {\\n    return new ArrayNode(this.items.slice(0));\\n  };\\n  /**\\n   * Get string representation\\n   * @param {Object} options\\n   * @return {string} str\\n   * @override\\n   */\\n\\n\\n  ArrayNode.prototype._toString = function (options) {\\n    var items = this.items.map(function (node) {\\n      return node.toString(options);\\n    });\\n    return '[' + items.join(', ') + ']';\\n  };\\n  /**\\n   * Get a JSON representation of the node\\n   * @returns {Object}\\n   */\\n\\n\\n  ArrayNode.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'ArrayNode',\\n      items: this.items\\n    };\\n  };\\n  /**\\n   * Instantiate an ArrayNode from its JSON representation\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"ArrayNode\\\", items: [...]}`,\\n   *                       where mathjs is optional\\n   * @returns {ArrayNode}\\n   */\\n\\n\\n  ArrayNode.fromJSON = function (json) {\\n    return new ArrayNode(json.items);\\n  };\\n  /**\\n   * Get HTML representation\\n   * @param {Object} options\\n   * @return {string} str\\n   * @override\\n   */\\n\\n\\n  ArrayNode.prototype.toHTML = function (options) {\\n    var items = this.items.map(function (node) {\\n      return node.toHTML(options);\\n    });\\n    return '<span class=\\\"math-parenthesis math-square-parenthesis\\\">[</span>' + items.join('<span class=\\\"math-separator\\\">,</span>') + '<span class=\\\"math-parenthesis math-square-parenthesis\\\">]</span>';\\n  };\\n  /**\\n   * Get LaTeX representation\\n   * @param {Object} options\\n   * @return {string} str\\n   */\\n\\n\\n  ArrayNode.prototype._toTex = function (options) {\\n    var s = '\\\\\\\\begin{bmatrix}';\\n    this.items.forEach(function (node) {\\n      if (node.items) {\\n        s += node.items.map(function (childNode) {\\n          return childNode.toTex(options);\\n        }).join('&');\\n      } else {\\n        s += node.toTex(options);\\n      } // new line\\n\\n\\n      s += '\\\\\\\\\\\\\\\\';\\n    });\\n    s += '\\\\\\\\end{bmatrix}';\\n    return s;\\n  };\\n\\n  return ArrayNode;\\n}, {\\n  isClass: true,\\n  isNode: true\\n});\\nexports.createArrayNode = createArrayNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createArrayNode\",\"_is\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"ArrayNode\",\"items\",\"SyntaxError\",\"Array\",\"isArray\",\"every\",\"isNode\",\"TypeError\",\"prototype\",\"Node\",\"type\",\"isArrayNode\",\"_compile\",\"ArrayNode.prototype._compile\",\"math\",\"argNames\",\"evalItems\",\"map\",\"item\",\"config\",\"matrix\",\"evalArrayNode\",\"scope\",\"args\",\"context\",\"evalItem\",\"forEach\",\"ArrayNode.prototype.forEach\",\"callback\",\"i\",\"length\",\"node\",\"ArrayNode.prototype.map\",\"_ifNode\",\"clone\",\"ArrayNode.prototype.clone\",\"slice\",\"_toString\",\"ArrayNode.prototype._toString\",\"options\",\"toString\",\"join\",\"toJSON\",\"ArrayNode.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"ArrayNode.fromJSON\",\"json\",\"toHTML\",\"ArrayNode.prototype.toHTML\",\"_toTex\",\"ArrayNode.prototype._toTex\",\"s\",\"childNode\",\"toTex\",\"isClass\"]\n}\n"]