["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js"],"~:js","shadow$provide[237]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSetMultiplicity=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"setMultiplicity\",[\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\"],function(f){var u=f.typed,k=f.size,t=f.subset,p=f.compareNatural,g=f.Index;return u(\"setMultiplicity\",{\"number | BigNumber | Fraction | Complex, Array | Matrix\":function(d,l){if(0===t(k(l),new g(0)))return 0;l=(0,q.flatten)(Array.isArray(l)?l:l.toArray());for(var h=0,n=0;n<l.length;n++)0===\np(l[n],d)&&h++;return h}})});a.createSetMultiplicity=c}","~:source","shadow$provide[237] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetMultiplicity = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nvar createSetMultiplicity = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n\n      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  });\n});\nexports.createSetMultiplicity = createSetMultiplicity;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createSetMultiplicity"]],"~:compiled-at",1619135723950,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setMultiplicity.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAErC,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAuC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFhCC,iBAEgC,CADxBC,CAAC,OAADA,CAAU,MAAVA,CAAkB,QAAlBA,CAA4B,gBAA5BA,CAA8C,OAA9CA,CACwB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC/FC,EAAQD,CAAKC,CAAAA,KADkF,CAE/FC,EAAOF,CAAKE,CAAAA,IAFmF,CAG/FC,EAASH,CAAKG,CAAAA,MAHiF,CAI/FC,EAAiBJ,CAAKI,CAAAA,cAJyE,CAK/FC,EAAQL,CAAKK,CAAAA,KAuBjB,OAAOJ,EAAA,CA9BEH,iBA8BF,CAAY,CACjB,0DAA2DQ,QAAkD,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAClH,GAAsC,CAAtC,GAAIL,CAAA,CAAOD,CAAA,CAAKM,CAAL,CAAP,CAAgB,IAAIH,CAAJ,CAAU,CAAV,CAAhB,CAAJ,CAEE,MAAO,EAGLI,EAAAA,CAAI,CAAC,CAAA,CAAGd,CAAOe,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcJ,CAAd,CAAA,CAAmBA,CAAnB,CAAuBA,CAAEK,CAAAA,OAAF,EAA3C,CAGR,KAFA,IAAIC,EAAQ,CAAZ,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,CAAEO,CAAAA,MAAtB,CAA8BD,CAAA,EAA9B,CACkC,CAAhC;AAAIX,CAAA,CAAeK,CAAA,CAAEM,CAAF,CAAf,CAAqBR,CAArB,CAAJ,EACEO,CAAA,EAIJ,OAAOA,EAf2G,CADnG,CAAZ,CA5B4F,CAA1D,CAgD3CxB,EAAQI,CAAAA,qBAAR,CAAgCA,CA9D8B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js\"],\n\"sourcesContent\":[\"shadow$provide[237] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetMultiplicity = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setMultiplicity';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\\nvar createSetMultiplicity = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index;\\n\\n  /**\\n   * Count the multiplicity of an element in a multiset.\\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setMultiplicity(element, set)\\n   *\\n   * Examples:\\n   *\\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\\n   *\\n   * See also:\\n   *\\n   *    setDistinct, setSize\\n   *\\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\\n   * @param {Array | Matrix}     a  A multiset\\n   * @return {number}            The number of how many times the multiset contains the element\\n   */\\n  return typed(name, {\\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\\n      if (subset(size(a), new Index(0)) === 0) {\\n        // if empty, return 0\\n        return 0;\\n      }\\n\\n      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray());\\n      var count = 0;\\n\\n      for (var i = 0; i < b.length; i++) {\\n        if (compareNatural(b[i], e) === 0) {\\n          count++;\\n        }\\n      }\\n\\n      return count;\\n    }\\n  });\\n});\\nexports.createSetMultiplicity = createSetMultiplicity;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetMultiplicity\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"numberBigNumberFractionComplexArrayMatrix\",\"e\",\"a\",\"b\",\"flatten\",\"Array\",\"isArray\",\"toArray\",\"count\",\"i\",\"length\"]\n}\n"]