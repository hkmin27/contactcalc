["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js"],"~:js","shadow$provide[576]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.compileInlineExpression=function(f,u,k){var t=f.filter(function(l){return(0,q.isSymbolNode)(l)&&!(l.name in u)&&!(l.name in k)})[0];if(!t)throw Error('No undefined variable found in inline expression \"'+f+'\"');var p=t.name,g=Object.create(k),d=f.compile();return function(l){g[p]=l;return d.evaluate(g)}};var q=b(14)}","~:source","shadow$provide[576] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileInlineExpression = compileInlineExpression;\n\nvar _is = require(\"../../../utils/is.js\");\n\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\nfunction compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return (0, _is.isSymbolNode)(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is"]],"~:properties",["^5",["__esModule","value","compileInlineExpression"]],"~:compiled-at",1619135724041,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$utils$compileInlineExpression.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,uBAAR,CAYAA,QAAgC,CAACC,CAAD,CAAaC,CAAb,CAAmBC,CAAnB,CAA0B,CAExD,IAAIC,EAASH,CAAWI,CAAAA,MAAX,CAAkB,QAAS,CAACC,CAAD,CAAO,CAC7C,MAAO,CAAC,CAAA,CAAGC,CAAIC,CAAAA,YAAR,EAAsBF,CAAtB,CAAP,EAAsC,EAAEA,CAAKG,CAAAA,IAAP,GAAeP,EAAf,CAAtC,EAA8D,EAAEI,CAAKG,CAAAA,IAAP,GAAeN,EAAf,CADjB,CAAlC,CAAA,CAEV,CAFU,CAIb,IAAI,CAACC,CAAL,CACE,KAAUM,MAAJ,CAAU,oDAAV,CAAiET,CAAjE,CAA8E,GAA9E,CAAN,CAIF,IAAIQ,EAAOL,CAAOK,CAAAA,IAAlB,CAEIE,EAAWd,MAAOe,CAAAA,MAAP,CAAcT,CAAd,CAFf,CAGIU,EAAKZ,CAAWa,CAAAA,OAAX,EACT,OAAOC,SAAyB,CAACC,CAAD,CAAI,CAClCL,CAAA,CAASF,CAAT,CAAA,CAAiBO,CACjB,OAAOH,EAAGI,CAAAA,QAAH,CAAYN,CAAZ,CAF2B,CAfoB,CAV1D,KAAIJ,EAAMb,CAAA,CAAQ,EAAR,CARoD;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js\"],\n\"sourcesContent\":[\"shadow$provide[576] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.compileInlineExpression = compileInlineExpression;\\n\\nvar _is = require(\\\"../../../utils/is.js\\\");\\n\\n/**\\n * Compile an inline expression like \\\"x > 0\\\"\\n * @param {Node} expression\\n * @param {Object} math\\n * @param {Object} scope\\n * @return {function} Returns a function with one argument which fills in the\\n *                    undefined variable (like \\\"x\\\") and evaluates the expression\\n */\\nfunction compileInlineExpression(expression, math, scope) {\\n  // find an undefined symbol\\n  var symbol = expression.filter(function (node) {\\n    return (0, _is.isSymbolNode)(node) && !(node.name in math) && !(node.name in scope);\\n  })[0];\\n\\n  if (!symbol) {\\n    throw new Error('No undefined variable found in inline expression \\\"' + expression + '\\\"');\\n  } // create a test function for this equation\\n\\n\\n  var name = symbol.name; // variable name\\n\\n  var subScope = Object.create(scope);\\n  var eq = expression.compile();\\n  return function inlineExpression(x) {\\n    subScope[name] = x;\\n    return eq.evaluate(subScope);\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"compileInlineExpression\",\"expression\",\"math\",\"scope\",\"symbol\",\"filter\",\"node\",\"_is\",\"isSymbolNode\",\"name\",\"Error\",\"subScope\",\"create\",\"eq\",\"compile\",\"inlineExpression\",\"x\",\"evaluate\"]\n}\n"]