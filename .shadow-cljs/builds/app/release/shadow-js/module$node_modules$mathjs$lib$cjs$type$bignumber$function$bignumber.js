["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js"],"~:js","shadow$provide[65]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createBignumber=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"bignumber\",[\"typed\",\"BigNumber\"],function(f){var u=f.typed,k=f.BigNumber;return u(\"bignumber\",{\"\":function(){return new k(0)},number:function(t){return new k(t+\"\")},string:function(t){var p=t.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);if(p){var g=p[2];p=k(p[1]);var d=(new k(2)).pow(Number(g));if(p.gt(d.sub(1)))throw new SyntaxError('String \"'.concat(t,'\" is out of range'));\nt=(new k(2)).pow(Number(g)-1);return p.gte(t)?p.sub(d):p}return new k(t)},BigNumber:function(t){return t},Fraction:function(t){return(new k(t.n)).div(t.d).times(t.s)},\"null\":function(t){return new k(0)},\"Array | Matrix\":function(t){return(0,q.deepMap)(t,this)}})});a.createBignumber=b}","~:source","shadow$provide[65] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBignumber = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nvar createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBignumber = createBignumber;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","__esModule","value","number","BigNumber","Fraction","createBignumber"]],"~:compiled-at",1619135723763,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$bignumber$function$bignumber.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAAiC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,WAAVA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACzFC,EAAQD,CAAKC,CAAAA,KAD4E,CAEzFC,EAAYF,CAAKE,CAAAA,SA2BrB,OAAOD,EAAA,CAAM,WAAN,CAAmB,CACxB,GAAIE,QAAU,EAAG,CACf,MAAO,KAAID,CAAJ,CAAc,CAAd,CADQ,CADO,CAIxBE,OAAQA,QAAe,CAACC,CAAD,CAAI,CAEzB,MAAO,KAAIH,CAAJ,CAAcG,CAAd,CAAkB,EAAlB,CAFkB,CAJH,CAQxBC,OAAQA,QAAe,CAACD,CAAD,CAAI,CACzB,IAAIE,EAAsBF,CAAEG,CAAAA,KAAF,CAAQ,+BAAR,CAE1B,IAAID,CAAJ,CAAyB,CAEvB,IAAIE,EAAOF,CAAA,CAAoB,CAApB,CACPG,EAAAA,CAAIR,CAAA,CAAUK,CAAA,CAAoB,CAApB,CAAV,CACR,KAAII,EAA8BC,CAAjB,IAAIV,CAAJ,CAAc,CAAd,CAAiBU,EAAAA,GAAjB,CAAqBC,MAAA,CAAOJ,CAAP,CAArB,CAEjB,IAAIC,CAAEI,CAAAA,EAAF,CAAKH,CAAWI,CAAAA,GAAX,CAAe,CAAf,CAAL,CAAJ,CACE,KAAM,KAAIC,WAAJ,CAAgB,UAAYC,CAAAA,MAAZ,CAAmBZ,CAAnB,CAAsB,mBAAtB,CAAhB,CAAN;AAGEa,CAAAA,CAAoCN,CAAjB,IAAIV,CAAJ,CAAc,CAAd,CAAiBU,EAAAA,GAAjB,CAAqBC,MAAA,CAAOJ,CAAP,CAArB,CAAoC,CAApC,CAEvB,OAAIC,EAAES,CAAAA,GAAF,CAAMD,CAAN,CAAJ,CACSR,CAAEK,CAAAA,GAAF,CAAMJ,CAAN,CADT,CAGSD,CAfc,CAmBzB,MAAO,KAAIR,CAAJ,CAAcG,CAAd,CAtBkB,CARH,CAgCxBH,UAAWA,QAAkB,CAACG,CAAD,CAAI,CAE/B,MAAOA,EAFwB,CAhCT,CAoCxBe,SAAUA,QAAiB,CAACf,CAAD,CAAI,CAC7B,MAA0BgB,CAAnB,IAAInB,CAAJ,CAAcG,CAAEK,CAAAA,CAAhB,CAAmBW,EAAAA,GAAnB,CAAuBhB,CAAEiB,CAAAA,CAAzB,CAA4BC,CAAAA,KAA5B,CAAkClB,CAAEmB,CAAAA,CAApC,CADsB,CApCP,CAuCxB,OAAQC,QAAc,CAACpB,CAAD,CAAI,CACxB,MAAO,KAAIH,CAAJ,CAAc,CAAd,CADiB,CAvCF,CA0CxB,iBAAkBwB,QAAoB,CAACrB,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGT,CAAY+B,CAAAA,OAAhB,EAAyBtB,CAAzB,CAA4B,IAA5B,CADiC,CA1ClB,CAAnB,CA7BsF,CAA1D,CA4ErCf,EAAQI,CAAAA,eAAR,CAA0BA,CA1FmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js\"],\n\"sourcesContent\":[\"shadow$provide[65] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBignumber = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../../utils/collection.js\\\");\\n\\nvar name = 'bignumber';\\nvar dependencies = ['typed', 'BigNumber'];\\nvar createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Create a BigNumber, which can store numbers with arbitrary precision.\\n   * When a matrix is provided, all elements will be converted to BigNumber.\\n   *\\n   * Syntax:\\n   *\\n   *    math.bignumber(x)\\n   *\\n   * Examples:\\n   *\\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\\n   *\\n   *\\n   *    7.2e500                                    // returns number Infinity\\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\\n   *\\n   * See also:\\n   *\\n   *    boolean, complex, index, matrix, string, unit\\n   *\\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\\n   *                                                    0 by default.\\n   * @returns {BigNumber} The created bignumber\\n   */\\n  return typed('bignumber', {\\n    '': function _() {\\n      return new BigNumber(0);\\n    },\\n    number: function number(x) {\\n      // convert to string to prevent errors in case of >15 digits\\n      return new BigNumber(x + '');\\n    },\\n    string: function string(x) {\\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\\n\\n      if (wordSizeSuffixMatch) {\\n        // x has a word size suffix\\n        var size = wordSizeSuffixMatch[2];\\n        var n = BigNumber(wordSizeSuffixMatch[1]);\\n        var twoPowSize = new BigNumber(2).pow(Number(size));\\n\\n        if (n.gt(twoPowSize.sub(1))) {\\n          throw new SyntaxError(\\\"String \\\\\\\"\\\".concat(x, \\\"\\\\\\\" is out of range\\\"));\\n        }\\n\\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\\n\\n        if (n.gte(twoPowSizeSubOne)) {\\n          return n.sub(twoPowSize);\\n        } else {\\n          return n;\\n        }\\n      }\\n\\n      return new BigNumber(x);\\n    },\\n    BigNumber: function BigNumber(x) {\\n      // we assume a BigNumber is immutable\\n      return x;\\n    },\\n    Fraction: function Fraction(x) {\\n      return new BigNumber(x.n).div(x.d).times(x.s);\\n    },\\n    \\\"null\\\": function _null(x) {\\n      return new BigNumber(0);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createBignumber = createBignumber;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBignumber\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"BigNumber\",\"_\",\"number\",\"x\",\"string\",\"wordSizeSuffixMatch\",\"match\",\"size\",\"n\",\"twoPowSize\",\"pow\",\"Number\",\"gt\",\"sub\",\"SyntaxError\",\"concat\",\"twoPowSizeSubOne\",\"gte\",\"Fraction\",\"div\",\"d\",\"times\",\"s\",\"_null\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]