["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js"],"~:js","shadow$provide[67]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createFraction=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"fraction\",[\"typed\",\"Fraction\"],function(f){var u=f.typed,k=f.Fraction;return u(\"fraction\",{number:function(t){if(!isFinite(t)||isNaN(t))throw Error(t+\" cannot be represented as a fraction\");return new k(t)},string:function(t){return new k(t)},\"number, number\":function(t,p){return new k(t,p)},\"null\":function(t){return new k(0)},BigNumber:function(t){return new k(t.toString())},\nFraction:function(t){return t},Object:function(t){return new k(t)},\"Array | Matrix\":function(t){return(0,q.deepMap)(t,this)}})});a.createFraction=b}","~:source","shadow$provide[67] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFraction = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nvar createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Fraction = _ref.Fraction;\n\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    \"null\": function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createFraction = createFraction;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createFraction","string","Object","__esModule","value","number","BigNumber","Fraction"]],"~:compiled-at",1619135723766,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$fraction$function$fraction.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,cAAR,CAAyB,IAAK,EAE1BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAAgC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFzBC,UAEyB,CADjBC,CAAC,OAADA,CAAU,UAAVA,CACiB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACxFC,EAAQD,CAAKC,CAAAA,KAD2E,CAExFC,EAAWF,CAAKE,CAAAA,QA2BpB,OAAOD,EAAA,CAAM,UAAN,CAAkB,CACvBE,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,GAAI,CAACC,QAAA,CAASD,CAAT,CAAL,EAAoBE,KAAA,CAAMF,CAAN,CAApB,CACE,KAAUG,MAAJ,CAAUH,CAAV,CAAc,sCAAd,CAAN,CAGF,MAAO,KAAIF,CAAJ,CAAaE,CAAb,CALkB,CADJ,CAQvBI,OAAQA,QAAe,CAACJ,CAAD,CAAI,CACzB,MAAO,KAAIF,CAAJ,CAAaE,CAAb,CADkB,CARJ,CAWvB,iBAAkBK,QAAqB,CAACC,CAAD,CAAYC,CAAZ,CAAyB,CAC9D,MAAO,KAAIT,CAAJ,CAAaQ,CAAb,CAAwBC,CAAxB,CADuD,CAXzC,CAcvB,OAAQC,QAAc,CAACR,CAAD,CAAI,CACxB,MAAO,KAAIF,CAAJ,CAAa,CAAb,CADiB,CAdH,CAiBvBW,UAAWA,QAAkB,CAACT,CAAD,CAAI,CAC/B,MAAO,KAAIF,CAAJ,CAAaE,CAAEU,CAAAA,QAAF,EAAb,CADwB,CAjBV;AAoBvBZ,SAAUA,QAAiB,CAACE,CAAD,CAAI,CAC7B,MAAOA,EADsB,CApBR,CAuBvBb,OAAQA,QAAe,CAACa,CAAD,CAAI,CACzB,MAAO,KAAIF,CAAJ,CAAaE,CAAb,CADkB,CAvBJ,CA0BvB,iBAAkBW,QAAoB,CAACX,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGR,CAAYoB,CAAAA,OAAhB,EAAyBZ,CAAzB,CAA4B,IAA5B,CADiC,CA1BnB,CAAlB,CA7BqF,CAA1D,CA4DpCd,EAAQI,CAAAA,cAAR,CAAyBA,CA1EoC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js\"],\n\"sourcesContent\":[\"shadow$provide[67] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createFraction = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../../utils/collection.js\\\");\\n\\nvar name = 'fraction';\\nvar dependencies = ['typed', 'Fraction'];\\nvar createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Fraction = _ref.Fraction;\\n\\n  /**\\n   * Create a fraction convert a value to a fraction.\\n   *\\n   * Syntax:\\n   *     math.fraction(numerator, denominator)\\n   *     math.fraction({n: numerator, d: denominator})\\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\\n   *                                                   into fractions\\n   *\\n   * Examples:\\n   *\\n   *     math.fraction(1, 3)\\n   *     math.fraction('2/3')\\n   *     math.fraction({n: 2, d: 3})\\n   *     math.fraction([0.2, 0.25, 1.25])\\n   *\\n   * See also:\\n   *\\n   *    bignumber, number, string, unit\\n   *\\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\\n   *            Arguments specifying the numerator and denominator of\\n   *            the fraction\\n   * @return {Fraction | Array | Matrix} Returns a fraction\\n   */\\n  return typed('fraction', {\\n    number: function number(x) {\\n      if (!isFinite(x) || isNaN(x)) {\\n        throw new Error(x + ' cannot be represented as a fraction');\\n      }\\n\\n      return new Fraction(x);\\n    },\\n    string: function string(x) {\\n      return new Fraction(x);\\n    },\\n    'number, number': function numberNumber(numerator, denominator) {\\n      return new Fraction(numerator, denominator);\\n    },\\n    \\\"null\\\": function _null(x) {\\n      return new Fraction(0);\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return new Fraction(x.toString());\\n    },\\n    Fraction: function Fraction(x) {\\n      return x; // fractions are immutable\\n    },\\n    Object: function Object(x) {\\n      return new Fraction(x);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createFraction = createFraction;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createFraction\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"Fraction\",\"number\",\"x\",\"isFinite\",\"isNaN\",\"Error\",\"string\",\"numberNumber\",\"numerator\",\"denominator\",\"_null\",\"BigNumber\",\"toString\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]