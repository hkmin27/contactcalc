["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/relational/equalScalar.js"],"~:js","shadow$provide[60]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createEqualScalarNumber=a.createEqualScalar=void 0;var q=b(58),f=b(19);c=b(25);var u=b(59);b=(0,c.factory)(\"equalScalar\",[\"typed\",\"config\"],function(k){var t=k.typed,p=k.config;return t(\"equalScalar\",{\"boolean, boolean\":function(g,d){return g===d},\"number, number\":function(g,d){return(0,f.nearlyEqual)(g,d,p.epsilon)},\"BigNumber, BigNumber\":function(g,d){return g.eq(d)||(0,q.nearlyEqual)(g,d,p.epsilon)},\"Fraction, Fraction\":function(g,\nd){return g.equals(d)},\"Complex, Complex\":function(g,d){return(0,u.complexEquals)(g,d,p.epsilon)},\"Unit, Unit\":function(g,d){if(!g.equalBase(d))throw Error(\"Cannot compare units with different base\");return this(g.value,d.value)}})});a.createEqualScalar=b;b=(0,c.factory)(\"equalScalar\",[\"typed\",\"config\"],function(k){var t=k.typed,p=k.config;return t(\"equalScalar\",{\"number, number\":function(g,d){return(0,f.nearlyEqual)(g,d,p.epsilon)}})});a.createEqualScalarNumber=b}","~:source","shadow$provide[60] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEqualScalarNumber = exports.createEqualScalar = void 0;\n\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _complex = require(\"../../utils/complex.js\");\n\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nvar createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (0, _complex.complexEquals)(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    }\n  });\n});\nexports.createEqualScalar = createEqualScalar;\nvar createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\n    }\n  });\n});\nexports.createEqualScalarNumber = createEqualScalarNumber;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$bignumber$nearlyEqual","~$module$node_modules$mathjs$lib$cjs$utils$complex","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createEqualScalar","__esModule","value","createEqualScalarNumber"]],"~:compiled-at",1619135723757,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$relational$equalScalar.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,uBAAR,CAAkCJ,CAAQK,CAAAA,iBAA1C,CAA8D,IAAK,EAEnE,KAAIC,EAAeR,CAAA,CAAQ,EAAR,CAAnB,CAEIS,EAAUT,CAAA,CAAQ,EAAR,CAEVU,EAAAA,CAAWV,CAAA,CAAQ,EAAR,CAEf,KAAIW,EAAWX,CAAA,CAAQ,EAAR,CAIXO,EAAAA,CAAmC,CAAC,CAAA,CAAGG,CAASE,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CAAU,QAAVA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC3FC,EAAQD,CAAKC,CAAAA,KAD8E,CAE3FC,EAASF,CAAKE,CAAAA,MAUlB,OAAOD,EAAA,CAdEH,aAcF,CAAY,CACjB,mBAAoBK,QAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAP,GAAaC,CADmC,CADjC,CAIjB,iBAAkBC,QAAqB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAO,CAAC,CAAA,CAAGX,CAAQa,CAAAA,WAAZ,EAAyBH,CAAzB,CAA4BC,CAA5B,CAA+BH,CAAOM,CAAAA,OAAtC,CADqC,CAJ7B,CAOjB,uBAAwBC,QAA2B,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEM,CAAAA,EAAF,CAAKL,CAAL,CAAP,EAAkB,CAAC,CAAA,CAAGZ,CAAac,CAAAA,WAAjB,EAA8BH,CAA9B,CAAiCC,CAAjC,CAAoCH,CAAOM,CAAAA,OAA3C,CADsC,CAPzC,CAUjB,qBAAsBG,QAAyB,CAACP,CAAD;AAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEQ,CAAAA,MAAF,CAASP,CAAT,CAD6C,CAVrC,CAajB,mBAAoBQ,QAAuB,CAACT,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAO,CAAC,CAAA,CAAGT,CAASkB,CAAAA,aAAb,EAA4BV,CAA5B,CAA+BC,CAA/B,CAAkCH,CAAOM,CAAAA,OAAzC,CADyC,CAbjC,CAgBjB,aAAcO,QAAiB,CAACX,CAAD,CAAIC,CAAJ,CAAO,CACpC,GAAI,CAACD,CAAEY,CAAAA,SAAF,CAAYX,CAAZ,CAAL,CACE,KAAUY,MAAJ,CAAU,0CAAV,CAAN,CAGF,MAAO,KAAA,CAAKb,CAAEd,CAAAA,KAAP,CAAce,CAAEf,CAAAA,KAAhB,CAL6B,CAhBrB,CAAZ,CAZwF,CAA1D,CAqCvCH,EAAQK,CAAAA,iBAAR,CAA4BA,CACxBD,EAAAA,CAA0B,CAAC,CAAA,CAAGI,CAASE,CAAAA,OAAb,EAxCnBC,aAwCmB,CAA4B,CAAC,OAAD,CAAU,QAAV,CAA5B,CAAiD,QAAS,CAACoB,CAAD,CAAQ,CAAA,IAC1FjB,EAAQiB,CAAMjB,CAAAA,KAD4E,CAE1FC,EAASgB,CAAMhB,CAAAA,MACnB,OAAOD,EAAA,CA3CEH,aA2CF,CAAY,CACjB,iBAAkBQ,QAAqB,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC5C,MAAO,CAAC,CAAA,CAAGX,CAAQa,CAAAA,WAAZ,EAAyBH,CAAzB,CAA4BC,CAA5B,CAA+BH,CAAOM,CAAAA,OAAtC,CADqC,CAD7B,CAAZ,CAHuF,CAAlE,CAS9BrB,EAAQI,CAAAA,uBAAR,CAAkCA,CAjE2B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/relational/equalScalar.js\"],\n\"sourcesContent\":[\"shadow$provide[60] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createEqualScalarNumber = exports.createEqualScalar = void 0;\\n\\nvar _nearlyEqual = require(\\\"../../utils/bignumber/nearlyEqual.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _complex = require(\\\"../../utils/complex.js\\\");\\n\\nvar name = 'equalScalar';\\nvar dependencies = ['typed', 'config'];\\nvar createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config;\\n\\n  /**\\n   * Test whether two scalar values are nearly equal.\\n   *\\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\\n   * @private\\n   */\\n  return typed(name, {\\n    'boolean, boolean': function booleanBoolean(x, y) {\\n      return x === y;\\n    },\\n    'number, number': function numberNumber(x, y) {\\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\\n      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);\\n    },\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return x.equals(y);\\n    },\\n    'Complex, Complex': function ComplexComplex(x, y) {\\n      return (0, _complex.complexEquals)(x, y, config.epsilon);\\n    },\\n    'Unit, Unit': function UnitUnit(x, y) {\\n      if (!x.equalBase(y)) {\\n        throw new Error('Cannot compare units with different base');\\n      }\\n\\n      return this(x.value, y.value);\\n    }\\n  });\\n});\\nexports.createEqualScalar = createEqualScalar;\\nvar createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\\n  var typed = _ref2.typed,\\n      config = _ref2.config;\\n  return typed(name, {\\n    'number, number': function numberNumber(x, y) {\\n      return (0, _number.nearlyEqual)(x, y, config.epsilon);\\n    }\\n  });\\n});\\nexports.createEqualScalarNumber = createEqualScalarNumber;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createEqualScalarNumber\",\"createEqualScalar\",\"_nearlyEqual\",\"_number\",\"_factory\",\"_complex\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"booleanBoolean\",\"x\",\"y\",\"numberNumber\",\"nearlyEqual\",\"epsilon\",\"BigNumberBigNumber\",\"eq\",\"FractionFraction\",\"equals\",\"ComplexComplex\",\"complexEquals\",\"UnitUnit\",\"equalBase\",\"Error\",\"_ref2\"]\n}\n"]