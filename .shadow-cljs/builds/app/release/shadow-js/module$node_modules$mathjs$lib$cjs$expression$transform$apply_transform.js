["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js"],"~:js","shadow$provide[574]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createApplyTransform=void 0;var q=b(250);c=b(25);var f=b(73),u=b(14);b=(0,c.factory)(\"apply\",[\"typed\",\"isInteger\"],function(k){var t=k.typed;k=k.isInteger;var p=(0,f.createApply)({typed:t,isInteger:k});return t(\"apply\",{\"...any\":function(g){var d=g[1];(0,u.isNumber)(d)?g[1]=d-1:(0,u.isBigNumber)(d)&&(g[1]=d.minus(1));try{return p.apply(null,g)}catch(l){throw(0,q.errorTransform)(l);}}})},{isTransformFunction:!0});\na.createApplyTransform=b}","~:source","shadow$provide[574] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApplyTransform = void 0;\n\nvar _errorTransform = require(\"./utils/errorTransform.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _apply = require(\"../../function/matrix/apply.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nvar createApplyTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n  var apply = (0, _apply.createApply)({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n\n      if ((0, _is.isNumber)(dim)) {\n        args[1] = dim - 1;\n      } else if ((0, _is.isBigNumber)(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw (0, _errorTransform.errorTransform)(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});\nexports.createApplyTransform = createApplyTransform;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$function$matrix$apply","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$expression$transform$utils$errorTransform","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["typed","createApplyTransform","__esModule","isTransformFunction","value","isInteger"]],"~:compiled-at",1619135724041,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$apply_transform.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,EAAkBP,CAAA,CAAQ,GAAR,CAElBQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAST,CAAA,CAAQ,EAAR,CAAb,CAEIU,EAAMV,CAAA,CAAQ,EAAR,CAYNM,EAAAA,CAAsC,CAAC,CAAA,CAAGE,CAASG,CAAAA,OAAb,EAV/BC,OAU+B,CATvBC,CAAC,OAADA,CAAU,WAAVA,CASuB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC9FC,EAAQD,CAAKC,CAAAA,KACbC,EAAAA,CAAYF,CAAKE,CAAAA,SACrB,KAAIC,EAAQ,CAAC,CAAA,CAAGR,CAAOS,CAAAA,WAAX,EAAwB,CAClCH,MAAOA,CAD2B,CAElCC,UAAWA,CAFuB,CAAxB,CAKZ,OAAOD,EAAA,CAAM,OAAN,CAAe,CACpB,SAAUI,QAAY,CAACC,CAAD,CAAO,CAE3B,IAAIC,EAAMD,CAAA,CAAK,CAAL,CAEN,EAAC,CAAA,CAAGV,CAAIY,CAAAA,QAAR,EAAkBD,CAAlB,CAAJ,CACED,CAAA,CAAK,CAAL,CADF,CACYC,CADZ,CACkB,CADlB,CAEW,CAAC,CAAA,CAAGX,CAAIa,CAAAA,WAAR,EAAqBF,CAArB,CAFX,GAGED,CAAA,CAAK,CAAL,CAHF,CAGYC,CAAIG,CAAAA,KAAJ,CAAU,CAAV,CAHZ,CAMA,IAAI,CACF,MAAOP,EAAMA,CAAAA,KAAN,CAAY,IAAZ,CAAkBG,CAAlB,CADL,CAEF,MAAOK,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGlB,CAAgBmB,CAAAA,cAApB,EAAoCD,CAApC,CAAN,CADY,CAZa,CADT,CAAf,CAR2F,CAA1D,CA0BvC,CACDE,oBAAqB,CAAA,CADpB,CA1BuC,CA6B1CzB;CAAQI,CAAAA,oBAAR,CAA+BA,CAvD+B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js\"],\n\"sourcesContent\":[\"shadow$provide[574] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createApplyTransform = void 0;\\n\\nvar _errorTransform = require(\\\"./utils/errorTransform.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _apply = require(\\\"../../function/matrix/apply.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar name = 'apply';\\nvar dependencies = ['typed', 'isInteger'];\\n/**\\n * Attach a transform function to math.apply\\n * Adds a property transform containing the transform function.\\n *\\n * This transform changed the last `dim` parameter of function apply\\n * from one-based to zero based\\n */\\n\\nvar createApplyTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      isInteger = _ref.isInteger;\\n  var apply = (0, _apply.createApply)({\\n    typed: typed,\\n    isInteger: isInteger\\n  }); // @see: comment of concat itself\\n\\n  return typed('apply', {\\n    '...any': function any(args) {\\n      // change dim from one-based to zero-based\\n      var dim = args[1];\\n\\n      if ((0, _is.isNumber)(dim)) {\\n        args[1] = dim - 1;\\n      } else if ((0, _is.isBigNumber)(dim)) {\\n        args[1] = dim.minus(1);\\n      }\\n\\n      try {\\n        return apply.apply(null, args);\\n      } catch (err) {\\n        throw (0, _errorTransform.errorTransform)(err);\\n      }\\n    }\\n  });\\n}, {\\n  isTransformFunction: true\\n});\\nexports.createApplyTransform = createApplyTransform;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createApplyTransform\",\"_errorTransform\",\"_factory\",\"_apply\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"isInteger\",\"apply\",\"createApply\",\"any\",\"args\",\"dim\",\"isNumber\",\"isBigNumber\",\"minus\",\"err\",\"errorTransform\",\"isTransformFunction\"]\n}\n"]