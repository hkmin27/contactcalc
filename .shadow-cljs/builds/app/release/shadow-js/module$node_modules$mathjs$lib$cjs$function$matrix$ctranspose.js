["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/ctranspose.js"],"~:js","shadow$provide[150]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCtranspose=void 0;c=b(25);c=(0,c.factory)(\"ctranspose\",[\"typed\",\"transpose\",\"conj\"],function(q){var f=q.typed,u=q.transpose,k=q.conj;return f(\"ctranspose\",{any:function(t){return k(u(t))}})});a.createCtranspose=c}","~:source","shadow$provide[150] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCtranspose = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ctranspose';\nvar dependencies = ['typed', 'transpose', 'conj'];\nvar createCtranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      transpose = _ref.transpose,\n      conj = _ref.conj;\n\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n  return typed(name, {\n    any: function any(x) {\n      return conj(transpose(x));\n    }\n  });\n});\nexports.createCtranspose = createCtranspose;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createCtranspose","__esModule","any","value"]],"~:compiled-at",1619135723889,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$ctranspose.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAkC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CAAU,WAAVA,CAAuB,MAAvBA,CACmB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC1FC,EAAQD,CAAKC,CAAAA,KAD6E,CAE1FC,EAAYF,CAAKE,CAAAA,SAFyE,CAG1FC,EAAOH,CAAKG,CAAAA,IAwBhB,OAAOF,EAAA,CA7BEH,YA6BF,CAAY,CACjBM,IAAKA,QAAY,CAACC,CAAD,CAAI,CACnB,MAAOF,EAAA,CAAKD,CAAA,CAAUG,CAAV,CAAL,CADY,CADJ,CAAZ,CA3BuF,CAA1D,CAiCtCd,EAAQI,CAAAA,gBAAR,CAA2BA,CA7CmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/ctranspose.js\"],\n\"sourcesContent\":[\"shadow$provide[150] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCtranspose = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'ctranspose';\\nvar dependencies = ['typed', 'transpose', 'conj'];\\nvar createCtranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      transpose = _ref.transpose,\\n      conj = _ref.conj;\\n\\n  /**\\n   * Transpose and complex conjugate a matrix. All values of the matrix are\\n   * reflected over its main diagonal and then the complex conjugate is\\n   * taken. This is equivalent to complex conjugation for scalars and\\n   * vectors.\\n   *\\n   * Syntax:\\n   *\\n   *     math.ctranspose(x)\\n   *\\n   * Examples:\\n   *\\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\\n   *\\n   * See also:\\n   *\\n   *     transpose, diag, inv, subset, squeeze\\n   *\\n   * @param {Array | Matrix} x  Matrix to be ctransposed\\n   * @return {Array | Matrix}   The ctransposed matrix\\n   */\\n  return typed(name, {\\n    any: function any(x) {\\n      return conj(transpose(x));\\n    }\\n  });\\n});\\nexports.createCtranspose = createCtranspose;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCtranspose\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"transpose\",\"conj\",\"any\",\"x\"]\n}\n"]