["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js"],"~:js","shadow$provide[68]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMatrix=void 0;c=b(25);c=(0,c.factory)(\"matrix\",[\"typed\",\"Matrix\",\"DenseMatrix\",\"SparseMatrix\"],function(q){function f(p,g,d){if(\"dense\"===g||\"default\"===g||void 0===g)return new k(p,d);if(\"sparse\"===g)return new t(p,d);throw new TypeError(\"Unknown matrix type \"+JSON.stringify(g)+\".\");}var u=q.typed,k=q.DenseMatrix,t=q.SparseMatrix;return u(\"matrix\",{\"\":function(){return f([])},string:function(p){return f([],\np)},\"string, string\":function(p,g){return f([],p,g)},Array:function(p){return f(p)},Matrix:function(p){return f(p,p.storage())},\"Array | Matrix, string\":f,\"Array | Matrix, string, string\":f})});a.createMatrix=c}","~:source","shadow$provide[68] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMatrix = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nvar createMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Matrix = _ref.Matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});\nexports.createMatrix = createMatrix;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createMatrix","string","__esModule","value","Matrix","Array"]],"~:compiled-at",1619135723766,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$function$matrix.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA8B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,QAAVA,CAAoB,aAApBA,CAAmC,cAAnCA,CACe,CAA0C,QAAS,CAACC,CAAD,CAAO,CAkE1FC,QAASA,EAAO,CAACC,CAAD,CAAOC,CAAP,CAAeC,CAAf,CAAyB,CAEvC,GAAe,OAAf,GAAID,CAAJ,EAAqC,SAArC,GAA0BA,CAA1B,EAA6DE,IAAAA,EAA7D,GAAkDF,CAAlD,CACE,MAAO,KAAIG,CAAJ,CAAgBJ,CAAhB,CAAsBE,CAAtB,CAGT,IAAe,QAAf,GAAID,CAAJ,CACE,MAAO,KAAII,CAAJ,CAAiBL,CAAjB,CAAuBE,CAAvB,CAGT,MAAM,KAAII,SAAJ,CAAc,sBAAd,CAAuCC,IAAKC,CAAAA,SAAL,CAAeP,CAAf,CAAvC,CAAgE,GAAhE,CAAN,CAVuC,CAlEiD,IACtFQ,EAAQX,CAAKW,CAAAA,KADyE,CAGtFL,EAAcN,CAAKM,CAAAA,WAHmE,CAItFC,EAAeP,CAAKO,CAAAA,YAkCxB,OAAOI,EAAA,CAxCEb,QAwCF,CAAY,CACjB,GAAIc,QAAU,EAAG,CACf,MAAOX,EAAA,CAAQ,EAAR,CADQ,CADA,CAIjBY,OAAQA,QAAe,CAACV,CAAD,CAAS,CAC9B,MAAOF,EAAA,CAAQ,EAAR;AAAYE,CAAZ,CADuB,CAJf,CAOjB,iBAAkBW,QAAqB,CAACX,CAAD,CAASC,CAAT,CAAmB,CACxD,MAAOH,EAAA,CAAQ,EAAR,CAAYE,CAAZ,CAAoBC,CAApB,CADiD,CAPzC,CAUjBW,MAAOA,QAAc,CAACb,CAAD,CAAO,CAC1B,MAAOD,EAAA,CAAQC,CAAR,CADmB,CAVX,CAajBc,OAAQA,QAAe,CAACd,CAAD,CAAO,CAC5B,MAAOD,EAAA,CAAQC,CAAR,CAAcA,CAAKe,CAAAA,OAAL,EAAd,CADqB,CAbb,CAgBjB,yBAA0BhB,CAhBT,CAiBjB,iCAAkCA,CAjBjB,CAAZ,CAtCmF,CAA1D,CA+ElCV,EAAQI,CAAAA,YAAR,CAAuBA,CA3FsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js\"],\n\"sourcesContent\":[\"shadow$provide[68] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMatrix = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar name = 'matrix';\\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\\nvar createMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Matrix = _ref.Matrix,\\n      DenseMatrix = _ref.DenseMatrix,\\n      SparseMatrix = _ref.SparseMatrix;\\n\\n  /**\\n   * Create a Matrix. The function creates a new `math.Matrix` object from\\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\\n   * matrix, like getting the size and getting or setting values in the matrix.\\n   * Supported storage formats are 'dense' and 'sparse'.\\n   *\\n   * Syntax:\\n   *\\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\\n   *\\n   * Examples:\\n   *\\n   *    let m = math.matrix([[1, 2], [3, 4]])\\n   *    m.size()                        // Array [2, 2]\\n   *    m.resize([3, 2], 5)\\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\\n   *    m.get([1, 0])                    // number 3\\n   *\\n   * See also:\\n   *\\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\\n   *\\n   * @param {Array | Matrix} [data]    A multi dimensional array\\n   * @param {string} [format]          The Matrix storage format\\n   *\\n   * @return {Matrix} The created matrix\\n   */\\n  return typed(name, {\\n    '': function _() {\\n      return _create([]);\\n    },\\n    string: function string(format) {\\n      return _create([], format);\\n    },\\n    'string, string': function stringString(format, datatype) {\\n      return _create([], format, datatype);\\n    },\\n    Array: function Array(data) {\\n      return _create(data);\\n    },\\n    Matrix: function Matrix(data) {\\n      return _create(data, data.storage());\\n    },\\n    'Array | Matrix, string': _create,\\n    'Array | Matrix, string, string': _create\\n  });\\n  /**\\n   * Create a new Matrix with given storage format\\n   * @param {Array} data\\n   * @param {string} [format]\\n   * @param {string} [datatype]\\n   * @returns {Matrix} Returns a new Matrix\\n   * @private\\n   */\\n\\n  function _create(data, format, datatype) {\\n    // get storage format constructor\\n    if (format === 'dense' || format === 'default' || format === undefined) {\\n      return new DenseMatrix(data, datatype);\\n    }\\n\\n    if (format === 'sparse') {\\n      return new SparseMatrix(data, datatype);\\n    }\\n\\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\\n  }\\n});\\nexports.createMatrix = createMatrix;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMatrix\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_create\",\"data\",\"format\",\"datatype\",\"undefined\",\"DenseMatrix\",\"SparseMatrix\",\"TypeError\",\"JSON\",\"stringify\",\"typed\",\"_\",\"string\",\"stringString\",\"Array\",\"Matrix\",\"storage\"]\n}\n"]