["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/multinomial.js"],"~:js","shadow$provide[542]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMultinomial=void 0;var q=b(38);c=b(25);c=(0,c.factory)(\"multinomial\",\"typed add divide multiply factorial isInteger isPositive\".split(\" \"),function(f){var u=f.typed,k=f.add,t=f.divide,p=f.multiply,g=f.factorial,d=f.isInteger,l=f.isPositive;return u(\"multinomial\",{\"Array | Matrix\":function(h){var n=0,r=1;(0,q.deepForEach)(h,function(v){if(!d(v)||!l(v))throw new TypeError(\"Positive integer value expected in function multinomial\");\nn=k(n,v);r=p(r,g(v))});return t(g(n),r)}})});a.createMultinomial=c}","~:source","shadow$provide[542] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultinomial = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nvar createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      (0, _collection.deepForEach)(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});\nexports.createMultinomial = createMultinomial;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createMultinomial","value"]],"~:compiled-at",1619135724026,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$multinomial.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAEjC,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAmC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,0DAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IAC3FC,EAAQD,CAAKC,CAAAA,KAD8E,CAE3FC,EAAMF,CAAKE,CAAAA,GAFgF,CAG3FC,EAASH,CAAKG,CAAAA,MAH6E,CAI3FC,EAAWJ,CAAKI,CAAAA,QAJ2E,CAK3FC,EAAYL,CAAKK,CAAAA,SAL0E,CAM3FC,EAAYN,CAAKM,CAAAA,SAN0E,CAO3FC,EAAaP,CAAKO,CAAAA,UAuBtB,OAAON,EAAA,CAhCEH,aAgCF,CAAY,CACjB,iBAAkBU,QAAoB,CAACC,CAAD,CAAI,CACxC,IAAIC,EAAM,CAAV,CACIC,EAAQ,CACZ,EAAC,CAAA,CAAGhB,CAAYiB,CAAAA,WAAhB,EAA6BH,CAA7B,CAAgC,QAAS,CAACI,CAAD,CAAK,CAC5C,GAAI,CAACP,CAAA,CAAUO,CAAV,CAAL,EAAsB,CAACN,CAAA,CAAWM,CAAX,CAAvB,CACE,KAAM,KAAIC,SAAJ,CAAc,yDAAd,CAAN;AAGFJ,CAAA,CAAMR,CAAA,CAAIQ,CAAJ,CAASG,CAAT,CACNF,EAAA,CAAQP,CAAA,CAASO,CAAT,CAAgBN,CAAA,CAAUQ,CAAV,CAAhB,CANoC,CAA9C,CAQA,OAAOV,EAAA,CAAOE,CAAA,CAAUK,CAAV,CAAP,CAAuBC,CAAvB,CAXiC,CADzB,CAAZ,CA9BwF,CAA1D,CA8CvCrB,EAAQI,CAAAA,iBAAR,CAA4BA,CA5DkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/multinomial.js\"],\n\"sourcesContent\":[\"shadow$provide[542] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMultinomial = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'multinomial';\\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\\nvar createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      add = _ref.add,\\n      divide = _ref.divide,\\n      multiply = _ref.multiply,\\n      factorial = _ref.factorial,\\n      isInteger = _ref.isInteger,\\n      isPositive = _ref.isPositive;\\n\\n  /**\\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\\n   *\\n   * multinomial takes one array of integers as an argument.\\n   * The following condition must be enforced: every ai <= 0\\n   *\\n   * Syntax:\\n   *\\n   *     math.multinomial(a) // a is an array type\\n   *\\n   * Examples:\\n   *\\n   *    math.multinomial([1,2,1]) // returns 12\\n   *\\n   * See also:\\n   *\\n   *    combinations, factorial\\n   *\\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\\n   * @return {Number | BigNumber}         Multinomial coefficient.\\n   */\\n  return typed(name, {\\n    'Array | Matrix': function ArrayMatrix(a) {\\n      var sum = 0;\\n      var denom = 1;\\n      (0, _collection.deepForEach)(a, function (ai) {\\n        if (!isInteger(ai) || !isPositive(ai)) {\\n          throw new TypeError('Positive integer value expected in function multinomial');\\n        }\\n\\n        sum = add(sum, ai);\\n        denom = multiply(denom, factorial(ai));\\n      });\\n      return divide(factorial(sum), denom);\\n    }\\n  });\\n});\\nexports.createMultinomial = createMultinomial;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMultinomial\",\"_collection\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"add\",\"divide\",\"multiply\",\"factorial\",\"isInteger\",\"isPositive\",\"ArrayMatrix\",\"a\",\"sum\",\"denom\",\"deepForEach\",\"ai\",\"TypeError\"]\n}\n"]