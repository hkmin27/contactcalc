["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/random.js"],"~:js","shadow$provide[556]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createRandomNumber=a.createRandom=void 0;c=b(25);var q=b(14),f=b(553),u=b(555);b=(0,c.factory)(\"random\",[\"typed\",\"config\",\"?on\"],function(k){function t(h,n,r){var v=(0,u.randomMatrix)(h.valueOf(),function(){return p(n,r)});return(0,q.isMatrix)(h)?h.create(v):v}function p(h,n){return h+l()*(n-h)}var g=k.typed,d=k.config;k=k.on;var l=(0,f.createRng)(d.randomSeed);k&&k(\"config\",function(h,n){h.randomSeed!==n.randomSeed&&\n(l=(0,f.createRng)(h.randomSeed))});return g(\"random\",{\"\":function(){return p(0,1)},number:function(h){return p(0,h)},\"number, number\":function(h,n){return p(h,n)},\"Array | Matrix\":function(h){return t(h,0,1)},\"Array | Matrix, number\":function(h,n){return t(h,0,n)},\"Array | Matrix, number, number\":function(h,n,r){return t(h,n,r)}})});a.createRandom=b;b=(0,c.factory)(\"random\",[\"typed\",\"config\",\"?on\"],function(k){function t(l,h){return l+d()*(h-l)}var p=k.typed,g=k.config;k=k.on;var d=(0,f.createRng)(g.randomSeed);\nk&&k(\"config\",function(l,h){l.randomSeed!==h.randomSeed&&(d=(0,f.createRng)(l.randomSeed))});return p(\"random\",{\"\":function(){return t(0,1)},number:function(l){return t(0,l)},\"number, number\":function(l,h){return t(l,h)}})});a.createRandomNumber=b}","~:source","shadow$provide[556] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRandomNumber = exports.createRandom = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _seededRNG = require(\"./util/seededRNG.js\");\n\nvar _randomMatrix2 = require(\"./util/randomMatrix.js\");\n\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nvar createRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomMatrix(size, min, max);\n    }\n  });\n\n  function _randomMatrix(size, min, max) {\n    var res = (0, _randomMatrix2.randomMatrix)(size.valueOf(), function () {\n      return _random(min, max);\n    });\n    return (0, _is.isMatrix)(size) ? size.create(res) : res;\n  }\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n}); // number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\n\nexports.createRandom = createRandom;\nvar createRandomNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config', '?on'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config,\n      on = _ref2.on,\n      matrix = _ref2.matrix;\n  // seeded pseudo random number generator1\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\n      }\n    });\n  }\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    }\n  });\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});\nexports.createRandomNumber = createRandomNumber;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$function$probability$util$randomMatrix","~$module$node_modules$mathjs$lib$cjs$function$probability$util$seededRNG"]],"~:properties",["^5",["__esModule","value","number","createRandom","createRandomNumber"]],"~:compiled-at",1619135724031,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$random.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/random.js\"],\n\"sourcesContent\":[\"shadow$provide[556] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRandomNumber = exports.createRandom = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _seededRNG = require(\\\"./util/seededRNG.js\\\");\\n\\nvar _randomMatrix2 = require(\\\"./util/randomMatrix.js\\\");\\n\\nvar name = 'random';\\nvar dependencies = ['typed', 'config', '?on'];\\nvar createRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      on = _ref.on;\\n  // seeded pseudo random number generator\\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\\n\\n  if (on) {\\n    on('config', function (curr, prev) {\\n      if (curr.randomSeed !== prev.randomSeed) {\\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\\n      }\\n    });\\n  }\\n  /**\\n   * Return a random number larger or equal to `min` and smaller than `max`\\n   * using a uniform distribution.\\n   *\\n   * Syntax:\\n   *\\n   *     math.random()                // generate a random number between 0 and 1\\n   *     math.random(max)             // generate a random number between 0 and max\\n   *     math.random(min, max)        // generate a random number between min and max\\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\\n   *\\n   * Examples:\\n   *\\n   *     math.random()       // returns a random number between 0 and 1\\n   *     math.random(100)    // returns a random number between 0 and 100\\n   *     math.random(30, 40) // returns a random number between 30 and 40\\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\\n   *\\n   * See also:\\n   *\\n   *     randomInt, pickRandom\\n   *\\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\\n   *                                size and filled with random values is returned\\n   * @param {number} [min]  Minimum boundary for the random value, included\\n   * @param {number} [max]  Maximum boundary for the random value, excluded\\n   * @return {number | Array | Matrix} A random number\\n   */\\n\\n\\n  return typed(name, {\\n    '': function _() {\\n      return _random(0, 1);\\n    },\\n    number: function number(max) {\\n      return _random(0, max);\\n    },\\n    'number, number': function numberNumber(min, max) {\\n      return _random(min, max);\\n    },\\n    'Array | Matrix': function ArrayMatrix(size) {\\n      return _randomMatrix(size, 0, 1);\\n    },\\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\\n      return _randomMatrix(size, 0, max);\\n    },\\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\\n      return _randomMatrix(size, min, max);\\n    }\\n  });\\n\\n  function _randomMatrix(size, min, max) {\\n    var res = (0, _randomMatrix2.randomMatrix)(size.valueOf(), function () {\\n      return _random(min, max);\\n    });\\n    return (0, _is.isMatrix)(size) ? size.create(res) : res;\\n  }\\n\\n  function _random(min, max) {\\n    return min + rng() * (max - min);\\n  }\\n}); // number only implementation of random, no matrix support\\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\\n\\nexports.createRandom = createRandom;\\nvar createRandomNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config', '?on'], function (_ref2) {\\n  var typed = _ref2.typed,\\n      config = _ref2.config,\\n      on = _ref2.on,\\n      matrix = _ref2.matrix;\\n  // seeded pseudo random number generator1\\n  var rng = (0, _seededRNG.createRng)(config.randomSeed);\\n\\n  if (on) {\\n    on('config', function (curr, prev) {\\n      if (curr.randomSeed !== prev.randomSeed) {\\n        rng = (0, _seededRNG.createRng)(curr.randomSeed);\\n      }\\n    });\\n  }\\n\\n  return typed(name, {\\n    '': function _() {\\n      return _random(0, 1);\\n    },\\n    number: function number(max) {\\n      return _random(0, max);\\n    },\\n    'number, number': function numberNumber(min, max) {\\n      return _random(min, max);\\n    }\\n  });\\n\\n  function _random(min, max) {\\n    return min + rng() * (max - min);\\n  }\\n});\\nexports.createRandomNumber = createRandomNumber;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRandomNumber\",\"createRandom\",\"_factory\",\"_is\",\"_seededRNG\",\"_randomMatrix2\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_randomMatrix\",\"size\",\"min\",\"max\",\"res\",\"randomMatrix\",\"valueOf\",\"_random\",\"isMatrix\",\"create\",\"rng\",\"typed\",\"config\",\"on\",\"createRng\",\"randomSeed\",\"curr\",\"prev\",\"_\",\"number\",\"numberNumber\",\"ArrayMatrix\",\"ArrayMatrixNumber\",\"ArrayMatrixNumberNumber\",\"_ref2\"]\n}\n"]