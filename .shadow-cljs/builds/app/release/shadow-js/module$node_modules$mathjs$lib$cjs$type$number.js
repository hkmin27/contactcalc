["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/number.js"],"~:js","shadow$provide[62]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createNumber=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"number\",[\"typed\"],function(f){f=f.typed;f=f(\"number\",{\"\":function(){return 0},number:function(u){return u},string:function(u){if(\"NaN\"===u)return NaN;var k=u;var t=k.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);k=t?{input:k,radix:{\"0b\":2,\"0o\":8,\"0x\":16}[t[1]],integerPart:t[2],fractionalPart:t[3]}:null;if(k){u=parseInt(k.integerPart,k.radix);for(var p=\nt=0;p<k.fractionalPart.length;p++){var g=parseInt(k.fractionalPart[p],k.radix);t+=g/Math.pow(k.radix,p+1)}u+=t;if(isNaN(u))throw new SyntaxError('String \"'+k.input+'\" is no valid number');return u}k=0;if(t=u.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/))k=Number(t[2]),u=t[1];p=Number(u);if(isNaN(p))throw new SyntaxError('String \"'+u+'\" is no valid number');if(t){if(p>Math.pow(2,k)-1)throw new SyntaxError('String \"'.concat(u,'\" is out of range'));p>=Math.pow(2,k-1)&&(p-=Math.pow(2,k))}return p},BigNumber:function(u){return u.toNumber()},\nFraction:function(u){return u.valueOf()},Unit:function(u){throw Error(\"Second argument with valueless unit expected\");},\"null\":function(u){return 0},\"Unit, string | Unit\":function(u,k){return u.toNumber(k)},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this)}});f.fromJSON=function(u){return parseFloat(u.value)};return f});a.createNumber=b}","~:source","shadow$provide[62] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumber = void 0;\n\nvar _factory = require(\"../utils/factory.js\");\n\nvar _collection = require(\"../utils/collection.js\");\n\nvar name = 'number';\nvar dependencies = ['typed'];\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\n\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input: input,\n      radix: radix,\n      integerPart: integerPart,\n      fractionalPart: fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\n\n\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n\n  var result = n + f;\n\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n\n  return result;\n}\n\nvar createNumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > Math.pow(2, size) - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= Math.pow(2, size - 1)) {\n          num = num - Math.pow(2, size);\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});\nexports.createNumber = createNumber;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","string","fromJSON","__esModule","fractionalPart","integerPart","value","number","input","BigNumber","Fraction","createNumber","radix"]],"~:compiled-at",1619135723762,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$number.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/number.js\"],\n\"sourcesContent\":[\"shadow$provide[62] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createNumber = void 0;\\n\\nvar _factory = require(\\\"../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../utils/collection.js\\\");\\n\\nvar name = 'number';\\nvar dependencies = ['typed'];\\n/**\\n * Separates the radix, integer part, and fractional part of a non decimal number string\\n * @param {string} input string to parse\\n * @returns {object} the parts of the string or null if not a valid input\\n */\\n\\nfunction getNonDecimalNumberParts(input) {\\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\\\.([0-9a-fA-F]*)/);\\n\\n  if (nonDecimalWithRadixMatch) {\\n    var radix = {\\n      '0b': 2,\\n      '0o': 8,\\n      '0x': 16\\n    }[nonDecimalWithRadixMatch[1]];\\n    var integerPart = nonDecimalWithRadixMatch[2];\\n    var fractionalPart = nonDecimalWithRadixMatch[3];\\n    return {\\n      input: input,\\n      radix: radix,\\n      integerPart: integerPart,\\n      fractionalPart: fractionalPart\\n    };\\n  } else {\\n    return null;\\n  }\\n}\\n/**\\n * Makes a number from a radix, and integer part, and a fractional part\\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\\n * @returns {number} the number\\n */\\n\\n\\nfunction makeNumberFromNonDecimalParts(parts) {\\n  var n = parseInt(parts.integerPart, parts.radix);\\n  var f = 0;\\n\\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\\n    f += digitValue / Math.pow(parts.radix, i + 1);\\n  }\\n\\n  var result = n + f;\\n\\n  if (isNaN(result)) {\\n    throw new SyntaxError('String \\\"' + parts.input + '\\\" is no valid number');\\n  }\\n\\n  return result;\\n}\\n\\nvar createNumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Create a number or convert a string, boolean, or unit to a number.\\n   * When value is a matrix, all elements will be converted to number.\\n   *\\n   * Syntax:\\n   *\\n   *    math.number(value)\\n   *    math.number(unit, valuelessUnit)\\n   *\\n   * Examples:\\n   *\\n   *    math.number(2)                         // returns number 2\\n   *    math.number('7.2')                     // returns number 7.2\\n   *    math.number(true)                      // returns number 1\\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\\n   *\\n   * See also:\\n   *\\n   *    bignumber, boolean, complex, index, matrix, string, unit\\n   *\\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\\n   * @return {number | Array | Matrix} The created number\\n   */\\n  var number = typed('number', {\\n    '': function _() {\\n      return 0;\\n    },\\n    number: function number(x) {\\n      return x;\\n    },\\n    string: function string(x) {\\n      if (x === 'NaN') return NaN;\\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\\n\\n      if (nonDecimalNumberParts) {\\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\\n      }\\n\\n      var size = 0;\\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\\n\\n      if (wordSizeSuffixMatch) {\\n        // x includes a size suffix like 0xffffi32, so we extract\\n        // the suffix and remove it from x\\n        size = Number(wordSizeSuffixMatch[2]);\\n        x = wordSizeSuffixMatch[1];\\n      }\\n\\n      var num = Number(x);\\n\\n      if (isNaN(num)) {\\n        throw new SyntaxError('String \\\"' + x + '\\\" is no valid number');\\n      }\\n\\n      if (wordSizeSuffixMatch) {\\n        // x is a signed bin, oct, or hex literal\\n        // num is the value of string x if x is interpreted as unsigned\\n        if (num > Math.pow(2, size) - 1) {\\n          // literal is too large for size suffix\\n          throw new SyntaxError(\\\"String \\\\\\\"\\\".concat(x, \\\"\\\\\\\" is out of range\\\"));\\n        } // check if the bit at index size - 1 is set and if so do the twos complement\\n\\n\\n        if (num >= Math.pow(2, size - 1)) {\\n          num = num - Math.pow(2, size);\\n        }\\n      }\\n\\n      return num;\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.toNumber();\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.valueOf();\\n    },\\n    Unit: function Unit(x) {\\n      throw new Error('Second argument with valueless unit expected');\\n    },\\n    \\\"null\\\": function _null(x) {\\n      return 0;\\n    },\\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\\n      return unit.toNumber(valuelessUnit);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  }); // reviver function to parse a JSON object like:\\n  //\\n  //     {\\\"mathjs\\\":\\\"number\\\",\\\"value\\\":\\\"2.3\\\"}\\n  //\\n  // into a number 2.3\\n\\n  number.fromJSON = function (json) {\\n    return parseFloat(json.value);\\n  };\\n\\n  return number;\\n});\\nexports.createNumber = createNumber;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createNumber\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"_\",\"x\",\"string\",\"NaN\",\"nonDecimalWithRadixMatch\",\"input\",\"match\",\"radix\",\"integerPart\",\"fractionalPart\",\"nonDecimalNumberParts\",\"n\",\"parseInt\",\"i\",\"f\",\"length\",\"digitValue\",\"Math\",\"pow\",\"result\",\"isNaN\",\"SyntaxError\",\"size\",\"wordSizeSuffixMatch\",\"Number\",\"num\",\"concat\",\"BigNumber\",\"toNumber\",\"Fraction\",\"valueOf\",\"Unit\",\"Error\",\"_null\",\"UnitStringUnit\",\"unit\",\"valuelessUnit\",\"ArrayMatrix\",\"deepMap\",\"fromJSON\",\"number.fromJSON\",\"json\",\"parseFloat\"]\n}\n"]