["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/forEach.js"],"~:js","shadow$provide[130]=function(c,b,y,a){function q(k,t){var p=(0,f.maxArgumentCount)(t);(function h(d,l){Array.isArray(d)?(0,u.forEach)(d,function(n,r){h(n,l.concat(r))}):1===p?t(d):2===p?t(d,l):t(d,l,k)})(k,[])}Object.defineProperty(a,\"__esModule\",{value:!0});a.createForEach=void 0;var f=b(127),u=b(24);c=b(25);c=(0,c.factory)(\"forEach\",[\"typed\"],function(k){k=k.typed;return k(\"forEach\",{\"Array, function\":q,\"Matrix, function\":function(t,p){return t.forEach(p)}})});a.createForEach=c}","~:source","shadow$provide[130] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createForEach = void 0;\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'forEach';\nvar dependencies = ['typed'];\nvar createForEach = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.forEach(callback);\n    }\n  });\n});\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\n\nexports.createForEach = createForEach;\n\nfunction _forEach(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = (0, _function.maxArgumentCount)(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      (0, _array.forEach)(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      } else if (args === 2) {\n        callback(value, index);\n      } else {\n        // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n\n  recurse(array, []);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$utils$function"]],"~:properties",["^5",["__esModule","value","createForEach"]],"~:compiled-at",1619135723805,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$forEach.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CA0D9DC,QAASA,EAAQ,CAACC,CAAD,CAAQC,CAAR,CAAkB,CAEjC,IAAIC,EAAO,CAAC,CAAA,CAAGC,CAAUC,CAAAA,gBAAd,EAAgCH,CAAhC,CAEGI,UAASA,EAAO,CAACC,CAAD,CAAQC,CAAR,CAAe,CACvCC,KAAMC,CAAAA,OAAN,CAAcH,CAAd,CAAJ,CACE,CAAC,CAAA,CAAGI,CAAOC,CAAAA,OAAX,EAAoBL,CAApB,CAA2B,QAAS,CAACM,CAAD,CAAQC,CAAR,CAAW,CAE7CR,CAAA,CAAQO,CAAR,CAAeL,CAAMO,CAAAA,MAAN,CAAaD,CAAb,CAAf,CAF6C,CAA/C,CADF,CAOe,CAAb,GAAIX,CAAJ,CACED,CAAA,CAASK,CAAT,CADF,CAEoB,CAAb,GAAIJ,CAAJ,CACLD,CAAA,CAASK,CAAT,CAAgBC,CAAhB,CADK,CAILN,CAAA,CAASK,CAAT,CAAgBC,CAAhB,CAAuBP,CAAvB,CAduC,CAA/BK,CAmBd,CAAQL,CAAR,CAAe,EAAf,CAvBiC,CAvDnCe,MAAOC,CAAAA,cAAP,CAAsBlB,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,EAAQmB,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAId,EAAYP,CAAA,CAAQ,GAAR,CAAhB,CAEIc,EAASd,CAAA,CAAQ,EAAR,CAETsB,EAAAA,CAAWtB,CAAA,CAAQ,EAAR,CAIXqB,EAAAA,CAA+B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACvFC,CAAAA,CAAQD,CAAKC,CAAAA,KAyBjB,OAAOA,EAAA,CA5BEH,SA4BF,CAAY,CACjB,kBAAmBrB,CADF,CAEjB,mBAAoByB,QAAuB,CAACC,CAAD,CAAIxB,CAAJ,CAAc,CACvD,MAAOwB,EAAEd,CAAAA,OAAF,CAAUV,CAAV,CADgD,CAFxC,CAAZ,CA1BoF,CAA1D,CAwCnCH,EAAQmB,CAAAA,aAAR,CAAwBA,CAxDsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/forEach.js\"],\n\"sourcesContent\":[\"shadow$provide[130] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createForEach = void 0;\\n\\nvar _function = require(\\\"../../utils/function.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'forEach';\\nvar dependencies = ['typed'];\\nvar createForEach = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\\n   *\\n   * Syntax:\\n   *\\n   *    math.forEach(x, callback)\\n   *\\n   * Examples:\\n   *\\n   *    math.forEach([1, 2, 3], function(value) {\\n   *      console.log(value)\\n   *    })\\n   *    // outputs 1, 2, 3\\n   *\\n   * See also:\\n   *\\n   *    filter, map, sort\\n   *\\n   * @param {Matrix | Array} x    The matrix to iterate on.\\n   * @param {Function} callback   The callback function is invoked with three\\n   *                              parameters: the value of the element, the index\\n   *                              of the element, and the Matrix/array being traversed.\\n   */\\n  return typed(name, {\\n    'Array, function': _forEach,\\n    'Matrix, function': function MatrixFunction(x, callback) {\\n      return x.forEach(callback);\\n    }\\n  });\\n});\\n/**\\n * forEach for a multi dimensional array\\n * @param {Array} array\\n * @param {Function} callback\\n * @private\\n */\\n\\nexports.createForEach = createForEach;\\n\\nfunction _forEach(array, callback) {\\n  // figure out what number of arguments the callback function expects\\n  var args = (0, _function.maxArgumentCount)(callback);\\n\\n  var recurse = function recurse(value, index) {\\n    if (Array.isArray(value)) {\\n      (0, _array.forEach)(value, function (child, i) {\\n        // we create a copy of the index array and append the new index value\\n        recurse(child, index.concat(i));\\n      });\\n    } else {\\n      // invoke the callback function with the right number of arguments\\n      if (args === 1) {\\n        callback(value);\\n      } else if (args === 2) {\\n        callback(value, index);\\n      } else {\\n        // 3 or -1\\n        callback(value, index, array);\\n      }\\n    }\\n  };\\n\\n  recurse(array, []);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_forEach\",\"array\",\"callback\",\"args\",\"_function\",\"maxArgumentCount\",\"recurse\",\"value\",\"index\",\"Array\",\"isArray\",\"_array\",\"forEach\",\"child\",\"i\",\"concat\",\"Object\",\"defineProperty\",\"createForEach\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"MatrixFunction\",\"x\"]\n}\n"]