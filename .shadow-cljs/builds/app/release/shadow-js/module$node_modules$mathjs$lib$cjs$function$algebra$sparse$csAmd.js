["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js"],"~:js","shadow$provide[284]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCsAmd=void 0;c=b(25);var q=b(282),f=b(283),u=b(279);b=(0,c.factory)(\"csAmd\",[\"add\",\"multiply\",\"transpose\"],function(k){function t(h,n,r,v,C){if(2>h||0>h+n){for(h=0;h<C;h++)0!==r[v+h]&&(r[v+h]=1);h=2}return h}function p(h,n){return h!==n}var g=k.add,d=k.multiply,l=k.transpose;return function(h,n){if(!n||0>=h||3<h)return null;var r=n._size,v=r[0];r=r[1];var C=0,z=Math.max(16,10*Math.sqrt(r));z=Math.min(r-\n2,z);var w=n;n=z;var B=l(w);if(1===h&&r===v)n=g(w,B);else{if(2===h){h=B._index;w=B._ptr;for(var x=0,D=0;D<v;D++){var F=w[D];w[D]=x;if(!(w[D+1]-F>n))for(var E=w[D+1];F<E;F++)h[x++]=h[F]}w[v]=x;w=l(B)}n=d(B,w)}(0,q.csFkeep)(n,p,null);v=n._index;n=n._ptr;B=n[r];h=[];w=[];x=r+1;D=2*(r+1);F=3*(r+1);E=4*(r+1);var G=5*(r+1),I=6*(r+1),L=7*(r+1),M;for(M=0;M<r;M++)w[0+M]=n[M+1]-n[M];for(M=w[0+r]=0;M<=r;M++)w[F+M]=-1,h[M]=-1,w[D+M]=-1,w[L+M]=-1,w[x+M]=1,w[I+M]=1,w[E+M]=0,w[G+M]=w[0+M];M=t(0,0,w,I,r);w[E+r]=\n-2;n[r]=-1;for(var S=w[I+r]=0,P=0;P<r;P++){var R=w[G+P];if(0===R)w[E+P]=-2,S++,n[P]=-1,w[I+P]=0;else if(R>z)w[x+P]=0,w[E+P]=-1,S++,n[P]=(0,f.csFlip)(r),w[x+r]++;else{var ba=w[F+R];-1!==ba&&(h[ba]=P);w[D+P]=w[F+R];w[F+R]=P}}z=S;S=0;for(var Q,T,Y,ca,ka,ha,wa;z<r;){for(R=-1;S<r&&-1===(R=w[F+S]);S++);-1!==w[D+R]&&(h[w[D+R]]=-1);w[F+S]=w[D+R];ba=w[E+R];var Ia=w[x+R];z+=Ia;var Ha=0;w[x+R]=-Ia;var oa=n[R],Ka=0===ba?oa:B,fa=Ka;for(T=1;T<=ba+1;T++){T>ba?(Q=R,ca=oa,ka=w[0+R]-ba):(Q=v[oa++],ca=n[Q],ka=w[0+Q]);\nfor(Y=1;Y<=ka;Y++)P=v[ca++],0>=(ha=w[x+P])||(Ha+=ha,w[x+P]=-ha,v[fa++]=P,-1!==w[D+P]&&(h[w[D+P]]=h[P]),-1!==h[P]?w[D+h[P]]=w[D+P]:w[F+w[G+P]]=w[D+P]);Q!==R&&(n[Q]=(0,f.csFlip)(R),w[I+Q]=0)}0!==ba&&(B=fa);w[G+R]=Ha;n[R]=Ka;w[0+R]=fa-Ka;w[E+R]=-2;M=t(M,C,w,I,r);for(T=Ka;T<fa;T++)if(P=v[T],!(0>=(Y=w[E+P])))for(ha=-w[x+P],ca=M-ha,oa=n[P],ka=n[P]+Y-1;oa<=ka;oa++)Q=v[oa],w[I+Q]>=M?w[I+Q]-=ha:0!==w[I+Q]&&(w[I+Q]=w[G+Q]+ca);for(T=Ka;T<fa;T++){P=v[T];ka=n[P];wa=ka+w[E+P]-1;ha=ka;Y=ca=0;for(oa=ka;oa<=wa;oa++)if(Q=\nv[oa],0!==w[I+Q]){var va=w[I+Q]-M;0<va?(Y+=va,v[ha++]=Q,ca+=Q):(n[Q]=(0,f.csFlip)(R),w[I+Q]=0)}w[E+P]=ha-ka+1;va=ha;var da=ka+w[0+P];for(oa=wa+1;oa<da;oa++)Q=v[oa],wa=w[x+Q],0>=wa||(Y+=wa,v[ha++]=Q,ca+=Q);0===Y?(n[P]=(0,f.csFlip)(R),ha=-w[x+P],Ha-=ha,Ia+=ha,z+=ha,w[x+P]=0,w[E+P]=-1):(w[G+P]=Math.min(w[G+P],Y),v[ha]=v[va],v[va]=v[ka],v[ka]=R,w[0+P]=ha-ka+1,ca=(0>ca?-ca:ca)%r,w[D+P]=w[L+ca],w[L+ca]=P,h[P]=ca)}w[G+R]=Ha;C=Math.max(C,Ha);M=t(M+C,C,w,I,r);for(T=Ka;T<fa;T++)if(P=v[T],!(0<=w[x+P]))for(ca=\nh[P],P=w[L+ca],w[L+ca]=-1;-1!==P&&-1!==w[D+P];P=w[D+P],M++){ka=w[0+P];Y=w[E+P];for(oa=n[P]+1;oa<=n[P]+ka-1;oa++)w[I+v[oa]]=M;ha=P;for(Q=w[D+P];-1!==Q;){ca=w[0+Q]===ka&&w[E+Q]===Y;for(oa=n[Q]+1;ca&&oa<=n[Q]+ka-1;oa++)w[I+v[oa]]!==M&&(ca=0);ca?(n[Q]=(0,f.csFlip)(P),w[x+P]+=w[x+Q],w[x+Q]=0,w[E+Q]=-1,Q=w[D+Q],w[D+ha]=Q):(ha=Q,Q=w[D+Q])}}for(T=oa=Ka;T<fa;T++)P=v[T],0>=(ha=-w[x+P])||(w[x+P]=ha,Y=w[G+P]+Ha-ha,Y=Math.min(Y,r-z-ha),-1!==w[F+Y]&&(h[w[F+Y]]=P),w[D+P]=w[F+Y],h[P]=-1,w[F+Y]=P,S=Math.min(S,Y),\nw[G+P]=Y,v[oa++]=P);w[x+R]=Ia;0===(w[0+R]=oa-Ka)&&(n[R]=-1,w[I+R]=0);0!==ba&&(B=oa)}for(P=0;P<r;P++)n[P]=(0,f.csFlip)(n[P]);for(Q=0;Q<=r;Q++)w[F+Q]=-1;for(Q=r;0<=Q;Q--)0<w[x+Q]||(w[D+Q]=w[F+n[Q]],w[F+n[Q]]=Q);for(Q=r;0<=Q;Q--)0>=w[x+Q]||-1===n[Q]||(w[D+Q]=w[F+n[Q]],w[F+n[Q]]=Q);for(P=R=0;P<=r;P++)-1===n[P]&&(R=(0,u.csTdfs)(P,R,w,F,D,h,I));h.splice(h.length-1,1);return h}});a.createCsAmd=b}","~:source","shadow$provide[284] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCsAmd = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _csFkeep = require(\"./csFkeep.js\");\n\nvar _csFlip = require(\"./csFlip.js\");\n\nvar _csTdfs = require(\"./csTdfs.js\");\n\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nvar createCsAmd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var add = _ref.add,\n      multiply = _ref.multiply,\n      transpose = _ref.transpose;\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n\n    (0, _csFkeep.csFkeep)(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = (0, _csFlip.csFlip)(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = (0, _csFlip.csFlip)(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = (0, _csFlip.csFlip)(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = (0, _csFlip.csFlip)(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = (0, _csFlip.csFlip)(cptr[i]);\n    }\n\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = (0, _csTdfs.csTdfs)(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = (0, _csFlip.csFlip)(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n\n    return nel;\n  }\n\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n\n    return mark;\n  }\n\n  function _diag(i, j) {\n    return i !== j;\n  }\n});\nexports.createCsAmd = createCsAmd;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csTdfs","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csFlip","~$module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csFkeep","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createCsAmd","__esModule","value"]],"~:compiled-at",1619135723977,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$algebra$sparse$csAmd.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js\"],\n\"sourcesContent\":[\"shadow$provide[284] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCsAmd = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _csFkeep = require(\\\"./csFkeep.js\\\");\\n\\nvar _csFlip = require(\\\"./csFlip.js\\\");\\n\\nvar _csTdfs = require(\\\"./csTdfs.js\\\");\\n\\nvar name = 'csAmd';\\nvar dependencies = ['add', 'multiply', 'transpose'];\\nvar createCsAmd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var add = _ref.add,\\n      multiply = _ref.multiply,\\n      transpose = _ref.transpose;\\n\\n  /**\\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\\n   * of a right looking sparse Cholesky factorization.\\n   *\\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\\n   *\\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\\n   * @param {Matrix} m        Sparse Matrix\\n   */\\n  return function csAmd(order, a) {\\n    // check input parameters\\n    if (!a || order <= 0 || order > 3) {\\n      return null;\\n    } // a matrix arrays\\n\\n\\n    var asize = a._size; // rows and columns\\n\\n    var m = asize[0];\\n    var n = asize[1]; // initialize vars\\n\\n    var lemax = 0; // dense threshold\\n\\n    var dense = Math.max(16, 10 * Math.sqrt(n));\\n    dense = Math.min(n - 2, dense); // create target matrix C\\n\\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\\n\\n\\n    (0, _csFkeep.csFkeep)(cm, _diag, null); // C matrix arrays\\n\\n    var cindex = cm._index;\\n    var cptr = cm._ptr; // number of nonzero elements in C\\n\\n    var cnz = cptr[n]; // allocate result (n+1)\\n\\n    var P = []; // create workspace (8 * (n + 1))\\n\\n    var W = [];\\n    var len = 0; // first n + 1 entries\\n\\n    var nv = n + 1; // next n + 1 entries\\n\\n    var next = 2 * (n + 1); // next n + 1 entries\\n\\n    var head = 3 * (n + 1); // next n + 1 entries\\n\\n    var elen = 4 * (n + 1); // next n + 1 entries\\n\\n    var degree = 5 * (n + 1); // next n + 1 entries\\n\\n    var w = 6 * (n + 1); // next n + 1 entries\\n\\n    var hhead = 7 * (n + 1); // last n + 1 entries\\n    // use P as workspace for last\\n\\n    var last = P; // initialize quotient graph\\n\\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\\n\\n\\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\\n\\n\\n    var mindeg = 0; // vars\\n\\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\\n\\n    while (nel < n) {\\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\\n      // many nodes have been eliminated.\\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\\n        ;\\n      }\\n\\n      if (W[next + k] !== -1) {\\n        last[W[next + k]] = -1;\\n      } // remove k from degree list\\n\\n\\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\\n\\n      var elenk = W[elen + k]; // # of nodes k represents\\n\\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\\n\\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\\n      // degree lists. All elements e in Ek are absorved into element k.\\n\\n      var dk = 0; // flag k as in Lk\\n\\n      W[nv + k] = -nvk;\\n      var p = cptr[k]; // do in place if W[elen + k] === 0\\n\\n      var pk1 = elenk === 0 ? p : cnz;\\n      var pk2 = pk1;\\n\\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\\n        if (k1 > elenk) {\\n          // search the nodes in k\\n          e = k; // list of nodes starts at cindex[pj]\\n\\n          pj = p; // length of list of nodes in k\\n\\n          ln = W[len + k] - elenk;\\n        } else {\\n          // search the nodes in e\\n          e = cindex[p++];\\n          pj = cptr[e]; // length of list of nodes in e\\n\\n          ln = W[len + e];\\n        }\\n\\n        for (k2 = 1; k2 <= ln; k2++) {\\n          i = cindex[pj++]; // check  node i dead, or seen\\n\\n          if ((nvi = W[nv + i]) <= 0) {\\n            continue;\\n          } // W[degree + Lk] += size of node i\\n\\n\\n          dk += nvi; // negate W[nv + i] to denote i in Lk\\n\\n          W[nv + i] = -nvi; // place i in Lk\\n\\n          cindex[pk2++] = i;\\n\\n          if (W[next + i] !== -1) {\\n            last[W[next + i]] = last[i];\\n          } // check we need to remove i from degree list\\n\\n\\n          if (last[i] !== -1) {\\n            W[next + last[i]] = W[next + i];\\n          } else {\\n            W[head + W[degree + i]] = W[next + i];\\n          }\\n        }\\n\\n        if (e !== k) {\\n          // absorb e into k\\n          cptr[e] = (0, _csFlip.csFlip)(k); // e is now a dead element\\n\\n          W[w + e] = 0;\\n        }\\n      } // cindex[cnz...nzmax] is free\\n\\n\\n      if (elenk !== 0) {\\n        cnz = pk2;\\n      } // external degree of k - |Lk\\\\i|\\n\\n\\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\\n\\n      cptr[k] = pk1;\\n      W[len + k] = pk2 - pk1; // k is now an element\\n\\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\\\ Lk| for all elements e. At the start of the\\n      // scan, no entry in the w array is greater than or equal to mark.\\n      // clear w if necessary\\n\\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\\\Lk|\\n\\n      for (pk = pk1; pk < pk2; pk++) {\\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\\n\\n        if ((eln = W[elen + i]) <= 0) {\\n          continue;\\n        } // W[nv + i] was negated\\n\\n\\n        nvi = -W[nv + i];\\n        var wnvi = mark - nvi; // scan Ei\\n\\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\\n          e = cindex[p];\\n\\n          if (W[w + e] >= mark) {\\n            // decrement |Le\\\\Lk|\\n            W[w + e] -= nvi;\\n          } else if (W[w + e] !== 0) {\\n            // ensure e is a live element, 1st time e seen in scan 1\\n            W[w + e] = W[degree + e] + wnvi;\\n          }\\n        }\\n      } // degree update\\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\\n      // function h(i) for all nodes in Lk.\\n      // scan2: degree update\\n\\n\\n      for (pk = pk1; pk < pk2; pk++) {\\n        // consider node i in Lk\\n        i = cindex[pk];\\n        p1 = cptr[i];\\n        p2 = p1 + W[elen + i] - 1;\\n        pn = p1; // scan Ei\\n\\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\\n          e = cindex[p]; // check e is an unabsorbed element\\n\\n          if (W[w + e] !== 0) {\\n            // dext = |Le\\\\Lk|\\n            var dext = W[w + e] - mark;\\n\\n            if (dext > 0) {\\n              // sum up the set differences\\n              d += dext; // keep e in Ei\\n\\n              cindex[pn++] = e; // compute the hash of node i\\n\\n              h += e;\\n            } else {\\n              // aggressive absorb. e->k\\n              cptr[e] = (0, _csFlip.csFlip)(k); // e is a dead element\\n\\n              W[w + e] = 0;\\n            }\\n          }\\n        } // W[elen + i] = |Ei|\\n\\n\\n        W[elen + i] = pn - p1 + 1;\\n        var p3 = pn;\\n        var p4 = p1 + W[len + i]; // prune edges in Ai\\n\\n        for (p = p2 + 1; p < p4; p++) {\\n          j = cindex[p]; // check node j dead or in Lk\\n\\n          var nvj = W[nv + j];\\n\\n          if (nvj <= 0) {\\n            continue;\\n          } // degree(i) += |j|\\n\\n\\n          d += nvj; // place j in node list of i\\n\\n          cindex[pn++] = j; // compute hash for node i\\n\\n          h += j;\\n        } // check for mass elimination\\n\\n\\n        if (d === 0) {\\n          // absorb i into k\\n          cptr[i] = (0, _csFlip.csFlip)(k);\\n          nvi = -W[nv + i]; // |Lk| -= |i|\\n\\n          dk -= nvi; // |k| += W[nv + i]\\n\\n          nvk += nvi;\\n          nel += nvi;\\n          W[nv + i] = 0; // node i is dead\\n\\n          W[elen + i] = -1;\\n        } else {\\n          // update degree(i)\\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\\n\\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\\n\\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\\n\\n          cindex[p1] = k; // new len of adj. list of node i\\n\\n          W[len + i] = pn - p1 + 1; // finalize hash of i\\n\\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\\n\\n          W[next + i] = W[hhead + h];\\n          W[hhead + h] = i; // save hash of i in last[i]\\n\\n          last[i] = h;\\n        }\\n      } // finalize |Lk|\\n\\n\\n      W[degree + k] = dk;\\n      lemax = Math.max(lemax, dk); // clear w\\n\\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\\n\\n      for (pk = pk1; pk < pk2; pk++) {\\n        i = cindex[pk]; // check i is dead, skip it\\n\\n        if (W[nv + i] >= 0) {\\n          continue;\\n        } // scan hash bucket of node i\\n\\n\\n        h = last[i];\\n        i = W[hhead + h]; // hash bucket will be empty\\n\\n        W[hhead + h] = -1;\\n\\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\\n          ln = W[len + i];\\n          eln = W[elen + i];\\n\\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\\n            W[w + cindex[p]] = mark;\\n          }\\n\\n          var jlast = i; // compare i with all j\\n\\n          for (j = W[next + i]; j !== -1;) {\\n            var ok = W[len + j] === ln && W[elen + j] === eln;\\n\\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\\n              // compare i and j\\n              if (W[w + cindex[p]] !== mark) {\\n                ok = 0;\\n              }\\n            } // check i and j are identical\\n\\n\\n            if (ok) {\\n              // absorb j into i\\n              cptr[j] = (0, _csFlip.csFlip)(i);\\n              W[nv + i] += W[nv + j];\\n              W[nv + j] = 0; // node j is dead\\n\\n              W[elen + j] = -1; // delete j from hash bucket\\n\\n              j = W[next + j];\\n              W[next + jlast] = j;\\n            } else {\\n              // j and i are different\\n              jlast = j;\\n              j = W[next + j];\\n            }\\n          }\\n        }\\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\\n\\n\\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\\n        i = cindex[pk]; // check  i is dead, skip it\\n\\n        if ((nvi = -W[nv + i]) <= 0) {\\n          continue;\\n        } // restore W[nv + i]\\n\\n\\n        W[nv + i] = nvi; // compute external degree(i)\\n\\n        d = W[degree + i] + dk - nvi;\\n        d = Math.min(d, n - nel - nvi);\\n\\n        if (W[head + d] !== -1) {\\n          last[W[head + d]] = i;\\n        } // put i back in degree list\\n\\n\\n        W[next + i] = W[head + d];\\n        last[i] = -1;\\n        W[head + d] = i; // find new minimum degree\\n\\n        mindeg = Math.min(mindeg, d);\\n        W[degree + i] = d; // place i in Lk\\n\\n        cindex[p++] = i;\\n      } // # nodes absorbed into k\\n\\n\\n      W[nv + k] = nvk; // length of adj list of element k\\n\\n      if ((W[len + k] = p - pk1) === 0) {\\n        // k is a root of the tree\\n        cptr[k] = -1; // k is now a dead element\\n\\n        W[w + k] = 0;\\n      }\\n\\n      if (elenk !== 0) {\\n        // free unused space in Lk\\n        cnz = p;\\n      }\\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\\n    // is computed. The tree is restored by unflipping all of ptr.\\n    // fix assembly tree\\n\\n\\n    for (i = 0; i < n; i++) {\\n      cptr[i] = (0, _csFlip.csFlip)(cptr[i]);\\n    }\\n\\n    for (j = 0; j <= n; j++) {\\n      W[head + j] = -1;\\n    } // place unordered nodes in lists\\n\\n\\n    for (j = n; j >= 0; j--) {\\n      // skip if j is an element\\n      if (W[nv + j] > 0) {\\n        continue;\\n      } // place j in list of its parent\\n\\n\\n      W[next + j] = W[head + cptr[j]];\\n      W[head + cptr[j]] = j;\\n    } // place elements in lists\\n\\n\\n    for (e = n; e >= 0; e--) {\\n      // skip unless e is an element\\n      if (W[nv + e] <= 0) {\\n        continue;\\n      }\\n\\n      if (cptr[e] !== -1) {\\n        // place e in list of its parent\\n        W[next + e] = W[head + cptr[e]];\\n        W[head + cptr[e]] = e;\\n      }\\n    } // postorder the assembly tree\\n\\n\\n    for (k = 0, i = 0; i <= n; i++) {\\n      if (cptr[i] === -1) {\\n        k = (0, _csTdfs.csTdfs)(i, k, W, head, next, P, w);\\n      }\\n    } // remove last item in array\\n\\n\\n    P.splice(P.length - 1, 1); // return P\\n\\n    return P;\\n  };\\n  /**\\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\\n   *\\n   * Order: 0\\n   *   A natural ordering P=null matrix is returned.\\n   *\\n   * Order: 1\\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\\n   *   P = M + M'\\n   *\\n   * Order: 2\\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\\n   *   P = M' * M\\n   *\\n   * Order: 3\\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\\n   *   P = M' * M\\n   */\\n\\n  function _createTargetMatrix(order, a, m, n, dense) {\\n    // compute A'\\n    var at = transpose(a); // check order = 1, matrix must be square\\n\\n    if (order === 1 && n === m) {\\n      // C = A + A'\\n      return add(a, at);\\n    } // check order = 2, drop dense columns from M'\\n\\n\\n    if (order === 2) {\\n      // transpose arrays\\n      var tindex = at._index;\\n      var tptr = at._ptr; // new column index\\n\\n      var p2 = 0; // loop A' columns (rows)\\n\\n      for (var j = 0; j < m; j++) {\\n        // column j of AT starts here\\n        var p = tptr[j]; // new column j starts here\\n\\n        tptr[j] = p2; // skip dense col j\\n\\n        if (tptr[j + 1] - p > dense) {\\n          continue;\\n        } // map rows in column j of A\\n\\n\\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\\n          tindex[p2++] = tindex[p];\\n        }\\n      } // finalize AT\\n\\n\\n      tptr[m] = p2; // recreate A from new transpose matrix\\n\\n      a = transpose(at); // use A' * A\\n\\n      return multiply(at, a);\\n    } // use A' * A, square or rectangular matrix\\n\\n\\n    return multiply(at, a);\\n  }\\n  /**\\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\\n   *\\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\\n   */\\n\\n\\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\\n    // Initialize quotient graph\\n    for (var k = 0; k < n; k++) {\\n      W[len + k] = cptr[k + 1] - cptr[k];\\n    }\\n\\n    W[len + n] = 0; // initialize workspace\\n\\n    for (var i = 0; i <= n; i++) {\\n      // degree list i is empty\\n      W[head + i] = -1;\\n      last[i] = -1;\\n      W[next + i] = -1; // hash list i is empty\\n\\n      W[hhead + i] = -1; // node i is just one node\\n\\n      W[nv + i] = 1; // node i is alive\\n\\n      W[w + i] = 1; // Ek of node i is empty\\n\\n      W[elen + i] = 0; // degree of node i\\n\\n      W[degree + i] = W[len + i];\\n    } // clear w\\n\\n\\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\\n\\n\\n    W[elen + n] = -2; // n is a root of assembly tree\\n\\n    cptr[n] = -1; // n is a dead element\\n\\n    W[w + n] = 0; // return mark\\n\\n    return mark;\\n  }\\n  /**\\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\\n   * output permutation p.\\n   */\\n\\n\\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\\n    // result\\n    var nel = 0; // loop columns\\n\\n    for (var i = 0; i < n; i++) {\\n      // degree @ i\\n      var d = W[degree + i]; // check node i is empty\\n\\n      if (d === 0) {\\n        // element i is dead\\n        W[elen + i] = -2;\\n        nel++; // i is a root of assembly tree\\n\\n        cptr[i] = -1;\\n        W[w + i] = 0;\\n      } else if (d > dense) {\\n        // absorb i into element n\\n        W[nv + i] = 0; // node i is dead\\n\\n        W[elen + i] = -1;\\n        nel++;\\n        cptr[i] = (0, _csFlip.csFlip)(n);\\n        W[nv + n]++;\\n      } else {\\n        var h = W[head + d];\\n\\n        if (h !== -1) {\\n          last[h] = i;\\n        } // put node i in degree list d\\n\\n\\n        W[next + i] = W[head + d];\\n        W[head + d] = i;\\n      }\\n    }\\n\\n    return nel;\\n  }\\n\\n  function _wclear(mark, lemax, W, w, n) {\\n    if (mark < 2 || mark + lemax < 0) {\\n      for (var k = 0; k < n; k++) {\\n        if (W[w + k] !== 0) {\\n          W[w + k] = 1;\\n        }\\n      }\\n\\n      mark = 2;\\n    } // at this point, W [0..n-1] < mark holds\\n\\n\\n    return mark;\\n  }\\n\\n  function _diag(i, j) {\\n    return i !== j;\\n  }\\n});\\nexports.createCsAmd = createCsAmd;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCsAmd\",\"_factory\",\"_csFkeep\",\"_csFlip\",\"_csTdfs\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_wclear\",\"mark\",\"lemax\",\"W\",\"w\",\"n\",\"k\",\"_diag\",\"i\",\"j\",\"add\",\"multiply\",\"transpose\",\"csAmd\",\"order\",\"a\",\"asize\",\"_size\",\"m\",\"dense\",\"Math\",\"max\",\"sqrt\",\"min\",\"at\",\"tindex\",\"_index\",\"tptr\",\"_ptr\",\"p2\",\"p\",\"p1\",\"csFkeep\",\"cm\",\"cindex\",\"cptr\",\"cnz\",\"P\",\"nv\",\"next\",\"head\",\"elen\",\"degree\",\"hhead\",\"len\",\"nel\",\"d\",\"csFlip\",\"h\",\"mindeg\",\"k1\",\"k2\",\"pj\",\"ln\",\"nvi\",\"elenk\",\"nvk\",\"dk\",\"pk1\",\"pk2\",\"e\",\"pk\",\"eln\",\"wnvi\",\"pn\",\"dext\",\"p3\",\"p4\",\"nvj\",\"jlast\",\"ok\",\"csTdfs\",\"splice\",\"length\"]\n}\n"]