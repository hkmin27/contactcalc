["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js"],"~:js","shadow$provide[177]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm08=void 0;c=b(25);var q=b(22);b=(0,c.factory)(\"algorithm08\",[\"typed\",\"equalScalar\"],function(f){var u=f.typed,k=f.equalScalar;return function(t,p,g){var d=t._values,l=t._index,h=t._ptr,n=t._size,r=t._datatype,v=p._values,C=p._index,z=p._ptr,w=p._size,B=p._datatype;if(n.length!==w.length)throw new q.DimensionError(n.length,w.length);if(n[0]!==w[0]||n[1]!==w[1])throw new RangeError(\"Dimension mismatch. Matrix A (\"+\nn+\") must match Matrix B (\"+w+\")\");if(!d||!v)throw Error(\"Cannot perform operation on Pattern Sparse Matrices\");w=n[0];n=n[1];p=k;var x=0,D=g;if(\"string\"===typeof r&&r===B){var F=r;p=u.find(k,[F,F]);x=u.convert(0,F);D=u.find(g,[F,F])}g=[];r=[];B=[];for(var E=[],G=[],I,L,M,S=0;S<n;S++){B[S]=r.length;var P=S+1;I=h[S];for(L=h[S+1];I<L;I++)M=l[I],G[M]=P,E[M]=d[I],r.push(M);I=z[S];for(L=z[S+1];I<L;I++)M=C[I],G[M]===P&&(E[M]=D(E[M],v[I]));for(I=B[S];I<r.length;)M=r[I],L=E[M],p(L,x)?r.splice(I,1):(g.push(L),\nI++)}B[n]=r.length;return t.createSparseMatrix({values:g,index:r,ptr:B,size:[w,n],datatype:F})}});a.createAlgorithm08=b}","~:source","shadow$provide[177] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm08 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar name = 'algorithm08';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm08 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm08(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // workspace\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var k, k0, k1, i; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values in a\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // mark workspace\n\n        w[i] = mark; // set value\n\n        x[i] = avalues[k]; // add index\n\n        cindex.push(i);\n      } // loop values in b\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check value exists in workspace\n\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      } // initialize first index in j\n\n\n      k = cptr[j]; // loop index in j\n\n      while (k < cindex.length) {\n        // row\n        i = cindex[k]; // value @ i\n\n        var v = x[i]; // check for zero value\n\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v); // increment pointer\n\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm08 = createAlgorithm08;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createAlgorithm08","values","index","__esModule","value","datatype","size","ptr"]],"~:compiled-at",1619135723904,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm08.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js\"],\n\"sourcesContent\":[\"shadow$provide[177] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm08 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _DimensionError = require(\\\"../../../error/DimensionError.js\\\");\\n\\nvar name = 'algorithm08';\\nvar dependencies = ['typed', 'equalScalar'];\\nvar createAlgorithm08 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equalScalar = _ref.equalScalar;\\n\\n  /**\\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\\n   * Callback function invoked MAX(NNZA, NNZB) times\\n   *\\n   *\\n   *          \\u250c  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\\n   * C(i,j) = \\u2524  A(i,j)       ; A(i,j) !== 0\\n   *          \\u2514  0            ; otherwise\\n   *\\n   *\\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\\n   *\\n   * @return {Matrix}                    SparseMatrix (C)\\n   *\\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\\n   */\\n  return function algorithm08(a, b, callback) {\\n    // sparse matrix arrays\\n    var avalues = a._values;\\n    var aindex = a._index;\\n    var aptr = a._ptr;\\n    var asize = a._size;\\n    var adt = a._datatype; // sparse matrix arrays\\n\\n    var bvalues = b._values;\\n    var bindex = b._index;\\n    var bptr = b._ptr;\\n    var bsize = b._size;\\n    var bdt = b._datatype; // validate dimensions\\n\\n    if (asize.length !== bsize.length) {\\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\\n    } // check rows & columns\\n\\n\\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\\n    } // sparse matrix cannot be a Pattern matrix\\n\\n\\n    if (!avalues || !bvalues) {\\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // equal signature to use\\n\\n    var eq = equalScalar; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string' && adt === bdt) {\\n      // datatype\\n      dt = adt; // find signature that matches (dt, dt)\\n\\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result arrays\\n\\n\\n    var cvalues = [];\\n    var cindex = [];\\n    var cptr = []; // workspace\\n\\n    var x = []; // marks indicating we have a value in x for a given column\\n\\n    var w = []; // vars\\n\\n    var k, k0, k1, i; // loop columns\\n\\n    for (var j = 0; j < columns; j++) {\\n      // update cptr\\n      cptr[j] = cindex.length; // columns mark\\n\\n      var mark = j + 1; // loop values in a\\n\\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        i = aindex[k]; // mark workspace\\n\\n        w[i] = mark; // set value\\n\\n        x[i] = avalues[k]; // add index\\n\\n        cindex.push(i);\\n      } // loop values in b\\n\\n\\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        i = bindex[k]; // check value exists in workspace\\n\\n        if (w[i] === mark) {\\n          // evaluate callback\\n          x[i] = cf(x[i], bvalues[k]);\\n        }\\n      } // initialize first index in j\\n\\n\\n      k = cptr[j]; // loop index in j\\n\\n      while (k < cindex.length) {\\n        // row\\n        i = cindex[k]; // value @ i\\n\\n        var v = x[i]; // check for zero value\\n\\n        if (!eq(v, zero)) {\\n          // push value\\n          cvalues.push(v); // increment pointer\\n\\n          k++;\\n        } else {\\n          // remove value @ i, do not increment pointer\\n          cindex.splice(k, 1);\\n        }\\n      }\\n    } // update cptr\\n\\n\\n    cptr[columns] = cindex.length; // return sparse matrix\\n\\n    return a.createSparseMatrix({\\n      values: cvalues,\\n      index: cindex,\\n      ptr: cptr,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm08 = createAlgorithm08;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm08\",\"_factory\",\"_DimensionError\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"equalScalar\",\"algorithm08\",\"a\",\"b\",\"callback\",\"avalues\",\"_values\",\"aindex\",\"_index\",\"aptr\",\"_ptr\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"bvalues\",\"bindex\",\"bptr\",\"bsize\",\"bdt\",\"length\",\"DimensionError\",\"RangeError\",\"Error\",\"rows\",\"columns\",\"eq\",\"zero\",\"cf\",\"dt\",\"find\",\"convert\",\"cvalues\",\"cindex\",\"cptr\",\"x\",\"w\",\"k\",\"k1\",\"i\",\"j\",\"mark\",\"k0\",\"push\",\"v\",\"splice\",\"createSparseMatrix\",\"values\",\"index\",\"ptr\",\"size\",\"datatype\"]\n}\n"]