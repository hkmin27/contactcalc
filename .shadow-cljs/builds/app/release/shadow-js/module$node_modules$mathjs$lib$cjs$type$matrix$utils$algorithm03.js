["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js"],"~:js","shadow$provide[94]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm03=void 0;c=b(25);var q=b(22);b=(0,c.factory)(\"algorithm03\",[\"typed\"],function(f){var u=f.typed;return function(k,t,p,g){var d=k._data,l=k._size,h=k._datatype,n=t._values,r=t._index,v=t._ptr,C=t._size,z=t._datatype;if(l.length!==C.length)throw new q.DimensionError(l.length,C.length);if(l[0]!==C[0]||l[1]!==C[1])throw new RangeError(\"Dimension mismatch. Matrix A (\"+l+\") must match Matrix B (\"+C+\")\");\nif(!n)throw Error(\"Cannot perform operation on Dense Matrix and Pattern Sparse Matrix\");C=l[0];l=l[1];t=0;var w=p;if(\"string\"===typeof h&&h===z){var B=h;t=u.convert(0,B);w=u.find(p,[B,B])}p=[];for(h=0;h<C;h++)p[h]=[];h=[];z=[];for(var x=0;x<l;x++){for(var D=x+1,F=v[x+1],E=v[x];E<F;E++){var G=r[E];h[G]=g?w(n[E],d[G][x]):w(d[G][x],n[E]);z[G]=D}for(F=0;F<C;F++)p[F][x]=z[F]===D?h[F]:g?w(t,d[F][x]):w(d[F][x],t)}return k.createDenseMatrix({data:p,size:[C,l],datatype:B})}});a.createAlgorithm03=b}","~:source","shadow$provide[94] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm03 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar name = 'algorithm03';\nvar dependencies = ['typed'];\nvar createAlgorithm03 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm03 = createAlgorithm03;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","datatype","size","createAlgorithm03","data"]],"~:compiled-at",1619135723780,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm03.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAkBR,CAAA,CAAQ,EAAR,CAIlBM,EAAAA,CAAmC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CACoB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAC/F,IAAIC,EAAQD,CAAKC,CAAAA,KAqBjB,OAAOC,SAAoB,CAACC,CAAD,CAAcC,CAAd,CAA4BC,CAA5B,CAAsCC,CAAtC,CAA+C,CAExE,IAAIC,EAAQJ,CAAYK,CAAAA,KAAxB,CACIC,EAAQN,CAAYO,CAAAA,KADxB,CAEIC,EAAMR,CAAYS,CAAAA,SAFtB,CAIIC,EAAUT,CAAaU,CAAAA,OAJ3B,CAKIC,EAASX,CAAaY,CAAAA,MAL1B,CAMIC,EAAOb,CAAac,CAAAA,IANxB,CAOIC,EAAQf,CAAaM,CAAAA,KAPzB,CAQIU,EAAMhB,CAAaQ,CAAAA,SAEvB,IAAIH,CAAMY,CAAAA,MAAV,GAAqBF,CAAME,CAAAA,MAA3B,CACE,KAAM,KAAIzB,CAAgB0B,CAAAA,cAApB,CAAmCb,CAAMY,CAAAA,MAAzC,CAAiDF,CAAME,CAAAA,MAAvD,CAAN,CAIF,GAAIZ,CAAA,CAAM,CAAN,CAAJ,GAAiBU,CAAA,CAAM,CAAN,CAAjB,EAA6BV,CAAA,CAAM,CAAN,CAA7B,GAA0CU,CAAA,CAAM,CAAN,CAA1C,CACE,KAAM,KAAII,UAAJ,CAAe,gCAAf,CAAkDd,CAAlD,CAA0D,yBAA1D,CAAsFU,CAAtF,CAA8F,GAA9F,CAAN;AAIF,GAAI,CAACN,CAAL,CACE,KAAUW,MAAJ,CAAU,oEAAV,CAAN,CAIEC,CAAAA,CAAOhB,CAAA,CAAM,CAAN,CACPiB,EAAAA,CAAUjB,CAAA,CAAM,CAAN,CAIVkB,EAAAA,CAAO,CAEX,KAAIC,EAAKvB,CAET,IAAmB,QAAnB,GAAI,MAAOM,EAAX,EAA+BA,CAA/B,GAAuCS,CAAvC,CAA4C,CAE1C,IAAAS,EAAKlB,CAELgB,EAAA,CAAO1B,CAAM6B,CAAAA,OAAN,CAAc,CAAd,CAAiBD,CAAjB,CAEPD,EAAA,CAAK3B,CAAM8B,CAAAA,IAAN,CAAW1B,CAAX,CAAqB,CAACwB,CAAD,CAAKA,CAAL,CAArB,CANqC,CAUxCG,CAAAA,CAAQ,EAEZ,KAASC,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBR,CAApB,CAA0BQ,CAAA,EAA1B,CAEED,CAAA,CAAMC,CAAN,CAAA,CAAW,EAITC,EAAAA,CAAI,EAEJC,EAAAA,CAAI,EAER,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBV,CAApB,CAA6BU,CAAA,EAA7B,CAAkC,CAIhC,IAFA,IAAIC,EAAOD,CAAPC,CAAW,CAAf,CAEuBC,EAAKrB,CAAA,CAAKmB,CAAL,CAAS,CAAT,CAF5B,CAEyCG,EAA3BtB,CAAAuB,CAAKJ,CAALI,CAAd,CAAiDD,CAAjD,CAAqDD,CAArD,CAAyDC,CAAA,EAAzD,CAA8D,CAE5D,IAAIE,EAAI1B,CAAA,CAAOwB,CAAP,CAERL,EAAA,CAAEO,CAAF,CAAA,CAAOnC,CAAA,CAAUsB,CAAA,CAAGf,CAAA,CAAQ0B,CAAR,CAAH,CAAehC,CAAA,CAAMkC,CAAN,CAAA,CAASL,CAAT,CAAf,CAAV,CAAwCR,CAAA,CAAGrB,CAAA,CAAMkC,CAAN,CAAA,CAASL,CAAT,CAAH,CAAgBvB,CAAA,CAAQ0B,CAAR,CAAhB,CAC/CJ,EAAA,CAAEM,CAAF,CAAA,CAAOJ,CALqD,CAS9D,IAASK,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBjB,CAApB,CAA0BiB,CAAA,EAA1B,CAIIV,CAAA,CAAMU,CAAN,CAAA,CAASN,CAAT,CAAA,CAFED,CAAA,CAAEO,CAAF,CAAJ,GAAaL,CAAb,CAEgBH,CAAA,CAAEQ,CAAF,CAFhB,CAKgBpC,CAAA,CAAUsB,CAAA,CAAGD,CAAH,CAASpB,CAAA,CAAMmC,CAAN,CAAA,CAASN,CAAT,CAAT,CAAV,CAAkCR,CAAA,CAAGrB,CAAA,CAAMmC,CAAN,CAAA,CAASN,CAAT,CAAH,CAAgBT,CAAhB,CApBpB,CA0BlC,MAAOxB,EAAYwC,CAAAA,iBAAZ,CAA8B,CACnCC,KAAMZ,CAD6B,CAEnCa,KAAM,CAACpB,CAAD,CAAOC,CAAP,CAF6B,CAGnCoB,SAAUjB,CAHyB,CAA9B,CApFiE,CAtBqB,CAA1D,CAiHvCvC,EAAQI,CAAAA,iBAAR,CAA4BA,CA/HiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js\"],\n\"sourcesContent\":[\"shadow$provide[94] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm03 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _DimensionError = require(\\\"../../../error/DimensionError.js\\\");\\n\\nvar name = 'algorithm03';\\nvar dependencies = ['typed'];\\nvar createAlgorithm03 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\\n   * Callback function invoked M*N times.\\n   *\\n   *\\n   *          \\u250c  f(Dij, Sij)  ; S(i,j) !== 0\\n   * C(i,j) = \\u2524\\n   *          \\u2514  f(Dij, 0)    ; otherwise\\n   *\\n   *\\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\\n   *\\n   * @return {Matrix}                    DenseMatrix (C)\\n   *\\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\\n   */\\n  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\\n    // dense matrix arrays\\n    var adata = denseMatrix._data;\\n    var asize = denseMatrix._size;\\n    var adt = denseMatrix._datatype; // sparse matrix arrays\\n\\n    var bvalues = sparseMatrix._values;\\n    var bindex = sparseMatrix._index;\\n    var bptr = sparseMatrix._ptr;\\n    var bsize = sparseMatrix._size;\\n    var bdt = sparseMatrix._datatype; // validate dimensions\\n\\n    if (asize.length !== bsize.length) {\\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\\n    } // check rows & columns\\n\\n\\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\\n    } // sparse matrix cannot be a Pattern matrix\\n\\n\\n    if (!bvalues) {\\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string' && adt === bdt) {\\n      // datatype\\n      dt = adt; // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result (DenseMatrix)\\n\\n\\n    var cdata = []; // initialize dense matrix\\n\\n    for (var z = 0; z < rows; z++) {\\n      // initialize row\\n      cdata[z] = [];\\n    } // workspace\\n\\n\\n    var x = []; // marks indicating we have a value in x for a given column\\n\\n    var w = []; // loop columns in b\\n\\n    for (var j = 0; j < columns; j++) {\\n      // column mark\\n      var mark = j + 1; // values in column j\\n\\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\\n        // row\\n        var i = bindex[k]; // update workspace\\n\\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\\n        w[i] = mark;\\n      } // process workspace\\n\\n\\n      for (var y = 0; y < rows; y++) {\\n        // check we have a calculated value for current row\\n        if (w[y] === mark) {\\n          // use calculated value\\n          cdata[y][j] = x[y];\\n        } else {\\n          // calculate value\\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\\n        }\\n      }\\n    } // return dense matrix\\n\\n\\n    return denseMatrix.createDenseMatrix({\\n      data: cdata,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm03 = createAlgorithm03;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm03\",\"_factory\",\"_DimensionError\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"algorithm03\",\"denseMatrix\",\"sparseMatrix\",\"callback\",\"inverse\",\"adata\",\"_data\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"bvalues\",\"_values\",\"bindex\",\"_index\",\"bptr\",\"_ptr\",\"bsize\",\"bdt\",\"length\",\"DimensionError\",\"RangeError\",\"Error\",\"rows\",\"columns\",\"zero\",\"cf\",\"dt\",\"convert\",\"find\",\"cdata\",\"z\",\"x\",\"w\",\"j\",\"mark\",\"k1\",\"k\",\"k0\",\"i\",\"y\",\"createDenseMatrix\",\"data\",\"size\",\"datatype\"]\n}\n"]