["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js"],"~:js","shadow$provide[69]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSplitUnit=void 0;c=b(25);c=(0,c.factory)(\"splitUnit\",[\"typed\"],function(q){q=q.typed;return q(\"splitUnit\",{\"Unit, Array\":function(f,u){return f.splitUnit(u)}})});a.createSplitUnit=c}","~:source","shadow$provide[69] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSplitUnit = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar name = 'splitUnit';\nvar dependencies = ['typed'];\nvar createSplitUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  return typed(name, {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n});\nexports.createSplitUnit = createSplitUnit;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createSplitUnit","value"]],"~:compiled-at",1619135723766,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$unit$function$splitUnit.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAiC,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACzFC,CAAAA,CAAQD,CAAKC,CAAAA,KAqBjB,OAAOA,EAAA,CAxBEH,WAwBF,CAAY,CACjB,cAAeI,QAAkB,CAACC,CAAD,CAAOC,CAAP,CAAc,CAC7C,MAAOD,EAAKE,CAAAA,SAAL,CAAeD,CAAf,CADsC,CAD9B,CAAZ,CAtBsF,CAA1D,CA4BrCb,EAAQI,CAAAA,eAAR,CAA0BA,CAxCmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js\"],\n\"sourcesContent\":[\"shadow$provide[69] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSplitUnit = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar name = 'splitUnit';\\nvar dependencies = ['typed'];\\nvar createSplitUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Split a unit in an array of units whose sum is equal to the original unit.\\n   *\\n   * Syntax:\\n   *\\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\\n   *\\n   * Example:\\n   *\\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\\n   *     // [ 3 feet, 3.3700787401575 inch ]\\n   *\\n   * See also:\\n   *\\n   *     unit\\n   *\\n   * @param {Array} [parts] An array of strings or valueless units.\\n   * @return {Array} An array of units.\\n   */\\n  return typed(name, {\\n    'Unit, Array': function UnitArray(unit, parts) {\\n      return unit.splitUnit(parts);\\n    }\\n  });\\n});\\nexports.createSplitUnit = createSplitUnit;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSplitUnit\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"UnitArray\",\"unit\",\"parts\",\"splitUnit\"]\n}\n"]