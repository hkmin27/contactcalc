["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/combinations.js"],"~:js","shadow$provide[537]=function(c,b,y,a){function q(u){return u.isInteger()&&u.gte(0)}Object.defineProperty(a,\"__esModule\",{value:!0});a.createCombinations=void 0;c=b(25);var f=b(43);b=(0,c.factory)(\"combinations\",[\"typed\"],function(u){u=u.typed;return u(\"combinations\",{\"number, number\":f.combinationsNumber,\"BigNumber, BigNumber\":function(k,t){var p=k.constructor,g,d=k.minus(t);p=new p(1);if(!q(k)||!q(t))throw new TypeError(\"Positive integer value expected in function combinations\");if(t.gt(k))throw new TypeError(\"k must be less than n in function combinations\");\nk=p;if(t.lt(d))for(g=p;g.lte(d);g=g.plus(p))k=k.times(t.plus(g)).dividedBy(g);else for(g=p;g.lte(t);g=g.plus(p))k=k.times(d.plus(g)).dividedBy(g);return k}})});a.createCombinations=b}","~:source","shadow$provide[537] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCombinations = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _combinations = require(\"../../plain/number/combinations.js\");\n\nvar name = 'combinations';\nvar dependencies = ['typed'];\nvar createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    combinationsWithRep, permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  return typed(name, {\n    'number, number': _combinations.combinationsNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      result = one;\n\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n\n      return result;\n    } // TODO: implement support for collection in combinations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nexports.createCombinations = createCombinations;\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$plain$number$combinations","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createCombinations","value"]],"~:compiled-at",1619135724024,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$combinations.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAiF9DC,QAASA,EAAiB,CAACC,CAAD,CAAI,CAC5B,MAAOA,EAAEC,CAAAA,SAAF,EAAP,EAAwBD,CAAEE,CAAAA,GAAF,CAAM,CAAN,CADI,CA9E9BC,MAAOC,CAAAA,cAAP,CAAsBN,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,EAAQQ,CAAAA,kBAAR,CAA6B,IAAK,EAE9BC,EAAAA,CAAWX,CAAA,CAAQ,EAAR,CAEf,KAAIY,EAAgBZ,CAAA,CAAQ,EAAR,CAIhBU,EAAAA,CAAoC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,CAAC,OAADA,CACqB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAC5FC,CAAAA,CAAQD,CAAKC,CAAAA,KAyBjB,OAAOA,EAAA,CA5BEH,cA4BF,CAAY,CACjB,iBAAkBF,CAAcM,CAAAA,kBADf,CAEjB,uBAAwBC,QAA2B,CAACf,CAAD,CAAIgB,CAAJ,CAAO,CACxD,IAAIC,EAAYjB,CAAEkB,CAAAA,WAAlB,CACYC,CADZ,CAEIC,EAAUpB,CAAEqB,CAAAA,KAAF,CAAQL,CAAR,CACVM,EAAAA,CAAM,IAAIL,CAAJ,CAAc,CAAd,CAEV,IAAI,CAAClB,CAAA,CAAkBC,CAAlB,CAAL,EAA6B,CAACD,CAAA,CAAkBiB,CAAlB,CAA9B,CACE,KAAM,KAAIO,SAAJ,CAAc,0DAAd,CAAN,CAGF,GAAIP,CAAEQ,CAAAA,EAAF,CAAKxB,CAAL,CAAJ,CACE,KAAM,KAAIuB,SAAJ,CAAc,gDAAd,CAAN;AAGFE,CAAA,CAASH,CAET,IAAIN,CAAEU,CAAAA,EAAF,CAAKN,CAAL,CAAJ,CACE,IAAKD,CAAL,CAASG,CAAT,CAAcH,CAAEQ,CAAAA,GAAF,CAAMP,CAAN,CAAd,CAA8BD,CAA9B,CAAkCA,CAAES,CAAAA,IAAF,CAAON,CAAP,CAAlC,CACEG,CAAA,CAASA,CAAOI,CAAAA,KAAP,CAAab,CAAEY,CAAAA,IAAF,CAAOT,CAAP,CAAb,CAAwBW,CAAAA,SAAxB,CAAkCX,CAAlC,CAFb,KAKE,KAAKA,CAAL,CAASG,CAAT,CAAcH,CAAEQ,CAAAA,GAAF,CAAMX,CAAN,CAAd,CAAwBG,CAAxB,CAA4BA,CAAES,CAAAA,IAAF,CAAON,CAAP,CAA5B,CACEG,CAAA,CAASA,CAAOI,CAAAA,KAAP,CAAaT,CAAQQ,CAAAA,IAAR,CAAaT,CAAb,CAAb,CAA8BW,CAAAA,SAA9B,CAAwCX,CAAxC,CAIb,OAAOM,EA1BiD,CAFzC,CAAZ,CA1ByF,CAA1D,CAiExC3B,EAAQQ,CAAAA,kBAAR,CAA6BA,CA/EiC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/combinations.js\"],\n\"sourcesContent\":[\"shadow$provide[537] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCombinations = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _combinations = require(\\\"../../plain/number/combinations.js\\\");\\n\\nvar name = 'combinations';\\nvar dependencies = ['typed'];\\nvar createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\\n   * possibilities.\\n   *\\n   * Combinations only takes integer arguments.\\n   * The following condition must be enforced: k <= n.\\n   *\\n   * Syntax:\\n   *\\n   *     math.combinations(n, k)\\n   *\\n   * Examples:\\n   *\\n   *    math.combinations(7, 5) // returns 21\\n   *\\n   * See also:\\n   *\\n   *    combinationsWithRep, permutations, factorial\\n   *\\n   * @param {number | BigNumber} n    Total number of objects in the set\\n   * @param {number | BigNumber} k    Number of objects in the subset\\n   * @return {number | BigNumber}     Number of possible combinations.\\n   */\\n  return typed(name, {\\n    'number, number': _combinations.combinationsNumber,\\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\\n      var BigNumber = n.constructor;\\n      var result, i;\\n      var nMinusk = n.minus(k);\\n      var one = new BigNumber(1);\\n\\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\\n        throw new TypeError('Positive integer value expected in function combinations');\\n      }\\n\\n      if (k.gt(n)) {\\n        throw new TypeError('k must be less than n in function combinations');\\n      }\\n\\n      result = one;\\n\\n      if (k.lt(nMinusk)) {\\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\\n          result = result.times(k.plus(i)).dividedBy(i);\\n        }\\n      } else {\\n        for (i = one; i.lte(k); i = i.plus(one)) {\\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\\n        }\\n      }\\n\\n      return result;\\n    } // TODO: implement support for collection in combinations\\n\\n  });\\n});\\n/**\\n * Test whether BigNumber n is a positive integer\\n * @param {BigNumber} n\\n * @returns {boolean} isPositiveInteger\\n */\\n\\nexports.createCombinations = createCombinations;\\n\\nfunction isPositiveInteger(n) {\\n  return n.isInteger() && n.gte(0);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isPositiveInteger\",\"n\",\"isInteger\",\"gte\",\"Object\",\"defineProperty\",\"value\",\"createCombinations\",\"_factory\",\"_combinations\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"combinationsNumber\",\"BigNumberBigNumber\",\"k\",\"BigNumber\",\"constructor\",\"i\",\"nMinusk\",\"minus\",\"one\",\"TypeError\",\"gt\",\"result\",\"lt\",\"lte\",\"plus\",\"times\",\"dividedBy\"]\n}\n"]