["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/std.js"],"~:js","shadow$provide[536]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createStd=void 0;c=b(25);c=(0,c.factory)(\"std\",[\"typed\",\"sqrt\",\"variance\"],function(q){function f(p,g){if(0===p.length)throw new SyntaxError(\"Function std requires one or more parameters (0 provided)\");try{return k(t.apply(null,arguments))}catch(d){if(d instanceof TypeError&&-1!==d.message.indexOf(\" variance\"))throw new TypeError(d.message.replace(\" variance\",\" std\"));throw d;}}var u=q.typed,k=q.sqrt,t=q.variance;\nreturn u(\"std\",{\"Array | Matrix\":f,\"Array | Matrix, string\":f,\"Array | Matrix, number | BigNumber\":f,\"Array | Matrix, number | BigNumber, string\":f,\"...\":function(p){return f(p)}})});a.createStd=c}","~:source","shadow$provide[536] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStd = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'std';\nvar dependencies = ['typed', 'sqrt', 'variance'];\nvar createStd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      sqrt = _ref.sqrt,\n      variance = _ref.variance;\n\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(variance(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated by default, unless an axis is specified\n   * in which case the standard deviation will be computed along that axis.\n   *\n   * Additionally, it is possible to compute the standard deviation along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *     math.std(A, dimension)\n   *     math.std(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6)                     // returns 2\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, variance\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the standard deviation for a matrix\n   * @return {*} The standard deviation\n   */\n  return typed(name, {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n    // std([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': _std,\n    // std([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _std,\n    // std(a, b, c, d, ...)\n    '...': function _(args) {\n      return _std(args);\n    }\n  });\n\n  function _std(array, normalization) {\n    if (array.length === 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n\n    try {\n      return sqrt(variance.apply(null, arguments));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {\n        throw new TypeError(err.message.replace(' variance', ' std'));\n      } else {\n        throw err;\n      }\n    }\n  }\n});\nexports.createStd = createStd;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createStd","value"]],"~:compiled-at",1619135724024,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$std.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,MAAVA,CAAkB,UAAlBA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CAwEvFC,QAASA,EAAI,CAACC,CAAD,CAAQC,CAAR,CAAuB,CAClC,GAAqB,CAArB,GAAID,CAAME,CAAAA,MAAV,CACE,KAAM,KAAIC,WAAJ,CAAgB,2DAAhB,CAAN,CAGF,GAAI,CACF,MAAOC,EAAA,CAAKC,CAASC,CAAAA,KAAT,CAAe,IAAf,CAAqBC,SAArB,CAAL,CADL,CAEF,MAAOC,CAAP,CAAY,CACZ,GAAIA,CAAJ,WAAmBC,UAAnB,EAAqE,EAArE,GAAgCD,CAAIE,CAAAA,OAAQC,CAAAA,OAAZ,CAAoB,WAApB,CAAhC,CACE,KAAM,KAAIF,SAAJ,CAAcD,CAAIE,CAAAA,OAAQE,CAAAA,OAAZ,CAAoB,WAApB,CAAiC,MAAjC,CAAd,CAAN,CAEA,KAAMJ,EAAN,CAJU,CAPoB,CAxEmD,IACnFK,EAAQf,CAAKe,CAAAA,KADsE,CAEnFT,EAAON,CAAKM,CAAAA,IAFuE,CAGnFC,EAAWP,CAAKO,CAAAA,QAsDpB;MAAOQ,EAAA,CA3DEjB,KA2DF,CAAY,CAEjB,iBAAkBG,CAFD,CAIjB,yBAA0BA,CAJT,CAMjB,qCAAsCA,CANrB,CAQjB,6CAA8CA,CAR7B,CAUjB,MAAOe,QAAU,CAACC,CAAD,CAAO,CACtB,MAAOhB,EAAA,CAAKgB,CAAL,CADe,CAVP,CAAZ,CAzDgF,CAA1D,CAwF/B1B,EAAQI,CAAAA,SAAR,CAAoBA,CApG0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/std.js\"],\n\"sourcesContent\":[\"shadow$provide[536] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createStd = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'std';\\nvar dependencies = ['typed', 'sqrt', 'variance'];\\nvar createStd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      sqrt = _ref.sqrt,\\n      variance = _ref.variance;\\n\\n  /**\\n   * Compute the standard deviation of a matrix or a  list with values.\\n   * The standard deviations is defined as the square root of the variance:\\n   * `std(A) = sqrt(variance(A))`.\\n   * In case of a (multi dimensional) array or matrix, the standard deviation\\n   * over all elements will be calculated by default, unless an axis is specified\\n   * in which case the standard deviation will be computed along that axis.\\n   *\\n   * Additionally, it is possible to compute the standard deviation along the rows\\n   * or columns of a matrix by specifying the dimension as the second argument.\\n   *\\n   * Optionally, the type of normalization can be specified as the final\\n   * parameter. The parameter `normalization` can be one of the following values:\\n   *\\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\\n   * - 'uncorrected'        The sum of squared errors is divided by n\\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\\n   *\\n   *\\n   * Syntax:\\n   *\\n   *     math.std(a, b, c, ...)\\n   *     math.std(A)\\n   *     math.std(A, normalization)\\n   *     math.std(A, dimension)\\n   *     math.std(A, dimension, normalization)\\n   *\\n   * Examples:\\n   *\\n   *     math.std(2, 4, 6)                     // returns 2\\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\\n   *\\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\\n   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]\\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]\\n   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]\\n   *\\n   * See also:\\n   *\\n   *    mean, median, max, min, prod, sum, variance\\n   *\\n   * @param {Array | Matrix} array\\n   *                        A single matrix or or multiple scalar values\\n   * @param {string} [normalization='unbiased']\\n   *                        Determines how to normalize the variance.\\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\\n   * @param dimension {number | BigNumber}\\n   *                        Determines the axis to compute the standard deviation for a matrix\\n   * @return {*} The standard deviation\\n   */\\n  return typed(name, {\\n    // std([a, b, c, d, ...])\\n    'Array | Matrix': _std,\\n    // std([a, b, c, d, ...], normalization)\\n    'Array | Matrix, string': _std,\\n    // std([a, b, c, c, ...], dim)\\n    'Array | Matrix, number | BigNumber': _std,\\n    // std([a, b, c, c, ...], dim, normalization)\\n    'Array | Matrix, number | BigNumber, string': _std,\\n    // std(a, b, c, d, ...)\\n    '...': function _(args) {\\n      return _std(args);\\n    }\\n  });\\n\\n  function _std(array, normalization) {\\n    if (array.length === 0) {\\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\\n    }\\n\\n    try {\\n      return sqrt(variance.apply(null, arguments));\\n    } catch (err) {\\n      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {\\n        throw new TypeError(err.message.replace(' variance', ' std'));\\n      } else {\\n        throw err;\\n      }\\n    }\\n  }\\n});\\nexports.createStd = createStd;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createStd\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_std\",\"array\",\"normalization\",\"length\",\"SyntaxError\",\"sqrt\",\"variance\",\"apply\",\"arguments\",\"err\",\"TypeError\",\"message\",\"indexOf\",\"replace\",\"typed\",\"_\",\"args\"]\n}\n"]