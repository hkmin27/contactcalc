["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/probability/gamma.js"],"~:js","shadow$provide[539]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createGamma=void 0;var q=b(38);c=b(25);var f=b(50);b=(0,c.factory)(\"gamma\",\"typed config multiplyScalar pow BigNumber Complex\".split(\" \"),function(u){function k(n){if(8>n)return new l([1,1,2,6,24,120,720,5040][n]);var r=p.precision+(Math.log(n.toNumber())|0),v=l.clone({precision:r});if(1===n%2)return n.times(k(new l(n-1)));r=n;v=new v(n);for(n=n.toNumber();2<r;)r-=2,n+=r,v=v.times(n);return new l(v.toPrecision(l.precision))}\nvar t=u.typed,p=u.config,g=u.multiplyScalar,d=u.pow,l=u.BigNumber,h=u.Complex;return t(\"gamma\",{number:f.gammaNumber,Complex:function(n){if(0===n.im)return this(n.re);n=new h(n.re-1,n.im);for(var r=new h(f.gammaP[0],0),v=1;v<f.gammaP.length;++v){var C=n.re+v,z=C*C+n.im*n.im;0!==z?(r.re+=f.gammaP[v]*C/z,r.im+=-(f.gammaP[v]*n.im)/z):r.re=0>f.gammaP[v]?-Infinity:Infinity}v=new h(n.re+f.gammaG+.5,n.im);C=Math.sqrt(2*Math.PI);n.re+=.5;n=d(v,n);0===n.im?n.re*=C:(0!==n.re&&(n.re*=C),n.im*=C);C=Math.exp(-v.re);\nv.re=C*Math.cos(-v.im);v.im=C*Math.sin(-v.im);return g(g(n,v),r)},BigNumber:function(n){if(n.isInteger())return n.isNegative()||n.isZero()?new l(Infinity):k(n.minus(1));if(!n.isFinite())return new l(n.isNegative()?NaN:Infinity);throw Error(\"Integer BigNumber expected\");},\"Array | Matrix\":function(n){return(0,q.deepMap)(n,this)}})});a.createGamma=b}","~:source","shadow$provide[539] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGamma = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      pow = _ref.pow,\n      _BigNumber = _ref.BigNumber,\n      _Complex = _ref.Complex;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  return typed(name, {\n    number: _index.gammaNumber,\n    Complex: function Complex(n) {\n      if (n.im === 0) {\n        return this(n.re);\n      }\n\n      n = new _Complex(n.re - 1, n.im);\n      var x = new _Complex(_index.gammaP[0], 0);\n\n      for (var i = 1; i < _index.gammaP.length; ++i) {\n        var real = n.re + i; // x += p[i]/(n+i)\n\n        var den = real * real + n.im * n.im;\n\n        if (den !== 0) {\n          x.re += _index.gammaP[i] * real / den;\n          x.im += -(_index.gammaP[i] * n.im) / den;\n        } else {\n          x.re = _index.gammaP[i] < 0 ? -Infinity : Infinity;\n        }\n      }\n\n      var t = new _Complex(n.re + _index.gammaG + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      n.re += 0.5;\n      var result = pow(t, n);\n\n      if (result.im === 0) {\n        // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re === 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n\n      var r = Math.exp(-t.re); // exp(-t)\n\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n      return multiplyScalar(multiplyScalar(result, t), x);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return (0, _collection.deepMap)(n, this);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\n    var Big = _BigNumber.clone({\n      precision: precision\n    });\n\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});\nexports.createGamma = createGamma;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["im","precision","Complex","__esModule","createGamma","value","number","BigNumber","re"]],"~:compiled-at",1619135724025,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$probability$gamma.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/probability/gamma.js\"],\n\"sourcesContent\":[\"shadow$provide[539] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createGamma = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'gamma';\\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      multiplyScalar = _ref.multiplyScalar,\\n      pow = _ref.pow,\\n      _BigNumber = _ref.BigNumber,\\n      _Complex = _ref.Complex;\\n\\n  /**\\n   * Compute the gamma function of a value using Lanczos approximation for\\n   * small values, and an extended Stirling approximation for large values.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.gamma(n)\\n   *\\n   * Examples:\\n   *\\n   *    math.gamma(5)       // returns 24\\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\\n   *\\n   * See also:\\n   *\\n   *    combinations, factorial, permutations\\n   *\\n   * @param {number | Array | Matrix} n   A real or complex number\\n   * @return {number | Array | Matrix}    The gamma of `n`\\n   */\\n  return typed(name, {\\n    number: _index.gammaNumber,\\n    Complex: function Complex(n) {\\n      if (n.im === 0) {\\n        return this(n.re);\\n      }\\n\\n      n = new _Complex(n.re - 1, n.im);\\n      var x = new _Complex(_index.gammaP[0], 0);\\n\\n      for (var i = 1; i < _index.gammaP.length; ++i) {\\n        var real = n.re + i; // x += p[i]/(n+i)\\n\\n        var den = real * real + n.im * n.im;\\n\\n        if (den !== 0) {\\n          x.re += _index.gammaP[i] * real / den;\\n          x.im += -(_index.gammaP[i] * n.im) / den;\\n        } else {\\n          x.re = _index.gammaP[i] < 0 ? -Infinity : Infinity;\\n        }\\n      }\\n\\n      var t = new _Complex(n.re + _index.gammaG + 0.5, n.im);\\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\\n      n.re += 0.5;\\n      var result = pow(t, n);\\n\\n      if (result.im === 0) {\\n        // sqrt(2*PI)*result\\n        result.re *= twoPiSqrt;\\n      } else if (result.re === 0) {\\n        result.im *= twoPiSqrt;\\n      } else {\\n        result.re *= twoPiSqrt;\\n        result.im *= twoPiSqrt;\\n      }\\n\\n      var r = Math.exp(-t.re); // exp(-t)\\n\\n      t.re = r * Math.cos(-t.im);\\n      t.im = r * Math.sin(-t.im);\\n      return multiplyScalar(multiplyScalar(result, t), x);\\n    },\\n    BigNumber: function BigNumber(n) {\\n      if (n.isInteger()) {\\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\\n      }\\n\\n      if (!n.isFinite()) {\\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\\n      }\\n\\n      throw new Error('Integer BigNumber expected');\\n    },\\n    'Array | Matrix': function ArrayMatrix(n) {\\n      return (0, _collection.deepMap)(n, this);\\n    }\\n  });\\n  /**\\n   * Calculate factorial for a BigNumber\\n   * @param {BigNumber} n\\n   * @returns {BigNumber} Returns the factorial of n\\n   */\\n\\n  function bigFactorial(n) {\\n    if (n < 8) {\\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\\n    }\\n\\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\\n\\n    var Big = _BigNumber.clone({\\n      precision: precision\\n    });\\n\\n    if (n % 2 === 1) {\\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\\n    }\\n\\n    var p = n;\\n    var prod = new Big(n);\\n    var sum = n.toNumber();\\n\\n    while (p > 2) {\\n      p -= 2;\\n      sum += p;\\n      prod = prod.times(sum);\\n    }\\n\\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\\n  }\\n});\\nexports.createGamma = createGamma;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createGamma\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"bigFactorial\",\"n\",\"_BigNumber\",\"precision\",\"config\",\"Math\",\"log\",\"toNumber\",\"Big\",\"clone\",\"times\",\"p\",\"prod\",\"sum\",\"toPrecision\",\"typed\",\"multiplyScalar\",\"pow\",\"BigNumber\",\"_Complex\",\"Complex\",\"number\",\"gammaNumber\",\"im\",\"re\",\"x\",\"gammaP\",\"i\",\"length\",\"real\",\"den\",\"Infinity\",\"t\",\"gammaG\",\"twoPiSqrt\",\"sqrt\",\"PI\",\"result\",\"r\",\"exp\",\"cos\",\"sin\",\"isInteger\",\"isNegative\",\"isZero\",\"minus\",\"isFinite\",\"NaN\",\"Error\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]