["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js"],"~:js","shadow$provide[90]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAlgorithm06=void 0;c=b(25);var q=b(22),f=b(38);b=(0,c.factory)(\"algorithm06\",[\"typed\",\"equalScalar\"],function(u){var k=u.typed,t=u.equalScalar;return function(p,g,d){var l=p._values,h=p._size,n=p._datatype,r=g._values,v=g._size,C=g._datatype;if(h.length!==v.length)throw new q.DimensionError(h.length,v.length);if(h[0]!==v[0]||h[1]!==v[1])throw new RangeError(\"Dimension mismatch. Matrix A (\"+h+\") must match Matrix B (\"+\nv+\")\");v=h[0];h=h[1];var z=t,w=0,B=d;if(\"string\"===typeof n&&n===C){var x=n;z=k.find(t,[x,x]);w=k.convert(0,x);B=k.find(d,[x,x])}d=l&&r?[]:void 0;l=[];n=[];r=d?[]:void 0;C=[];for(var D=[],F=0;F<h;F++){n[F]=l.length;var E=F+1;(0,f.scatter)(p,F,C,r,D,E,l,B);(0,f.scatter)(g,F,C,r,D,E,l,B);if(r)for(var G=n[F];G<l.length;){var I=l[G];D[I]===E?(I=r[I],z(I,w)?l.splice(G,1):(d.push(I),G++)):l.splice(G,1)}else for(G=n[F];G<l.length;)D[l[G]]!==E?l.splice(G,1):G++}n[h]=l.length;return p.createSparseMatrix({values:d,\nindex:l,ptr:n,size:[v,h],datatype:x})}});a.createAlgorithm06=b}","~:source","shadow$provide[90] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAlgorithm06 = void 0;\n\nvar _factory = require(\"../../../utils/factory.js\");\n\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\n\nvar _collection = require(\"../../../utils/collection.js\");\n\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nvar createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});\nexports.createAlgorithm06 = createAlgorithm06;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["values","index","__esModule","value","createAlgorithm06","datatype","size","ptr"]],"~:compiled-at",1619135723776,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm06.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js\"],\n\"sourcesContent\":[\"shadow$provide[90] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAlgorithm06 = void 0;\\n\\nvar _factory = require(\\\"../../../utils/factory.js\\\");\\n\\nvar _DimensionError = require(\\\"../../../error/DimensionError.js\\\");\\n\\nvar _collection = require(\\\"../../../utils/collection.js\\\");\\n\\nvar name = 'algorithm06';\\nvar dependencies = ['typed', 'equalScalar'];\\nvar createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equalScalar = _ref.equalScalar;\\n\\n  /**\\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\\n   *\\n   *\\n   *          \\u250c  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\\n   * C(i,j) = \\u2524\\n   *          \\u2514  0            ; otherwise\\n   *\\n   *\\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\\n   *\\n   * @return {Matrix}                    SparseMatrix (C)\\n   *\\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\\n   */\\n  return function algorithm06(a, b, callback) {\\n    // sparse matrix arrays\\n    var avalues = a._values;\\n    var asize = a._size;\\n    var adt = a._datatype; // sparse matrix arrays\\n\\n    var bvalues = b._values;\\n    var bsize = b._size;\\n    var bdt = b._datatype; // validate dimensions\\n\\n    if (asize.length !== bsize.length) {\\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\\n    } // check rows & columns\\n\\n\\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\\n    } // rows & columns\\n\\n\\n    var rows = asize[0];\\n    var columns = asize[1]; // datatype\\n\\n    var dt; // equal signature to use\\n\\n    var eq = equalScalar; // zero value\\n\\n    var zero = 0; // callback signature to use\\n\\n    var cf = callback; // process data types\\n\\n    if (typeof adt === 'string' && adt === bdt) {\\n      // datatype\\n      dt = adt; // find signature that matches (dt, dt)\\n\\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\\n\\n      zero = typed.convert(0, dt); // callback\\n\\n      cf = typed.find(callback, [dt, dt]);\\n    } // result arrays\\n\\n\\n    var cvalues = avalues && bvalues ? [] : undefined;\\n    var cindex = [];\\n    var cptr = []; // workspaces\\n\\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\\n\\n    var w = []; // marks indicating value in a given row has been updated\\n\\n    var u = []; // loop columns\\n\\n    for (var j = 0; j < columns; j++) {\\n      // update cptr\\n      cptr[j] = cindex.length; // columns mark\\n\\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\\n\\n      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\\n\\n      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\\n\\n      if (x) {\\n        // initialize first index in j\\n        var k = cptr[j]; // loop index in j\\n\\n        while (k < cindex.length) {\\n          // row\\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\\n\\n          if (u[i] === mark) {\\n            // value @ i\\n            var v = x[i]; // check for zero value\\n\\n            if (!eq(v, zero)) {\\n              // push value\\n              cvalues.push(v); // increment pointer\\n\\n              k++;\\n            } else {\\n              // remove value @ i, do not increment pointer\\n              cindex.splice(k, 1);\\n            }\\n          } else {\\n            // remove value @ i, do not increment pointer\\n            cindex.splice(k, 1);\\n          }\\n        }\\n      } else {\\n        // initialize first index in j\\n        var p = cptr[j]; // loop index in j\\n\\n        while (p < cindex.length) {\\n          // row\\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\\n\\n          if (u[r] !== mark) {\\n            // remove value @ i, do not increment pointer\\n            cindex.splice(p, 1);\\n          } else {\\n            // increment pointer\\n            p++;\\n          }\\n        }\\n      }\\n    } // update cptr\\n\\n\\n    cptr[columns] = cindex.length; // return sparse matrix\\n\\n    return a.createSparseMatrix({\\n      values: cvalues,\\n      index: cindex,\\n      ptr: cptr,\\n      size: [rows, columns],\\n      datatype: dt\\n    });\\n  };\\n});\\nexports.createAlgorithm06 = createAlgorithm06;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAlgorithm06\",\"_factory\",\"_DimensionError\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"equalScalar\",\"algorithm06\",\"a\",\"b\",\"callback\",\"avalues\",\"_values\",\"asize\",\"_size\",\"adt\",\"_datatype\",\"bvalues\",\"bsize\",\"bdt\",\"length\",\"DimensionError\",\"RangeError\",\"rows\",\"columns\",\"eq\",\"zero\",\"cf\",\"dt\",\"find\",\"convert\",\"cvalues\",\"undefined\",\"cindex\",\"cptr\",\"x\",\"w\",\"u\",\"j\",\"mark\",\"scatter\",\"k\",\"i\",\"v\",\"splice\",\"push\",\"p\",\"r\",\"createSparseMatrix\",\"values\",\"index\",\"ptr\",\"size\",\"datatype\"]\n}\n"]