["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/atan.js"],"~:js","shadow$provide[217]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAtan=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"atan\",[\"typed\"],function(f){f=f.typed;return f(\"atan\",{number:function(u){return Math.atan(u)},Complex:function(u){return u.atan()},BigNumber:function(u){return u.atan()},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this,!0)}})});a.createAtan=b}","~:source","shadow$provide[217] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'atan';\nvar dependencies = ['typed'];\nvar createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAtan = createAtan;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createAtan"]],"~:compiled-at",1619135723938,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$atan.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CACpFC,CAAAA,CAAQD,CAAKC,CAAAA,KAyBjB,OAAOA,EAAA,CAAM,MAAN,CAAc,CACnBC,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOC,KAAKC,CAAAA,IAAL,CAAUF,CAAV,CADkB,CADR,CAInBG,QAASA,QAAgB,CAACH,CAAD,CAAI,CAC3B,MAAOA,EAAEE,CAAAA,IAAF,EADoB,CAJV,CAOnBE,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAOA,EAAEE,CAAAA,IAAF,EADwB,CAPd,CAUnB,iBAAkBG,QAAoB,CAACL,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGP,CAAYa,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAVvB,CAAd,CA1BiF,CAA1D,CA0ChCb,EAAQI,CAAAA,UAAR,CAAqBA,CAxDyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/atan.js\"],\n\"sourcesContent\":[\"shadow$provide[217] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAtan = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'atan';\\nvar dependencies = ['typed'];\\nvar createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Calculate the inverse tangent of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.atan(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.atan(0.5)           // returns number 0.4636476090008061\\n   *    math.atan(math.tan(1.5)) // returns number 1.5\\n   *\\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\\n   *\\n   * See also:\\n   *\\n   *    tan, asin, acos\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\\n   */\\n  return typed('atan', {\\n    number: function number(x) {\\n      return Math.atan(x);\\n    },\\n    Complex: function Complex(x) {\\n      return x.atan();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.atan();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since atan(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    }\\n  });\\n});\\nexports.createAtan = createAtan;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAtan\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"x\",\"Math\",\"atan\",\"Complex\",\"BigNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]