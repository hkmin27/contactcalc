["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js"],"~:js","shadow$provide[71]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createUnaryPlus=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"unaryPlus\",[\"typed\",\"config\",\"BigNumber\"],function(u){var k=u.typed,t=u.config,p=u.BigNumber;return k(\"unaryPlus\",{number:f.unaryPlusNumber,Complex:function(g){return g},BigNumber:function(g){return g},Fraction:function(g){return g},Unit:function(g){return g.clone()},\"Array | Matrix\":function(g){return(0,q.deepMap)(g,this,!0)},\"boolean | string\":function(g){return\"BigNumber\"===\nt.number?new p(+g):+g}})});a.createUnaryPlus=b}","~:source","shadow$provide[71] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryPlus = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nvar createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  return typed(name, {\n    number: _index.unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n});\nexports.createUnaryPlus = createUnaryPlus;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","createUnaryPlus","number","BigNumber","Fraction"]],"~:compiled-at",1619135723767,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryPlus.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAAiC,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,QAAVA,CAAoB,WAApBA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACzFC,EAAQD,CAAKC,CAAAA,KAD4E,CAEzFC,EAASF,CAAKE,CAAAA,MAF2E,CAGzFC,EAAYH,CAAKG,CAAAA,SA0BrB,OAAOF,EAAA,CA/BEH,WA+BF,CAAY,CACjBM,OAAQR,CAAOS,CAAAA,eADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EADoB,CAFZ,CAKjBJ,UAAWA,QAAkB,CAACI,CAAD,CAAI,CAC/B,MAAOA,EADwB,CALhB,CAQjBC,SAAUA,QAAiB,CAACD,CAAD,CAAI,CAC7B,MAAOA,EADsB,CARd,CAWjBE,KAAMA,QAAa,CAACF,CAAD,CAAI,CACrB,MAAOA,EAAEG,CAAAA,KAAF,EADc,CAXN,CAcjB,iBAAkBC,QAAoB,CAACJ,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGZ,CAAYiB,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAdzB,CAkBjB,mBAAoBM,QAAsB,CAACN,CAAD,CAAI,CAE5C,MAAyB,WAAlB;AAAAL,CAAOE,CAAAA,MAAP,CAAgC,IAAID,CAAJ,CAAc,CAACI,CAAf,CAAhC,CAAoD,CAACA,CAFhB,CAlB7B,CAAZ,CA7BsF,CAA1D,CAqDrClB,EAAQI,CAAAA,eAAR,CAA0BA,CArEmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js\"],\n\"sourcesContent\":[\"shadow$provide[71] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createUnaryPlus = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'unaryPlus';\\nvar dependencies = ['typed', 'config', 'BigNumber'];\\nvar createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Unary plus operation.\\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.unaryPlus(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.unaryPlus(3.5)      // returns 3.5\\n   *    math.unaryPlus(1)     // returns 1\\n   *\\n   * See also:\\n   *\\n   *    unaryMinus, add, subtract\\n   *\\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\\n   *            Input value\\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\\n   */\\n  return typed(name, {\\n    number: _index.unaryPlusNumber,\\n    Complex: function Complex(x) {\\n      return x; // complex numbers are immutable\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x; // bignumbers are immutable\\n    },\\n    Fraction: function Fraction(x) {\\n      return x; // fractions are immutable\\n    },\\n    Unit: function Unit(x) {\\n      return x.clone();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since unaryPlus(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    },\\n    'boolean | string': function booleanString(x) {\\n      // convert to a number or bignumber\\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\\n    }\\n  });\\n});\\nexports.createUnaryPlus = createUnaryPlus;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createUnaryPlus\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"BigNumber\",\"number\",\"unaryPlusNumber\",\"Complex\",\"x\",\"Fraction\",\"Unit\",\"clone\",\"ArrayMatrix\",\"deepMap\",\"booleanString\"]\n}\n"]