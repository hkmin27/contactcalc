["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js"],"~:js","shadow$provide[102]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createSqrt=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"sqrt\",[\"config\",\"typed\",\"Complex\"],function(f){function u(g){return isNaN(g)?NaN:0<=g||k.predictable?Math.sqrt(g):(new p(g,0)).sqrt()}var k=f.config,t=f.typed,p=f.Complex;return t(\"sqrt\",{number:u,Complex:function(g){return g.sqrt()},BigNumber:function(g){return!g.isNegative()||k.predictable?g.sqrt():u(g.toNumber())},\"Array | Matrix\":function(g){return(0,\nq.deepMap)(g,this,!0)},Unit:function(g){return g.pow(.5)}})});a.createSqrt=b}","~:source","shadow$provide[102] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrt = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nvar createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});\nexports.createSqrt = createSqrt;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSqrt","Unit","Complex","__esModule","value","number","BigNumber"]],"~:compiled-at",1619135723785,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$sqrt.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,QAADA,CAAW,OAAXA,CAAoB,SAApBA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CA0DxFC,QAASA,EAAW,CAACC,CAAD,CAAI,CACtB,MAAIC,MAAA,CAAMD,CAAN,CAAJ,CACSE,GADT,CAEgB,CAAT,EAAIF,CAAJ,EAAcG,CAAOC,CAAAA,WAArB,CACEC,IAAKC,CAAAA,IAAL,CAAUN,CAAV,CADF,CAGoBM,CAAlB,IAAIC,CAAJ,CAAYP,CAAZ,CAAe,CAAf,CAAkBM,EAAAA,IAAlB,EANa,CA1DgE,IACpFH,EAASL,CAAKK,CAAAA,MADsE,CAEpFK,EAAQV,CAAKU,CAAAA,KAFuE,CAGpFD,EAAUT,CAAKS,CAAAA,OA0BnB,OAAOC,EAAA,CAAM,MAAN,CAAc,CACnBC,OAAQV,CADW,CAEnBQ,QAASA,QAAgB,CAACP,CAAD,CAAI,CAC3B,MAAOA,EAAEM,CAAAA,IAAF,EADoB,CAFV,CAKnBI,UAAWA,QAAkB,CAACV,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEW,CAAAA,UAAF,EAAL,EAAuBR,CAAOC,CAAAA,WAA9B,CACSJ,CAAEM,CAAAA,IAAF,EADT,CAISP,CAAA,CAAYC,CAAEY,CAAAA,QAAF,EAAZ,CALsB,CALd,CAanB,iBAAkBC,QAAoB,CAACb,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA;AAAGN,CAAYoB,CAAAA,OAAhB,EAAyBd,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAbvB,CAiBnBe,KAAMA,QAAa,CAACf,CAAD,CAAI,CAErB,MAAOA,EAAEgB,CAAAA,GAAF,CAAM,EAAN,CAFc,CAjBJ,CAAd,CA7BiF,CAA1D,CAoEhC5B,EAAQI,CAAAA,UAAR,CAAqBA,CAlFyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js\"],\n\"sourcesContent\":[\"shadow$provide[102] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSqrt = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'sqrt';\\nvar dependencies = ['config', 'typed', 'Complex'];\\nvar createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var config = _ref.config,\\n      typed = _ref.typed,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the square root of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.sqrt(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.sqrt(25)                // returns 5\\n   *    math.square(5)               // returns 25\\n   *    math.sqrt(-4)                // returns Complex 2i\\n   *\\n   * See also:\\n   *\\n   *    square, multiply, cube, cbrt, sqrtm\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\\n   *            Value for which to calculate the square root.\\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\\n   *            Returns the square root of `x`\\n   */\\n  return typed('sqrt', {\\n    number: _sqrtNumber,\\n    Complex: function Complex(x) {\\n      return x.sqrt();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      if (!x.isNegative() || config.predictable) {\\n        return x.sqrt();\\n      } else {\\n        // negative value -> downgrade to number to do complex value computation\\n        return _sqrtNumber(x.toNumber());\\n      }\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since sqrt(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    },\\n    Unit: function Unit(x) {\\n      // Someday will work for complex units when they are implemented\\n      return x.pow(0.5);\\n    }\\n  });\\n  /**\\n   * Calculate sqrt for a number\\n   * @param {number} x\\n   * @returns {number | Complex} Returns the square root of x\\n   * @private\\n   */\\n\\n  function _sqrtNumber(x) {\\n    if (isNaN(x)) {\\n      return NaN;\\n    } else if (x >= 0 || config.predictable) {\\n      return Math.sqrt(x);\\n    } else {\\n      return new Complex(x, 0).sqrt();\\n    }\\n  }\\n});\\nexports.createSqrt = createSqrt;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSqrt\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_sqrtNumber\",\"x\",\"isNaN\",\"NaN\",\"config\",\"predictable\",\"Math\",\"sqrt\",\"Complex\",\"typed\",\"number\",\"BigNumber\",\"isNegative\",\"toNumber\",\"ArrayMatrix\",\"deepMap\",\"Unit\",\"pow\"]\n}\n"]