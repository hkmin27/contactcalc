["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isNegative.js"],"~:js","shadow$provide[51]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIsNegative=void 0;var q=b(38);c=b(25);var f=b(50);b=(0,c.factory)(\"isNegative\",[\"typed\"],function(u){u=u.typed;return u(\"isNegative\",{number:f.isNegativeNumber,BigNumber:function(k){return k.isNeg()&&!k.isZero()&&!k.isNaN()},Fraction:function(k){return 0>k.s},Unit:function(k){return this(k.value)},\"Array | Matrix\":function(k){return(0,q.deepMap)(k,this)}})});a.createIsNegative=b}","~:source","shadow$provide[51] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsNegative = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nvar createIsNegative = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _index.isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsNegative = createIsNegative;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","createIsNegative","__esModule","value","number","BigNumber","Fraction"]],"~:compiled-at",1619135723754,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isNegative.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAEhC,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAEf,KAAIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAAkC,CAAC,CAAA,CAAGE,CAASE,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CACmB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAC1FC,CAAAA,CAAQD,CAAKC,CAAAA,KA+BjB,OAAOA,EAAA,CAlCEH,YAkCF,CAAY,CACjBI,OAAQN,CAAOO,CAAAA,gBADE,CAEjBC,UAAWA,QAAkB,CAACC,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,KAAF,EAAP,EAAoB,CAACD,CAAEE,CAAAA,MAAF,EAArB,EAAmC,CAACF,CAAEG,CAAAA,KAAF,EADL,CAFhB,CAKjBC,SAAUA,QAAiB,CAACJ,CAAD,CAAI,CAC7B,MAAa,EAAb,CAAOA,CAAEK,CAAAA,CADoB,CALd,CAQjBC,KAAMA,QAAa,CAACN,CAAD,CAAI,CACrB,MAAO,KAAA,CAAKA,CAAEb,CAAAA,KAAP,CADc,CARN,CAWjB,iBAAkBoB,QAAoB,CAACP,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,CAAYmB,CAAAA,OAAhB,EAAyBR,CAAzB,CAA4B,IAA5B,CADiC,CAXzB,CAAZ,CAhCuF,CAA1D,CAgDtChB,EAAQI,CAAAA,gBAAR,CAA2BA,CAhEkC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isNegative.js\"],\n\"sourcesContent\":[\"shadow$provide[51] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsNegative = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'isNegative';\\nvar dependencies = ['typed'];\\nvar createIsNegative = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is negative: smaller than zero.\\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isNegative(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isNegative(3)                     // returns false\\n   *    math.isNegative(-2)                    // returns true\\n   *    math.isNegative(0)                     // returns false\\n   *    math.isNegative(-0)                    // returns false\\n   *    math.isNegative(math.bignumber(2))     // returns false\\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\\n   *    math.isNegative('-2')                  // returns true\\n   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isPositive, isZero, isInteger\\n   *\\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\\n   * @return {boolean}  Returns true when `x` is larger than zero.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: _index.isNegativeNumber,\\n    BigNumber: function BigNumber(x) {\\n      return x.isNeg() && !x.isZero() && !x.isNaN();\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.s < 0; // It's enough to decide on the sign\\n    },\\n    Unit: function Unit(x) {\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsNegative = createIsNegative;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsNegative\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"isNegativeNumber\",\"BigNumber\",\"x\",\"isNeg\",\"isZero\",\"isNaN\",\"Fraction\",\"s\",\"Unit\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]