["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/seedrandom/lib/xor128.js"],"~:js","shadow$provide[545]=function(c,b,y,a){(function(q,f,u){function k(g){var d=this,l=\"\";d.x=0;d.y=0;d.z=0;d.w=0;d.next=function(){var h=d.x^d.x<<11;d.x=d.y;d.y=d.z;d.z=d.w;return d.w=d.w^d.w>>>19^h^h>>>8};g===(g|0)?d.x=g:l+=g;for(g=0;g<l.length+64;g++)d.x^=l.charCodeAt(g)|0,d.next()}function t(g,d){d.x=g.x;d.y=g.y;d.z=g.z;d.w=g.w;return d}function p(g,d){var l=new k(g);g=d&&d.state;d=function(){return(l.next()>>>0)/4294967296};d.double=function(){do{var h=l.next()>>>11,n=(l.next()>>>0)/4294967296;h=\n(h+n)/2097152}while(0===h);return h};d.int32=l.next;d.quick=d;g&&(\"object\"==typeof g&&t(g,l),d.state=function(){return t(l,{})});return d}f&&f.exports?f.exports=p:u&&u.amd?u(function(){return p}):this.xor128=p})(this,\"object\"==typeof y&&y,\"function\"==typeof define&&define)}","~:source","shadow$provide[545] = function(global,require,module,exports) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["z","w","next","xor128","int32","x","quick","y","state","double"]],"~:compiled-at",1619135724027,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$seedrandom$lib$xor128.js\",\n\"lineCount\":2,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/seedrandom/lib/xor128.js\"],\n\"sourcesContent\":[\"shadow$provide[545] = function(global,require,module,exports) {\\n// A Javascript implementaion of the \\\"xor128\\\" prng algorithm by\\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\\n\\n(function(global, module, define) {\\n\\nfunction XorGen(seed) {\\n  var me = this, strseed = '';\\n\\n  me.x = 0;\\n  me.y = 0;\\n  me.z = 0;\\n  me.w = 0;\\n\\n  // Set up generator function.\\n  me.next = function() {\\n    var t = me.x ^ (me.x << 11);\\n    me.x = me.y;\\n    me.y = me.z;\\n    me.z = me.w;\\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\\n  };\\n\\n  if (seed === (seed | 0)) {\\n    // Integer seed.\\n    me.x = seed;\\n  } else {\\n    // String seed.\\n    strseed += seed;\\n  }\\n\\n  // Mix in string seed, then discard an initial batch of 64 values.\\n  for (var k = 0; k < strseed.length + 64; k++) {\\n    me.x ^= strseed.charCodeAt(k) | 0;\\n    me.next();\\n  }\\n}\\n\\nfunction copy(f, t) {\\n  t.x = f.x;\\n  t.y = f.y;\\n  t.z = f.z;\\n  t.w = f.w;\\n  return t;\\n}\\n\\nfunction impl(seed, opts) {\\n  var xg = new XorGen(seed),\\n      state = opts && opts.state,\\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\\n  prng.double = function() {\\n    do {\\n      var top = xg.next() >>> 11,\\n          bot = (xg.next() >>> 0) / 0x100000000,\\n          result = (top + bot) / (1 << 21);\\n    } while (result === 0);\\n    return result;\\n  };\\n  prng.int32 = xg.next;\\n  prng.quick = prng;\\n  if (state) {\\n    if (typeof(state) == 'object') copy(state, xg);\\n    prng.state = function() { return copy(xg, {}); }\\n  }\\n  return prng;\\n}\\n\\nif (module && module.exports) {\\n  module.exports = impl;\\n} else if (define && define.amd) {\\n  define(function() { return impl; });\\n} else {\\n  this.xor128 = impl;\\n}\\n\\n})(\\n  this,\\n  (typeof module) == 'object' && module,    // present in node.js\\n  (typeof define) == 'function' && define   // present with an AMD loader\\n);\\n\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"define\",\"XorGen\",\"seed\",\"me\",\"strseed\",\"x\",\"y\",\"z\",\"w\",\"next\",\"me.next\",\"t\",\"k\",\"length\",\"charCodeAt\",\"copy\",\"f\",\"impl\",\"opts\",\"xg\",\"state\",\"prng\",\"double\",\"prng.double\",\"top\",\"bot\",\"result\",\"int32\",\"quick\",\"prng.state\",\"amd\",\"xor128\"]\n}\n"]