["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/utils/number.js"],"~:js","shadow$provide[19]=function(c,b,y,a){function q(r){return\"boolean\"===typeof r?!0:isFinite(r)?r===Math.round(r):!1}function f(r,v,C){var z={2:\"0b\",8:\"0o\",16:\"0x\"}[v],w=\"\";if(C){if(1>C)throw Error(\"size must be in greater than 0\");if(!q(C))throw Error(\"size must be an integer\");if(r>Math.pow(2,C-1)-1||r<-Math.pow(2,C-1))throw Error(\"Value must be in range [-2^\".concat(C-1,\", 2^\").concat(C-1,\"-1]\"));if(!q(r))throw Error(\"Value must be an integer\");0>r&&(r+=Math.pow(2,C));w=\"i\".concat(C)}C=\"\";0>r&&(r=\n-r,C=\"-\");return\"\".concat(C).concat(z).concat(r.toString(v)).concat(w)}function u(r){var v=String(r).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);if(!v)throw new SyntaxError(\"Invalid number \"+r);r=v[1];var C=v[2],z=parseFloat(v[4]||\"0\");v=C.indexOf(\".\");z+=-1!==v?v-1:C.length-1;v=C.replace(\".\",\"\").replace(/^0*/,function(w){z-=w.length;return\"\"}).replace(/0*$/,\"\").split(\"\").map(function(w){return parseInt(w)});0===v.length&&(v.push(0),z++);return{sign:r,coefficients:v,exponent:z}}function k(r,\nv){if(isNaN(r)||!isFinite(r))return String(r);r=u(r);r=d(r,v);var C=r.exponent,z=r.coefficients,w=0===C%3?C:0>C?C-3-C%3:C-C%3;if((0,h.isNumber)(v))for(;v>z.length||C-w+1>z.length;)z.push(0);else for(var B=Math.abs(C-w)-(z.length-1),x=0;x<B;x++)z.push(0);x=Math.abs(C-w);for(B=1;0<x;)B++,x--;x=z.slice(B).join(\"\");v=(0,h.isNumber)(v)&&x.length||x.match(/[1-9]/)?\".\"+x:\"\";v=z.slice(0,B).join(\"\")+v+\"e\"+(0<=C?\"+\":\"\")+w.toString();return r.sign+v}function t(r,v){if(isNaN(r)||!isFinite(r))return String(r);\nr=u(r);r=\"number\"===typeof v?d(r,r.exponent+1+v):r;var C=r.coefficients,z=r.exponent+1;v=z+(v||0);C.length<v&&(C=C.concat(l(v-C.length)));0>z&&(C=l(-z+1).concat(C),z=1);z<C.length&&C.splice(z,0,0===z?\"0.\":\".\");return r.sign+C.join(\"\")}function p(r,v){if(isNaN(r)||!isFinite(r))return String(r);r=u(r);r=v?d(r,v):r;var C=r.coefficients,z=r.exponent;C.length<v&&(C=C.concat(l(v-C.length)));v=C.shift();return r.sign+v+(0<C.length?\".\"+C.join(\"\"):\"\")+\"e\"+(0<=z?\"+\":\"\")+z}function g(r,v,C){if(isNaN(r)||!isFinite(r))return String(r);\nvar z=C&&void 0!==C.lowerExp?C.lowerExp:-3,w=C&&void 0!==C.upperExp?C.upperExp:5;C=u(r);C=v?d(C,v):C;if(C.exponent<z||C.exponent>=w)return p(r,v);r=C.coefficients;z=C.exponent;r.length<v&&(r=r.concat(l(v-r.length)));r=r.concat(l(z-r.length+1+(r.length<v?v-r.length:0)));r=l(-z).concat(r);v=0<z?z:0;v<r.length-1&&r.splice(v+1,0,\".\");return C.sign+r.join(\"\")}function d(r,v){r={sign:r.sign,coefficients:r.coefficients,exponent:r.exponent};for(var C=r.coefficients;0>=v;)C.unshift(0),r.exponent++,v++;if(C.length>\nv&&5<=C.splice(v,C.length-v)[0])for(--v,C[v]++;10===C[v];)C.pop(),0===v&&(C.unshift(0),r.exponent++,v++),v--,C[v]++;return r}function l(r){for(var v=[],C=0;C<r;C++)v.push(0);return v}Object.defineProperty(a,\"__esModule\",{value:!0});a.isInteger=q;a.format=function(r,v){if(\"function\"===typeof v)return v(r);if(Infinity===r)return\"Infinity\";if(-Infinity===r)return\"-Infinity\";if(isNaN(r))return\"NaN\";var C=\"auto\";if(v){v.notation&&(C=v.notation);if((0,h.isNumber)(v))var z=v;else(0,h.isNumber)(v.precision)&&\n(z=v.precision);if(v.wordSize){var w=v.wordSize;if(\"number\"!==typeof w)throw Error('Option \"wordSize\" must be a number');}}switch(C){case \"fixed\":return t(r,z);case \"exponential\":return p(r,z);case \"engineering\":return k(r,z);case \"bin\":return f(r,2,w);case \"oct\":return f(r,8,w);case \"hex\":return f(r,16,w);case \"auto\":return g(r,z,v&&v).replace(/((\\.\\d*?)(0+))($|e)/,function(B,x,D,F,E){return\".\"!==D?D+E:E});default:throw Error('Unknown notation \"'+C+'\". Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n}};a.splitNumber=u;a.toEngineering=k;a.toFixed=t;a.toExponential=p;a.toPrecision=g;a.roundDigits=d;a.digits=function(r){return r.toExponential().replace(/e.*$/,\"\").replace(/^0\\.?0*|\\./,\"\").length};a.nearlyEqual=function(r,v,C){if(null===C||void 0===C)return r===v;if(r===v)return!0;if(isNaN(r)||isNaN(v))return!1;if(isFinite(r)&&isFinite(v)){var z=Math.abs(r-v);return z<n?!0:z<=Math.max(Math.abs(r),Math.abs(v))*C}return!1};a.tanh=a.sinh=a.cosh=a.atanh=a.asinh=a.acosh=a.DBL_EPSILON=a.expm1=a.cbrt=a.log1p=\na.log10=a.log2=a.sign=void 0;var h=b(14);a.sign=Math.sign||function(r){return 0<r?1:0>r?-1:0};a.log2=Math.log2||function(r){return Math.log(r)/Math.LN2};a.log10=Math.log10||function(r){return Math.log(r)/Math.LN10};a.log1p=Math.log1p||function(r){return Math.log(r+1)};a.cbrt=Math.cbrt||function(r){if(0===r)return r;var v=0>r;v&&(r=-r);if(isFinite(r)){var C=Math.exp(Math.log(r)/3);C=(r/(C*C)+2*C)/3}else C=r;return v?-C:C};a.expm1=Math.expm1||function(r){return 2E-4<=r||-2E-4>=r?Math.exp(r)-1:r+r*r/\n2+r*r*r/6};var n=Number.EPSILON||2.220446049250313E-16;a.DBL_EPSILON=n;a.acosh=Math.acosh||function(r){return Math.log(Math.sqrt(r*r-1)+r)};a.asinh=Math.asinh||function(r){return Math.log(Math.sqrt(r*r+1)+r)};a.atanh=Math.atanh||function(r){return Math.log((1+r)/(1-r))/2};a.cosh=Math.cosh||function(r){return(Math.exp(r)+Math.exp(-r))/2};a.sinh=Math.sinh||function(r){return(Math.exp(r)-Math.exp(-r))/2};a.tanh=Math.tanh||function(r){r=Math.exp(2*r);return(r-1)/(r+1)}}","~:source","shadow$provide[19] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isInteger = isInteger;\nexports.format = format;\nexports.splitNumber = splitNumber;\nexports.toEngineering = toEngineering;\nexports.toFixed = toFixed;\nexports.toExponential = toExponential;\nexports.toPrecision = toPrecision;\nexports.roundDigits = roundDigits;\nexports.digits = digits;\nexports.nearlyEqual = nearlyEqual;\nexports.tanh = exports.sinh = exports.cosh = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = exports.expm1 = exports.cbrt = exports.log1p = exports.log10 = exports.log2 = exports.sign = void 0;\n\nvar _is = require(\"./is.js\");\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nfunction isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nvar sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.sign = sign;\n\nvar log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.log2 = log2;\n\nvar log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.log10 = log10;\n\nvar log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\n\nexports.log1p = log1p;\n\nvar cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\n\nexports.cbrt = cbrt;\n\nvar expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\n\nexports.expm1 = expm1;\n\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + Math.pow(2, size);\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  var sign = '';\n\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nfunction format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if ((0, _is.isNumber)(options)) {\n      precision = options;\n    } else if ((0, _is.isNumber)(options.precision)) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\n\nfunction splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nfunction toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if ((0, _is.isNumber)(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\n\nfunction toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\n\nfunction toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\n\nfunction toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\n\nfunction roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nfunction digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\n\nvar DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexports.DBL_EPSILON = DBL_EPSILON;\n\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\n\nvar acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\n\nexports.acosh = acosh;\n\nvar asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\n\nexports.asinh = asinh;\n\nvar atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.atanh = atanh;\n\nvar cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.cosh = cosh;\n\nvar sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\n\nexports.sinh = sinh;\n\nvar tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\nexports.tanh = tanh;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is"]],"~:properties",["^5",["log1p","cosh","digits","nearlyEqual","toFixed","cbrt","__esModule","coefficients","acosh","toEngineering","roundDigits","toPrecision","value","splitNumber","log10","isInteger","DBL_EPSILON","expm1","toExponential","atanh","sinh","asinh","exponent","sign","tanh","log2","format"]],"~:compiled-at",1619135723712,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$utils$number.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/utils/number.js\"],\n\"sourcesContent\":[\"shadow$provide[19] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.isInteger = isInteger;\\nexports.format = format;\\nexports.splitNumber = splitNumber;\\nexports.toEngineering = toEngineering;\\nexports.toFixed = toFixed;\\nexports.toExponential = toExponential;\\nexports.toPrecision = toPrecision;\\nexports.roundDigits = roundDigits;\\nexports.digits = digits;\\nexports.nearlyEqual = nearlyEqual;\\nexports.tanh = exports.sinh = exports.cosh = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = exports.expm1 = exports.cbrt = exports.log1p = exports.log10 = exports.log2 = exports.sign = void 0;\\n\\nvar _is = require(\\\"./is.js\\\");\\n\\n/**\\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\\n */\\n\\n/**\\n * Check if a number is integer\\n * @param {number | boolean} value\\n * @return {boolean} isInteger\\n */\\nfunction isInteger(value) {\\n  if (typeof value === 'boolean') {\\n    return true;\\n  }\\n\\n  return isFinite(value) ? value === Math.round(value) : false;\\n}\\n/**\\n * Calculate the sign of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nvar sign = /* #__PURE__ */Math.sign || function (x) {\\n  if (x > 0) {\\n    return 1;\\n  } else if (x < 0) {\\n    return -1;\\n  } else {\\n    return 0;\\n  }\\n};\\n/**\\n * Calculate the base-2 logarithm of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.sign = sign;\\n\\nvar log2 = /* #__PURE__ */Math.log2 || function log2(x) {\\n  return Math.log(x) / Math.LN2;\\n};\\n/**\\n * Calculate the base-10 logarithm of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.log2 = log2;\\n\\nvar log10 = /* #__PURE__ */Math.log10 || function log10(x) {\\n  return Math.log(x) / Math.LN10;\\n};\\n/**\\n * Calculate the natural logarithm of a number + 1\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.log10 = log10;\\n\\nvar log1p = /* #__PURE__ */Math.log1p || function (x) {\\n  return Math.log(x + 1);\\n};\\n/**\\n * Calculate cubic root for a number\\n *\\n * Code from es6-shim.js:\\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\\n *\\n * @param {number} x\\n * @returns {number} Returns the cubic root of x\\n */\\n\\n\\nexports.log1p = log1p;\\n\\nvar cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\\n  if (x === 0) {\\n    return x;\\n  }\\n\\n  var negate = x < 0;\\n  var result;\\n\\n  if (negate) {\\n    x = -x;\\n  }\\n\\n  if (isFinite(x)) {\\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\\n\\n    result = (x / (result * result) + 2 * result) / 3;\\n  } else {\\n    result = x;\\n  }\\n\\n  return negate ? -result : result;\\n};\\n/**\\n * Calculates exponentiation minus 1\\n * @param {number} x\\n * @return {number} res\\n */\\n\\n\\nexports.cbrt = cbrt;\\n\\nvar expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\\n};\\n/**\\n * Formats a number in a given base\\n * @param {number} n\\n * @param {number} base\\n * @param {number} size\\n * @returns {string}\\n */\\n\\n\\nexports.expm1 = expm1;\\n\\nfunction formatNumberToBase(n, base, size) {\\n  var prefixes = {\\n    2: '0b',\\n    8: '0o',\\n    16: '0x'\\n  };\\n  var prefix = prefixes[base];\\n  var suffix = '';\\n\\n  if (size) {\\n    if (size < 1) {\\n      throw new Error('size must be in greater than 0');\\n    }\\n\\n    if (!isInteger(size)) {\\n      throw new Error('size must be an integer');\\n    }\\n\\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\\n      throw new Error(\\\"Value must be in range [-2^\\\".concat(size - 1, \\\", 2^\\\").concat(size - 1, \\\"-1]\\\"));\\n    }\\n\\n    if (!isInteger(n)) {\\n      throw new Error('Value must be an integer');\\n    }\\n\\n    if (n < 0) {\\n      n = n + Math.pow(2, size);\\n    }\\n\\n    suffix = \\\"i\\\".concat(size);\\n  }\\n\\n  var sign = '';\\n\\n  if (n < 0) {\\n    n = -n;\\n    sign = '-';\\n  }\\n\\n  return \\\"\\\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\\n}\\n/**\\n * Convert a number to a formatted string representation.\\n *\\n * Syntax:\\n *\\n *    format(value)\\n *    format(value, options)\\n *    format(value, precision)\\n *    format(value, fn)\\n *\\n * Where:\\n *\\n *    {number} value   The value to be formatted\\n *    {Object} options An object with formatting options. Available options:\\n *                     {string} notation\\n *                         Number notation. Choose from:\\n *                         'fixed'          Always use regular number notation.\\n *                                          For example '123.40' and '14000000'\\n *                         'exponential'    Always use exponential notation.\\n *                                          For example '1.234e+2' and '1.4e+7'\\n *                         'engineering'    Always use engineering notation.\\n *                                          For example '123.4e+0' and '14.0e+6'\\n *                         'auto' (default) Regular number notation for numbers\\n *                                          having an absolute value between\\n *                                          `lowerExp` and `upperExp` bounds, and\\n *                                          uses exponential notation elsewhere.\\n *                                          Lower bound is included, upper bound\\n *                                          is excluded.\\n *                                          For example '123.4' and '1.4e7'.\\n *                         'bin', 'oct, or\\n *                         'hex'            Format the number using binary, octal,\\n *                                          or hexadecimal notation.\\n *                                          For example '0b1101' and '0x10fe'.\\n *                     {number} wordSize    The word size in bits to use for formatting\\n *                                          in binary, octal, or hexadecimal notation.\\n *                                          To be used only with 'bin', 'oct', or 'hex'\\n *                                          values for 'notation' option. When this option\\n *                                          is defined the value is formatted as a signed\\n *                                          twos complement integer of the given word size\\n *                                          and the size suffix is appended to the output.\\n *                                          For example\\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\\n *                                          Default value is undefined.\\n *                     {number} precision   A number between 0 and 16 to round\\n *                                          the digits of the number.\\n *                                          In case of notations 'exponential',\\n *                                          'engineering', and 'auto',\\n *                                          `precision` defines the total\\n *                                          number of significant digits returned.\\n *                                          In case of notation 'fixed',\\n *                                          `precision` defines the number of\\n *                                          significant digits after the decimal\\n *                                          point.\\n *                                          `precision` is undefined by default,\\n *                                          not rounding any digits.\\n *                     {number} lowerExp    Exponent determining the lower boundary\\n *                                          for formatting a value with an exponent\\n *                                          when `notation='auto`.\\n *                                          Default value is `-3`.\\n *                     {number} upperExp    Exponent determining the upper boundary\\n *                                          for formatting a value with an exponent\\n *                                          when `notation='auto`.\\n *                                          Default value is `5`.\\n *    {Function} fn    A custom formatting function. Can be used to override the\\n *                     built-in notations. Function `fn` is called with `value` as\\n *                     parameter and must return a string. Is useful for example to\\n *                     format all values inside a matrix in a particular way.\\n *\\n * Examples:\\n *\\n *    format(6.4)                                        // '6.4'\\n *    format(1240000)                                    // '1.24e6'\\n *    format(1/3)                                        // '0.3333333333333333'\\n *    format(1/3, 3)                                     // '0.333'\\n *    format(21385, 2)                                   // '21000'\\n *    format(12.071, {notation: 'fixed'})                // '12'\\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\\n *\\n * @param {number} value\\n * @param {Object | Function | number} [options]\\n * @return {string} str The formatted value\\n */\\n\\n\\nfunction format(value, options) {\\n  if (typeof options === 'function') {\\n    // handle format(value, fn)\\n    return options(value);\\n  } // handle special cases\\n\\n\\n  if (value === Infinity) {\\n    return 'Infinity';\\n  } else if (value === -Infinity) {\\n    return '-Infinity';\\n  } else if (isNaN(value)) {\\n    return 'NaN';\\n  } // default values for options\\n\\n\\n  var notation = 'auto';\\n  var precision;\\n  var wordSize;\\n\\n  if (options) {\\n    // determine notation from options\\n    if (options.notation) {\\n      notation = options.notation;\\n    } // determine precision from options\\n\\n\\n    if ((0, _is.isNumber)(options)) {\\n      precision = options;\\n    } else if ((0, _is.isNumber)(options.precision)) {\\n      precision = options.precision;\\n    }\\n\\n    if (options.wordSize) {\\n      wordSize = options.wordSize;\\n\\n      if (typeof wordSize !== 'number') {\\n        throw new Error('Option \\\"wordSize\\\" must be a number');\\n      }\\n    }\\n  } // handle the various notations\\n\\n\\n  switch (notation) {\\n    case 'fixed':\\n      return toFixed(value, precision);\\n\\n    case 'exponential':\\n      return toExponential(value, precision);\\n\\n    case 'engineering':\\n      return toEngineering(value, precision);\\n\\n    case 'bin':\\n      return formatNumberToBase(value, 2, wordSize);\\n\\n    case 'oct':\\n      return formatNumberToBase(value, 8, wordSize);\\n\\n    case 'hex':\\n      return formatNumberToBase(value, 16, wordSize);\\n\\n    case 'auto':\\n      // remove trailing zeros after the decimal point\\n      return toPrecision(value, precision, options && options).replace(/((\\\\.\\\\d*?)(0+))($|e)/, function () {\\n        var digits = arguments[2];\\n        var e = arguments[4];\\n        return digits !== '.' ? digits + e : e;\\n      });\\n\\n    default:\\n      throw new Error('Unknown notation \\\"' + notation + '\\\". ' + 'Choose \\\"auto\\\", \\\"exponential\\\", \\\"fixed\\\", \\\"bin\\\", \\\"oct\\\", or \\\"hex.');\\n  }\\n}\\n/**\\n * Split a number into sign, coefficients, and exponent\\n * @param {number | string} value\\n * @return {SplitValue}\\n *              Returns an object containing sign, coefficients, and exponent\\n */\\n\\n\\nfunction splitNumber(value) {\\n  // parse the input value\\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\\\d+\\\\.?\\\\d*)(e([+-]?\\\\d+))?$/);\\n\\n  if (!match) {\\n    throw new SyntaxError('Invalid number ' + value);\\n  }\\n\\n  var sign = match[1];\\n  var digits = match[2];\\n  var exponent = parseFloat(match[4] || '0');\\n  var dot = digits.indexOf('.');\\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\\n  .replace(/^0*/, function (zeros) {\\n    // remove leading zeros, add their count to the exponent\\n    exponent -= zeros.length;\\n    return '';\\n  }).replace(/0*$/, '') // remove trailing zeros\\n  .split('').map(function (d) {\\n    return parseInt(d);\\n  });\\n\\n  if (coefficients.length === 0) {\\n    coefficients.push(0);\\n    exponent++;\\n  }\\n\\n  return {\\n    sign: sign,\\n    coefficients: coefficients,\\n    exponent: exponent\\n  };\\n}\\n/**\\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\\n * @param {number | string} value\\n * @param {number} [precision]        Optional number of significant figures to return.\\n */\\n\\n\\nfunction toEngineering(value, precision) {\\n  if (isNaN(value) || !isFinite(value)) {\\n    return String(value);\\n  }\\n\\n  var split = splitNumber(value);\\n  var rounded = roundDigits(split, precision);\\n  var e = rounded.exponent;\\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\\n\\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\\n\\n  if ((0, _is.isNumber)(precision)) {\\n    // add zeroes to give correct sig figs\\n    while (precision > c.length || e - newExp + 1 > c.length) {\\n      c.push(0);\\n    }\\n  } else {\\n    // concatenate coefficients with necessary zeros\\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\\n\\n    for (var i = 0; i < missingZeros; i++) {\\n      c.push(0);\\n    }\\n  } // find difference in exponents\\n\\n\\n  var expDiff = Math.abs(e - newExp);\\n  var decimalIdx = 1; // push decimal index over by expDiff times\\n\\n  while (expDiff > 0) {\\n    decimalIdx++;\\n    expDiff--;\\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\\n  // otherwise concat with the rest of the coefficients\\n\\n\\n  var decimals = c.slice(decimalIdx).join('');\\n  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\\n  return rounded.sign + str;\\n}\\n/**\\n * Format a number with fixed notation.\\n * @param {number | string} value\\n * @param {number} [precision=undefined]  Optional number of decimals after the\\n *                                        decimal point. null by default.\\n */\\n\\n\\nfunction toFixed(value, precision) {\\n  if (isNaN(value) || !isFinite(value)) {\\n    return String(value);\\n  }\\n\\n  var splitValue = splitNumber(value);\\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\\n  var c = rounded.coefficients;\\n  var p = rounded.exponent + 1; // exponent may have changed\\n  // append zeros if needed\\n\\n  var pp = p + (precision || 0);\\n\\n  if (c.length < pp) {\\n    c = c.concat(zeros(pp - c.length));\\n  } // prepend zeros if needed\\n\\n\\n  if (p < 0) {\\n    c = zeros(-p + 1).concat(c);\\n    p = 1;\\n  } // insert a dot if needed\\n\\n\\n  if (p < c.length) {\\n    c.splice(p, 0, p === 0 ? '0.' : '.');\\n  }\\n\\n  return rounded.sign + c.join('');\\n}\\n/**\\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\\n * @param {number | string} value\\n * @param {number} [precision]  Number of digits in formatted output.\\n *                              If not provided, the maximum available digits\\n *                              is used.\\n */\\n\\n\\nfunction toExponential(value, precision) {\\n  if (isNaN(value) || !isFinite(value)) {\\n    return String(value);\\n  } // round if needed, else create a clone\\n\\n\\n  var split = splitNumber(value);\\n  var rounded = precision ? roundDigits(split, precision) : split;\\n  var c = rounded.coefficients;\\n  var e = rounded.exponent; // append zeros if needed\\n\\n  if (c.length < precision) {\\n    c = c.concat(zeros(precision - c.length));\\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\\n\\n\\n  var first = c.shift();\\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\\n}\\n/**\\n * Format a number with a certain precision\\n * @param {number | string} value\\n * @param {number} [precision=undefined] Optional number of digits.\\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\\n *                                       By default:\\n *                                         lowerExp = -3 (incl)\\n *                                         upper = +5 (excl)\\n * @return {string}\\n */\\n\\n\\nfunction toPrecision(value, precision, options) {\\n  if (isNaN(value) || !isFinite(value)) {\\n    return String(value);\\n  } // determine lower and upper bound for exponential notation.\\n\\n\\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\\n  var split = splitNumber(value);\\n  var rounded = precision ? roundDigits(split, precision) : split;\\n\\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\\n    // exponential notation\\n    return toExponential(value, precision);\\n  } else {\\n    var c = rounded.coefficients;\\n    var e = rounded.exponent; // append trailing zeros\\n\\n    if (c.length < precision) {\\n      c = c.concat(zeros(precision - c.length));\\n    } // append trailing zeros\\n    // TODO: simplify the next statement\\n\\n\\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\\n\\n    c = zeros(-e).concat(c);\\n    var dot = e > 0 ? e : 0;\\n\\n    if (dot < c.length - 1) {\\n      c.splice(dot + 1, 0, '.');\\n    }\\n\\n    return rounded.sign + c.join('');\\n  }\\n}\\n/**\\n * Round the number of digits of a number *\\n * @param {SplitValue} split       A value split with .splitNumber(value)\\n * @param {number} precision  A positive integer\\n * @return {SplitValue}\\n *              Returns an object containing sign, coefficients, and exponent\\n *              with rounded digits\\n */\\n\\n\\nfunction roundDigits(split, precision) {\\n  // create a clone\\n  var rounded = {\\n    sign: split.sign,\\n    coefficients: split.coefficients,\\n    exponent: split.exponent\\n  };\\n  var c = rounded.coefficients; // prepend zeros if needed\\n\\n  while (precision <= 0) {\\n    c.unshift(0);\\n    rounded.exponent++;\\n    precision++;\\n  }\\n\\n  if (c.length > precision) {\\n    var removed = c.splice(precision, c.length - precision);\\n\\n    if (removed[0] >= 5) {\\n      var i = precision - 1;\\n      c[i]++;\\n\\n      while (c[i] === 10) {\\n        c.pop();\\n\\n        if (i === 0) {\\n          c.unshift(0);\\n          rounded.exponent++;\\n          i++;\\n        }\\n\\n        i--;\\n        c[i]++;\\n      }\\n    }\\n  }\\n\\n  return rounded;\\n}\\n/**\\n * Create an array filled with zeros.\\n * @param {number} length\\n * @return {Array}\\n */\\n\\n\\nfunction zeros(length) {\\n  var arr = [];\\n\\n  for (var i = 0; i < length; i++) {\\n    arr.push(0);\\n  }\\n\\n  return arr;\\n}\\n/**\\n * Count the number of significant digits of a number.\\n *\\n * For example:\\n *   2.34 returns 3\\n *   0.0034 returns 2\\n *   120.5e+30 returns 4\\n *\\n * @param {number} value\\n * @return {number} digits   Number of significant digits\\n */\\n\\n\\nfunction digits(value) {\\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\\n  .replace(/^0\\\\.?0*|\\\\./, '') // remove decimal point and leading zeros\\n  .length;\\n}\\n/**\\n * Minimum number added to one that makes the result different than one\\n */\\n\\n\\nvar DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\\n/**\\n * Compares two floating point numbers.\\n * @param {number} x          First value to compare\\n * @param {number} y          Second value to compare\\n * @param {number} [epsilon]  The maximum relative difference between x and y\\n *                            If epsilon is undefined or null, the function will\\n *                            test whether x and y are exactly equal.\\n * @return {boolean} whether the two numbers are nearly equal\\n*/\\n\\nexports.DBL_EPSILON = DBL_EPSILON;\\n\\nfunction nearlyEqual(x, y, epsilon) {\\n  // if epsilon is null or undefined, test whether x and y are exactly equal\\n  if (epsilon === null || epsilon === undefined) {\\n    return x === y;\\n  }\\n\\n  if (x === y) {\\n    return true;\\n  } // NaN\\n\\n\\n  if (isNaN(x) || isNaN(y)) {\\n    return false;\\n  } // at this point x and y should be finite\\n\\n\\n  if (isFinite(x) && isFinite(y)) {\\n    // check numbers are very close, needed when comparing numbers near zero\\n    var diff = Math.abs(x - y);\\n\\n    if (diff < DBL_EPSILON) {\\n      return true;\\n    } else {\\n      // use relative error\\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\\n    }\\n  } // Infinite and Number or negative Infinite and positive Infinite cases\\n\\n\\n  return false;\\n}\\n/**\\n * Calculate the hyperbolic arccos of a number\\n * @param {number} x\\n * @return {number}\\n */\\n\\n\\nvar acosh = Math.acosh || function (x) {\\n  return Math.log(Math.sqrt(x * x - 1) + x);\\n};\\n\\nexports.acosh = acosh;\\n\\nvar asinh = Math.asinh || function (x) {\\n  return Math.log(Math.sqrt(x * x + 1) + x);\\n};\\n/**\\n * Calculate the hyperbolic arctangent of a number\\n * @param {number} x\\n * @return {number}\\n */\\n\\n\\nexports.asinh = asinh;\\n\\nvar atanh = Math.atanh || function (x) {\\n  return Math.log((1 + x) / (1 - x)) / 2;\\n};\\n/**\\n * Calculate the hyperbolic cosine of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.atanh = atanh;\\n\\nvar cosh = Math.cosh || function (x) {\\n  return (Math.exp(x) + Math.exp(-x)) / 2;\\n};\\n/**\\n * Calculate the hyperbolic sine of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.cosh = cosh;\\n\\nvar sinh = Math.sinh || function (x) {\\n  return (Math.exp(x) - Math.exp(-x)) / 2;\\n};\\n/**\\n * Calculate the hyperbolic tangent of a number\\n * @param {number} x\\n * @returns {number}\\n */\\n\\n\\nexports.sinh = sinh;\\n\\nvar tanh = Math.tanh || function (x) {\\n  var e = Math.exp(2 * x);\\n  return (e - 1) / (e + 1);\\n};\\n\\nexports.tanh = tanh;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isInteger\",\"value\",\"isFinite\",\"Math\",\"round\",\"formatNumberToBase\",\"n\",\"base\",\"size\",\"prefix\",\"prefixes\",\"suffix\",\"Error\",\"pow\",\"concat\",\"sign\",\"toString\",\"splitNumber\",\"match\",\"String\",\"toLowerCase\",\"SyntaxError\",\"digits\",\"exponent\",\"parseFloat\",\"dot\",\"indexOf\",\"length\",\"coefficients\",\"replace\",\"zeros\",\"split\",\"map\",\"d\",\"parseInt\",\"push\",\"toEngineering\",\"precision\",\"isNaN\",\"rounded\",\"roundDigits\",\"e\",\"c\",\"newExp\",\"_is\",\"isNumber\",\"missingZeros\",\"abs\",\"i\",\"expDiff\",\"decimalIdx\",\"decimals\",\"slice\",\"join\",\"decimalVal\",\"str\",\"toFixed\",\"splitValue\",\"p\",\"pp\",\"splice\",\"toExponential\",\"first\",\"shift\",\"toPrecision\",\"options\",\"lowerExp\",\"undefined\",\"upperExp\",\"unshift\",\"removed\",\"pop\",\"arr\",\"Object\",\"defineProperty\",\"format\",\"Infinity\",\"notation\",\"wordSize\",\"nearlyEqual\",\"x\",\"y\",\"epsilon\",\"diff\",\"DBL_EPSILON\",\"max\",\"tanh\",\"sinh\",\"cosh\",\"atanh\",\"asinh\",\"acosh\",\"expm1\",\"cbrt\",\"log1p\",\"log10\",\"log2\",\"log\",\"LN2\",\"LN10\",\"negate\",\"result\",\"exp\",\"Number\",\"EPSILON\",\"sqrt\"]\n}\n"]