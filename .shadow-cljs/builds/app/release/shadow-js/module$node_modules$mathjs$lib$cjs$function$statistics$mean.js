["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/mean.js"],"~:js","shadow$provide[531]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMean=void 0;var q=b(38),f=b(24);c=b(25);var u=b(154);b=(0,c.factory)(\"mean\",[\"typed\",\"add\",\"divide\"],function(k){function t(l){var h,n=0;(0,q.deepForEach)(l,function(r){try{h=void 0===h?r:g(h,r),n++}catch(v){throw(0,u.improveErrorMessage)(v,\"mean\",r);}});if(0===n)throw Error(\"Cannot calculate the mean of an empty array\");return d(h,n)}var p=k.typed,g=k.add,d=k.divide;return p(\"mean\",{\"Array | Matrix\":t,\n\"Array | Matrix, number | BigNumber\":function(l,h){try{var n=(0,q.reduce)(l,h,g),r=Array.isArray(l)?(0,f.arraySize)(l):l.size();return d(n,r[h])}catch(v){throw(0,u.improveErrorMessage)(v,\"mean\");}},\"...\":function(l){if((0,q.containsCollections)(l))throw new TypeError(\"Scalar values expected in function mean\");return t(l)}})});a.createMean=b}","~:source","shadow$provide[531] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMean = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nvar createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = (0, _collection.reduce)(array, dim, add);\n      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    (0, _collection.deepForEach)(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n});\nexports.createMean = createMean;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage"]],"~:properties",["^5",["createMean","__esModule","value"]],"~:compiled-at",1619135724022,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$mean.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAAlB,CAEIQ,EAASR,CAAA,CAAQ,EAAR,CAETS,EAAAA,CAAWT,CAAA,CAAQ,EAAR,CAEf,KAAIU,EAAuBV,CAAA,CAAQ,GAAR,CAIvBM,EAAAA,CAA4B,CAAC,CAAA,CAAGG,CAASE,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,KAAVA,CAAiB,QAAjBA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAwExFC,QAASA,EAAK,CAACC,CAAD,CAAQ,CACpB,IAAIC,CAAJ,CACIC,EAAM,CACV,EAAC,CAAA,CAAGX,CAAYY,CAAAA,WAAhB,EAA6BH,CAA7B,CAAoC,QAAS,CAACX,CAAD,CAAQ,CACnD,GAAI,CACFY,CACA,CADcG,IAAAA,EAAR,GAAAH,CAAA,CAAoBZ,CAApB,CAA4BgB,CAAA,CAAIJ,CAAJ,CAASZ,CAAT,CAClC,CAAAa,CAAA,EAFE,CAGF,MAAOI,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGZ,CAAqBa,CAAAA,mBAAzB,EAA8CD,CAA9C,CAAmD,MAAnD,CAA2DjB,CAA3D,CAAN,CADY,CAJqC,CAArD,CASA,IAAY,CAAZ,GAAIa,CAAJ,CACE,KAAUM,MAAJ,CAAU,6CAAV,CAAN,CAGF,MAAOC,EAAA,CAAOR,CAAP,CAAYC,CAAZ,CAhBa,CAxEkE,IACpFQ,EAAQZ,CAAKY,CAAAA,KADuE,CAEpFL,EAAMP,CAAKO,CAAAA,GAFyE,CAGpFI,EAASX,CAAKW,CAAAA,MA6BlB,OAAOC,EAAA,CAlCEd,MAkCF,CAAY,CAEjB,iBAAkBG,CAFD;AAIjB,qCAmBFY,QAAkB,CAACX,CAAD,CAAQY,CAAR,CAAa,CAC7B,GAAI,CACF,IAAIX,EAAM,CAAC,CAAA,CAAGV,CAAYsB,CAAAA,MAAhB,EAAwBb,CAAxB,CAA+BY,CAA/B,CAAoCP,CAApC,CAAV,CACIS,EAAIC,KAAMC,CAAAA,OAAN,CAAchB,CAAd,CAAA,CAAuB,CAAC,CAAA,CAAGR,CAAOyB,CAAAA,SAAX,EAAsBjB,CAAtB,CAAvB,CAAsDA,CAAMkB,CAAAA,IAAN,EAC9D,OAAOT,EAAA,CAAOR,CAAP,CAAYa,CAAA,CAAEF,CAAF,CAAZ,CAHL,CAIF,MAAON,CAAP,CAAY,CACZ,KAAM,CAAC,CAAA,CAAGZ,CAAqBa,CAAAA,mBAAzB,EAA8CD,CAA9C,CAAmD,MAAnD,CAAN,CADY,CALe,CAvBZ,CAMjB,MAAOa,QAAU,CAACC,CAAD,CAAO,CACtB,GAAI,CAAC,CAAA,CAAG7B,CAAY8B,CAAAA,mBAAhB,EAAqCD,CAArC,CAAJ,CACE,KAAM,KAAIE,SAAJ,CAAc,yCAAd,CAAN,CAGF,MAAOvB,EAAA,CAAMqB,CAAN,CALe,CANP,CAAZ,CAhCiF,CAA1D,CA2FhClC,EAAQI,CAAAA,UAAR,CAAqBA,CA7GyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/mean.js\"],\n\"sourcesContent\":[\"shadow$provide[531] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMean = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _improveErrorMessage = require(\\\"./utils/improveErrorMessage.js\\\");\\n\\nvar name = 'mean';\\nvar dependencies = ['typed', 'add', 'divide'];\\nvar createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      add = _ref.add,\\n      divide = _ref.divide;\\n\\n  /**\\n   * Compute the mean value of matrix or a list with values.\\n   * In case of a multi dimensional array, the mean of the flattened array\\n   * will be calculated. When `dim` is provided, the maximum over the selected\\n   * dimension will be calculated. Parameter `dim` is zero-based.\\n   *\\n   * Syntax:\\n   *\\n   *     math.mean(a, b, c, ...)\\n   *     math.mean(A)\\n   *     math.mean(A, dim)\\n   *\\n   * Examples:\\n   *\\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\\n   *\\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\\n   *\\n   * See also:\\n   *\\n   *     median, min, max, sum, prod, std, variance\\n   *\\n   * @param {... *} args  A single matrix or or multiple scalar values\\n   * @return {*} The mean of all values\\n   */\\n  return typed(name, {\\n    // mean([a, b, c, d, ...])\\n    'Array | Matrix': _mean,\\n    // mean([a, b, c, d, ...], dim)\\n    'Array | Matrix, number | BigNumber': _nmeanDim,\\n    // mean(a, b, c, d, ...)\\n    '...': function _(args) {\\n      if ((0, _collection.containsCollections)(args)) {\\n        throw new TypeError('Scalar values expected in function mean');\\n      }\\n\\n      return _mean(args);\\n    }\\n  });\\n  /**\\n   * Calculate the mean value in an n-dimensional array, returning a\\n   * n-1 dimensional array\\n   * @param {Array} array\\n   * @param {number} dim\\n   * @return {number} mean\\n   * @private\\n   */\\n\\n  function _nmeanDim(array, dim) {\\n    try {\\n      var sum = (0, _collection.reduce)(array, dim, add);\\n      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();\\n      return divide(sum, s[dim]);\\n    } catch (err) {\\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');\\n    }\\n  }\\n  /**\\n   * Recursively calculate the mean value in an n-dimensional array\\n   * @param {Array} array\\n   * @return {number} mean\\n   * @private\\n   */\\n\\n\\n  function _mean(array) {\\n    var sum;\\n    var num = 0;\\n    (0, _collection.deepForEach)(array, function (value) {\\n      try {\\n        sum = sum === undefined ? value : add(sum, value);\\n        num++;\\n      } catch (err) {\\n        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);\\n      }\\n    });\\n\\n    if (num === 0) {\\n      throw new Error('Cannot calculate the mean of an empty array');\\n    }\\n\\n    return divide(sum, num);\\n  }\\n});\\nexports.createMean = createMean;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMean\",\"_collection\",\"_array\",\"_factory\",\"_improveErrorMessage\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_mean\",\"array\",\"sum\",\"num\",\"deepForEach\",\"undefined\",\"add\",\"err\",\"improveErrorMessage\",\"Error\",\"divide\",\"typed\",\"_nmeanDim\",\"dim\",\"reduce\",\"s\",\"Array\",\"isArray\",\"arraySize\",\"size\",\"_\",\"args\",\"containsCollections\",\"TypeError\"]\n}\n"]