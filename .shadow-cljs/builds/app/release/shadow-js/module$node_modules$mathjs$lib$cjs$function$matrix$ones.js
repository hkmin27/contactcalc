["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/ones.js"],"~:js","shadow$provide[136]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createOnes=void 0;var q=b(14),f=b(19),u=b(24);c=b(25);c=(0,c.factory)(\"ones\",[\"typed\",\"config\",\"matrix\",\"BigNumber\"],function(k){function t(r,v){var C=p(r)?new n(1):1;g(r);if(v)return v=h(v),0<r.length?v.resize(r,C):v;v=[];return 0<r.length?(0,u.resize)(v,r,C):v}function p(r){var v=!1;r.forEach(function(C,z,w){(0,q.isBigNumber)(C)&&(v=!0,w[z]=C.toNumber())});return v}function g(r){r.forEach(function(v){if(\"number\"!==\ntypeof v||!(0,f.isInteger)(v)||0>v)throw Error(\"Parameters in function ones must be positive integers\");})}var d=k.typed,l=k.config,h=k.matrix,n=k.BigNumber;return d(\"ones\",{\"\":function(){return\"Array\"===l.matrix?t([]):t([],\"default\")},\"...number | BigNumber | string\":function(r){if(\"string\"===typeof r[r.length-1]){var v=r.pop();return t(r,v)}return\"Array\"===l.matrix?t(r):t(r,\"default\")},Array:t,Matrix:function(r){var v=r.storage();return t(r.valueOf(),v)},\"Array | Matrix, string\":function(r,v){return t(r.valueOf(),\nv)}})});a.createOnes=c}","~:source","shadow$provide[136] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOnes = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createOnes = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return (0, _array.resize)(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if ((0, _is.isBigNumber)(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});\nexports.createOnes = createOnes;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createOnes","__esModule","value","Matrix","Array"]],"~:compiled-at",1619135723871,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$ones.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/ones.js\"],\n\"sourcesContent\":[\"shadow$provide[136] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createOnes = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'ones';\\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\\nvar createOnes = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      matrix = _ref.matrix,\\n      BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Create a matrix filled with ones. The created matrix can have one or\\n   * multiple dimensions.\\n   *\\n   * Syntax:\\n   *\\n   *    math.ones(m)\\n   *    math.ones(m, format)\\n   *    math.ones(m, n)\\n   *    math.ones(m, n, format)\\n   *    math.ones([m, n])\\n   *    math.ones([m, n], format)\\n   *    math.ones([m, n, p, ...])\\n   *    math.ones([m, n, p, ...], format)\\n   *\\n   * Examples:\\n   *\\n   *    math.ones(3)                   // returns [1, 1, 1]\\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\\n   *\\n   *    const A = [[1, 2, 3], [4, 5, 6]]\\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\\n   *\\n   * See also:\\n   *\\n   *    zeros, identity, size, range\\n   *\\n   * @param {...number | Array} size    The size of each dimension of the matrix\\n   * @param {string} [format]           The Matrix storage format\\n   *\\n   * @return {Array | Matrix | number}  A matrix filled with ones\\n   */\\n  return typed('ones', {\\n    '': function _() {\\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\\n    },\\n    // math.ones(m, n, p, ..., format)\\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\\n    '...number | BigNumber | string': function numberBigNumberString(size) {\\n      var last = size[size.length - 1];\\n\\n      if (typeof last === 'string') {\\n        var format = size.pop();\\n        return _ones(size, format);\\n      } else if (config.matrix === 'Array') {\\n        return _ones(size);\\n      } else {\\n        return _ones(size, 'default');\\n      }\\n    },\\n    Array: _ones,\\n    Matrix: function Matrix(size) {\\n      var format = size.storage();\\n      return _ones(size.valueOf(), format);\\n    },\\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\\n      return _ones(size.valueOf(), format);\\n    }\\n  });\\n  /**\\n   * Create an Array or Matrix with ones\\n   * @param {Array} size\\n   * @param {string} [format='default']\\n   * @return {Array | Matrix}\\n   * @private\\n   */\\n\\n  function _ones(size, format) {\\n    var hasBigNumbers = _normalize(size);\\n\\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\\n\\n    _validate(size);\\n\\n    if (format) {\\n      // return a matrix\\n      var m = matrix(format);\\n\\n      if (size.length > 0) {\\n        return m.resize(size, defaultValue);\\n      }\\n\\n      return m;\\n    } else {\\n      // return an Array\\n      var arr = [];\\n\\n      if (size.length > 0) {\\n        return (0, _array.resize)(arr, size, defaultValue);\\n      }\\n\\n      return arr;\\n    }\\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\\n\\n\\n  function _normalize(size) {\\n    var hasBigNumbers = false;\\n    size.forEach(function (value, index, arr) {\\n      if ((0, _is.isBigNumber)(value)) {\\n        hasBigNumbers = true;\\n        arr[index] = value.toNumber();\\n      }\\n    });\\n    return hasBigNumbers;\\n  } // validate arguments\\n\\n\\n  function _validate(size) {\\n    size.forEach(function (value) {\\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\\n        throw new Error('Parameters in function ones must be positive integers');\\n      }\\n    });\\n  }\\n});\\nexports.createOnes = createOnes;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createOnes\",\"_is\",\"_number\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_ones\",\"size\",\"format\",\"defaultValue\",\"_normalize\",\"hasBigNumbers\",\"BigNumber\",\"_validate\",\"m\",\"matrix\",\"length\",\"resize\",\"arr\",\"forEach\",\"index\",\"isBigNumber\",\"toNumber\",\"isInteger\",\"Error\",\"typed\",\"config\",\"_\",\"numberBigNumberString\",\"last\",\"pop\",\"Array\",\"Matrix\",\"storage\",\"valueOf\",\"ArrayMatrixString\"]\n}\n"]