["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/function/compile.js"],"~:js","shadow$provide[272]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCompile=void 0;var q=b(38);c=b(25);c=(0,c.factory)(\"compile\",[\"typed\",\"parse\"],function(f){var u=f.typed,k=f.parse;return u(\"compile\",{string:function(t){return k(t).compile()},\"Array | Matrix\":function(t){return(0,q.deepMap)(t,function(p){return k(p).compile()})}})});a.createCompile=c}","~:source","shadow$provide[272] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompile = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'compile';\nvar dependencies = ['typed', 'parse'];\nvar createCompile = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\n   *     code1.evaluate() // 5\n   *\n   *     let scope = {a: 3, b: 4}\n   *     const code2 = math.compile('a * b') // 12\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].evaluate() // 12\n   *\n   * See also:\n   *\n   *    parse, evaluate\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      return parse(expr).compile();\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n});\nexports.createCompile = createCompile;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["string","__esModule","createCompile","value"]],"~:compiled-at",1619135723973,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$function$compile.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA+B,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,OAAVA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAAQF,CAAKE,CAAAA,KAoCjB,OAAOD,EAAA,CAxCEH,SAwCF,CAAY,CACjBK,OAAQA,QAAe,CAACC,CAAD,CAAO,CAC5B,MAAOF,EAAA,CAAME,CAAN,CAAYC,CAAAA,OAAZ,EADqB,CADb,CAIjB,iBAAkBC,QAAoB,CAACF,CAAD,CAAO,CAC3C,MAAO,CAAC,CAAA,CAAGT,CAAYY,CAAAA,OAAhB,EAAyBH,CAAzB,CAA+B,QAAS,CAACI,CAAD,CAAQ,CACrD,MAAON,EAAA,CAAMM,CAAN,CAAaH,CAAAA,OAAb,EAD8C,CAAhD,CADoC,CAJ5B,CAAZ,CAtCoF,CAA1D,CAiDnCf,EAAQI,CAAAA,aAAR,CAAwBA,CA/DsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/function/compile.js\"],\n\"sourcesContent\":[\"shadow$provide[272] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCompile = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'compile';\\nvar dependencies = ['typed', 'parse'];\\nvar createCompile = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      parse = _ref.parse;\\n\\n  /**\\n   * Parse and compile an expression.\\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\\n   * compiled expression.\\n   *\\n   * Syntax:\\n   *\\n   *     math.compile(expr)                       // returns one node\\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\\n   *\\n   * Examples:\\n   *\\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\\n   *     code1.evaluate() // 5\\n   *\\n   *     let scope = {a: 3, b: 4}\\n   *     const code2 = math.compile('a * b') // 12\\n   *     code2.evaluate(scope) // 12\\n   *     scope.a = 5\\n   *     code2.evaluate(scope) // 20\\n   *\\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\\n   *     nodes[2].evaluate() // 12\\n   *\\n   * See also:\\n   *\\n   *    parse, evaluate\\n   *\\n   * @param {string | string[] | Array | Matrix} expr\\n   *            The expression to be compiled\\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\\n   *            An object with the compiled expression\\n   * @throws {Error}\\n   */\\n  return typed(name, {\\n    string: function string(expr) {\\n      return parse(expr).compile();\\n    },\\n    'Array | Matrix': function ArrayMatrix(expr) {\\n      return (0, _collection.deepMap)(expr, function (entry) {\\n        return parse(entry).compile();\\n      });\\n    }\\n  });\\n});\\nexports.createCompile = createCompile;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCompile\",\"_collection\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"parse\",\"string\",\"expr\",\"compile\",\"ArrayMatrix\",\"deepMap\",\"entry\"]\n}\n"]