["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/median.js"],"~:js","shadow$provide[532]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMedian=void 0;var q=b(38),f=b(24);c=b(25);var u=b(154);b=(0,c.factory)(\"median\",[\"typed\",\"add\",\"divide\",\"compare\",\"partitionSelect\"],function(k){function t(v){try{v=(0,f.flatten)(v.valueOf());var C=v.length;if(0===C)throw Error(\"Cannot calculate median of an empty array\");if(0===C%2){C=C/2-1;for(var z=h(v,C+1),w=v[C],B=0;B<C;++B)0<l(v[B],w)&&(w=v[B]);return r(w,z)}B=h(v,(C-1)/2);return n(B)}catch(x){throw(0,\nu.improveErrorMessage)(x,\"median\");}}var p=k.typed,g=k.add,d=k.divide,l=k.compare,h=k.partitionSelect,n=p({\"number | BigNumber | Complex | Unit\":function(v){return v}}),r=p({\"number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit\":function(v,C){return d(g(v,C),2)}});return p(\"median\",{\"Array | Matrix\":t,\"Array | Matrix, number | BigNumber\":function(v,C){throw Error(\"median(A, dim) is not yet supported\");},\"...\":function(v){if((0,q.containsCollections)(v))throw new TypeError(\"Scalar values expected in function median\");\nreturn t(v)}})});a.createMedian=b}","~:source","shadow$provide[532] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMedian = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\n\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nvar createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      compare = _ref.compare,\n      partitionSelect = _ref.partitionSelect;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = (0, _array.flatten)(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});\nexports.createMedian = createMedian;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage"]],"~:properties",["^5",["__esModule","value","createMedian"]],"~:compiled-at",1619135724022,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$median.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/median.js\"],\n\"sourcesContent\":[\"shadow$provide[532] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMedian = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _improveErrorMessage = require(\\\"./utils/improveErrorMessage.js\\\");\\n\\nvar name = 'median';\\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\\nvar createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      add = _ref.add,\\n      divide = _ref.divide,\\n      compare = _ref.compare,\\n      partitionSelect = _ref.partitionSelect;\\n\\n  /**\\n   * Recursively calculate the median of an n-dimensional array\\n   * @param {Array} array\\n   * @return {Number} median\\n   * @private\\n   */\\n  function _median(array) {\\n    try {\\n      array = (0, _array.flatten)(array.valueOf());\\n      var num = array.length;\\n\\n      if (num === 0) {\\n        throw new Error('Cannot calculate median of an empty array');\\n      }\\n\\n      if (num % 2 === 0) {\\n        // even: return the average of the two middle values\\n        var mid = num / 2 - 1;\\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\\n\\n        var left = array[mid];\\n\\n        for (var i = 0; i < mid; ++i) {\\n          if (compare(array[i], left) > 0) {\\n            left = array[i];\\n          }\\n        }\\n\\n        return middle2(left, right);\\n      } else {\\n        // odd: return the middle value\\n        var m = partitionSelect(array, (num - 1) / 2);\\n        return middle(m);\\n      }\\n    } catch (err) {\\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');\\n    }\\n  } // helper function to type check the middle value of the array\\n\\n\\n  var middle = typed({\\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\\n      return value;\\n    }\\n  }); // helper function to type check the two middle value of the array\\n\\n  var middle2 = typed({\\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\\n      return divide(add(left, right), 2);\\n    }\\n  });\\n  /**\\n   * Compute the median of a matrix or a list with values. The values are\\n   * sorted and the middle value is returned. In case of an even number of\\n   * values, the average of the two middle values is returned.\\n   * Supported types of values are: Number, BigNumber, Unit\\n   *\\n   * In case of a (multi dimensional) array or matrix, the median of all\\n   * elements will be calculated.\\n   *\\n   * Syntax:\\n   *\\n   *     math.median(a, b, c, ...)\\n   *     math.median(A)\\n   *\\n   * Examples:\\n   *\\n   *     math.median(5, 2, 7)        // returns 5\\n   *     math.median([3, -1, 5, 7])  // returns 4\\n   *\\n   * See also:\\n   *\\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\\n   *\\n   * @param {... *} args  A single matrix or or multiple scalar values\\n   * @return {*} The median\\n   */\\n\\n  return typed(name, {\\n    // median([a, b, c, d, ...])\\n    'Array | Matrix': _median,\\n    // median([a, b, c, d, ...], dim)\\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\\n      // TODO: implement median(A, dim)\\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\\n    },\\n    // median(a, b, c, d, ...)\\n    '...': function _(args) {\\n      if ((0, _collection.containsCollections)(args)) {\\n        throw new TypeError('Scalar values expected in function median');\\n      }\\n\\n      return _median(args);\\n    }\\n  });\\n});\\nexports.createMedian = createMedian;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMedian\",\"_collection\",\"_array\",\"_factory\",\"_improveErrorMessage\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_median\",\"array\",\"flatten\",\"valueOf\",\"num\",\"length\",\"Error\",\"mid\",\"right\",\"partitionSelect\",\"left\",\"i\",\"compare\",\"middle2\",\"m\",\"middle\",\"err\",\"improveErrorMessage\",\"typed\",\"add\",\"divide\",\"numberBigNumberComplexUnit\",\"numberBigNumberComplexUnitNumberBigNumberComplexUnit\",\"ArrayMatrixNumberBigNumber\",\"dim\",\"_\",\"args\",\"containsCollections\",\"TypeError\"]\n}\n"]