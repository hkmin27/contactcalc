["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/map.js"],"~:js","shadow$provide[134]=function(c,b,y,a){function q(u,k){var t=(0,f.maxArgumentCount)(k);return function l(g,d){return Array.isArray(g)?g.map(function(h,n){return l(h,d.concat(n))}):1===t?k(g):2===t?k(g,d):k(g,d,u)}(u,[])}Object.defineProperty(a,\"__esModule\",{value:!0});a.createMap=void 0;var f=b(127);c=b(25);c=(0,c.factory)(\"map\",[\"typed\"],function(u){u=u.typed;return u(\"map\",{\"Array, function\":q,\"Matrix, function\":function(k,t){return k.map(t)}})});a.createMap=c}","~:source","shadow$provide[134] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMap = void 0;\n\nvar _function = require(\"../../utils/function.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'map';\nvar dependencies = ['typed'];\nvar createMap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nexports.createMap = createMap;\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = (0, _function.maxArgumentCount)(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$utils$function"]],"~:properties",["^5",["createMap","__esModule","value"]],"~:compiled-at",1619135723866,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$map.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CA0D9DC,QAASA,EAAI,CAACC,CAAD,CAAQC,CAAR,CAAkB,CAE7B,IAAIC,EAAO,CAAC,CAAA,CAAGC,CAAUC,CAAAA,gBAAd,EAAgCH,CAAhC,CAqBX,OAnBcI,SAASA,EAAO,CAACC,CAAD,CAAQC,CAAR,CAAe,CAC3C,MAAIC,MAAMC,CAAAA,OAAN,CAAcH,CAAd,CAAJ,CACSA,CAAMI,CAAAA,GAAN,CAAU,QAAS,CAACC,CAAD,CAAQC,CAAR,CAAW,CAEnC,MAAOP,EAAA,CAAQM,CAAR,CAAeJ,CAAMM,CAAAA,MAAN,CAAaD,CAAb,CAAf,CAF4B,CAA9B,CADT,CAOe,CAAb,GAAIV,CAAJ,CACSD,CAAA,CAASK,CAAT,CADT,CAEoB,CAAb,GAAIJ,CAAJ,CACED,CAAA,CAASK,CAAT,CAAgBC,CAAhB,CADF,CAIEN,CAAA,CAASK,CAAT,CAAgBC,CAAhB,CAAuBP,CAAvB,CAdgC,CAmBtC,CAAQA,CAAR,CAAe,EAAf,CAvBsB,CAvD/Bc,MAAOC,CAAAA,cAAP,CAAsBjB,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,EAAQkB,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIb,EAAYP,CAAA,CAAQ,GAAR,CAEZqB,EAAAA,CAAWrB,CAAA,CAAQ,EAAR,CAIXoB,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASC,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CACnFC,CAAAA,CAAQD,CAAKC,CAAAA,KA0BjB,OAAOA,EAAA,CA7BEH,KA6BF,CAAY,CACjB,kBAAmBpB,CADF,CAEjB,mBAAoBwB,QAAuB,CAACC,CAAD,CAAIvB,CAAJ,CAAc,CACvD,MAAOuB,EAAEd,CAAAA,GAAF,CAAMT,CAAN,CADgD,CAFxC,CAAZ,CA3BgF,CAA1D,CA0C/BH,EAAQkB,CAAAA,SAAR,CAAoBA,CAxD0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/map.js\"],\n\"sourcesContent\":[\"shadow$provide[134] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMap = void 0;\\n\\nvar _function = require(\\\"../../utils/function.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'map';\\nvar dependencies = ['typed'];\\nvar createMap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Create a new matrix or array with the results of the callback function executed on\\n   * each entry of the matrix/array.\\n   *\\n   * Syntax:\\n   *\\n   *    math.map(x, callback)\\n   *\\n   * Examples:\\n   *\\n   *    math.map([1, 2, 3], function(value) {\\n   *      return value * value\\n   *    })  // returns [1, 4, 9]\\n   *\\n   * See also:\\n   *\\n   *    filter, forEach, sort\\n   *\\n   * @param {Matrix | Array} x    The matrix to iterate on.\\n   * @param {Function} callback   The callback method is invoked with three\\n   *                              parameters: the value of the element, the index\\n   *                              of the element, and the matrix being traversed.\\n   * @return {Matrix | array}     Transformed map of x\\n   */\\n  return typed(name, {\\n    'Array, function': _map,\\n    'Matrix, function': function MatrixFunction(x, callback) {\\n      return x.map(callback);\\n    }\\n  });\\n});\\n/**\\n * Map for a multi dimensional array\\n * @param {Array} array\\n * @param {Function} callback\\n * @return {Array}\\n * @private\\n */\\n\\nexports.createMap = createMap;\\n\\nfunction _map(array, callback) {\\n  // figure out what number of arguments the callback function expects\\n  var args = (0, _function.maxArgumentCount)(callback);\\n\\n  var recurse = function recurse(value, index) {\\n    if (Array.isArray(value)) {\\n      return value.map(function (child, i) {\\n        // we create a copy of the index array and append the new index value\\n        return recurse(child, index.concat(i));\\n      });\\n    } else {\\n      // invoke the callback function with the right number of arguments\\n      if (args === 1) {\\n        return callback(value);\\n      } else if (args === 2) {\\n        return callback(value, index);\\n      } else {\\n        // 3 or -1\\n        return callback(value, index, array);\\n      }\\n    }\\n  };\\n\\n  return recurse(array, []);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_map\",\"array\",\"callback\",\"args\",\"_function\",\"maxArgumentCount\",\"recurse\",\"value\",\"index\",\"Array\",\"isArray\",\"map\",\"child\",\"i\",\"concat\",\"Object\",\"defineProperty\",\"createMap\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"MatrixFunction\",\"x\"]\n}\n"]