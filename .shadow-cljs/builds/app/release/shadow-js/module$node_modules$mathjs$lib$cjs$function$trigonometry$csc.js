["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/csc.js"],"~:js","shadow$provide[224]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCsc=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"csc\",[\"typed\",\"BigNumber\"],function(u){var k=u.typed,t=u.BigNumber;return k(\"csc\",{number:f.cscNumber,Complex:function(p){return p.csc()},BigNumber:function(p){return(new t(1)).div(p.sin())},Unit:function(p){if(!p.hasBase(p.constructor.BASE_UNITS.ANGLE))throw new TypeError(\"Unit in function csc is no angle\");return this(p.value)},\"Array | Matrix\":function(p){return(0,\nq.deepMap)(p,this)}})});a.createCsc=b}","~:source","shadow$provide[224] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCsc = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nvar createCsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cosecant of x\n   */\n  return typed(name, {\n    number: _index.cscNumber,\n    Complex: function Complex(x) {\n      return x.csc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.sin());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function csc is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createCsc = createCsc;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","createCsc","number","BigNumber"]],"~:compiled-at",1619135723939,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$csc.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CAAU,WAAVA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACnFC,EAAQD,CAAKC,CAAAA,KADsE,CAEnFC,EAAaF,CAAKG,CAAAA,SAuBtB,OAAOF,EAAA,CA3BEH,KA2BF,CAAY,CACjBM,OAAQR,CAAOS,CAAAA,SADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,EADoB,CAFZ,CAKjBL,UAAWA,QAAkB,CAACI,CAAD,CAAI,CAC/B,MAAyBE,CAAlB,IAAIP,CAAJ,CAAe,CAAf,CAAkBO,EAAAA,GAAlB,CAAsBF,CAAEG,CAAAA,GAAF,EAAtB,CADwB,CALhB,CAQjBC,KAAMA,QAAa,CAACJ,CAAD,CAAI,CACrB,GAAI,CAACA,CAAEK,CAAAA,OAAF,CAAUL,CAAEM,CAAAA,WAAYC,CAAAA,UAAWC,CAAAA,KAAnC,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,kCAAd,CAAN,CAGF,MAAO,KAAA,CAAKT,CAAEf,CAAAA,KAAP,CALc,CARN,CAejB,iBAAkByB,QAAoB,CAACV,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA;AAAGZ,CAAYuB,CAAAA,OAAhB,EAAyBX,CAAzB,CAA4B,IAA5B,CADiC,CAfzB,CAAZ,CAzBgF,CAA1D,CA6C/BlB,EAAQI,CAAAA,SAAR,CAAoBA,CA7D0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/csc.js\"],\n\"sourcesContent\":[\"shadow$provide[224] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCsc = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'csc';\\nvar dependencies = ['typed', 'BigNumber'];\\nvar createCsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      _BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.csc(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.csc(2)      // returns number 1.099750170294617\\n   *    1 / math.sin(2)  // returns number 1.099750170294617\\n   *\\n   * See also:\\n   *\\n   *    sin, sec, cot\\n   *\\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\\n   * @return {number | Complex | Array | Matrix} Cosecant of x\\n   */\\n  return typed(name, {\\n    number: _index.cscNumber,\\n    Complex: function Complex(x) {\\n      return x.csc();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return new _BigNumber(1).div(x.sin());\\n    },\\n    Unit: function Unit(x) {\\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\\n        throw new TypeError('Unit in function csc is no angle');\\n      }\\n\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createCsc = createCsc;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCsc\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"_BigNumber\",\"BigNumber\",\"number\",\"cscNumber\",\"Complex\",\"x\",\"csc\",\"div\",\"sin\",\"Unit\",\"hasBase\",\"constructor\",\"BASE_UNITS\",\"ANGLE\",\"TypeError\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]