["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/type/matrix/FibonacciHeap.js"],"~:js","shadow$provide[200]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createFibonacciHeapClass=void 0;c=b(25);c=(0,c.factory)(\"FibonacciHeap\",[\"smaller\",\"larger\"],function(q){function f(){if(!(this instanceof f))throw new SyntaxError(\"Constructor must be called with the new operator\");this._minimum=null;this._size=0}function u(d,l,h){l.left.right=l.right;l.right.left=l.left;h.degree--;h.child===l&&(h.child=l.right);0===h.degree&&(h.child=null);l.left=d;l.right=d.right;d.right=l;\nl.right.left=l;l.parent=null;l.mark=!1}function k(d,l){var h=l.parent;h&&(l.mark?(u(d,l,h),k(h)):l.mark=!0)}var t=q.smaller,p=q.larger,g=1/Math.log((1+Math.sqrt(5))/2);f.prototype.type=\"FibonacciHeap\";f.prototype.isFibonacciHeap=!0;f.prototype.insert=function(d,l){l={key:d,value:l,degree:0};if(this._minimum){var h=this._minimum;l.left=h;l.right=h.right;h.right=l;l.right.left=l;t(d,h.key)&&(this._minimum=l)}else l.left=l,this._minimum=l.right=l;this._size++;return l};f.prototype.size=function(){return this._size};\nf.prototype.clear=function(){this._minimum=null;this._size=0};f.prototype.isEmpty=function(){return 0===this._size};f.prototype.extractMinimum=function(){var d=this._minimum;if(null===d)return d;for(var l=this._minimum,h=d.degree,n=d.child;0<h;){var r=n.right;n.left.right=n.right;n.right.left=n.left;n.left=l;n.right=l.right;l.right=n;n.right.left=n;n.parent=null;n=r;h--}d.left.right=d.right;d.right.left=d.left;if(d===d.right)l=null;else{var v=l=d.right;l=Math.floor(Math.log(this._size)*g)+1;h=Array(l);\nn=0;if(r=v)for(n++,r=r.right;r!==v;)n++,r=r.right;for(var C;0<n;){v=r.degree;for(var z=r.right;;){C=h[v];if(!C)break;if(p(r.key,C.key)){var w=C;C=r;r=w}w=r;C.left.right=C.right;C.right.left=C.left;C.parent=w;w.child?(C.left=w.child,C.right=w.child.right,w.child.right=C,C.right.left=C):(w.child=C,C.right=C,C.left=C);w.degree++;C.mark=!1;h[v]=null;v++}h[v]=r;r=z;n--}v=null;for(n=0;n<l;n++)if(C=h[n])v?(C.left.right=C.right,C.right.left=C.left,C.left=v,C.right=v.right,v.right=C,C.right.left=C,t(C.key,\nv.key)&&(v=C)):v=C;l=v}this._size--;this._minimum=l;return d};f.prototype.remove=function(d){var l=this._minimum;d.key=-1;var h=d.parent;h&&t(d.key,h.key)&&(u(l,d,h),k(l,h));t(d.key,l.key)&&(l=d);this._minimum=l;this.extractMinimum()};return f},{isClass:!0});a.createFibonacciHeapClass=c}","~:source","shadow$provide[200] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFibonacciHeapClass = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nvar createFibonacciHeapClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      larger = _ref.larger;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // initialize fields\n\n\n    this._minimum = null;\n    this._size = 0;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key: key,\n      value: value,\n      degree: 0\n    }; // check we have a node in the minimum\n\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum; // update left & right of node\n\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node; // update minimum node in heap if needed\n\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node; // this is the first node\n\n      this._minimum = node;\n    } // increment number of nodes in heap\n\n\n    this._size++; // return node\n\n    return node;\n  };\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum; // check we have a minimum\n\n    if (node === null) {\n      return node;\n    } // current minimum\n\n\n    var minimum = this._minimum; // get number of children\n\n    var numberOfChildren = node.degree; // pointer to the first child\n\n    var x = node.child; // for each child of node do...\n\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right; // remove x from child list\n\n      x.left.right = x.right;\n      x.right.left = x.left; // add x to root list of heap\n\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x; // set Parent[x] to null\n\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    } // remove node from root list of heap\n\n\n    node.left.right = node.right;\n    node.right.left = node.left; // update minimum\n\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right; // we need to update the pointer to the root with minimum key\n\n      minimum = _findMinimumNode(minimum, this._size);\n    } // decrement size of heap\n\n\n    this._size--; // update minimum\n\n    this._minimum = minimum; // return node\n\n    return node;\n  };\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest\n\n    this.extractMinimum();\n  };\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key; // get parent node\n\n    var parent = node.parent;\n\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent); // remove all nodes from parent to the root parent\n\n\n      _cascadingCut(minimum, parent);\n    } // update minimum node if needed\n\n\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    } // return minimum\n\n\n    return minimum;\n  }\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--; // reset y.child if necessary\n\n    if (parent.child === node) {\n      parent.child = node.right;\n    } // remove child if degree is 0\n\n\n    if (parent.degree === 0) {\n      parent.child = null;\n    } // add node to root list of heap\n\n\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node; // set parent[node] to null\n\n    node.parent = null; // set mark[node] to false\n\n    node.mark = false;\n  }\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent; // if there's a parent...\n\n    if (!parent) {\n      return;\n    } // if node is unmarked, set it marked\n\n\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent); // cut its parent as well\n\n\n      _cascadingCut(parent);\n    }\n  }\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left; // make node a Child of parent\n\n    node.parent = parent;\n\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    } // increase degree[parent]\n\n\n    parent.degree++; // set mark[node] false\n\n    node.mark = false;\n  };\n\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity\n\n    var array = new Array(arraySize); // find the number of root nodes.\n\n    var numRoots = 0;\n    var x = minimum;\n\n    if (x) {\n      numRoots++;\n      x = x.right;\n\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    } // vars\n\n\n    var y; // For each node in root list do...\n\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree; // get next node\n\n      var next = x.right; // check if there is a node already in array with the same degree\n\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n\n        if (!y) {\n          break;\n        } // make one node with the same degree a child of the other, do this based on the key value.\n\n\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        } // make y a child of x\n\n\n        _linkNodes(y, x); // we have handled this degree, go to next one.\n\n\n        array[d] = null;\n        d++;\n      } // save this node for later when we might encounter another of the same degree.\n\n\n      array[d] = x; // move forward through list.\n\n      x = next;\n      numRoots--;\n    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n\n\n    minimum = null; // loop nodes in array\n\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n\n      if (!y) {\n        continue;\n      } // check if we have a linked list\n\n\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left; // now add to root list, again.\n\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y; // check if this is a new min.\n\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n\n    return minimum;\n  }\n\n  return FibonacciHeap;\n}, {\n  isClass: true\n});\nexports.createFibonacciHeapClass = createFibonacciHeapClass;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["extractMinimum","degree","right","isClass","isFibonacciHeap","child","key","parent","__esModule","createFibonacciHeapClass","value","remove","_size","type","insert","_minimum","isEmpty","size","clear","mark","left"]],"~:compiled-at",1619135723926,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$type$matrix$FibonacciHeap.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/type/matrix/FibonacciHeap.js\"],\n\"sourcesContent\":[\"shadow$provide[200] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createFibonacciHeapClass = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'FibonacciHeap';\\nvar dependencies = ['smaller', 'larger'];\\nvar createFibonacciHeapClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var smaller = _ref.smaller,\\n      larger = _ref.larger;\\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\\n  /**\\n   * Fibonacci Heap implementation, used interally for Matrix math.\\n   * @class FibonacciHeap\\n   * @constructor FibonacciHeap\\n   */\\n\\n  function FibonacciHeap() {\\n    if (!(this instanceof FibonacciHeap)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    } // initialize fields\\n\\n\\n    this._minimum = null;\\n    this._size = 0;\\n  }\\n  /**\\n   * Attach type information\\n   */\\n\\n\\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\\n  FibonacciHeap.prototype.isFibonacciHeap = true;\\n  /**\\n   * Inserts a new data element into the heap. No heap consolidation is\\n   * performed at this time, the new node is simply inserted into the root\\n   * list of this heap. Running time: O(1) actual.\\n   * @memberof FibonacciHeap\\n   */\\n\\n  FibonacciHeap.prototype.insert = function (key, value) {\\n    // create node\\n    var node = {\\n      key: key,\\n      value: value,\\n      degree: 0\\n    }; // check we have a node in the minimum\\n\\n    if (this._minimum) {\\n      // minimum node\\n      var minimum = this._minimum; // update left & right of node\\n\\n      node.left = minimum;\\n      node.right = minimum.right;\\n      minimum.right = node;\\n      node.right.left = node; // update minimum node in heap if needed\\n\\n      if (smaller(key, minimum.key)) {\\n        // node has a smaller key, use it as minimum\\n        this._minimum = node;\\n      }\\n    } else {\\n      // set left & right\\n      node.left = node;\\n      node.right = node; // this is the first node\\n\\n      this._minimum = node;\\n    } // increment number of nodes in heap\\n\\n\\n    this._size++; // return node\\n\\n    return node;\\n  };\\n  /**\\n   * Returns the number of nodes in heap. Running time: O(1) actual.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  FibonacciHeap.prototype.size = function () {\\n    return this._size;\\n  };\\n  /**\\n   * Removes all elements from this heap.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  FibonacciHeap.prototype.clear = function () {\\n    this._minimum = null;\\n    this._size = 0;\\n  };\\n  /**\\n   * Returns true if the heap is empty, otherwise false.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  FibonacciHeap.prototype.isEmpty = function () {\\n    return this._size === 0;\\n  };\\n  /**\\n   * Extracts the node with minimum key from heap. Amortized running\\n   * time: O(log n).\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  FibonacciHeap.prototype.extractMinimum = function () {\\n    // node to remove\\n    var node = this._minimum; // check we have a minimum\\n\\n    if (node === null) {\\n      return node;\\n    } // current minimum\\n\\n\\n    var minimum = this._minimum; // get number of children\\n\\n    var numberOfChildren = node.degree; // pointer to the first child\\n\\n    var x = node.child; // for each child of node do...\\n\\n    while (numberOfChildren > 0) {\\n      // store node in right side\\n      var tempRight = x.right; // remove x from child list\\n\\n      x.left.right = x.right;\\n      x.right.left = x.left; // add x to root list of heap\\n\\n      x.left = minimum;\\n      x.right = minimum.right;\\n      minimum.right = x;\\n      x.right.left = x; // set Parent[x] to null\\n\\n      x.parent = null;\\n      x = tempRight;\\n      numberOfChildren--;\\n    } // remove node from root list of heap\\n\\n\\n    node.left.right = node.right;\\n    node.right.left = node.left; // update minimum\\n\\n    if (node === node.right) {\\n      // empty\\n      minimum = null;\\n    } else {\\n      // update minimum\\n      minimum = node.right; // we need to update the pointer to the root with minimum key\\n\\n      minimum = _findMinimumNode(minimum, this._size);\\n    } // decrement size of heap\\n\\n\\n    this._size--; // update minimum\\n\\n    this._minimum = minimum; // return node\\n\\n    return node;\\n  };\\n  /**\\n   * Removes a node from the heap given the reference to the node. The trees\\n   * in the heap will be consolidated, if necessary. This operation may fail\\n   * to remove the correct element if there are nodes with key value -Infinity.\\n   * Running time: O(log n) amortized.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  FibonacciHeap.prototype.remove = function (node) {\\n    // decrease key value\\n    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest\\n\\n    this.extractMinimum();\\n  };\\n  /**\\n   * Decreases the key value for a heap node, given the new value to take on.\\n   * The structure of the heap may be changed and will not be consolidated.\\n   * Running time: O(1) amortized.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  function _decreaseKey(minimum, node, key) {\\n    // set node key\\n    node.key = key; // get parent node\\n\\n    var parent = node.parent;\\n\\n    if (parent && smaller(node.key, parent.key)) {\\n      // remove node from parent\\n      _cut(minimum, node, parent); // remove all nodes from parent to the root parent\\n\\n\\n      _cascadingCut(minimum, parent);\\n    } // update minimum node if needed\\n\\n\\n    if (smaller(node.key, minimum.key)) {\\n      minimum = node;\\n    } // return minimum\\n\\n\\n    return minimum;\\n  }\\n  /**\\n   * The reverse of the link operation: removes node from the child list of parent.\\n   * This method assumes that min is non-null. Running time: O(1).\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  function _cut(minimum, node, parent) {\\n    // remove node from parent children and decrement Degree[parent]\\n    node.left.right = node.right;\\n    node.right.left = node.left;\\n    parent.degree--; // reset y.child if necessary\\n\\n    if (parent.child === node) {\\n      parent.child = node.right;\\n    } // remove child if degree is 0\\n\\n\\n    if (parent.degree === 0) {\\n      parent.child = null;\\n    } // add node to root list of heap\\n\\n\\n    node.left = minimum;\\n    node.right = minimum.right;\\n    minimum.right = node;\\n    node.right.left = node; // set parent[node] to null\\n\\n    node.parent = null; // set mark[node] to false\\n\\n    node.mark = false;\\n  }\\n  /**\\n   * Performs a cascading cut operation. This cuts node from its parent and then\\n   * does the same for its parent, and so on up the tree.\\n   * Running time: O(log n); O(1) excluding the recursion.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  function _cascadingCut(minimum, node) {\\n    // store parent node\\n    var parent = node.parent; // if there's a parent...\\n\\n    if (!parent) {\\n      return;\\n    } // if node is unmarked, set it marked\\n\\n\\n    if (!node.mark) {\\n      node.mark = true;\\n    } else {\\n      // it's marked, cut it from parent\\n      _cut(minimum, node, parent); // cut its parent as well\\n\\n\\n      _cascadingCut(parent);\\n    }\\n  }\\n  /**\\n   * Make the first node a child of the second one. Running time: O(1) actual.\\n   * @memberof FibonacciHeap\\n   */\\n\\n\\n  var _linkNodes = function _linkNodes(node, parent) {\\n    // remove node from root list of heap\\n    node.left.right = node.right;\\n    node.right.left = node.left; // make node a Child of parent\\n\\n    node.parent = parent;\\n\\n    if (!parent.child) {\\n      parent.child = node;\\n      node.right = node;\\n      node.left = node;\\n    } else {\\n      node.left = parent.child;\\n      node.right = parent.child.right;\\n      parent.child.right = node;\\n      node.right.left = node;\\n    } // increase degree[parent]\\n\\n\\n    parent.degree++; // set mark[node] false\\n\\n    node.mark = false;\\n  };\\n\\n  function _findMinimumNode(minimum, size) {\\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity\\n\\n    var array = new Array(arraySize); // find the number of root nodes.\\n\\n    var numRoots = 0;\\n    var x = minimum;\\n\\n    if (x) {\\n      numRoots++;\\n      x = x.right;\\n\\n      while (x !== minimum) {\\n        numRoots++;\\n        x = x.right;\\n      }\\n    } // vars\\n\\n\\n    var y; // For each node in root list do...\\n\\n    while (numRoots > 0) {\\n      // access this node's degree..\\n      var d = x.degree; // get next node\\n\\n      var next = x.right; // check if there is a node already in array with the same degree\\n\\n      while (true) {\\n        // get node with the same degree is any\\n        y = array[d];\\n\\n        if (!y) {\\n          break;\\n        } // make one node with the same degree a child of the other, do this based on the key value.\\n\\n\\n        if (larger(x.key, y.key)) {\\n          var temp = y;\\n          y = x;\\n          x = temp;\\n        } // make y a child of x\\n\\n\\n        _linkNodes(y, x); // we have handled this degree, go to next one.\\n\\n\\n        array[d] = null;\\n        d++;\\n      } // save this node for later when we might encounter another of the same degree.\\n\\n\\n      array[d] = x; // move forward through list.\\n\\n      x = next;\\n      numRoots--;\\n    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\\n\\n\\n    minimum = null; // loop nodes in array\\n\\n    for (var i = 0; i < arraySize; i++) {\\n      // get current node\\n      y = array[i];\\n\\n      if (!y) {\\n        continue;\\n      } // check if we have a linked list\\n\\n\\n      if (minimum) {\\n        // First remove node from root list.\\n        y.left.right = y.right;\\n        y.right.left = y.left; // now add to root list, again.\\n\\n        y.left = minimum;\\n        y.right = minimum.right;\\n        minimum.right = y;\\n        y.right.left = y; // check if this is a new min.\\n\\n        if (smaller(y.key, minimum.key)) {\\n          minimum = y;\\n        }\\n      } else {\\n        minimum = y;\\n      }\\n    }\\n\\n    return minimum;\\n  }\\n\\n  return FibonacciHeap;\\n}, {\\n  isClass: true\\n});\\nexports.createFibonacciHeapClass = createFibonacciHeapClass;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createFibonacciHeapClass\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"FibonacciHeap\",\"SyntaxError\",\"_minimum\",\"_size\",\"_cut\",\"minimum\",\"node\",\"parent\",\"left\",\"right\",\"degree\",\"child\",\"mark\",\"_cascadingCut\",\"smaller\",\"larger\",\"oneOverLogPhi\",\"Math\",\"log\",\"sqrt\",\"prototype\",\"type\",\"isFibonacciHeap\",\"insert\",\"FibonacciHeap.prototype.insert\",\"key\",\"size\",\"FibonacciHeap.prototype.size\",\"clear\",\"FibonacciHeap.prototype.clear\",\"isEmpty\",\"FibonacciHeap.prototype.isEmpty\",\"extractMinimum\",\"FibonacciHeap.prototype.extractMinimum\",\"numberOfChildren\",\"x\",\"tempRight\",\"arraySize\",\"floor\",\"array\",\"Array\",\"numRoots\",\"y\",\"d\",\"next\",\"temp\",\"i\",\"remove\",\"FibonacciHeap.prototype.remove\",\"isClass\"]\n}\n"]