["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/complex/arg.js"],"~:js","shadow$provide[114]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createArg=void 0;c=b(25);var q=b(38);b=(0,c.factory)(\"arg\",[\"typed\"],function(f){f=f.typed;return f(\"arg\",{number:function(u){return Math.atan2(0,u)},BigNumber:function(u){return u.constructor.atan2(0,u)},Complex:function(u){return u.arg()},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this)}})});a.createArg=b}","~:source","shadow$provide[114] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createArg = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'arg';\nvar dependencies = ['typed'];\nvar createArg = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return Math.atan2(0, x);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.constructor.atan2(0, x);\n    },\n    Complex: function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createArg = createArg;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createArg","Complex","__esModule","value","number","BigNumber"]],"~:compiled-at",1619135723792,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$complex$arg.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAIdM,EAAAA,CAA2B,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,CAAD,CAAO,CACnFC,CAAAA,CAAQD,CAAKC,CAAAA,KA6BjB,OAAOA,EAAA,CAhCEH,KAgCF,CAAY,CACjBI,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOC,KAAKC,CAAAA,KAAL,CAAW,CAAX,CAAcF,CAAd,CADkB,CADV,CAIjBG,UAAWA,QAAkB,CAACH,CAAD,CAAI,CAC/B,MAAOA,EAAEI,CAAAA,WAAYF,CAAAA,KAAd,CAAoB,CAApB,CAAuBF,CAAvB,CADwB,CAJhB,CAOjBK,QAASA,QAAgB,CAACL,CAAD,CAAI,CAC3B,MAAOA,EAAEM,CAAAA,GAAF,EADoB,CAPZ,CAWjB,iBAAkBC,QAAoB,CAACP,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,CAAYe,CAAAA,OAAhB,EAAyBR,CAAzB,CAA4B,IAA5B,CADiC,CAXzB,CAAZ,CA9BgF,CAA1D,CA8C/Bb,EAAQI,CAAAA,SAAR,CAAoBA,CA5D0C;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/complex/arg.js\"],\n\"sourcesContent\":[\"shadow$provide[114] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createArg = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'arg';\\nvar dependencies = ['typed'];\\nvar createArg = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Compute the argument of a complex value.\\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.arg(x)\\n   *\\n   * Examples:\\n   *\\n   *    const a = math.complex(2, 2)\\n   *    math.arg(a) / math.pi          // returns number 0.25\\n   *\\n   *    const b = math.complex('2 + 3i')\\n   *    math.arg(b)                    // returns number 0.982793723247329\\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\\n   *\\n   * See also:\\n   *\\n   *    re, im, conj, abs\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            A complex number or array with complex numbers\\n   * @return {number | BigNumber | Array | Matrix} The argument of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      return Math.atan2(0, x);\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.constructor.atan2(0, x);\\n    },\\n    Complex: function Complex(x) {\\n      return x.arg();\\n    },\\n    // TODO: implement BigNumber support for function arg\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createArg = createArg;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createArg\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"x\",\"Math\",\"atan2\",\"BigNumber\",\"constructor\",\"Complex\",\"arg\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]