["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js"],"~:js","shadow$provide[110]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createBitNot=void 0;var q=b(108),f=b(38);c=b(25);var u=b(50);b=(0,c.factory)(\"bitNot\",[\"typed\"],function(k){k=k.typed;return k(\"bitNot\",{number:u.bitNotNumber,BigNumber:q.bitNotBigNumber,\"Array | Matrix\":function(t){return(0,f.deepMap)(t,this)}})});a.createBitNot=b}","~:source","shadow$provide[110] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitNot = void 0;\n\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nvar createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: _index.bitNotNumber,\n    BigNumber: _bitwise.bitNotBigNumber,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBitNot = createBitNot;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise"]],"~:properties",["^5",["__esModule","createBitNot","value","number","BigNumber"]],"~:compiled-at",1619135723789,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIC,EAAWP,CAAA,CAAQ,GAAR,CAAf,CAEIQ,EAAcR,CAAA,CAAQ,EAAR,CAEdS,EAAAA,CAAWT,CAAA,CAAQ,EAAR,CAEf,KAAIU,EAASV,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA8B,CAAC,CAAA,CAAGG,CAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,CAAD,CAAO,CACtFC,CAAAA,CAAQD,CAAKC,CAAAA,KAwBjB,OAAOA,EAAA,CA3BEH,QA2BF,CAAY,CACjBI,OAAQN,CAAOO,CAAAA,YADE,CAEjBC,UAAWX,CAASY,CAAAA,eAFH,CAGjB,iBAAkBC,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGb,CAAYc,CAAAA,OAAhB,EAAyBD,CAAzB,CAA4B,IAA5B,CADiC,CAHzB,CAAZ,CAzBmF,CAA1D,CAiClCnB,EAAQI,CAAAA,YAAR,CAAuBA,CAnDuC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js\"],\n\"sourcesContent\":[\"shadow$provide[110] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBitNot = void 0;\\n\\nvar _bitwise = require(\\\"../../utils/bignumber/bitwise.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'bitNot';\\nvar dependencies = ['typed'];\\nvar createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Bitwise NOT value, `~x`.\\n   * For matrices, the function is evaluated element wise.\\n   * For units, the function is evaluated on the best prefix base.\\n   *\\n   * Syntax:\\n   *\\n   *    math.bitNot(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.bitNot(1)               // returns number -2\\n   *\\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\\n   *\\n   * See also:\\n   *\\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\\n   *\\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\\n   */\\n  return typed(name, {\\n    number: _index.bitNotNumber,\\n    BigNumber: _bitwise.bitNotBigNumber,\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createBitNot = createBitNot;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBitNot\",\"_bitwise\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"bitNotNumber\",\"BigNumber\",\"bitNotBigNumber\",\"ArrayMatrix\",\"x\",\"deepMap\"]\n}\n"]