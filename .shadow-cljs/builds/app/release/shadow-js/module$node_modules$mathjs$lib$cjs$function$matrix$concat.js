["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/concat.js"],"~:js","shadow$provide[121]=function(c,b,y,a){function q(g,d,l,h){if(h<l){if(g.length!==d.length)throw new p.DimensionError(g.length,d.length);for(var n=[],r=0;r<g.length;r++)n[r]=q(g[r],d[r],l,h+1);return n}return g.concat(d)}Object.defineProperty(a,\"__esModule\",{value:!0});a.createConcat=void 0;var f=b(14),u=b(15),k=b(24),t=b(23),p=b(22);c=b(25);c=(0,c.factory)(\"concat\",[\"typed\",\"matrix\",\"isInteger\"],function(g){var d=g.typed,l=g.matrix,h=g.isInteger;return d(\"concat\",{\"...Array | Matrix | number | BigNumber\":function(n){var r,\nv=n.length,C=-1,z=!1,w=[];for(r=0;r<v;r++){var B=n[r];(0,f.isMatrix)(B)&&(z=!0);if((0,f.isNumber)(B)||(0,f.isBigNumber)(B)){if(r!==v-1)throw Error(\"Dimension must be specified as last argument\");var x=C;C=B.valueOf();if(!h(C))throw new TypeError(\"Integer number expected for dimension\");if(0>C||0<r&&C>x)throw new t.IndexError(C,x+1);}else if(x=(0,u.clone)(B).valueOf(),B=(0,k.arraySize)(x),w[r]=x,x=C,C=B.length-1,0<r&&C!==x)throw new p.DimensionError(x+1,C+1);}if(0===w.length)throw new SyntaxError(\"At least one matrix expected\");\nfor(n=w.shift();w.length;)n=q(n,w.shift(),C,0);return z?l(n):n},\"...string\":function(n){return n.join(\"\")}})});a.createConcat=c}","~:source","shadow$provide[121] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConcat = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _IndexError = require(\"../../error/IndexError.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nvar createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if ((0, _is.isMatrix)(arg)) {\n          asMatrix = true;\n        }\n\n        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new _IndexError.IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = (0, _object.clone)(arg).valueOf();\n          var size = (0, _array.arraySize)(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\n\nexports.createConcat = createConcat;\n\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new _DimensionError.DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$error$IndexError","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createConcat"]],"~:compiled-at",1619135723800,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$concat.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/concat.js\"],\n\"sourcesContent\":[\"shadow$provide[121] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createConcat = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _IndexError = require(\\\"../../error/IndexError.js\\\");\\n\\nvar _DimensionError = require(\\\"../../error/DimensionError.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'concat';\\nvar dependencies = ['typed', 'matrix', 'isInteger'];\\nvar createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      isInteger = _ref.isInteger;\\n\\n  /**\\n   * Concatenate two or more matrices.\\n   *\\n   * Syntax:\\n   *\\n   *     math.concat(A, B, C, ...)\\n   *     math.concat(A, B, C, ..., dim)\\n   *\\n   * Where:\\n   *\\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\\n   *   By default the last dimension of the matrices.\\n   *\\n   * Examples:\\n   *\\n   *    const A = [[1, 2], [5, 6]]\\n   *    const B = [[3, 4], [7, 8]]\\n   *\\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\\n   *\\n   * See also:\\n   *\\n   *    size, squeeze, subset, transpose\\n   *\\n   * @param {... Array | Matrix} args     Two or more matrices\\n   * @return {Array | Matrix} Concatenated matrix\\n   */\\n  return typed(name, {\\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\\n      var i;\\n      var len = args.length;\\n      var dim = -1; // zero-based dimension\\n\\n      var prevDim;\\n      var asMatrix = false;\\n      var matrices = []; // contains multi dimensional arrays\\n\\n      for (i = 0; i < len; i++) {\\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\\n\\n        if ((0, _is.isMatrix)(arg)) {\\n          asMatrix = true;\\n        }\\n\\n        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {\\n          if (i !== len - 1) {\\n            throw new Error('Dimension must be specified as last argument');\\n          } // last argument contains the dimension on which to concatenate\\n\\n\\n          prevDim = dim;\\n          dim = arg.valueOf(); // change BigNumber to number\\n\\n          if (!isInteger(dim)) {\\n            throw new TypeError('Integer number expected for dimension');\\n          }\\n\\n          if (dim < 0 || i > 0 && dim > prevDim) {\\n            // TODO: would be more clear when throwing a DimensionError here\\n            throw new _IndexError.IndexError(dim, prevDim + 1);\\n          }\\n        } else {\\n          // this is a matrix or array\\n          var m = (0, _object.clone)(arg).valueOf();\\n          var size = (0, _array.arraySize)(m);\\n          matrices[i] = m;\\n          prevDim = dim;\\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\\n\\n          if (i > 0 && dim !== prevDim) {\\n            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);\\n          }\\n        }\\n      }\\n\\n      if (matrices.length === 0) {\\n        throw new SyntaxError('At least one matrix expected');\\n      }\\n\\n      var res = matrices.shift();\\n\\n      while (matrices.length) {\\n        res = _concat(res, matrices.shift(), dim, 0);\\n      }\\n\\n      return asMatrix ? matrix(res) : res;\\n    },\\n    '...string': function string(args) {\\n      return args.join('');\\n    }\\n  });\\n});\\n/**\\n * Recursively concatenate two matrices.\\n * The contents of the matrices is not cloned.\\n * @param {Array} a             Multi dimensional array\\n * @param {Array} b             Multi dimensional array\\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\\n * @param {number} dim          The current dim (zero-based)\\n * @return {Array} c            The concatenated matrix\\n * @private\\n */\\n\\nexports.createConcat = createConcat;\\n\\nfunction _concat(a, b, concatDim, dim) {\\n  if (dim < concatDim) {\\n    // recurse into next dimension\\n    if (a.length !== b.length) {\\n      throw new _DimensionError.DimensionError(a.length, b.length);\\n    }\\n\\n    var c = [];\\n\\n    for (var i = 0; i < a.length; i++) {\\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\\n    }\\n\\n    return c;\\n  } else {\\n    // concatenate this dimension\\n    return a.concat(b);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_concat\",\"a\",\"b\",\"concatDim\",\"dim\",\"length\",\"_DimensionError\",\"DimensionError\",\"c\",\"i\",\"concat\",\"Object\",\"defineProperty\",\"value\",\"createConcat\",\"_is\",\"_object\",\"_array\",\"_IndexError\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"isInteger\",\"ArrayMatrixNumberBigNumber\",\"args\",\"len\",\"asMatrix\",\"matrices\",\"arg\",\"isMatrix\",\"isNumber\",\"isBigNumber\",\"Error\",\"prevDim\",\"valueOf\",\"TypeError\",\"IndexError\",\"m\",\"clone\",\"size\",\"arraySize\",\"SyntaxError\",\"res\",\"shift\",\"string\",\"join\"]\n}\n"]