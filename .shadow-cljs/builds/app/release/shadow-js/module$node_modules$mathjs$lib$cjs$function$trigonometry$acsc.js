["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js"],"~:js","shadow$provide[211]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createAcsc=void 0;c=b(25);var q=b(38),f=b(50);b=(0,c.factory)(\"acsc\",[\"typed\",\"config\",\"Complex\",\"BigNumber\"],function(u){var k=u.typed,t=u.config,p=u.Complex,g=u.BigNumber;return k(\"acsc\",{number:function(d){return-1>=d||1<=d||t.predictable?(0,f.acscNumber)(d):(new p(d,0)).acsc()},Complex:function(d){return d.acsc()},BigNumber:function(d){return(new g(1)).div(d).asin()},\"Array | Matrix\":function(d){return(0,\nq.deepMap)(d,this)}})});a.createAcsc=b}","~:source","shadow$provide[211] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcsc = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nvar createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(0.5)           // returns number 0.5235987755982989\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return (0, _index.acscNumber)(x);\n      }\n\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createAcsc = createAcsc;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createAcsc","Complex","__esModule","value","number","BigNumber"]],"~:compiled-at",1619135723936,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$acsc.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAAcR,CAAA,CAAQ,EAAR,CAAlB,CAEIS,EAAST,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAA4B,CAAC,CAAA,CAAGC,CAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CAA+B,WAA/BA,CACa,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACpFC,EAAQD,CAAKC,CAAAA,KADuE,CAEpFC,EAASF,CAAKE,CAAAA,MAFsE,CAGpFC,EAAUH,CAAKG,CAAAA,OAHqE,CAIpFC,EAAaJ,CAAKK,CAAAA,SAyBtB,OAAOJ,EAAA,CA/BEH,MA+BF,CAAY,CACjBQ,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAoB,CAApB,EAAeA,CAAf,EAAyBL,CAAOM,CAAAA,WAAhC,CACS,CAAC,CAAA,CAAGZ,CAAOa,CAAAA,UAAX,EAAuBF,CAAvB,CADT,CAIyBG,CAAlB,IAAIP,CAAJ,CAAYI,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,IAAlB,EALkB,CADV,CAQjBP,QAASA,QAAgB,CAACI,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,IAAF,EADoB,CARZ,CAWjBL,UAAWA,QAAkB,CAACE,CAAD,CAAI,CAC/B,MAAyBI,CAAlB,IAAIP,CAAJ,CAAe,CAAf,CAAkBO,EAAAA,GAAlB,CAAsBJ,CAAtB,CAAyBK,CAAAA,IAAzB,EADwB,CAXhB,CAcjB,iBAAkBC,QAAoB,CAACN,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA;AAAGZ,CAAYmB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4B,IAA5B,CADiC,CAdzB,CAAZ,CA7BiF,CAA1D,CAgDhClB,EAAQI,CAAAA,UAAR,CAAqBA,CAhEyC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js\"],\n\"sourcesContent\":[\"shadow$provide[211] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAcsc = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'acsc';\\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\\nvar createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      Complex = _ref.Complex,\\n      _BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.acsc(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.acsc(0.5)           // returns number 0.5235987755982989\\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\\n   *\\n   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\\n   *\\n   * See also:\\n   *\\n   *    csc, asin, asec\\n   *\\n   * @param {number | Complex | Array | Matrix} x   Function input\\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x <= -1 || x >= 1 || config.predictable) {\\n        return (0, _index.acscNumber)(x);\\n      }\\n\\n      return new Complex(x, 0).acsc();\\n    },\\n    Complex: function Complex(x) {\\n      return x.acsc();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return new _BigNumber(1).div(x).asin();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createAcsc = createAcsc;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAcsc\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"Complex\",\"_BigNumber\",\"BigNumber\",\"number\",\"x\",\"predictable\",\"acscNumber\",\"acsc\",\"div\",\"asin\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]