["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/subset.js"],"~:js","shadow$provide[148]=function(c,b,y,a){function q(h,n){if(!(0,t.isIndex)(n))throw new TypeError(\"Index expected\");if(1!==n.size().length)throw new l.DimensionError(n.size().length,1);var r=h.length;(0,g.validateIndex)(n.min()[0],r);(0,g.validateIndex)(n.max()[0],r);var v=\"\";n.dimension(0).forEach(function(C){v+=h.charAt(C)});return v}function f(h,n,r,v){if(!n||!0!==n.isIndex)throw new TypeError(\"Index expected\");if(1!==n.size().length)throw new l.DimensionError(n.size().length,1);if(void 0!==v){if(\"string\"!==\ntypeof v||1!==v.length)throw new TypeError(\"Single character expected as defaultValue\");}else v=\" \";var C=n.dimension(0);if(C.size()[0]!==r.length)throw new l.DimensionError(C.size()[0],r.length);var z=h.length;(0,g.validateIndex)(n.min()[0]);(0,g.validateIndex)(n.max()[0]);var w=[];for(n=0;n<z;n++)w[n]=h.charAt(n);C.forEach(function(B,x){w[B]=r.charAt(x[0])});if(w.length>z)for(h=z-1,C=w.length;h<C;h++)w[h]||(w[h]=v);return w.join(\"\")}function u(h,n){if(1!==n.size().length)throw new l.DimensionError(n.size(),\n1);n=n.dimension(0);if(\"string\"!==typeof n)throw new TypeError(\"String expected as index to retrieve an object property\");return(0,d.getSafeProperty)(h,n)}function k(h,n,r){if(1!==n.size().length)throw new l.DimensionError(n.size(),1);n=n.dimension(0);if(\"string\"!==typeof n)throw new TypeError(\"String expected as index to retrieve an object property\");h=(0,p.clone)(h);(0,d.setSafeProperty)(h,n,r);return h}Object.defineProperty(a,\"__esModule\",{value:!0});a.createSubset=void 0;var t=b(14),p=b(15),g=\nb(24),d=b(147),l=b(22);c=b(25);c=(0,c.factory)(\"subset\",[\"typed\",\"matrix\"],function(h){var n=h.typed,r=h.matrix;return n(\"subset\",{\"Array, Index\":function(v,C){v=r(v).subset(C);return C.isScalar()?v:v.valueOf()},\"Matrix, Index\":function(v,C){return v.subset(C)},\"Object, Index\":u,\"string, Index\":q,\"Array, Index, any\":function(v,C,z){return r((0,p.clone)(v)).subset(C,z,void 0).valueOf()},\"Array, Index, any, any\":function(v,C,z,w){return r((0,p.clone)(v)).subset(C,z,w).valueOf()},\"Matrix, Index, any\":function(v,\nC,z){return v.clone().subset(C,z)},\"Matrix, Index, any, any\":function(v,C,z,w){return v.clone().subset(C,z,w)},\"string, Index, string\":f,\"string, Index, string, string\":f,\"Object, Index, any\":k})});a.createSubset=c}","~:source","shadow$provide[148] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubset = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _customs = require(\"../../utils/customs.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nvar createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index containing ranges for each dimension\n * @returns {string} substring\n * @private\n */\n\nexports.createSubset = createSubset;\n\nfunction _getSubstring(str, index) {\n  if (!(0, _is.isIndex)(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0], strLen);\n  (0, _array.validateIndex)(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index containing ranges for each dimension\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\n\n\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n\n  var range = index.dimension(0);\n  var len = range.size()[0];\n\n  if (len !== replacement.length) {\n    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0]);\n  (0, _array.validateIndex)(index.max()[0]); // copy the string into an array with characters\n\n  var chars = [];\n\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  }); // initialize undefined characters with a space\n\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n\n  return chars.join('');\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return (0, _customs.getSafeProperty)(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = (0, _object.clone)(object);\n  (0, _customs.setSafeProperty)(updated, key, replacement);\n  return updated;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$customs","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSubset","__esModule","value"]],"~:compiled-at",1619135723888,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$subset.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/subset.js\"],\n\"sourcesContent\":[\"shadow$provide[148] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSubset = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _customs = require(\\\"../../utils/customs.js\\\");\\n\\nvar _DimensionError = require(\\\"../../error/DimensionError.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'subset';\\nvar dependencies = ['typed', 'matrix'];\\nvar createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix;\\n\\n  /**\\n   * Get or set a subset of a matrix or string.\\n   *\\n   * Syntax:\\n   *     math.subset(value, index)                                // retrieve a subset\\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\\n   *\\n   * Examples:\\n   *\\n   *     // get a subset\\n   *     const d = [[1, 2], [3, 4]]\\n   *     math.subset(d, math.index(1, 0))        // returns 3\\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\\n   *\\n   *     // replace a subset\\n   *     const e = []\\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\\n   *\\n   * See also:\\n   *\\n   *     size, resize, squeeze, index\\n   *\\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\\n   * @param {Index} index                     An index containing ranges for each\\n   *                                          dimension\\n   * @param {*} [replacement]                 An array, matrix, or scalar.\\n   *                                          If provided, the subset is replaced with replacement.\\n   *                                          If not provided, the subset is returned\\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\\n   *                                          the matrix is resized. If not provided,\\n   *                                          math.matrix elements will be left undefined.\\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\\n   */\\n  return typed(name, {\\n    // get subset\\n    'Array, Index': function ArrayIndex(value, index) {\\n      var m = matrix(value);\\n      var subset = m.subset(index); // returns a Matrix\\n\\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\\n    },\\n    'Matrix, Index': function MatrixIndex(value, index) {\\n      return value.subset(index);\\n    },\\n    'Object, Index': _getObjectProperty,\\n    'string, Index': _getSubstring,\\n    // set subset\\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\\n      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();\\n    },\\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\\n      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();\\n    },\\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\\n      return value.clone().subset(index, replacement);\\n    },\\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\\n      return value.clone().subset(index, replacement, defaultValue);\\n    },\\n    'string, Index, string': _setSubstring,\\n    'string, Index, string, string': _setSubstring,\\n    'Object, Index, any': _setObjectProperty\\n  });\\n});\\n/**\\n * Retrieve a subset of a string\\n * @param {string} str            string from which to get a substring\\n * @param {Index} index           An index containing ranges for each dimension\\n * @returns {string} substring\\n * @private\\n */\\n\\nexports.createSubset = createSubset;\\n\\nfunction _getSubstring(str, index) {\\n  if (!(0, _is.isIndex)(index)) {\\n    // TODO: better error message\\n    throw new TypeError('Index expected');\\n  }\\n\\n  if (index.size().length !== 1) {\\n    throw new _DimensionError.DimensionError(index.size().length, 1);\\n  } // validate whether the range is out of range\\n\\n\\n  var strLen = str.length;\\n  (0, _array.validateIndex)(index.min()[0], strLen);\\n  (0, _array.validateIndex)(index.max()[0], strLen);\\n  var range = index.dimension(0);\\n  var substr = '';\\n  range.forEach(function (v) {\\n    substr += str.charAt(v);\\n  });\\n  return substr;\\n}\\n/**\\n * Replace a substring in a string\\n * @param {string} str            string to be replaced\\n * @param {Index} index           An index containing ranges for each dimension\\n * @param {string} replacement    Replacement string\\n * @param {string} [defaultValue] Default value to be uses when resizing\\n *                                the string. is ' ' by default\\n * @returns {string} result\\n * @private\\n */\\n\\n\\nfunction _setSubstring(str, index, replacement, defaultValue) {\\n  if (!index || index.isIndex !== true) {\\n    // TODO: better error message\\n    throw new TypeError('Index expected');\\n  }\\n\\n  if (index.size().length !== 1) {\\n    throw new _DimensionError.DimensionError(index.size().length, 1);\\n  }\\n\\n  if (defaultValue !== undefined) {\\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\\n      throw new TypeError('Single character expected as defaultValue');\\n    }\\n  } else {\\n    defaultValue = ' ';\\n  }\\n\\n  var range = index.dimension(0);\\n  var len = range.size()[0];\\n\\n  if (len !== replacement.length) {\\n    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);\\n  } // validate whether the range is out of range\\n\\n\\n  var strLen = str.length;\\n  (0, _array.validateIndex)(index.min()[0]);\\n  (0, _array.validateIndex)(index.max()[0]); // copy the string into an array with characters\\n\\n  var chars = [];\\n\\n  for (var i = 0; i < strLen; i++) {\\n    chars[i] = str.charAt(i);\\n  }\\n\\n  range.forEach(function (v, i) {\\n    chars[v] = replacement.charAt(i[0]);\\n  }); // initialize undefined characters with a space\\n\\n  if (chars.length > strLen) {\\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\\n      if (!chars[_i]) {\\n        chars[_i] = defaultValue;\\n      }\\n    }\\n  }\\n\\n  return chars.join('');\\n}\\n/**\\n * Retrieve a property from an object\\n * @param {Object} object\\n * @param {Index} index\\n * @return {*} Returns the value of the property\\n * @private\\n */\\n\\n\\nfunction _getObjectProperty(object, index) {\\n  if (index.size().length !== 1) {\\n    throw new _DimensionError.DimensionError(index.size(), 1);\\n  }\\n\\n  var key = index.dimension(0);\\n\\n  if (typeof key !== 'string') {\\n    throw new TypeError('String expected as index to retrieve an object property');\\n  }\\n\\n  return (0, _customs.getSafeProperty)(object, key);\\n}\\n/**\\n * Set a property on an object\\n * @param {Object} object\\n * @param {Index} index\\n * @param {*} replacement\\n * @return {*} Returns the updated object\\n * @private\\n */\\n\\n\\nfunction _setObjectProperty(object, index, replacement) {\\n  if (index.size().length !== 1) {\\n    throw new _DimensionError.DimensionError(index.size(), 1);\\n  }\\n\\n  var key = index.dimension(0);\\n\\n  if (typeof key !== 'string') {\\n    throw new TypeError('String expected as index to retrieve an object property');\\n  } // clone the object, and apply the property to the clone\\n\\n\\n  var updated = (0, _object.clone)(object);\\n  (0, _customs.setSafeProperty)(updated, key, replacement);\\n  return updated;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_getSubstring\",\"str\",\"index\",\"_is\",\"isIndex\",\"TypeError\",\"size\",\"length\",\"_DimensionError\",\"DimensionError\",\"strLen\",\"_array\",\"validateIndex\",\"min\",\"max\",\"substr\",\"dimension\",\"range\",\"forEach\",\"v\",\"charAt\",\"_setSubstring\",\"replacement\",\"defaultValue\",\"undefined\",\"len\",\"chars\",\"i\",\"_i\",\"_len\",\"join\",\"_getObjectProperty\",\"object\",\"key\",\"_customs\",\"getSafeProperty\",\"_setObjectProperty\",\"updated\",\"_object\",\"clone\",\"setSafeProperty\",\"Object\",\"defineProperty\",\"value\",\"createSubset\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"ArrayIndex\",\"subset\",\"m\",\"isScalar\",\"valueOf\",\"MatrixIndex\",\"ArrayIndexAny\",\"ArrayIndexAnyAny\",\"MatrixIndexAny\",\"MatrixIndexAnyAny\"]\n}\n"]