["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js"],"~:js","shadow$provide[98]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createMultiplyScalar=void 0;c=b(25);var q=b(50);b=(0,c.factory)(\"multiplyScalar\",[\"typed\"],function(f){f=f.typed;return f(\"multiplyScalar\",{\"number, number\":q.multiplyNumber,\"Complex, Complex\":function(u,k){return u.mul(k)},\"BigNumber, BigNumber\":function(u,k){return u.times(k)},\"Fraction, Fraction\":function(u,k){return u.mul(k)},\"number | Fraction | BigNumber | Complex, Unit\":function(u,k){k=k.clone();k.value=\nnull===k.value?k._normalize(u):this(k.value,u);return k},\"Unit, number | Fraction | BigNumber | Complex\":function(u,k){u=u.clone();u.value=null===u.value?u._normalize(k):this(u.value,k);return u},\"Unit, Unit\":function(u,k){return u.multiply(k)}})});a.createMultiplyScalar=b}","~:source","shadow$provide[98] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiplyScalar = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nvar createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': _index.multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : this(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : this(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n});\nexports.createMultiplyScalar = createMultiplyScalar;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createMultiplyScalar","value"]],"~:compiled-at",1619135723782,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$multiplyScalar.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEhCC,EAAAA,CAAWP,CAAA,CAAQ,EAAR,CAEf,KAAIQ,EAASR,CAAA,CAAQ,EAAR,CAITM,EAAAA,CAAsC,CAAC,CAAA,CAAGC,CAASE,CAAAA,OAAb,EAF/BC,gBAE+B,CADvBC,CAAC,OAADA,CACuB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAC9FC,CAAAA,CAAQD,CAAKC,CAAAA,KAcjB,OAAOA,EAAA,CAAM,gBAAN,CAAwB,CAC7B,iBAAkBL,CAAOM,CAAAA,cADI,CAE7B,mBAAoBC,QAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CADyC,CAFrB,CAK7B,uBAAwBE,QAA2B,CAACH,CAAD,CAAIC,CAAJ,CAAO,CACxD,MAAOD,EAAEI,CAAAA,KAAF,CAAQH,CAAR,CADiD,CAL7B,CAQ7B,qBAAsBI,QAAyB,CAACL,CAAD,CAAIC,CAAJ,CAAO,CACpD,MAAOD,EAAEE,CAAAA,GAAF,CAAMD,CAAN,CAD6C,CARzB,CAW7B,gDAAiDK,QAA2C,CAACN,CAAD,CAAIC,CAAJ,CAAO,CAC7FM,CAAAA,CAAMN,CAAEO,CAAAA,KAAF,EACVD,EAAIlB,CAAAA,KAAJ;AAA0B,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAIE,CAAAA,UAAJ,CAAeT,CAAf,CAArB,CAAyC,IAAA,CAAKO,CAAIlB,CAAAA,KAAT,CAAgBW,CAAhB,CACrD,OAAOO,EAH0F,CAXtE,CAgB7B,gDAAiDG,QAA2C,CAACV,CAAD,CAAIC,CAAJ,CAAO,CAC7FM,CAAAA,CAAMP,CAAEQ,CAAAA,KAAF,EACVD,EAAIlB,CAAAA,KAAJ,CAA0B,IAAd,GAAAkB,CAAIlB,CAAAA,KAAJ,CAAqBkB,CAAIE,CAAAA,UAAJ,CAAeR,CAAf,CAArB,CAAyC,IAAA,CAAKM,CAAIlB,CAAAA,KAAT,CAAgBY,CAAhB,CACrD,OAAOM,EAH0F,CAhBtE,CAqB7B,aAAcI,QAAiB,CAACX,CAAD,CAAIC,CAAJ,CAAO,CACpC,MAAOD,EAAEY,CAAAA,QAAF,CAAWX,CAAX,CAD6B,CArBT,CAAxB,CAf2F,CAA1D,CAyC1Cf,EAAQI,CAAAA,oBAAR,CAA+BA,CAvD8B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js\"],\n\"sourcesContent\":[\"shadow$provide[98] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createMultiplyScalar = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'multiplyScalar';\\nvar dependencies = ['typed'];\\nvar createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Multiply two scalar values, `x * y`.\\n   * This function is meant for internal use: it is used by the public function\\n   * `multiply`\\n   *\\n   * This function does not support collections (Array or Matrix).\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\\n   * @private\\n   */\\n  return typed('multiplyScalar', {\\n    'number, number': _index.multiplyNumber,\\n    'Complex, Complex': function ComplexComplex(x, y) {\\n      return x.mul(y);\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\\n      return x.times(y);\\n    },\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return x.mul(y);\\n    },\\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\\n      var res = y.clone();\\n      res.value = res.value === null ? res._normalize(x) : this(res.value, x);\\n      return res;\\n    },\\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\\n      var res = x.clone();\\n      res.value = res.value === null ? res._normalize(y) : this(res.value, y);\\n      return res;\\n    },\\n    'Unit, Unit': function UnitUnit(x, y) {\\n      return x.multiply(y);\\n    }\\n  });\\n});\\nexports.createMultiplyScalar = createMultiplyScalar;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createMultiplyScalar\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"multiplyNumber\",\"ComplexComplex\",\"x\",\"y\",\"mul\",\"BigNumberBigNumber\",\"times\",\"FractionFraction\",\"numberFractionBigNumberComplexUnit\",\"res\",\"clone\",\"_normalize\",\"UnitNumberFractionBigNumberComplex\",\"UnitUnit\",\"multiply\"]\n}\n"]