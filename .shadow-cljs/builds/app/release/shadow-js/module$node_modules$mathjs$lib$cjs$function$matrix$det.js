["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/det.js"],"~:js","shadow$provide[522]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createDet=void 0;var q=b(14),f=b(15),u=b(21);c=b(25);c=(0,c.factory)(\"det\",\"typed matrix subtract multiply unaryMinus lup\".split(\" \"),function(k){var t=k.typed,p=k.matrix,g=k.subtract,d=k.multiply,l=k.unaryMinus,h=k.lup;return t(\"det\",{any:function(n){return(0,f.clone)(n)},\"Array | Matrix\":function(n){if((0,q.isMatrix)(n))var r=n.size();else Array.isArray(n)?(n=p(n),r=n.size()):r=[];switch(r.length){case 0:return(0,\nf.clone)(n);case 1:if(1===r[0])return(0,f.clone)(n.valueOf()[0]);throw new RangeError(\"Matrix must be square (size: \"+(0,u.format)(r)+\")\");case 2:var v=r[0];if(v===r[1]){n=n.clone().valueOf();if(1===v)v=(0,f.clone)(n[0][0]);else if(2===v)v=g(d(n[0][0],n[1][1]),d(n[1][0],n[0][1]));else{n=h(n);r=n.U[0][0];for(var C=1;C<v;C++)r=d(r,n.U[C][C]);for(var z=C=0,w=[];;){for(;w[z];)z++;if(z>=v)break;for(var B=z,x=0;!w[n.p[B]];)w[n.p[B]]=!0,B=n.p[B],x++;0===x%2&&C++}v=0===C%2?r:l(r)}return v}throw new RangeError(\"Matrix must be square (size: \"+\n(0,u.format)(r)+\")\");default:throw new RangeError(\"Matrix must be two dimensional (size: \"+(0,u.format)(r)+\")\");}}})});a.createDet=c}","~:source","shadow$provide[522] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDet = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      unaryMinus = _ref.unaryMinus,\n      lup = _ref.lup;\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return (0, _object.clone)(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if ((0, _is.isMatrix)(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return (0, _object.clone)(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return (0, _object.clone)(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return (0, _object.clone)(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var det = decomp.U[0][0];\n\n      for (var _i = 1; _i < rows; _i++) {\n        det = multiply(det, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n\n      return evenCycles % 2 === 0 ? det : unaryMinus(det);\n    }\n  }\n});\nexports.createDet = createDet;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createDet","__esModule","any","value"]],"~:compiled-at",1619135724016,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$det.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/det.js\"],\n\"sourcesContent\":[\"shadow$provide[522] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDet = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'det';\\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];\\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      matrix = _ref.matrix,\\n      subtract = _ref.subtract,\\n      multiply = _ref.multiply,\\n      unaryMinus = _ref.unaryMinus,\\n      lup = _ref.lup;\\n\\n  /**\\n   * Calculate the determinant of a matrix.\\n   *\\n   * Syntax:\\n   *\\n   *    math.det(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.det([[1, 2], [3, 4]]) // returns -2\\n   *\\n   *    const A = [\\n   *      [-2, 2, 3],\\n   *      [-1, 1, 3],\\n   *      [2, 0, -1]\\n   *    ]\\n   *    math.det(A) // returns 6\\n   *\\n   * See also:\\n   *\\n   *    inv\\n   *\\n   * @param {Array | Matrix} x  A matrix\\n   * @return {number} The determinant of `x`\\n   */\\n  return typed(name, {\\n    any: function any(x) {\\n      return (0, _object.clone)(x);\\n    },\\n    'Array | Matrix': function det(x) {\\n      var size;\\n\\n      if ((0, _is.isMatrix)(x)) {\\n        size = x.size();\\n      } else if (Array.isArray(x)) {\\n        x = matrix(x);\\n        size = x.size();\\n      } else {\\n        // a scalar\\n        size = [];\\n      }\\n\\n      switch (size.length) {\\n        case 0:\\n          // scalar\\n          return (0, _object.clone)(x);\\n\\n        case 1:\\n          // vector\\n          if (size[0] === 1) {\\n            return (0, _object.clone)(x.valueOf()[0]);\\n          } else {\\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n          }\\n\\n        case 2:\\n          {\\n            // two dimensional array\\n            var rows = size[0];\\n            var cols = size[1];\\n\\n            if (rows === cols) {\\n              return _det(x.clone().valueOf(), rows, cols);\\n            } else {\\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\\n            }\\n          }\\n\\n        default:\\n          // multi dimensional array\\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\\n      }\\n    }\\n  });\\n  /**\\n   * Calculate the determinant of a matrix\\n   * @param {Array[]} matrix  A square, two dimensional matrix\\n   * @param {number} rows     Number of rows of the matrix (zero-based)\\n   * @param {number} cols     Number of columns of the matrix (zero-based)\\n   * @returns {number} det\\n   * @private\\n   */\\n\\n  function _det(matrix, rows, cols) {\\n    if (rows === 1) {\\n      // this is a 1 x 1 matrix\\n      return (0, _object.clone)(matrix[0][0]);\\n    } else if (rows === 2) {\\n      // this is a 2 x 2 matrix\\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\\n    } else {\\n      // Compute the LU decomposition\\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\\n\\n      var det = decomp.U[0][0];\\n\\n      for (var _i = 1; _i < rows; _i++) {\\n        det = multiply(det, decomp.U[_i][_i]);\\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\\n\\n\\n      var evenCycles = 0;\\n      var i = 0;\\n      var visited = [];\\n\\n      while (true) {\\n        while (visited[i]) {\\n          i++;\\n        }\\n\\n        if (i >= rows) break;\\n        var j = i;\\n        var cycleLen = 0;\\n\\n        while (!visited[decomp.p[j]]) {\\n          visited[decomp.p[j]] = true;\\n          j = decomp.p[j];\\n          cycleLen++;\\n        }\\n\\n        if (cycleLen % 2 === 0) {\\n          evenCycles++;\\n        }\\n      }\\n\\n      return evenCycles % 2 === 0 ? det : unaryMinus(det);\\n    }\\n  }\\n});\\nexports.createDet = createDet;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDet\",\"_is\",\"_object\",\"_string\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"matrix\",\"subtract\",\"multiply\",\"unaryMinus\",\"lup\",\"any\",\"x\",\"clone\",\"det\",\"isMatrix\",\"size\",\"Array\",\"isArray\",\"length\",\"valueOf\",\"RangeError\",\"format\",\"rows\",\"cols\",\"decomp\",\"U\",\"_i\",\"i\",\"evenCycles\",\"visited\",\"j\",\"cycleLen\",\"p\"]\n}\n"]