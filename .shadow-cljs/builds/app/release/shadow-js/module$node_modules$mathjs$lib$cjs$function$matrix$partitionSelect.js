["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js"],"~:js","shadow$provide[194]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createPartitionSelect=void 0;var q=b(14),f=b(19);c=b(25);c=(0,c.factory)(\"partitionSelect\",[\"typed\",\"isNumeric\",\"isNaN\",\"compare\"],function(u){function k(n,r,v){if(!(0,f.isInteger)(r)||0>r)throw Error(\"k must be a non-negative integer\");if((0,q.isMatrix)(n)){if(1<n.size().length)throw Error(\"Only one dimensional matrices supported\");return t(n.valueOf(),r,v)}if(Array.isArray(n))return t(n,r,v)}function t(n,r,\nv){if(r>=n.length)throw Error(\"k out of bounds\");for(var C=0;C<n.length;C++)if(g(n[C])&&d(n[C]))return n[C];C=0;for(var z=n.length-1;C<z;){for(var w=C,B=z,x=n[Math.floor(Math.random()*(z-C+1))+C];w<B;)if(0<=v(n[w],x)){var D=n[B];n[B]=n[w];n[w]=D;--B}else++w;0<v(n[w],x)&&--w;r<=w?z=w:C=w+1}return n[r]}var p=u.typed,g=u.isNumeric,d=u.isNaN,l=u.compare,h=function(n,r){return-l(n,r)};return p(\"partitionSelect\",{\"Array | Matrix, number\":function(n,r){return k(n,r,l)},\"Array | Matrix, number, string\":function(n,\nr,v){if(\"asc\"===v)return k(n,r,l);if(\"desc\"===v)return k(n,r,h);throw Error('Compare string must be \"asc\" or \"desc\"');},\"Array | Matrix, number, function\":k})});a.createPartitionSelect=c}","~:source","shadow$provide[194] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPartitionSelect = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nvar createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNumeric = _ref.isNumeric,\n      isNaN = _ref.isNaN,\n      compare = _ref.compare;\n  var asc = compare;\n\n  var desc = function desc(a, b) {\n    return -compare(a, b);\n  };\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n\n\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!(0, _number.isInteger)(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if ((0, _is.isMatrix)(x)) {\n      var size = x.size();\n\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n\n\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    } // check for NaN values since these can cause an infinite while loop\n\n\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1; // if from == to we reached the kth element\n\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets\n\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n\n\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      } // the r pointer is on the end of the first k elements\n\n\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n});\nexports.createPartitionSelect = createPartitionSelect;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createPartitionSelect","__esModule","value"]],"~:compiled-at",1619135723922,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$partitionSelect.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js\"],\n\"sourcesContent\":[\"shadow$provide[194] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createPartitionSelect = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'partitionSelect';\\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\\nvar createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      isNumeric = _ref.isNumeric,\\n      isNaN = _ref.isNaN,\\n      compare = _ref.compare;\\n  var asc = compare;\\n\\n  var desc = function desc(a, b) {\\n    return -compare(a, b);\\n  };\\n  /**\\n   * Partition-based selection of an array or 1D matrix.\\n   * Will find the kth smallest value, and mutates the input array.\\n   * Uses Quickselect.\\n   *\\n   * Syntax:\\n   *\\n   *    math.partitionSelect(x, k)\\n   *    math.partitionSelect(x, k, compare)\\n   *\\n   * Examples:\\n   *\\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\\n   *\\n   *    function sortByLength (a, b) {\\n   *      return a.length - b.length\\n   *    }\\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\\n   *\\n   * See also:\\n   *\\n   *    sort\\n   *\\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\\n   *        An optional comparator function. The function is called as\\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\\n   *        and 0 when a == b.\\n   * @return {*} Returns the kth lowest value.\\n   */\\n\\n\\n  return typed(name, {\\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\\n      return _partitionSelect(x, k, asc);\\n    },\\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\\n      if (compare === 'asc') {\\n        return _partitionSelect(x, k, asc);\\n      } else if (compare === 'desc') {\\n        return _partitionSelect(x, k, desc);\\n      } else {\\n        throw new Error('Compare string must be \\\"asc\\\" or \\\"desc\\\"');\\n      }\\n    },\\n    'Array | Matrix, number, function': _partitionSelect\\n  });\\n\\n  function _partitionSelect(x, k, compare) {\\n    if (!(0, _number.isInteger)(k) || k < 0) {\\n      throw new Error('k must be a non-negative integer');\\n    }\\n\\n    if ((0, _is.isMatrix)(x)) {\\n      var size = x.size();\\n\\n      if (size.length > 1) {\\n        throw new Error('Only one dimensional matrices supported');\\n      }\\n\\n      return quickSelect(x.valueOf(), k, compare);\\n    }\\n\\n    if (Array.isArray(x)) {\\n      return quickSelect(x, k, compare);\\n    }\\n  }\\n  /**\\n   * Quickselect algorithm.\\n   * Code adapted from:\\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\\n   *\\n   * @param {Array} arr\\n   * @param {Number} k\\n   * @param {Function} compare\\n   * @private\\n   */\\n\\n\\n  function quickSelect(arr, k, compare) {\\n    if (k >= arr.length) {\\n      throw new Error('k out of bounds');\\n    } // check for NaN values since these can cause an infinite while loop\\n\\n\\n    for (var i = 0; i < arr.length; i++) {\\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\\n        return arr[i]; // return NaN\\n      }\\n    }\\n\\n    var from = 0;\\n    var to = arr.length - 1; // if from == to we reached the kth element\\n\\n    while (from < to) {\\n      var r = from;\\n      var w = to;\\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets\\n\\n      while (r < w) {\\n        // arr[r] >= pivot\\n        if (compare(arr[r], pivot) >= 0) {\\n          // put the large values at the end\\n          var tmp = arr[w];\\n          arr[w] = arr[r];\\n          arr[r] = tmp;\\n          --w;\\n        } else {\\n          // the value is smaller than the pivot, skip\\n          ++r;\\n        }\\n      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)\\n\\n\\n      if (compare(arr[r], pivot) > 0) {\\n        --r;\\n      } // the r pointer is on the end of the first k elements\\n\\n\\n      if (k <= r) {\\n        to = r;\\n      } else {\\n        from = r + 1;\\n      }\\n    }\\n\\n    return arr[k];\\n  }\\n});\\nexports.createPartitionSelect = createPartitionSelect;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createPartitionSelect\",\"_is\",\"_number\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_partitionSelect\",\"x\",\"k\",\"compare\",\"isInteger\",\"Error\",\"isMatrix\",\"size\",\"length\",\"quickSelect\",\"valueOf\",\"Array\",\"isArray\",\"arr\",\"i\",\"isNumeric\",\"isNaN\",\"from\",\"to\",\"r\",\"w\",\"pivot\",\"Math\",\"floor\",\"random\",\"tmp\",\"typed\",\"desc\",\"a\",\"b\",\"ArrayMatrixNumber\",\"ArrayMatrixNumberString\"]\n}\n"]