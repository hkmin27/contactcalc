["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/resize.js"],"~:js","shadow$provide[141]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createResize=void 0;var q=b(14),f=b(22),u=b(140),k=b(19),t=b(21),p=b(15),g=b(24);c=b(25);c=(0,c.factory)(\"resize\",[\"config\",\"matrix\"],function(d){function l(r,v,C){if(void 0!==C){if(\"string\"!==typeof C||1!==C.length)throw new TypeError(\"Single character expected as defaultValue\");}else C=\" \";if(1!==v.length)throw new f.DimensionError(v.length,1);var z=v[0];if(\"number\"!==typeof z||!(0,k.isInteger)(z))throw new TypeError(\"Invalid size, must contain positive integers (size: \"+\n(0,t.format)(v)+\")\");if(r.length>z)return r.substring(0,z);if(r.length<z){v=r;var w=0;for(r=z-r.length;w<r;w++)v+=C;return v}return r}var h=d.config,n=d.matrix;return function(r,v,C){if(2!==arguments.length&&3!==arguments.length)throw new u.ArgumentsError(\"resize\",arguments.length,2,3);(0,q.isMatrix)(v)&&(v=v.valueOf());(0,q.isBigNumber)(v[0])&&(v=v.map(function(B){return(0,q.isBigNumber)(B)?B.toNumber():B}));if((0,q.isMatrix)(r))return r.resize(v,C,!0);if(\"string\"===typeof r)return l(r,v,C);var z=\nArray.isArray(r)?!1:\"Array\"!==h.matrix;if(0===v.length){for(;Array.isArray(r);)r=r[0];return(0,p.clone)(r)}Array.isArray(r)||(r=[r]);r=(0,p.clone)(r);var w=(0,g.resize)(r,v,C);return z?n(w):w}});a.createResize=c}","~:source","shadow$provide[141] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createResize = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _DimensionError = require(\"../../error/DimensionError.js\");\n\nvar _ArgumentsError = require(\"../../error/ArgumentsError.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nvar createResize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      matrix = _ref.matrix;\n\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new _ArgumentsError.ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if ((0, _is.isMatrix)(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if ((0, _is.isBigNumber)(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !(0, _is.isBigNumber)(value) ? value : value.toNumber();\n      });\n    } // check x is a Matrix\n\n\n    if ((0, _is.isMatrix)(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    } // check result should be a matrix\n\n\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return (0, _object.clone)(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n\n      x = (0, _object.clone)(x);\n      var res = (0, _array.resize)(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new _DimensionError.DimensionError(size.length, 1);\n    }\n\n    var len = size[0];\n\n    if (typeof len !== 'number' || !(0, _number.isInteger)(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n\n      return res;\n    } else {\n      return str;\n    }\n  }\n});\nexports.createResize = createResize;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$module$node_modules$mathjs$lib$cjs$error$DimensionError","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$error$ArgumentsError","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createResize"]],"~:compiled-at",1619135723881,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$resize.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/resize.js\"],\n\"sourcesContent\":[\"shadow$provide[141] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createResize = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _DimensionError = require(\\\"../../error/DimensionError.js\\\");\\n\\nvar _ArgumentsError = require(\\\"../../error/ArgumentsError.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'resize';\\nvar dependencies = ['config', 'matrix'];\\nvar createResize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var config = _ref.config,\\n      matrix = _ref.matrix;\\n\\n  /**\\n   * Resize a matrix\\n   *\\n   * Syntax:\\n   *\\n   *     math.resize(x, size)\\n   *     math.resize(x, size, defaultValue)\\n   *\\n   * Examples:\\n   *\\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\\n   *     math.resize(\\\"hello\\\", [8], \\\"!\\\")    // returns string 'hello!!!'\\n   *\\n   * See also:\\n   *\\n   *     size, squeeze, subset, reshape\\n   *\\n   * @param {Array | Matrix | *} x             Matrix to be resized\\n   * @param {Array | Matrix} size              One dimensional array with numbers\\n   * @param {number | string} [defaultValue=0] Zero by default, except in\\n   *                                           case of a string, in that case\\n   *                                           defaultValue = ' '\\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\\n   */\\n  // TODO: rework resize to a typed-function\\n  return function resize(x, size, defaultValue) {\\n    if (arguments.length !== 2 && arguments.length !== 3) {\\n      throw new _ArgumentsError.ArgumentsError('resize', arguments.length, 2, 3);\\n    }\\n\\n    if ((0, _is.isMatrix)(size)) {\\n      size = size.valueOf(); // get Array\\n    }\\n\\n    if ((0, _is.isBigNumber)(size[0])) {\\n      // convert bignumbers to numbers\\n      size = size.map(function (value) {\\n        return !(0, _is.isBigNumber)(value) ? value : value.toNumber();\\n      });\\n    } // check x is a Matrix\\n\\n\\n    if ((0, _is.isMatrix)(x)) {\\n      // use optimized matrix implementation, return copy\\n      return x.resize(size, defaultValue, true);\\n    }\\n\\n    if (typeof x === 'string') {\\n      // resize string\\n      return _resizeString(x, size, defaultValue);\\n    } // check result should be a matrix\\n\\n\\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\\n\\n    if (size.length === 0) {\\n      // output a scalar\\n      while (Array.isArray(x)) {\\n        x = x[0];\\n      }\\n\\n      return (0, _object.clone)(x);\\n    } else {\\n      // output an array/matrix\\n      if (!Array.isArray(x)) {\\n        x = [x];\\n      }\\n\\n      x = (0, _object.clone)(x);\\n      var res = (0, _array.resize)(x, size, defaultValue);\\n      return asMatrix ? matrix(res) : res;\\n    }\\n  };\\n  /**\\n   * Resize a string\\n   * @param {string} str\\n   * @param {number[]} size\\n   * @param {string} [defaultChar=' ']\\n   * @private\\n   */\\n\\n  function _resizeString(str, size, defaultChar) {\\n    if (defaultChar !== undefined) {\\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\\n        throw new TypeError('Single character expected as defaultValue');\\n      }\\n    } else {\\n      defaultChar = ' ';\\n    }\\n\\n    if (size.length !== 1) {\\n      throw new _DimensionError.DimensionError(size.length, 1);\\n    }\\n\\n    var len = size[0];\\n\\n    if (typeof len !== 'number' || !(0, _number.isInteger)(len)) {\\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');\\n    }\\n\\n    if (str.length > len) {\\n      return str.substring(0, len);\\n    } else if (str.length < len) {\\n      var res = str;\\n\\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\\n        res += defaultChar;\\n      }\\n\\n      return res;\\n    } else {\\n      return str;\\n    }\\n  }\\n});\\nexports.createResize = createResize;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createResize\",\"_is\",\"_DimensionError\",\"_ArgumentsError\",\"_number\",\"_string\",\"_object\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_resizeString\",\"str\",\"size\",\"defaultChar\",\"undefined\",\"length\",\"TypeError\",\"DimensionError\",\"len\",\"isInteger\",\"format\",\"substring\",\"res\",\"i\",\"ii\",\"config\",\"matrix\",\"resize\",\"x\",\"defaultValue\",\"arguments\",\"ArgumentsError\",\"isMatrix\",\"valueOf\",\"isBigNumber\",\"map\",\"toNumber\",\"asMatrix\",\"Array\",\"isArray\",\"clone\"]\n}\n"]