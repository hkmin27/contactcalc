["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isNumeric.js"],"~:js","shadow$provide[52]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIsNumeric=void 0;var q=b(38);c=b(25);c=(0,c.factory)(\"isNumeric\",[\"typed\"],function(f){f=f.typed;return f(\"isNumeric\",{\"number | BigNumber | Fraction | boolean\":function(){return!0},\"Complex | Unit | string | null | undefined | Node\":function(){return!1},\"Array | Matrix\":function(u){return(0,q.deepMap)(u,this)}})});a.createIsNumeric=c}","~:source","shadow$provide[52] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsNumeric = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isNumeric';\nvar dependencies = ['typed'];\nvar createIsNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2)                     // returns true\n   *    math.isNumeric('2')                   // returns false\n   *    math.hasNumericValue('2')             // returns true\n   *    math.isNumeric(0)                     // returns true\n   *    math.isNumeric(math.bignumber(500))   // returns true\n   *    math.isNumeric(math.fraction(4))      // returns true\n   *    math.isNumeric(math.complex('2-4i')   // returns false\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {\n      return true;\n    },\n    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {\n      return false;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsNumeric = createIsNumeric;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createIsNumeric"]],"~:compiled-at",1619135723754,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isNumeric.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG7DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,EAAcP,CAAA,CAAQ,EAAR,CAEdQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAiC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CACkB,CAA0C,QAAS,CAACC,CAAD,CAAO,CACzFC,CAAAA,CAAQD,CAAKC,CAAAA,KA+BjB,OAAOA,EAAA,CAlCEH,WAkCF,CAAY,CACjB,0CAA2CI,QAAuC,EAAG,CACnF,MAAO,CAAA,CAD4E,CADpE,CAIjB,oDAAqDC,QAA2C,EAAG,CACjG,MAAO,CAAA,CAD0F,CAJlF,CAOjB,iBAAkBC,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,CAAYW,CAAAA,OAAhB,EAAyBD,CAAzB,CAA4B,IAA5B,CADiC,CAPzB,CAAZ,CAhCsF,CAA1D,CA4CrCf,EAAQI,CAAAA,eAAR,CAA0BA,CA1DmC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isNumeric.js\"],\n\"sourcesContent\":[\"shadow$provide[52] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsNumeric = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'isNumeric';\\nvar dependencies = ['typed'];\\nvar createIsNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is an numeric value.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isNumeric(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isNumeric(2)                     // returns true\\n   *    math.isNumeric('2')                   // returns false\\n   *    math.hasNumericValue('2')             // returns true\\n   *    math.isNumeric(0)                     // returns true\\n   *    math.isNumeric(math.bignumber(500))   // returns true\\n   *    math.isNumeric(math.fraction(4))      // returns true\\n   *    math.isNumeric(math.complex('2-4i')   // returns false\\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\\n   *\\n   * See also:\\n   *\\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\\n   *\\n   * @param {*} x       Value to be tested\\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\\n   *                    `Fraction`, or `boolean`. Returns false for other types.\\n   *                    Throws an error in case of unknown types.\\n   */\\n  return typed(name, {\\n    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {\\n      return true;\\n    },\\n    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {\\n      return false;\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsNumeric = createIsNumeric;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsNumeric\",\"_collection\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"numberBigNumberFractionBoolean\",\"ComplexUnitStringNullUndefinedNode\",\"ArrayMatrix\",\"x\",\"deepMap\"]\n}\n"]