["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/reshape.js"],"~:js","shadow$provide[139]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createReshape=void 0;var q=b(24);c=b(25);c=(0,c.factory)(\"reshape\",[\"typed\",\"isInteger\",\"matrix\"],function(f){var u=f.typed,k=f.isInteger;return u(\"reshape\",{\"Matrix, Array\":function(t,p){return t.reshape(p)},\"Array, Array\":function(t,p){p.forEach(function(g){if(!k(g))throw new TypeError(\"Invalid size for dimension: \"+g);});return(0,q.reshape)(t,p)}})});a.createReshape=c}","~:source","shadow$provide[139] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReshape = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nvar createReshape = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4])\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\n   *     math.reshape(x, [2, 2, 2])\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\n   *    // returns Matrix [[1, 2], [3, 4]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension. One -1 is allowed as wildcard,\n   *                                which calculates this dimension automatically.\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      return x.reshape(sizes);\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return (0, _array.reshape)(x, sizes);\n    }\n  });\n});\nexports.createReshape = createReshape;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createReshape"]],"~:compiled-at",1619135723874,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$reshape.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,EAASP,CAAA,CAAQ,EAAR,CAETQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAA+B,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAFxBC,SAEwB,CADhBC,CAAC,OAADA,CAAU,WAAVA,CAAuB,QAAvBA,CACgB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAAA,IACvFC,EAAQD,CAAKC,CAAAA,KAD0E,CAEvFC,EAAYF,CAAKE,CAAAA,SA0CrB,OAAOD,EAAA,CA9CEH,SA8CF,CAAY,CACjB,gBAAiBK,QAAoB,CAACC,CAAD,CAAIC,CAAJ,CAAW,CAC9C,MAAOD,EAAEE,CAAAA,OAAF,CAAUD,CAAV,CADuC,CAD/B,CAIjB,eAAgBE,QAAmB,CAACH,CAAD,CAAIC,CAAJ,CAAW,CAC5CA,CAAMG,CAAAA,OAAN,CAAc,QAAS,CAACC,CAAD,CAAO,CAC5B,GAAI,CAACP,CAAA,CAAUO,CAAV,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,8BAAd,CAA+CD,CAA/C,CAAN,CAF0B,CAA9B,CAKA,OAAO,CAAC,CAAA,CAAGd,CAAOW,CAAAA,OAAX,EAAoBF,CAApB,CAAuBC,CAAvB,CANqC,CAJ7B,CAAZ,CA5CoF,CAA1D,CA0DnCf,EAAQI,CAAAA,aAAR,CAAwBA,CAxEsC;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/reshape.js\"],\n\"sourcesContent\":[\"shadow$provide[139] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createReshape = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'reshape';\\nvar dependencies = ['typed', 'isInteger', 'matrix'];\\nvar createReshape = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      isInteger = _ref.isInteger;\\n\\n  /**\\n   * Reshape a multi dimensional array to fit the specified dimensions\\n   *\\n   * Syntax:\\n   *\\n   *     math.reshape(x, sizes)\\n   *\\n   * Examples:\\n   *\\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\\n   *\\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\\n   *     // returns Array  [[1, 2, 3, 4]]\\n   *\\n   *     math.reshape([[1, 2], [3, 4]], [4])\\n   *     // returns Array [1, 2, 3, 4]\\n   *\\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\\n   *     math.reshape(x, [2, 2, 2])\\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\\n   *\\n   *    math.reshape([1, 2, 3, 4], [-1, 2])\\n   *    // returns Matrix [[1, 2], [3, 4]]\\n   *\\n   * See also:\\n   *\\n   *     size, squeeze, resize\\n   *\\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\\n   * @param {number[]} sizes        One dimensional array with integral sizes for\\n   *                                each dimension. One -1 is allowed as wildcard,\\n   *                                which calculates this dimension automatically.\\n   *\\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\\n   *\\n   * @throws {TypeError}            If `sizes` does not contain solely integers\\n   * @throws {DimensionError}       If the product of the new dimension sizes does\\n   *                                not equal that of the old ones\\n   */\\n  return typed(name, {\\n    'Matrix, Array': function MatrixArray(x, sizes) {\\n      return x.reshape(sizes);\\n    },\\n    'Array, Array': function ArrayArray(x, sizes) {\\n      sizes.forEach(function (size) {\\n        if (!isInteger(size)) {\\n          throw new TypeError('Invalid size for dimension: ' + size);\\n        }\\n      });\\n      return (0, _array.reshape)(x, sizes);\\n    }\\n  });\\n});\\nexports.createReshape = createReshape;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createReshape\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"isInteger\",\"MatrixArray\",\"x\",\"sizes\",\"reshape\",\"ArrayArray\",\"forEach\",\"size\",\"TypeError\"]\n}\n"]