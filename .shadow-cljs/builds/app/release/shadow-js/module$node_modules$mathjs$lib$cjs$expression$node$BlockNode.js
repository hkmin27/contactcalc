["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/node/BlockNode.js"],"~:js","shadow$provide[257]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createBlockNode=void 0;var q=b(14),f=b(24);c=b(25);c=(0,c.factory)(\"BlockNode\",[\"ResultSet\",\"Node\"],function(u){function k(p){if(!(this instanceof k))throw new SyntaxError(\"Constructor must be called with the new operator\");if(!Array.isArray(p))throw Error(\"Array expected\");this.blocks=p.map(function(g){var d=g&&g.node;g=g&&void 0!==g.visible?g.visible:!0;if(!(0,q.isNode)(d))throw new TypeError('Property \"node\" must be a Node');\nif(\"boolean\"!==typeof g)throw new TypeError('Property \"visible\" must be a boolean');return{node:d,visible:g}})}var t=u.ResultSet;k.prototype=new u.Node;k.prototype.type=\"BlockNode\";k.prototype.isBlockNode=!0;k.prototype._compile=function(p,g){var d=(0,f.map)(this.blocks,function(l){return{evaluate:l.node._compile(p,g),visible:l.visible}});return function(l,h,n){var r=[];(0,f.forEach)(d,function(v){var C=v.evaluate(l,h,n);v.visible&&r.push(C)});return new t(r)}};k.prototype.forEach=function(p){for(var g=\n0;g<this.blocks.length;g++)p(this.blocks[g].node,\"blocks[\"+g+\"].node\",this)};k.prototype.map=function(p){for(var g=[],d=0;d<this.blocks.length;d++){var l=this.blocks[d],h=this._ifNode(p(l.node,\"blocks[\"+d+\"].node\",this));g[d]={node:h,visible:l.visible}}return new k(g)};k.prototype.clone=function(){var p=this.blocks.map(function(g){return{node:g.node,visible:g.visible}});return new k(p)};k.prototype._toString=function(p){return this.blocks.map(function(g){return g.node.toString(p)+(g.visible?\"\":\";\")}).join(\"\\n\")};\nk.prototype.toJSON=function(){return{mathjs:\"BlockNode\",blocks:this.blocks}};k.fromJSON=function(p){return new k(p.blocks)};k.prototype.toHTML=function(p){return this.blocks.map(function(g){return g.node.toHTML(p)+(g.visible?\"\":'\\x3cspan class\\x3d\"math-separator\"\\x3e;\\x3c/span\\x3e')}).join('\\x3cspan class\\x3d\"math-separator\"\\x3e\\x3cbr /\\x3e\\x3c/span\\x3e')};k.prototype._toTex=function(p){return this.blocks.map(function(g){return g.node.toTex(p)+(g.visible?\"\":\";\")}).join(\"\\\\;\\\\;\\n\")};return k},{isClass:!0,\nisNode:!0});a.createBlockNode=c}","~:source","shadow$provide[257] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBlockNode = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nvar createBlockNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var ResultSet = _ref.ResultSet,\n      Node = _ref.Node;\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!(0, _is.isNode)(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = (0, _array.map)(this.blocks, function (block) {\n      return {\n        evaluate: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      (0, _array.forEach)(evalBlocks, function evalBlockNode(block) {\n        var result = block.evaluate(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createBlockNode = createBlockNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["map","forEach","fromJSON","isClass","toHTML","prototype","_toString","isNode","_toTex","__esModule","isBlockNode","blocks","createBlockNode","value","evaluate","visible","mathjs","type","clone","_compile","node","toJSON"]],"~:compiled-at",1619135723957,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$node$BlockNode.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/node/BlockNode.js\"],\n\"sourcesContent\":[\"shadow$provide[257] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBlockNode = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'BlockNode';\\nvar dependencies = ['ResultSet', 'Node'];\\nvar createBlockNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var ResultSet = _ref.ResultSet,\\n      Node = _ref.Node;\\n\\n  /**\\n   * @constructor BlockNode\\n   * @extends {Node}\\n   * Holds a set with blocks\\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\\n   *            An array with blocks, where a block is constructed as an Object\\n   *            with properties block, which is a Node, and visible, which is\\n   *            a boolean. The property visible is optional and is true by default\\n   */\\n  function BlockNode(blocks) {\\n    if (!(this instanceof BlockNode)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    } // validate input, copy blocks\\n\\n\\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\\n    this.blocks = blocks.map(function (block) {\\n      var node = block && block.node;\\n      var visible = block && block.visible !== undefined ? block.visible : true;\\n      if (!(0, _is.isNode)(node)) throw new TypeError('Property \\\"node\\\" must be a Node');\\n      if (typeof visible !== 'boolean') throw new TypeError('Property \\\"visible\\\" must be a boolean');\\n      return {\\n        node: node,\\n        visible: visible\\n      };\\n    });\\n  }\\n\\n  BlockNode.prototype = new Node();\\n  BlockNode.prototype.type = 'BlockNode';\\n  BlockNode.prototype.isBlockNode = true;\\n  /**\\n   * Compile a node into a JavaScript function.\\n   * This basically pre-calculates as much as possible and only leaves open\\n   * calculations which depend on a dynamic scope with variables.\\n   * @param {Object} math     Math.js namespace with functions and constants.\\n   * @param {Object} argNames An object with argument names as key and `true`\\n   *                          as value. Used in the SymbolNode to optimize\\n   *                          for arguments from user assigned functions\\n   *                          (see FunctionAssignmentNode) or special symbols\\n   *                          like `end` (see IndexNode).\\n   * @return {function} Returns a function which can be called like:\\n   *                        evalNode(scope: Object, args: Object, context: *)\\n   */\\n\\n  BlockNode.prototype._compile = function (math, argNames) {\\n    var evalBlocks = (0, _array.map)(this.blocks, function (block) {\\n      return {\\n        evaluate: block.node._compile(math, argNames),\\n        visible: block.visible\\n      };\\n    });\\n    return function evalBlockNodes(scope, args, context) {\\n      var results = [];\\n      (0, _array.forEach)(evalBlocks, function evalBlockNode(block) {\\n        var result = block.evaluate(scope, args, context);\\n\\n        if (block.visible) {\\n          results.push(result);\\n        }\\n      });\\n      return new ResultSet(results);\\n    };\\n  };\\n  /**\\n   * Execute a callback for each of the child blocks of this node\\n   * @param {function(child: Node, path: string, parent: Node)} callback\\n   */\\n\\n\\n  BlockNode.prototype.forEach = function (callback) {\\n    for (var i = 0; i < this.blocks.length; i++) {\\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\\n    }\\n  };\\n  /**\\n   * Create a new BlockNode having it's childs be the results of calling\\n   * the provided callback function for each of the childs of the original node.\\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\\n   * @returns {BlockNode} Returns a transformed copy of the node\\n   */\\n\\n\\n  BlockNode.prototype.map = function (callback) {\\n    var blocks = [];\\n\\n    for (var i = 0; i < this.blocks.length; i++) {\\n      var block = this.blocks[i];\\n\\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\\n\\n      blocks[i] = {\\n        node: node,\\n        visible: block.visible\\n      };\\n    }\\n\\n    return new BlockNode(blocks);\\n  };\\n  /**\\n   * Create a clone of this node, a shallow copy\\n   * @return {BlockNode}\\n   */\\n\\n\\n  BlockNode.prototype.clone = function () {\\n    var blocks = this.blocks.map(function (block) {\\n      return {\\n        node: block.node,\\n        visible: block.visible\\n      };\\n    });\\n    return new BlockNode(blocks);\\n  };\\n  /**\\n   * Get string representation\\n   * @param {Object} options\\n   * @return {string} str\\n   * @override\\n   */\\n\\n\\n  BlockNode.prototype._toString = function (options) {\\n    return this.blocks.map(function (param) {\\n      return param.node.toString(options) + (param.visible ? '' : ';');\\n    }).join('\\\\n');\\n  };\\n  /**\\n   * Get a JSON representation of the node\\n   * @returns {Object}\\n   */\\n\\n\\n  BlockNode.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'BlockNode',\\n      blocks: this.blocks\\n    };\\n  };\\n  /**\\n   * Instantiate an BlockNode from its JSON representation\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"BlockNode\\\", blocks: [{node: ..., visible: false}, ...]}`,\\n   *                       where mathjs is optional\\n   * @returns {BlockNode}\\n   */\\n\\n\\n  BlockNode.fromJSON = function (json) {\\n    return new BlockNode(json.blocks);\\n  };\\n  /**\\n   * Get HTML representation\\n   * @param {Object} options\\n   * @return {string} str\\n   * @override\\n   */\\n\\n\\n  BlockNode.prototype.toHTML = function (options) {\\n    return this.blocks.map(function (param) {\\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\\\"math-separator\\\">;</span>');\\n    }).join('<span class=\\\"math-separator\\\"><br /></span>');\\n  };\\n  /**\\n   * Get LaTeX representation\\n   * @param {Object} options\\n   * @return {string} str\\n   */\\n\\n\\n  BlockNode.prototype._toTex = function (options) {\\n    return this.blocks.map(function (param) {\\n      return param.node.toTex(options) + (param.visible ? '' : ';');\\n    }).join('\\\\\\\\;\\\\\\\\;\\\\n');\\n  };\\n\\n  return BlockNode;\\n}, {\\n  isClass: true,\\n  isNode: true\\n});\\nexports.createBlockNode = createBlockNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBlockNode\",\"_is\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"BlockNode\",\"blocks\",\"SyntaxError\",\"Array\",\"isArray\",\"Error\",\"map\",\"block\",\"node\",\"visible\",\"undefined\",\"isNode\",\"TypeError\",\"ResultSet\",\"prototype\",\"Node\",\"type\",\"isBlockNode\",\"_compile\",\"BlockNode.prototype._compile\",\"math\",\"argNames\",\"evalBlocks\",\"evaluate\",\"evalBlockNodes\",\"scope\",\"args\",\"context\",\"results\",\"forEach\",\"evalBlockNode\",\"result\",\"push\",\"BlockNode.prototype.forEach\",\"callback\",\"i\",\"length\",\"BlockNode.prototype.map\",\"_ifNode\",\"clone\",\"BlockNode.prototype.clone\",\"_toString\",\"BlockNode.prototype._toString\",\"options\",\"param\",\"toString\",\"join\",\"toJSON\",\"BlockNode.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"BlockNode.fromJSON\",\"json\",\"toHTML\",\"BlockNode.prototype.toHTML\",\"_toTex\",\"BlockNode.prototype._toTex\",\"toTex\",\"isClass\"]\n}\n"]