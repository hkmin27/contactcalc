["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/transform/index.transform.js"],"~:js","shadow$provide[579]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createIndexTransform=void 0;var q=b(14);c=b(25);c=(0,c.factory)(\"index\",[\"Index\"],function(f){var u=f.Index;return function(){for(var k=[],t=0,p=arguments.length;t<p;t++){var g=arguments[t];if((0,q.isRange)(g))g.start--,g.end-=0<g.step?0:2;else if(g&&!0===g.isSet)g=g.map(function(d){return d-1});else if((0,q.isArray)(g)||(0,q.isMatrix)(g))g=g.map(function(d){return d-1});else if((0,q.isNumber)(g))g--;else if((0,\nq.isBigNumber)(g))g=g.toNumber()-1;else if(\"string\"!==typeof g)throw new TypeError(\"Dimension must be an Array, Matrix, number, string, or Range\");k[t]=g}t=new u;u.apply(t,k);return t}},{isTransformFunction:!0});a.createIndexTransform=c}","~:source","shadow$provide[579] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIndexTransform = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'index';\nvar dependencies = ['Index'];\nvar createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if ((0, _is.isRange)(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if ((0, _is.isNumber)(arg)) {\n        arg--;\n      } else if ((0, _is.isBigNumber)(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});\nexports.createIndexTransform = createIndexTransform;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createIndexTransform","__esModule","isTransformFunction","value","end"]],"~:compiled-at",1619135724042,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$transform$index_transform.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,EAAMP,CAAA,CAAQ,EAAR,CAENQ,EAAAA,CAAWR,CAAA,CAAQ,EAAR,CAIXM,EAAAA,CAAsC,CAAC,CAAA,CAAGE,CAASC,CAAAA,OAAb,EAF/BC,OAE+B,CADvBC,CAAC,OAADA,CACuB,CAA0C,QAAS,CAACC,CAAD,CAAO,CAClG,IAAIC,EAAQD,CAAKC,CAAAA,KAQjB,OAAOC,SAAuB,EAAG,CAG/B,IAFA,IAAIC,EAAO,EAAX,CAESC,EAAI,CAFb,CAEgBC,EAAKC,SAAUC,CAAAA,MAA/B,CAAuCH,CAAvC,CAA2CC,CAA3C,CAA+CD,CAAA,EAA/C,CAAoD,CAClD,IAAII,EAAMF,SAAA,CAAUF,CAAV,CAEV,IAAI,CAAC,CAAA,CAAGT,CAAIc,CAAAA,OAAR,EAAiBD,CAAjB,CAAJ,CACEA,CAAIE,CAAAA,KAAJ,EACA,CAAAF,CAAIG,CAAAA,GAAJ,EAAsB,CAAX,CAAAH,CAAII,CAAAA,IAAJ,CAAe,CAAf,CAAmB,CAFhC,KAGO,IAAIJ,CAAJ,EAAyB,CAAA,CAAzB,GAAWA,CAAIK,CAAAA,KAAf,CACLL,CAAA,CAAMA,CAAIM,CAAAA,GAAJ,CAAQ,QAAS,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAP,CAAW,CADc,CAArB,CADD,KAIA,IAAI,CAAC,CAAA,CAAGpB,CAAIqB,CAAAA,OAAR,EAAiBR,CAAjB,CAAJ,EAA6B,CAAC,CAAA,CAAGb,CAAIsB,CAAAA,QAAR,EAAkBT,CAAlB,CAA7B,CACLA,CAAA,CAAMA,CAAIM,CAAAA,GAAJ,CAAQ,QAAS,CAACC,CAAD,CAAI,CACzB,MAAOA,EAAP,CAAW,CADc,CAArB,CADD,KAIA,IAAI,CAAC,CAAA,CAAGpB,CAAIuB,CAAAA,QAAR,EAAkBV,CAAlB,CAAJ,CACLA,CAAA,EADK,KAEA,IAAI,CAAC,CAAA;AAAGb,CAAIwB,CAAAA,WAAR,EAAqBX,CAArB,CAAJ,CACLA,CAAA,CAAMA,CAAIY,CAAAA,QAAJ,EAAN,CAAuB,CADlB,KAEA,IAAmB,QAAnB,GAAI,MAAOZ,EAAX,CAEL,KAAM,KAAIa,SAAJ,CAAc,8DAAd,CAAN,CAGFlB,CAAA,CAAKC,CAAL,CAAA,CAAUI,CAvBwC,CA0BhDc,CAAAA,CAAM,IAAIrB,CACdA,EAAMsB,CAAAA,KAAN,CAAYD,CAAZ,CAAiBnB,CAAjB,CACA,OAAOmB,EA/BwB,CATiE,CAA1D,CA0CvC,CACDE,oBAAqB,CAAA,CADpB,CA1CuC,CA6C1ClC,EAAQI,CAAAA,oBAAR,CAA+BA,CA3D+B;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/transform/index.transform.js\"],\n\"sourcesContent\":[\"shadow$provide[579] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIndexTransform = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'index';\\nvar dependencies = ['Index'];\\nvar createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var Index = _ref.Index;\\n\\n  /**\\n   * Attach a transform function to math.index\\n   * Adds a property transform containing the transform function.\\n   *\\n   * This transform creates a one-based index instead of a zero-based index\\n   */\\n  return function indexTransform() {\\n    var args = [];\\n\\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\\n\\n      if ((0, _is.isRange)(arg)) {\\n        arg.start--;\\n        arg.end -= arg.step > 0 ? 0 : 2;\\n      } else if (arg && arg.isSet === true) {\\n        arg = arg.map(function (v) {\\n          return v - 1;\\n        });\\n      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {\\n        arg = arg.map(function (v) {\\n          return v - 1;\\n        });\\n      } else if ((0, _is.isNumber)(arg)) {\\n        arg--;\\n      } else if ((0, _is.isBigNumber)(arg)) {\\n        arg = arg.toNumber() - 1;\\n      } else if (typeof arg === 'string') {// leave as is\\n      } else {\\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\\n      }\\n\\n      args[i] = arg;\\n    }\\n\\n    var res = new Index();\\n    Index.apply(res, args);\\n    return res;\\n  };\\n}, {\\n  isTransformFunction: true\\n});\\nexports.createIndexTransform = createIndexTransform;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIndexTransform\",\"_is\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"Index\",\"indexTransform\",\"args\",\"i\",\"ii\",\"arguments\",\"length\",\"arg\",\"isRange\",\"start\",\"end\",\"step\",\"isSet\",\"map\",\"v\",\"isArray\",\"isMatrix\",\"isNumber\",\"isBigNumber\",\"toNumber\",\"TypeError\",\"res\",\"apply\",\"isTransformFunction\"]\n}\n"]