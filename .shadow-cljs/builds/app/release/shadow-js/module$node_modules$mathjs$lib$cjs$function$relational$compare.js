["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/relational/compare.js"],"~:js","shadow$provide[182]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.createCompareNumber=a.createCompare=void 0;var q=b(58),f=b(19);c=b(25);var u=b(94),k=b(96),t=b(77),p=b(87),g=b(95);b=(0,c.factory)(\"compare\",\"typed config matrix equalScalar BigNumber Fraction DenseMatrix\".split(\" \"),function(d){var l=d.typed,h=d.config,n=d.equalScalar,r=d.matrix,v=d.BigNumber,C=d.Fraction;d=d.DenseMatrix;var z=(0,u.createAlgorithm03)({typed:l}),w=(0,g.createAlgorithm05)({typed:l,equalScalar:n}),\nB=(0,k.createAlgorithm12)({typed:l,DenseMatrix:d}),x=(0,p.createAlgorithm13)({typed:l}),D=(0,t.createAlgorithm14)({typed:l});return l(\"compare\",{\"boolean, boolean\":function(F,E){return F===E?0:F>E?1:-1},\"number, number\":function(F,E){return(0,f.nearlyEqual)(F,E,h.epsilon)?0:F>E?1:-1},\"BigNumber, BigNumber\":function(F,E){return(0,q.nearlyEqual)(F,E,h.epsilon)?new v(0):new v(F.cmp(E))},\"Fraction, Fraction\":function(F,E){return new C(F.compare(E))},\"Complex, Complex\":function(){throw new TypeError(\"No ordering relation is defined for complex numbers\");\n},\"Unit, Unit\":function(F,E){if(!F.equalBase(E))throw Error(\"Cannot compare units with different base\");return this(F.value,E.value)},\"SparseMatrix, SparseMatrix\":function(F,E){return w(F,E,this)},\"SparseMatrix, DenseMatrix\":function(F,E){return z(E,F,this,!0)},\"DenseMatrix, SparseMatrix\":function(F,E){return z(F,E,this,!1)},\"DenseMatrix, DenseMatrix\":function(F,E){return x(F,E,this)},\"Array, Array\":function(F,E){return this(r(F),r(E)).valueOf()},\"Array, Matrix\":function(F,E){return this(r(F),E)},\n\"Matrix, Array\":function(F,E){return this(F,r(E))},\"SparseMatrix, any\":function(F,E){return B(F,E,this,!1)},\"DenseMatrix, any\":function(F,E){return D(F,E,this,!1)},\"any, SparseMatrix\":function(F,E){return B(E,F,this,!0)},\"any, DenseMatrix\":function(F,E){return D(E,F,this,!0)},\"Array, any\":function(F,E){return D(r(F),E,this,!1).valueOf()},\"any, Array\":function(F,E){return D(r(E),F,this,!0).valueOf()}})});a.createCompare=b;b=(0,c.factory)(\"compare\",[\"typed\",\"config\"],function(d){var l=d.typed,h=d.config;\nreturn l(\"compare\",{\"number, number\":function(n,r){return(0,f.nearlyEqual)(n,r,h.epsilon)?0:n>r?1:-1}})});a.createCompareNumber=b}","~:source","shadow$provide[182] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareNumber = exports.createCompare = void 0;\n\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _algorithm = require(\"../../type/matrix/utils/algorithm03.js\");\n\nvar _algorithm2 = require(\"../../type/matrix/utils/algorithm12.js\");\n\nvar _algorithm3 = require(\"../../type/matrix/utils/algorithm14.js\");\n\nvar _algorithm4 = require(\"../../type/matrix/utils/algorithm13.js\");\n\nvar _algorithm5 = require(\"../../type/matrix/utils/algorithm05.js\");\n\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nvar createCompare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      equalScalar = _ref.equalScalar,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber,\n      Fraction = _ref.Fraction,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = (0, _algorithm.createAlgorithm03)({\n    typed: typed\n  });\n  var algorithm05 = (0, _algorithm5.createAlgorithm05)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = (0, _algorithm2.createAlgorithm12)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = (0, _algorithm4.createAlgorithm13)({\n    typed: typed\n  });\n  var algorithm14 = (0, _algorithm3.createAlgorithm14)({\n    typed: typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return this(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});\nexports.createCompare = createCompare;\nvar createCompareNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});\nexports.createCompareNumber = createCompareNumber;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm14","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm12","~$module$node_modules$mathjs$lib$cjs$utils$bignumber$nearlyEqual","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm05","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm13","~$module$node_modules$mathjs$lib$cjs$type$matrix$utils$algorithm03"]],"~:properties",["^5",["typed","DenseMatrix","createCompareNumber","__esModule","value","equalScalar","createCompare"]],"~:compiled-at",1619135723906,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$relational$compare.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/relational/compare.js\"],\n\"sourcesContent\":[\"shadow$provide[182] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCompareNumber = exports.createCompare = void 0;\\n\\nvar _nearlyEqual = require(\\\"../../utils/bignumber/nearlyEqual.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _algorithm = require(\\\"../../type/matrix/utils/algorithm03.js\\\");\\n\\nvar _algorithm2 = require(\\\"../../type/matrix/utils/algorithm12.js\\\");\\n\\nvar _algorithm3 = require(\\\"../../type/matrix/utils/algorithm14.js\\\");\\n\\nvar _algorithm4 = require(\\\"../../type/matrix/utils/algorithm13.js\\\");\\n\\nvar _algorithm5 = require(\\\"../../type/matrix/utils/algorithm05.js\\\");\\n\\nvar name = 'compare';\\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\\nvar createCompare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      equalScalar = _ref.equalScalar,\\n      matrix = _ref.matrix,\\n      BigNumber = _ref.BigNumber,\\n      Fraction = _ref.Fraction,\\n      DenseMatrix = _ref.DenseMatrix;\\n  var algorithm03 = (0, _algorithm.createAlgorithm03)({\\n    typed: typed\\n  });\\n  var algorithm05 = (0, _algorithm5.createAlgorithm05)({\\n    typed: typed,\\n    equalScalar: equalScalar\\n  });\\n  var algorithm12 = (0, _algorithm2.createAlgorithm12)({\\n    typed: typed,\\n    DenseMatrix: DenseMatrix\\n  });\\n  var algorithm13 = (0, _algorithm4.createAlgorithm13)({\\n    typed: typed\\n  });\\n  var algorithm14 = (0, _algorithm3.createAlgorithm14)({\\n    typed: typed\\n  });\\n  /**\\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\\n   *\\n   * x and y are considered equal when the relative difference between x and y\\n   * is smaller than the configured epsilon. The function cannot be used to\\n   * compare values smaller than approximately 2.22e-16.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   * Strings are compared by their numerical value.\\n   *\\n   * Syntax:\\n   *\\n   *    math.compare(x, y)\\n   *\\n   * Examples:\\n   *\\n   *    math.compare(6, 1)           // returns 1\\n   *    math.compare(2, 3)           // returns -1\\n   *    math.compare(7, 7)           // returns 0\\n   *    math.compare('10', '2')      // returns 1\\n   *    math.compare('1000', '1e3')  // returns 0\\n   *\\n   *    const a = math.unit('5 cm')\\n   *    const b = math.unit('40 mm')\\n   *    math.compare(a, b)           // returns 1\\n   *\\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\\n   *\\n   * See also:\\n   *\\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\\n   *\\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\\n   */\\n\\n  return typed(name, {\\n    'boolean, boolean': function booleanBoolean(x, y) {\\n      return x === y ? 0 : x > y ? 1 : -1;\\n    },\\n    'number, number': function numberNumber(x, y) {\\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\\n    },\\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\\n      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\\n    },\\n    'Fraction, Fraction': function FractionFraction(x, y) {\\n      return new Fraction(x.compare(y));\\n    },\\n    'Complex, Complex': function ComplexComplex() {\\n      throw new TypeError('No ordering relation is defined for complex numbers');\\n    },\\n    'Unit, Unit': function UnitUnit(x, y) {\\n      if (!x.equalBase(y)) {\\n        throw new Error('Cannot compare units with different base');\\n      }\\n\\n      return this(x.value, y.value);\\n    },\\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\\n      return algorithm05(x, y, this);\\n    },\\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\\n      return algorithm03(y, x, this, true);\\n    },\\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\\n      return algorithm03(x, y, this, false);\\n    },\\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\\n      return algorithm13(x, y, this);\\n    },\\n    'Array, Array': function ArrayArray(x, y) {\\n      // use matrix implementation\\n      return this(matrix(x), matrix(y)).valueOf();\\n    },\\n    'Array, Matrix': function ArrayMatrix(x, y) {\\n      // use matrix implementation\\n      return this(matrix(x), y);\\n    },\\n    'Matrix, Array': function MatrixArray(x, y) {\\n      // use matrix implementation\\n      return this(x, matrix(y));\\n    },\\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\\n      return algorithm12(x, y, this, false);\\n    },\\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\\n      return algorithm14(x, y, this, false);\\n    },\\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\\n      return algorithm12(y, x, this, true);\\n    },\\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\\n      return algorithm14(y, x, this, true);\\n    },\\n    'Array, any': function ArrayAny(x, y) {\\n      // use matrix implementation\\n      return algorithm14(matrix(x), y, this, false).valueOf();\\n    },\\n    'any, Array': function anyArray(x, y) {\\n      // use matrix implementation\\n      return algorithm14(matrix(y), x, this, true).valueOf();\\n    }\\n  });\\n});\\nexports.createCompare = createCompare;\\nvar createCompareNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\\n  var typed = _ref2.typed,\\n      config = _ref2.config;\\n  return typed(name, {\\n    'number, number': function numberNumber(x, y) {\\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\\n    }\\n  });\\n});\\nexports.createCompareNumber = createCompareNumber;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCompareNumber\",\"createCompare\",\"_nearlyEqual\",\"_number\",\"_factory\",\"_algorithm\",\"_algorithm2\",\"_algorithm3\",\"_algorithm4\",\"_algorithm5\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"equalScalar\",\"matrix\",\"BigNumber\",\"Fraction\",\"DenseMatrix\",\"algorithm03\",\"createAlgorithm03\",\"algorithm05\",\"createAlgorithm05\",\"algorithm12\",\"createAlgorithm12\",\"algorithm13\",\"createAlgorithm13\",\"algorithm14\",\"createAlgorithm14\",\"booleanBoolean\",\"x\",\"y\",\"numberNumber\",\"nearlyEqual\",\"epsilon\",\"BigNumberBigNumber\",\"cmp\",\"FractionFraction\",\"compare\",\"ComplexComplex\",\"TypeError\",\"UnitUnit\",\"equalBase\",\"Error\",\"SparseMatrixSparseMatrix\",\"SparseMatrixDenseMatrix\",\"DenseMatrixSparseMatrix\",\"DenseMatrixDenseMatrix\",\"ArrayArray\",\"valueOf\",\"ArrayMatrix\",\"MatrixArray\",\"SparseMatrixAny\",\"DenseMatrixAny\",\"anySparseMatrix\",\"anyDenseMatrix\",\"ArrayAny\",\"anyArray\",\"_ref2\"]\n}\n"]