["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js"],"~:js","shadow$provide[154]=function(c,b,y,a){Object.defineProperty(a,\"__esModule\",{value:!0});a.improveErrorMessage=function(f,u,k){if(-1!==String(f).indexOf(\"Unexpected type\")){var t=2<arguments.length?\" (type: \"+(0,q.typeOf)(k)+\", value: \"+JSON.stringify(k)+\")\":\" (type: \"+f.data.actual+\")\";return new TypeError(\"Cannot calculate \"+u+\", unexpected type of argument\"+t)}return-1!==String(f).indexOf(\"complex numbers\")?(t=2<arguments.length?\" (type: \"+(0,q.typeOf)(k)+\", value: \"+JSON.stringify(k)+\")\":\"\",new TypeError(\"Cannot calculate \"+\nu+\", no ordering relation is defined for complex numbers\"+t)):f};var q=b(14)}","~:source","shadow$provide[154] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.improveErrorMessage = improveErrorMessage;\n\nvar _is = require(\"../../../utils/is.js\");\n\n/**\n * Improve error messages for statistics functions. Errors are typically\n * thrown in an internally used function like larger, causing the error\n * not to mention the function (like max) which is actually used by the user.\n *\n * @param {Error} err\n * @param {String} fnName\n * @param {*} [value]\n * @return {Error}\n */\nfunction improveErrorMessage(err, fnName, value) {\n  // TODO: add information with the index (also needs transform in expression parser)\n  var details;\n\n  if (String(err).indexOf('Unexpected type') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n  }\n\n  if (String(err).indexOf('complex numbers') !== -1) {\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n  }\n\n  return err;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is"]],"~:properties",["^5",["__esModule","value","improveErrorMessage"]],"~:compiled-at",1619135723893,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$statistics$utils$improveErrorMessage.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9DC,MAAOC,CAAAA,cAAP,CAAsBF,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,EAAQI,CAAAA,mBAAR,CAcAA,QAA4B,CAACC,CAAD,CAAMC,CAAN,CAAcH,CAAd,CAAqB,CAI/C,GAA+C,EAA/C,GAAII,MAAA,CAAOF,CAAP,CAAYG,CAAAA,OAAZ,CAAoB,iBAApB,CAAJ,CAAmD,CACjD,IAAAC,EAA6B,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,CAAuB,UAAvB,CAAoC,CAAC,CAAA,CAAGC,CAAIC,CAAAA,MAAR,EAAgBV,CAAhB,CAApC,CAA6D,WAA7D,CAA2EW,IAAKC,CAAAA,SAAL,CAAeZ,CAAf,CAA3E,CAAmG,GAAnG,CAAyG,UAAzG,CAAsHE,CAAIW,CAAAA,IAAKC,CAAAA,MAA/H,CAAwI,GAClJ,OAAO,KAAIC,SAAJ,CAAc,mBAAd,CAAoCZ,CAApC,CAA6C,+BAA7C,CAA+EG,CAA/E,CAF0C,CAKnD,MAA+C,EAA/C,GAAIF,MAAA,CAAOF,CAAP,CAAYG,CAAAA,OAAZ,CAAoB,iBAApB,CAAJ,EACEC,CACO,CADsB,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,CAAuB,UAAvB,CAAoC,CAAC,CAAA,CAAGC,CAAIC,CAAAA,MAAR,EAAgBV,CAAhB,CAApC,CAA6D,WAA7D,CAA2EW,IAAKC,CAAAA,SAAL,CAAeZ,CAAf,CAA3E,CAAmG,GAAnG,CAAyG,EAC5G,CAAA,IAAIe,SAAJ,CAAc,mBAAd;AAAoCZ,CAApC,CAA6C,uDAA7C,CAAuGG,CAAvG,CAFT,EAKOJ,CAdwC,CAZjD,KAAIO,EAAMd,CAAA,CAAQ,EAAR,CARoD;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js\"],\n\"sourcesContent\":[\"shadow$provide[154] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.improveErrorMessage = improveErrorMessage;\\n\\nvar _is = require(\\\"../../../utils/is.js\\\");\\n\\n/**\\n * Improve error messages for statistics functions. Errors are typically\\n * thrown in an internally used function like larger, causing the error\\n * not to mention the function (like max) which is actually used by the user.\\n *\\n * @param {Error} err\\n * @param {String} fnName\\n * @param {*} [value]\\n * @return {Error}\\n */\\nfunction improveErrorMessage(err, fnName, value) {\\n  // TODO: add information with the index (also needs transform in expression parser)\\n  var details;\\n\\n  if (String(err).indexOf('Unexpected type') !== -1) {\\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\\n    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\\n  }\\n\\n  if (String(err).indexOf('complex numbers') !== -1) {\\n    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';\\n    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\\n  }\\n\\n  return err;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"improveErrorMessage\",\"err\",\"fnName\",\"String\",\"indexOf\",\"details\",\"arguments\",\"length\",\"_is\",\"typeOf\",\"JSON\",\"stringify\",\"data\",\"actual\",\"TypeError\"]\n}\n"]