["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/error/ArgumentsError.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$error$ArgumentsError=function(global,require,module,exports){function ArgumentsError(fn,count,min,max){if(!(this instanceof ArgumentsError))throw new SyntaxError(\"Constructor must be called with the new operator\");this.fn=fn;this.count=count;this.min=min;this.max=max;this.message=\"Wrong number of arguments in function \"+fn+\" (\"+count+\" provided, \"+min+(void 0!==max&&null!==max?\"-\"+max:\"\")+\" expected)\";this.stack=Error().stack}Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports.ArgumentsError=ArgumentsError;ArgumentsError.prototype=Error();ArgumentsError.prototype.constructor=Error;ArgumentsError.prototype.name=\"ArgumentsError\";ArgumentsError.prototype.isArgumentsError=!0}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$error$ArgumentsError\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArgumentsError = ArgumentsError;\n\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["isArgumentsError","message","min","prototype","ArgumentsError","__esModule","max","fn","count","name","value","stack","constructor"]],"~:compiled-at",1619135262217,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$error$ArgumentsError.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBpHC,QAASA,eAAc,CAACC,EAAD,CAAKC,KAAL,CAAYC,GAAZ,CAAiBC,GAAjB,CAAsB,CAC3C,GAAI,EAAE,IAAF,WAAkBJ,eAAlB,CAAJ,CACE,KAAM,KAAIK,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKJ,CAAAA,EAAL,CAAUA,EACV,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,GAAL,CAAWA,GACX,KAAKC,CAAAA,GAAL,CAAWA,GACX,KAAKE,CAAAA,OAAL,CAAe,wCAAf,CAA0DL,EAA1D,CAA+D,IAA/D,CAAsEC,KAAtE,CAA8E,aAA9E,CAA8FC,GAA9F,EAA6GI,IAAAA,EAAR,GAAAH,GAAA,EAA6B,IAA7B,GAAqBA,GAArB,CAAoC,GAApC,CAA0CA,GAA1C,CAAgD,EAArJ,EAA2J,YAC3J,KAAKI,CAAAA,KAAL,CAAiBC,KAAJ,EAAYD,CAAAA,KAVkB,CAd7CE,MAAOC,CAAAA,cAAP,CAAsBZ,OAAtB;AAA+B,YAA/B,CAA6C,CAC3Ca,MAAO,CAAA,CADoC,CAA7C,CAGAb,QAAQC,CAAAA,cAAR,CAAyBA,cAwBzBA,eAAea,CAAAA,SAAf,CAA+BJ,KAAJ,EAC3BT,eAAea,CAAAA,SAAUC,CAAAA,WAAzB,CAAuCL,KACvCT,eAAea,CAAAA,SAAUE,CAAAA,IAAzB,CAAgC,gBAChCf,eAAea,CAAAA,SAAUG,CAAAA,gBAAzB,CAA4C,CAAA,CAjCwE;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/error/ArgumentsError.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$error$ArgumentsError\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ArgumentsError = ArgumentsError;\\n\\n/**\\n * Create a syntax error with the message:\\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\\n * @param {string} fn     Function name\\n * @param {number} count  Actual argument count\\n * @param {number} min    Minimum required argument count\\n * @param {number} [max]  Maximum required argument count\\n * @extends Error\\n */\\nfunction ArgumentsError(fn, count, min, max) {\\n  if (!(this instanceof ArgumentsError)) {\\n    throw new SyntaxError('Constructor must be called with the new operator');\\n  }\\n\\n  this.fn = fn;\\n  this.count = count;\\n  this.min = min;\\n  this.max = max;\\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\\n  this.stack = new Error().stack;\\n}\\n\\nArgumentsError.prototype = new Error();\\nArgumentsError.prototype.constructor = Error;\\nArgumentsError.prototype.name = 'ArgumentsError';\\nArgumentsError.prototype.isArgumentsError = true;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ArgumentsError\",\"fn\",\"count\",\"min\",\"max\",\"SyntaxError\",\"message\",\"undefined\",\"stack\",\"Error\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"constructor\",\"name\",\"isArgumentsError\"]\n}\n"]