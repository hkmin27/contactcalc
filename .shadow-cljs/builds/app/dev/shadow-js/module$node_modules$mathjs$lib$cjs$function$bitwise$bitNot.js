["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createBitNot=void 0;var _bitwise=require(\"module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise\"),_collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=\n(0,global.factory)(\"bitNot\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"bitNot\",{number:_index.bitNotNumber,BigNumber:_bitwise.bitNotBigNumber,\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this)}})});exports.createBitNot=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitNot = void 0;\n\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nvar createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  return typed(name, {\n    number: _index.bitNotNumber,\n    BigNumber: _bitwise.bitNotBigNumber,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createBitNot = createBitNot;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory","~$module$node_modules$mathjs$lib$cjs$utils$bignumber$bitwise"]],"~:properties",["^5",["__esModule","createBitNot","value","number","BigNumber"]],"~:compiled-at",1619135262197,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIC,SAAWP,OAAA,CAAQ,4DAAR,CAAf,CAEIQ,YAAcR,OAAA,CAAQ,qDAAR,CAEdS,OAAAA,CAAWT,OAAA,CAAQ,kDAAR,CAEf,KAAIU,OAASV,OAAA,CAAQ,uDAAR,CAITM,QAAAA;AAA8B,CAAC,CAAA,CAAGG,MAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CACtFC,IAAAA,CAAQD,IAAKC,CAAAA,KAwBjB,OAAOA,KAAA,CA3BEH,QA2BF,CAAY,CACjBI,OAAQN,MAAOO,CAAAA,YADE,CAEjBC,UAAWX,QAASY,CAAAA,eAFH,CAGjB,iBAAkBC,QAAoB,CAACC,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGb,WAAYc,CAAAA,OAAhB,EAAyBD,CAAzB,CAA4B,IAA5B,CADiC,CAHzB,CAAZ,CAzBmF,CAA1D,CAiClCnB,QAAQI,CAAAA,YAAR,CAAuBA,OAnDgG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$bitwise$bitNot\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBitNot = void 0;\\n\\nvar _bitwise = require(\\\"../../utils/bignumber/bitwise.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'bitNot';\\nvar dependencies = ['typed'];\\nvar createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Bitwise NOT value, `~x`.\\n   * For matrices, the function is evaluated element wise.\\n   * For units, the function is evaluated on the best prefix base.\\n   *\\n   * Syntax:\\n   *\\n   *    math.bitNot(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.bitNot(1)               // returns number -2\\n   *\\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\\n   *\\n   * See also:\\n   *\\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\\n   *\\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\\n   */\\n  return typed(name, {\\n    number: _index.bitNotNumber,\\n    BigNumber: _bitwise.bitNotBigNumber,\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createBitNot = createBitNot;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBitNot\",\"_bitwise\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"bitNotNumber\",\"BigNumber\",\"bitNotBigNumber\",\"ArrayMatrix\",\"x\",\"deepMap\"]\n}\n"]