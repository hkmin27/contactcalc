["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/zeros.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$zeros=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createZeros=void 0;var _is=require(\"module$node_modules$mathjs$lib$cjs$utils$is\"),_number=require(\"module$node_modules$mathjs$lib$cjs$utils$number\"),_array=require(\"module$node_modules$mathjs$lib$cjs$utils$array\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"zeros\",[\"typed\",\"config\",\n\"matrix\",\"BigNumber\"],function(_ref){function _zeros(size,format){var defaultValue=_normalize(size)?new BigNumber(0):0;_validate(size);if(format)return format=matrix(format),0<size.length?format.resize(size,defaultValue):format;format=[];return 0<size.length?(0,_array.resize)(format,size,defaultValue):format}function _normalize(size){var hasBigNumbers=!1;size.forEach(function(value,index,arr){(0,_is.isBigNumber)(value)&&(hasBigNumbers=!0,arr[index]=value.toNumber())});return hasBigNumbers}function _validate(size){size.forEach(function(value){if(\"number\"!==\ntypeof value||!(0,_number.isInteger)(value)||0>value)throw Error(\"Parameters in function zeros must be positive integers\");})}var typed=_ref.typed,config=_ref.config,matrix=_ref.matrix,BigNumber=_ref.BigNumber;return typed(\"zeros\",{\"\":function(){return\"Array\"===config.matrix?_zeros([]):_zeros([],\"default\")},\"...number | BigNumber | string\":function(size){if(\"string\"===typeof size[size.length-1]){var format=size.pop();return _zeros(size,format)}return\"Array\"===config.matrix?_zeros(size):_zeros(size,\n\"default\")},Array:_zeros,Matrix:function(size){var format=size.storage();return _zeros(size.valueOf(),format)},\"Array | Matrix, string\":function(size,format){return _zeros(size.valueOf(),format)}})});exports.createZeros=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$zeros\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createZeros = void 0;\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _number = require(\"../../utils/number.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'zeros';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nvar createZeros = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    Array: _zeros,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return (0, _array.resize)(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if ((0, _is.isBigNumber)(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n}); // TODO: zeros contains almost the same code as ones. Reuse this?\n\nexports.createZeros = createZeros;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","createZeros","value","Matrix","Array"]],"~:compiled-at",1619135262223,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$zeros.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/zeros.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$matrix$zeros\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createZeros = void 0;\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'zeros';\\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\\nvar createZeros = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      matrix = _ref.matrix,\\n      BigNumber = _ref.BigNumber;\\n\\n  /**\\n   * Create a matrix filled with zeros. The created matrix can have one or\\n   * multiple dimensions.\\n   *\\n   * Syntax:\\n   *\\n   *    math.zeros(m)\\n   *    math.zeros(m, format)\\n   *    math.zeros(m, n)\\n   *    math.zeros(m, n, format)\\n   *    math.zeros([m, n])\\n   *    math.zeros([m, n], format)\\n   *\\n   * Examples:\\n   *\\n   *    math.zeros(3)                  // returns [0, 0, 0]\\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\\n   *\\n   *    const A = [[1, 2, 3], [4, 5, 6]]\\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\\n   *\\n   * See also:\\n   *\\n   *    ones, identity, size, range\\n   *\\n   * @param {...number | Array} size    The size of each dimension of the matrix\\n   * @param {string} [format]           The Matrix storage format\\n   *\\n   * @return {Array | Matrix}           A matrix filled with zeros\\n   */\\n  return typed(name, {\\n    '': function _() {\\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\\n    },\\n    // math.zeros(m, n, p, ..., format)\\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\\n    '...number | BigNumber | string': function numberBigNumberString(size) {\\n      var last = size[size.length - 1];\\n\\n      if (typeof last === 'string') {\\n        var format = size.pop();\\n        return _zeros(size, format);\\n      } else if (config.matrix === 'Array') {\\n        return _zeros(size);\\n      } else {\\n        return _zeros(size, 'default');\\n      }\\n    },\\n    Array: _zeros,\\n    Matrix: function Matrix(size) {\\n      var format = size.storage();\\n      return _zeros(size.valueOf(), format);\\n    },\\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\\n      return _zeros(size.valueOf(), format);\\n    }\\n  });\\n  /**\\n   * Create an Array or Matrix with zeros\\n   * @param {Array} size\\n   * @param {string} [format='default']\\n   * @return {Array | Matrix}\\n   * @private\\n   */\\n\\n  function _zeros(size, format) {\\n    var hasBigNumbers = _normalize(size);\\n\\n    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;\\n\\n    _validate(size);\\n\\n    if (format) {\\n      // return a matrix\\n      var m = matrix(format);\\n\\n      if (size.length > 0) {\\n        return m.resize(size, defaultValue);\\n      }\\n\\n      return m;\\n    } else {\\n      // return an Array\\n      var arr = [];\\n\\n      if (size.length > 0) {\\n        return (0, _array.resize)(arr, size, defaultValue);\\n      }\\n\\n      return arr;\\n    }\\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\\n\\n\\n  function _normalize(size) {\\n    var hasBigNumbers = false;\\n    size.forEach(function (value, index, arr) {\\n      if ((0, _is.isBigNumber)(value)) {\\n        hasBigNumbers = true;\\n        arr[index] = value.toNumber();\\n      }\\n    });\\n    return hasBigNumbers;\\n  } // validate arguments\\n\\n\\n  function _validate(size) {\\n    size.forEach(function (value) {\\n      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {\\n        throw new Error('Parameters in function zeros must be positive integers');\\n      }\\n    });\\n  }\\n}); // TODO: zeros contains almost the same code as ones. Reuse this?\\n\\nexports.createZeros = createZeros;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createZeros\",\"_is\",\"_number\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_zeros\",\"size\",\"format\",\"defaultValue\",\"_normalize\",\"hasBigNumbers\",\"BigNumber\",\"_validate\",\"m\",\"matrix\",\"length\",\"resize\",\"arr\",\"forEach\",\"index\",\"isBigNumber\",\"toNumber\",\"isInteger\",\"Error\",\"typed\",\"config\",\"_\",\"numberBigNumberString\",\"last\",\"pop\",\"Array\",\"Matrix\",\"storage\",\"valueOf\",\"ArrayMatrixString\"]\n}\n"]