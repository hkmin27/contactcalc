["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createConstantNode=void 0;var _string=require(\"module$node_modules$mathjs$lib$cjs$utils$string\"),_is=require(\"module$node_modules$mathjs$lib$cjs$utils$is\"),_latex=require(\"module$node_modules$mathjs$lib$cjs$utils$latex\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"ConstantNode\",\n[\"Node\"],function(_ref){function ConstantNode(value){if(!(this instanceof ConstantNode))throw new SyntaxError(\"Constructor must be called with the new operator\");this.value=value}ConstantNode.prototype=new _ref.Node;ConstantNode.prototype.type=\"ConstantNode\";ConstantNode.prototype.isConstantNode=!0;ConstantNode.prototype._compile=function(math,argNames){var value=this.value;return function(){return value}};ConstantNode.prototype.forEach=function(callback){};ConstantNode.prototype.map=function(callback){return this.clone()};\nConstantNode.prototype.clone=function(){return new ConstantNode(this.value)};ConstantNode.prototype._toString=function(options){return(0,_string.format)(this.value,options)};ConstantNode.prototype.toHTML=function(options){options=this._toString(options);switch((0,_is.typeOf)(this.value)){case \"number\":case \"BigNumber\":case \"Fraction\":return'\\x3cspan class\\x3d\"math-number\"\\x3e'+options+\"\\x3c/span\\x3e\";case \"string\":return'\\x3cspan class\\x3d\"math-string\"\\x3e'+options+\"\\x3c/span\\x3e\";case \"boolean\":return'\\x3cspan class\\x3d\"math-boolean\"\\x3e'+\noptions+\"\\x3c/span\\x3e\";case \"null\":return'\\x3cspan class\\x3d\"math-null-symbol\"\\x3e'+options+\"\\x3c/span\\x3e\";case \"undefined\":return'\\x3cspan class\\x3d\"math-undefined\"\\x3e'+options+\"\\x3c/span\\x3e\";default:return'\\x3cspan class\\x3d\"math-symbol\"\\x3e'+options+\"\\x3c/span\\x3e\"}};ConstantNode.prototype.toJSON=function(){return{mathjs:\"ConstantNode\",value:this.value}};ConstantNode.fromJSON=function(json){return new ConstantNode(json.value)};ConstantNode.prototype._toTex=function(options){options=this._toString(options);\nswitch((0,_is.typeOf)(this.value)){case \"string\":return\"\\\\mathtt{\"+(0,_latex.escapeLatex)(options)+\"}\";case \"number\":case \"BigNumber\":if(!isFinite(this.value))return 0>this.value.valueOf()?\"-\\\\infty\":\"\\\\infty\";var index=options.toLowerCase().indexOf(\"e\");return-1!==index?options.substring(0,index)+\"\\\\cdot10^{\"+options.substring(index+1)+\"}\":options;case \"Fraction\":return this.value.toLatex();default:return options}};return ConstantNode},{isClass:!0,isNode:!0});exports.createConstantNode=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConstantNode = void 0;\n\nvar _string = require(\"../../utils/string.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar _latex = require(\"../../utils/latex.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nvar createConstantNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\n  };\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return (0, _string.format)(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch ((0, _is.typeOf)(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          if (!isFinite(this.value)) {\n            return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n          }\n\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createConstantNode = createConstantNode;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$utils$string","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$latex","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["map","forEach","fromJSON","isClass","toHTML","prototype","_toString","isNode","_toTex","__esModule","isConstantNode","createConstantNode","value","mathjs","type","clone","_compile","toJSON"]],"~:compiled-at",1619135262355,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAA,+DAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAElC,KAAIC,QAAUP,OAAA,CAAQ,iDAAR,CAAd,CAEIQ,IAAMR,OAAA,CAAQ,6CAAR,CAFV,CAIIS,OAAST,OAAA,CAAQ,gDAAR,CAETU,OAAAA,CAAWV,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAoC,CAAC,CAAA,CAAGI,MAASC,CAAAA,OAAb,EAF7BC,cAE6B;AADrBC,CAAC,MAADA,CACqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAehGC,QAASA,aAAY,CAACV,KAAD,CAAQ,CAC3B,GAAI,EAAE,IAAF,WAAkBU,aAAlB,CAAJ,CACE,KAAM,KAAIC,WAAJ,CAAgB,kDAAhB,CAAN,CAGF,IAAKX,CAAAA,KAAL,CAAaA,KALc,CAQ7BU,YAAaE,CAAAA,SAAb,CAAyB,IAtBdH,IAAKI,CAAAA,IAuBhBH,aAAaE,CAAAA,SAAUE,CAAAA,IAAvB,CAA8B,cAC9BJ,aAAaE,CAAAA,SAAUG,CAAAA,cAAvB,CAAwC,CAAA,CAexCL,aAAaE,CAAAA,SAAUI,CAAAA,QAAvB,CAAkCC,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAC1D,IAAInB,MAAQ,IAAKA,CAAAA,KACjB,OAAOoB,SAAyB,EAAG,CACjC,MAAOpB,MAD0B,CAFuB,CAY5DU,aAAaE,CAAAA,SAAUS,CAAAA,OAAvB,CAAiCC,QAAS,CAACC,QAAD,CAAW,EAUrDb,aAAaE,CAAAA,SAAUY,CAAAA,GAAvB,CAA6BC,QAAS,CAACF,QAAD,CAAW,CAC/C,MAAO,KAAKG,CAAAA,KAAL,EADwC,CASjDhB;YAAaE,CAAAA,SAAUc,CAAAA,KAAvB,CAA+BC,QAAS,EAAG,CACzC,MAAO,KAAIjB,YAAJ,CAAiB,IAAKV,CAAAA,KAAtB,CADkC,CAU3CU,aAAaE,CAAAA,SAAUgB,CAAAA,SAAvB,CAAmCC,QAAS,CAACC,OAAD,CAAU,CACpD,MAAO,CAAC,CAAA,CAAG5B,OAAQ6B,CAAAA,MAAZ,EAAoB,IAAK/B,CAAAA,KAAzB,CAAgC8B,OAAhC,CAD6C,CAUtDpB,aAAaE,CAAAA,SAAUoB,CAAAA,MAAvB,CAAgCC,QAAS,CAACH,OAAD,CAAU,CAC7C9B,OAAAA,CAAQ,IAAK4B,CAAAA,SAAL,CAAeE,OAAf,CAEZ,QAAQ,CAAC,CAAA,CAAG3B,GAAI+B,CAAAA,MAAR,EAAgB,IAAKlC,CAAAA,KAArB,CAAR,EACE,KAAK,QAAL,CACA,KAAK,WAAL,CACA,KAAK,UAAL,CACE,MAAO,qCAAP,CAAsCA,OAAtC,CAA8C,eAEhD,MAAK,QAAL,CACE,MAAO,qCAAP,CAAsCA,OAAtC,CAA8C,eAEhD,MAAK,SAAL,CACE,MAAO,sCAAP;AAAuCA,OAAvC,CAA+C,eAEjD,MAAK,MAAL,CACE,MAAO,0CAAP,CAA2CA,OAA3C,CAAmD,eAErD,MAAK,WAAL,CACE,MAAO,wCAAP,CAAyCA,OAAzC,CAAiD,eAEnD,SACE,MAAO,qCAAP,CAAsCA,OAAtC,CAA8C,eAnBlD,CAHiD,CA+BnDU,aAAaE,CAAAA,SAAUuB,CAAAA,MAAvB,CAAgCC,QAAS,EAAG,CAC1C,MAAO,CACLC,OAAQ,cADH,CAELrC,MAAO,IAAKA,CAAAA,KAFP,CADmC,CAe5CU,aAAa4B,CAAAA,QAAb,CAAwBC,QAAS,CAACC,IAAD,CAAO,CACtC,MAAO,KAAI9B,YAAJ,CAAiB8B,IAAKxC,CAAAA,KAAtB,CAD+B,CAUxCU,aAAaE,CAAAA,SAAU6B,CAAAA,MAAvB,CAAgCC,QAAS,CAACZ,OAAD,CAAU,CAC7C9B,OAAAA,CAAQ,IAAK4B,CAAAA,SAAL,CAAeE,OAAf,CAEZ;OAAQ,CAAC,CAAA,CAAG3B,GAAI+B,CAAAA,MAAR,EAAgB,IAAKlC,CAAAA,KAArB,CAAR,EACE,KAAK,QAAL,CACE,MAAO,WAAP,CAAqB,CAAC,CAAA,CAAGI,MAAOuC,CAAAA,WAAX,EAAwB3C,OAAxB,CAArB,CAAsD,GAExD,MAAK,QAAL,CACA,KAAK,WAAL,CAEI,GAAI,CAAC4C,QAAA,CAAS,IAAK5C,CAAAA,KAAd,CAAL,CACE,MAA8B,EAAvB,CAAA,IAAKA,CAAAA,KAAM6C,CAAAA,OAAX,EAAA,CAA2B,UAA3B,CAAwC,SAGjD,KAAIC,MAAQ9C,OAAM+C,CAAAA,WAAN,EAAoBC,CAAAA,OAApB,CAA4B,GAA5B,CAEZ,OAAc,EAAd,GAAIF,KAAJ,CACS9C,OAAMiD,CAAAA,SAAN,CAAgB,CAAhB,CAAmBH,KAAnB,CADT,CACqC,YADrC,CACoD9C,OAAMiD,CAAAA,SAAN,CAAgBH,KAAhB,CAAwB,CAAxB,CADpD,CACiF,GADjF,CAIK9C,OAET,MAAK,UAAL,CACE,MAAO,KAAKA,CAAAA,KAAMkD,CAAAA,OAAX,EAET,SACE,MAAOlD,QAvBX,CAHiD,CA8BnD,OAAOU,aAjLyF,CAA1D,CAkLrC,CACDyC,QAAS,CAAA,CADR,CAEDC,OAAQ,CAAA,CAFP,CAlLqC,CAsLxCvD,QAAQI,CAAAA,kBAAR,CAA6BA,MAxM+F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$expression$node$ConstantNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createConstantNode = void 0;\\n\\nvar _string = require(\\\"../../utils/string.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar _latex = require(\\\"../../utils/latex.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'ConstantNode';\\nvar dependencies = ['Node'];\\nvar createConstantNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var Node = _ref.Node;\\n\\n  /**\\n   * A ConstantNode holds a constant value like a number or string.\\n   *\\n   * Usage:\\n   *\\n   *     new ConstantNode(2.3)\\n   *     new ConstantNode('hello')\\n   *\\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\\n   * @constructor ConstantNode\\n   * @extends {Node}\\n   */\\n  function ConstantNode(value) {\\n    if (!(this instanceof ConstantNode)) {\\n      throw new SyntaxError('Constructor must be called with the new operator');\\n    }\\n\\n    this.value = value;\\n  }\\n\\n  ConstantNode.prototype = new Node();\\n  ConstantNode.prototype.type = 'ConstantNode';\\n  ConstantNode.prototype.isConstantNode = true;\\n  /**\\n   * Compile a node into a JavaScript function.\\n   * This basically pre-calculates as much as possible and only leaves open\\n   * calculations which depend on a dynamic scope with variables.\\n   * @param {Object} math     Math.js namespace with functions and constants.\\n   * @param {Object} argNames An object with argument names as key and `true`\\n   *                          as value. Used in the SymbolNode to optimize\\n   *                          for arguments from user assigned functions\\n   *                          (see FunctionAssignmentNode) or special symbols\\n   *                          like `end` (see IndexNode).\\n   * @return {function} Returns a function which can be called like:\\n   *                        evalNode(scope: Object, args: Object, context: *)\\n   */\\n\\n  ConstantNode.prototype._compile = function (math, argNames) {\\n    var value = this.value;\\n    return function evalConstantNode() {\\n      return value;\\n    };\\n  };\\n  /**\\n   * Execute a callback for each of the child nodes of this node\\n   * @param {function(child: Node, path: string, parent: Node)} callback\\n   */\\n\\n\\n  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs\\n  };\\n  /**\\n   * Create a new ConstantNode having it's childs be the results of calling\\n   * the provided callback function for each of the childs of the original node.\\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\\n   * @returns {ConstantNode} Returns a clone of the node\\n   */\\n\\n\\n  ConstantNode.prototype.map = function (callback) {\\n    return this.clone();\\n  };\\n  /**\\n   * Create a clone of this node, a shallow copy\\n   * @return {ConstantNode}\\n   */\\n\\n\\n  ConstantNode.prototype.clone = function () {\\n    return new ConstantNode(this.value);\\n  };\\n  /**\\n   * Get string representation\\n   * @param {Object} options\\n   * @return {string} str\\n   */\\n\\n\\n  ConstantNode.prototype._toString = function (options) {\\n    return (0, _string.format)(this.value, options);\\n  };\\n  /**\\n   * Get HTML representation\\n   * @param {Object} options\\n   * @return {string} str\\n   */\\n\\n\\n  ConstantNode.prototype.toHTML = function (options) {\\n    var value = this._toString(options);\\n\\n    switch ((0, _is.typeOf)(this.value)) {\\n      case 'number':\\n      case 'BigNumber':\\n      case 'Fraction':\\n        return '<span class=\\\"math-number\\\">' + value + '</span>';\\n\\n      case 'string':\\n        return '<span class=\\\"math-string\\\">' + value + '</span>';\\n\\n      case 'boolean':\\n        return '<span class=\\\"math-boolean\\\">' + value + '</span>';\\n\\n      case 'null':\\n        return '<span class=\\\"math-null-symbol\\\">' + value + '</span>';\\n\\n      case 'undefined':\\n        return '<span class=\\\"math-undefined\\\">' + value + '</span>';\\n\\n      default:\\n        return '<span class=\\\"math-symbol\\\">' + value + '</span>';\\n    }\\n  };\\n  /**\\n   * Get a JSON representation of the node\\n   * @returns {Object}\\n   */\\n\\n\\n  ConstantNode.prototype.toJSON = function () {\\n    return {\\n      mathjs: 'ConstantNode',\\n      value: this.value\\n    };\\n  };\\n  /**\\n   * Instantiate a ConstantNode from its JSON representation\\n   * @param {Object} json  An object structured like\\n   *                       `{\\\"mathjs\\\": \\\"SymbolNode\\\", value: 2.3}`,\\n   *                       where mathjs is optional\\n   * @returns {ConstantNode}\\n   */\\n\\n\\n  ConstantNode.fromJSON = function (json) {\\n    return new ConstantNode(json.value);\\n  };\\n  /**\\n   * Get LaTeX representation\\n   * @param {Object} options\\n   * @return {string} str\\n   */\\n\\n\\n  ConstantNode.prototype._toTex = function (options) {\\n    var value = this._toString(options);\\n\\n    switch ((0, _is.typeOf)(this.value)) {\\n      case 'string':\\n        return '\\\\\\\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';\\n\\n      case 'number':\\n      case 'BigNumber':\\n        {\\n          if (!isFinite(this.value)) {\\n            return this.value.valueOf() < 0 ? '-\\\\\\\\infty' : '\\\\\\\\infty';\\n          }\\n\\n          var index = value.toLowerCase().indexOf('e');\\n\\n          if (index !== -1) {\\n            return value.substring(0, index) + '\\\\\\\\cdot10^{' + value.substring(index + 1) + '}';\\n          }\\n        }\\n        return value;\\n\\n      case 'Fraction':\\n        return this.value.toLatex();\\n\\n      default:\\n        return value;\\n    }\\n  };\\n\\n  return ConstantNode;\\n}, {\\n  isClass: true,\\n  isNode: true\\n});\\nexports.createConstantNode = createConstantNode;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createConstantNode\",\"_string\",\"_is\",\"_latex\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"ConstantNode\",\"SyntaxError\",\"prototype\",\"Node\",\"type\",\"isConstantNode\",\"_compile\",\"ConstantNode.prototype._compile\",\"math\",\"argNames\",\"evalConstantNode\",\"forEach\",\"ConstantNode.prototype.forEach\",\"callback\",\"map\",\"ConstantNode.prototype.map\",\"clone\",\"ConstantNode.prototype.clone\",\"_toString\",\"ConstantNode.prototype._toString\",\"options\",\"format\",\"toHTML\",\"ConstantNode.prototype.toHTML\",\"typeOf\",\"toJSON\",\"ConstantNode.prototype.toJSON\",\"mathjs\",\"fromJSON\",\"ConstantNode.fromJSON\",\"json\",\"_toTex\",\"ConstantNode.prototype._toTex\",\"escapeLatex\",\"isFinite\",\"valueOf\",\"index\",\"toLowerCase\",\"indexOf\",\"substring\",\"toLatex\",\"isClass\",\"isNode\"]\n}\n"]