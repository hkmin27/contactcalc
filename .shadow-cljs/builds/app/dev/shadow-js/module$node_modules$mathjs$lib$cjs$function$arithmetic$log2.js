["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/log2.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$arithmetic$log2=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createLog2=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\"),_index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"log2\",[\"typed\",\"config\",\"Complex\"],function(_ref){function _log2Complex(x){var newX=\nMath.sqrt(x.re*x.re+x.im*x.im);return new Complex(Math.log2?Math.log2(newX):Math.log(newX)/Math.LN2,Math.atan2(x.im,x.re)/Math.LN2)}var typed=_ref.typed,config=_ref.config,Complex=_ref.Complex;return typed(\"log2\",{number:function(x){return 0<=x||config.predictable?(0,_index.log2Number)(x):_log2Complex(new Complex(x,0))},Complex:_log2Complex,BigNumber:function(x){return!x.isNegative()||config.predictable?x.log(2):_log2Complex(new Complex(x.toNumber(),0))},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,\nthis)}})});exports.createLog2=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log2\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog2 = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createLog2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.log2Number)(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});\nexports.createLog2 = createLog2;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createLog2","Complex","__esModule","value","number","BigNumber"]],"~:compiled-at",1619135262183,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log2.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAEtBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA4B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFrBC,MAEqB,CADbC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CACa,CAA0C,QAAS,CAACC,IAAD,CAAO,CA2DxFC,QAASA,aAAY,CAACC,CAAD,CAAI,CACvB,IAAIC;AAAOC,IAAKC,CAAAA,IAAL,CAAUH,CAAEI,CAAAA,EAAZ,CAAiBJ,CAAEI,CAAAA,EAAnB,CAAwBJ,CAAEK,CAAAA,EAA1B,CAA+BL,CAAEK,CAAAA,EAAjC,CACX,OAAO,KAAIC,OAAJ,CAAYJ,IAAKK,CAAAA,IAAL,CAAYL,IAAKK,CAAAA,IAAL,CAAUN,IAAV,CAAZ,CAA8BC,IAAKM,CAAAA,GAAL,CAASP,IAAT,CAA9B,CAA+CC,IAAKO,CAAAA,GAAhE,CAAqEP,IAAKQ,CAAAA,KAAL,CAAWV,CAAEK,CAAAA,EAAb,CAAiBL,CAAEI,CAAAA,EAAnB,CAArE,CAA8FF,IAAKO,CAAAA,GAAnG,CAFgB,CA3D+D,IACpFE,MAAQb,IAAKa,CAAAA,KADuE,CAEpFC,OAASd,IAAKc,CAAAA,MAFsE,CAGpFN,QAAUR,IAAKQ,CAAAA,OA2BnB,OAAOK,MAAA,CAhCEf,MAgCF,CAAY,CACjBiB,OAAQA,QAAe,CAACb,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAcY,MAAOE,CAAAA,WAArB,CACS,CAAC,CAAA,CAAGpB,MAAOqB,CAAAA,UAAX,EAAuBf,CAAvB,CADT,CAISD,YAAA,CAAa,IAAIO,OAAJ,CAAYN,CAAZ,CAAe,CAAf,CAAb,CALgB,CADV,CASjBM,QAASP,YATQ,CAUjBiB,UAAWA,QAAkB,CAAChB,CAAD,CAAI,CAC/B,MAAI,CAACA,CAAEiB,CAAAA,UAAF,EAAL,EAAuBL,MAAOE,CAAAA,WAA9B,CACSd,CAAEQ,CAAAA,GAAF,CAAM,CAAN,CADT,CAIST,YAAA,CAAa,IAAIO,OAAJ,CAAYN,CAAEkB,CAAAA,QAAF,EAAZ,CAA0B,CAA1B,CAAb,CALsB,CAVhB,CAkBjB,iBAAkBC,QAAoB,CAACnB,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,WAAY2B,CAAAA,OAAhB,EAAyBpB,CAAzB;AAA4B,IAA5B,CADiC,CAlBzB,CAAZ,CA9BiF,CAA1D,CAgEhCb,QAAQI,CAAAA,UAAR,CAAqBA,OAhFmG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/log2.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$arithmetic$log2\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createLog2 = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'log2';\\nvar dependencies = ['typed', 'config', 'Complex'];\\nvar createLog2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.log2(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.log2(0.03125)           // returns -5\\n   *    math.log2(16)                // returns 4\\n   *    math.log2(16) / math.log2(2) // returns 4\\n   *    math.pow(2, 4)               // returns 16\\n   *\\n   * See also:\\n   *\\n   *    exp, log, log1p, log10\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            Value for which to calculate the logarithm.\\n   * @return {number | BigNumber | Complex | Array | Matrix}\\n   *            Returns the 2-base logarithm of `x`\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x >= 0 || config.predictable) {\\n        return (0, _index.log2Number)(x);\\n      } else {\\n        // negative value -> complex value computation\\n        return _log2Complex(new Complex(x, 0));\\n      }\\n    },\\n    Complex: _log2Complex,\\n    BigNumber: function BigNumber(x) {\\n      if (!x.isNegative() || config.predictable) {\\n        return x.log(2);\\n      } else {\\n        // downgrade to number, return Complex valued result\\n        return _log2Complex(new Complex(x.toNumber(), 0));\\n      }\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n  /**\\n   * Calculate log2 for a complex value\\n   * @param {Complex} x\\n   * @returns {Complex}\\n   * @private\\n   */\\n\\n  function _log2Complex(x) {\\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\\n  }\\n});\\nexports.createLog2 = createLog2;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createLog2\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_log2Complex\",\"x\",\"newX\",\"Math\",\"sqrt\",\"re\",\"im\",\"Complex\",\"log2\",\"log\",\"LN2\",\"atan2\",\"typed\",\"config\",\"number\",\"predictable\",\"log2Number\",\"BigNumber\",\"isNegative\",\"toNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]