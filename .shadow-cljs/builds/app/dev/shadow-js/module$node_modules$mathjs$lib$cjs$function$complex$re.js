["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/complex/re.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$complex$re=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createRe=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");require=(0,global.factory)(\"re\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"re\",{number:function(x){return x},BigNumber:function(x){return x},Complex:function(x){return x.re},\n\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this)}})});exports.createRe=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$complex$re\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRe = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 're';\nvar dependencies = ['typed'];\nvar createRe = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      return x;\n    },\n    BigNumber: function BigNumber(x) {\n      return x;\n    },\n    Complex: function Complex(x) {\n      return x.re;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createRe = createRe;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createRe"]],"~:compiled-at",1619135262200,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$complex$re.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAEpBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA0B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFnBC,IAEmB,CADXC,CAAC,OAADA,CACW,CAA0C,QAAS,CAACC,IAAD,CAAO,CAClFC,IAAAA,CAAQD,IAAKC,CAAAA,KA6BjB,OAAOA,KAAA,CAhCEH,IAgCF,CAAY,CACjBI,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAOA,EADkB,CADV,CAIjBC,UAAWA,QAAkB,CAACD,CAAD,CAAI,CAC/B,MAAOA,EADwB,CAJhB,CAOjBE,QAASA,QAAgB,CAACF,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,EADkB,CAPZ;AAUjB,iBAAkBC,QAAoB,CAACJ,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGP,WAAYY,CAAAA,OAAhB,EAAyBL,CAAzB,CAA4B,IAA5B,CADiC,CAVzB,CAAZ,CA9B+E,CAA1D,CA6C9Bb,QAAQI,CAAAA,QAAR,CAAmBA,OA3DgG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/complex/re.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$complex$re\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createRe = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 're';\\nvar dependencies = ['typed'];\\nvar createRe = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Get the real part of a complex number.\\n   * For a complex number `a + bi`, the function returns `a`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.re(x)\\n   *\\n   * Examples:\\n   *\\n   *    const a = math.complex(2, 3)\\n   *    math.re(a)                     // returns number 2\\n   *    math.im(a)                     // returns number 3\\n   *\\n   *    math.re(math.complex('-5.2i')) // returns number 0\\n   *    math.re(math.complex(2.4))     // returns number 2.4\\n   *\\n   * See also:\\n   *\\n   *    im, conj, abs, arg\\n   *\\n   * @param {number | BigNumber | Complex | Array | Matrix} x\\n   *            A complex number or array with complex numbers\\n   * @return {number | BigNumber | Array | Matrix} The real part of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      return x;\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x;\\n    },\\n    Complex: function Complex(x) {\\n      return x.re;\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createRe = createRe;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createRe\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"x\",\"BigNumber\",\"Complex\",\"re\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]