["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isPositive.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$utils$isPositive=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createIsPositive=void 0;var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"isPositive\",[\"typed\"],function(_ref){_ref=_ref.typed;\nreturn _ref(\"isPositive\",{number:_index.isPositiveNumber,BigNumber:function(x){return!x.isNeg()&&!x.isZero()&&!x.isNaN()},Fraction:function(x){return 0<x.s&&0<x.n},Unit:function(x){return this(x.value)},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this)}})});exports.createIsPositive=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$isPositive\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsPositive = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'isPositive';\nvar dependencies = ['typed'];\nvar createIsPositive = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3)                     // returns true\n   *    math.isPositive(-2)                    // returns false\n   *    math.isPositive(0)                     // returns false\n   *    math.isPositive(-0)                    // returns false\n   *    math.isPositive(0.5)                   // returns true\n   *    math.isPositive(math.bignumber(2))     // returns true\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\n   *    math.isPositive(math.fraction(1,3))    // returns false\n   *    math.isPositive('2')                   // returns true\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _index.isPositiveNumber,\n    BigNumber: function BigNumber(x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s > 0 && x.n > 0;\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsPositive = createIsPositive;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","__esModule","value","createIsPositive","number","BigNumber","Fraction"]],"~:compiled-at",1619135262150,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isPositive.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAEhC,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAAkC,CAAC,CAAA,CAAGE,MAASE,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CACmB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAC1FC,IAAAA,CAAQD,IAAKC,CAAAA,KAiCjB;MAAOA,KAAA,CApCEH,YAoCF,CAAY,CACjBI,OAAQN,MAAOO,CAAAA,gBADE,CAEjBC,UAAWA,QAAkB,CAACC,CAAD,CAAI,CAC/B,MAAO,CAACA,CAAEC,CAAAA,KAAF,EAAR,EAAqB,CAACD,CAAEE,CAAAA,MAAF,EAAtB,EAAoC,CAACF,CAAEG,CAAAA,KAAF,EADN,CAFhB,CAKjBC,SAAUA,QAAiB,CAACJ,CAAD,CAAI,CAC7B,MAAa,EAAb,CAAOA,CAAEK,CAAAA,CAAT,EAAwB,CAAxB,CAAkBL,CAAEM,CAAAA,CADS,CALd,CAQjBC,KAAMA,QAAa,CAACP,CAAD,CAAI,CACrB,MAAO,KAAA,CAAKA,CAAEb,CAAAA,KAAP,CADc,CARN,CAWjB,iBAAkBqB,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,WAAYoB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CAXzB,CAAZ,CAlCuF,CAA1D,CAkDtChB,QAAQI,CAAAA,gBAAR,CAA2BA,OAlE8F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isPositive.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$utils$isPositive\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsPositive = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'isPositive';\\nvar dependencies = ['typed'];\\nvar createIsPositive = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is positive: larger than zero.\\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isPositive(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isPositive(3)                     // returns true\\n   *    math.isPositive(-2)                    // returns false\\n   *    math.isPositive(0)                     // returns false\\n   *    math.isPositive(-0)                    // returns false\\n   *    math.isPositive(0.5)                   // returns true\\n   *    math.isPositive(math.bignumber(2))     // returns true\\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\\n   *    math.isPositive(math.fraction(1,3))    // returns false\\n   *    math.isPositive('2')                   // returns true\\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isZero, isNegative, isInteger\\n   *\\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\\n   * @return {boolean}  Returns true when `x` is larger than zero.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: _index.isPositiveNumber,\\n    BigNumber: function BigNumber(x) {\\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.s > 0 && x.n > 0;\\n    },\\n    Unit: function Unit(x) {\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsPositive = createIsPositive;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsPositive\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"isPositiveNumber\",\"BigNumber\",\"x\",\"isNeg\",\"isZero\",\"isNaN\",\"Fraction\",\"s\",\"n\",\"Unit\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]