["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isPrime.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$utils$isPrime=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createIsPrime=void 0;var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"isPrime\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"isPrime\",{number:function(x){if(0!==0*x)return!1;if(3>=x)return 1<x;\nif(0===x%2||0===x%3)return!1;for(var i=5;i*i<=x;i+=6)if(0===x%i||0===x%(i+2))return!1;return!0},BigNumber:function(n){function modPow(base,exponent,modulus){for(var accumulator=1;!exponent.eq(0);)exponent.mod(2).eq(0)?(exponent=exponent.div(2),base=base.mul(base).mod(modulus)):(exponent=exponent.sub(1),accumulator=base.mul(accumulator).mod(modulus));return accumulator}if(0!==0*n.toNumber())return!1;if(n.lte(3))return n.gt(1);if(n.mod(2).eq(0)||n.mod(3).eq(0))return!1;if(n.lt(Math.pow(2,32))){for(var x$jscomp$0=\nn.toNumber(),i=5;i*i<=x$jscomp$0;i+=6)if(0===x$jscomp$0%i||0===x$jscomp$0%(i+2))return!1;return!0}n=new (n.constructor.clone({precision:2*n.toFixed(0).length}))(n);x$jscomp$0=0;for(i=n.sub(1);i.mod(2).eq(0);)i=i.div(2),x$jscomp$0+=1;var bases=null;if(n.lt(\"3317044064679887385961981\"))bases=[2,3,5,7,11,13,17,19,23,29,31,37,41].filter(function(x){return x<n});else{var max=Math.min(n.toNumber()-2,Math.floor(2*Math.pow(n.toFixed(0).length*Math.log(10),2)));bases=[];for(var _i=2;_i<=max;_i+=1)bases.push(max)}for(max=\n0;max<bases.length;max+=1){_i=bases[max];var adn=modPow(n.sub(n).add(_i),i,n);if(!adn.eq(1))for(_i=0;!adn.eq(n.sub(1));_i+=1,adn=adn.mul(adn).mod(n))if(_i===x$jscomp$0-1)return!1}return!0},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this)}})});exports.createIsPrime=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$isPrime\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsPrime = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nvar createIsPrime = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      if (n.lt(Math.pow(2, 32))) {\n        var x = n.toNumber();\n\n        for (var i = 5; i * i <= x; i += 6) {\n          if (x % i === 0 || x % (i + 2) === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function modPow(base, exponent, modulus) {\n        // exponent can be huge, use non-recursive variant\n        var accumulator = 1;\n\n        while (!exponent.eq(0)) {\n          if (exponent.mod(2).eq(0)) {\n            exponent = exponent.div(2);\n            base = base.mul(base).mod(modulus);\n          } else {\n            exponent = exponent.sub(1);\n            accumulator = base.mul(accumulator).mod(modulus);\n          }\n        }\n\n        return accumulator;\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\n\n\n      var Decimal = n.constructor.clone({\n        precision: n.toFixed(0).length * 2\n      });\n      n = new Decimal(n);\n      var r = 0;\n      var d = n.sub(1);\n\n      while (d.mod(2).eq(0)) {\n        d = d.div(2);\n        r += 1;\n      }\n\n      var bases = null; // https://en.wikipedia.org/wiki/Millerâ€“Rabin_primality_test#Testing_against_small_sets_of_bases\n\n      if (n.lt('3317044064679887385961981')) {\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {\n          return x < n;\n        });\n      } else {\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\n        bases = [];\n\n        for (var _i = 2; _i <= max; _i += 1) {\n          bases.push(max);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\n        var a = bases[_i2];\n        var adn = modPow(n.sub(n).add(a), d, n);\n\n        if (!adn.eq(1)) {\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\n            if (_i3 === r - 1) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createIsPrime = createIsPrime;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["precision","__esModule","value","number","createIsPrime","BigNumber"]],"~:compiled-at",1619135262231,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isPrime.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isPrime.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$utils$isPrime\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsPrime = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'isPrime';\\nvar dependencies = ['typed'];\\nvar createIsPrime = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is prime: has no divisors other than itself and one.\\n   * The function supports type `number`, `bignumber`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isPrime(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isPrime(3)                     // returns true\\n   *    math.isPrime(-2)                    // returns false\\n   *    math.isPrime(0)                     // returns false\\n   *    math.isPrime(-0)                    // returns false\\n   *    math.isPrime(0.5)                   // returns false\\n   *    math.isPrime('2')                   // returns true\\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isZero, isNegative, isInteger\\n   *\\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\\n   * @return {boolean}  Returns true when `x` is larger than zero.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x * 0 !== 0) {\\n        return false;\\n      }\\n\\n      if (x <= 3) {\\n        return x > 1;\\n      }\\n\\n      if (x % 2 === 0 || x % 3 === 0) {\\n        return false;\\n      }\\n\\n      for (var i = 5; i * i <= x; i += 6) {\\n        if (x % i === 0 || x % (i + 2) === 0) {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    },\\n    BigNumber: function BigNumber(n) {\\n      if (n.toNumber() * 0 !== 0) {\\n        return false;\\n      }\\n\\n      if (n.lte(3)) return n.gt(1);\\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\\n\\n      if (n.lt(Math.pow(2, 32))) {\\n        var x = n.toNumber();\\n\\n        for (var i = 5; i * i <= x; i += 6) {\\n          if (x % i === 0 || x % (i + 2) === 0) {\\n            return false;\\n          }\\n        }\\n\\n        return true;\\n      }\\n\\n      function modPow(base, exponent, modulus) {\\n        // exponent can be huge, use non-recursive variant\\n        var accumulator = 1;\\n\\n        while (!exponent.eq(0)) {\\n          if (exponent.mod(2).eq(0)) {\\n            exponent = exponent.div(2);\\n            base = base.mul(base).mod(modulus);\\n          } else {\\n            exponent = exponent.sub(1);\\n            accumulator = base.mul(accumulator).mod(modulus);\\n          }\\n        }\\n\\n        return accumulator;\\n      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants\\n\\n\\n      var Decimal = n.constructor.clone({\\n        precision: n.toFixed(0).length * 2\\n      });\\n      n = new Decimal(n);\\n      var r = 0;\\n      var d = n.sub(1);\\n\\n      while (d.mod(2).eq(0)) {\\n        d = d.div(2);\\n        r += 1;\\n      }\\n\\n      var bases = null; // https://en.wikipedia.org/wiki/Miller\\u2013Rabin_primality_test#Testing_against_small_sets_of_bases\\n\\n      if (n.lt('3317044064679887385961981')) {\\n        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {\\n          return x < n;\\n        });\\n      } else {\\n        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));\\n        bases = [];\\n\\n        for (var _i = 2; _i <= max; _i += 1) {\\n          bases.push(max);\\n        }\\n      }\\n\\n      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {\\n        var a = bases[_i2];\\n        var adn = modPow(n.sub(n).add(a), d, n);\\n\\n        if (!adn.eq(1)) {\\n          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {\\n            if (_i3 === r - 1) {\\n              return false;\\n            }\\n          }\\n        }\\n      }\\n\\n      return true;\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createIsPrime = createIsPrime;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsPrime\",\"_collection\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"x\",\"i\",\"BigNumber\",\"n\",\"modPow\",\"base\",\"exponent\",\"modulus\",\"accumulator\",\"eq\",\"mod\",\"div\",\"mul\",\"sub\",\"toNumber\",\"lte\",\"gt\",\"lt\",\"Math\",\"pow\",\"constructor\",\"clone\",\"Decimal\",\"precision\",\"toFixed\",\"length\",\"r\",\"d\",\"bases\",\"filter\",\"max\",\"min\",\"floor\",\"log\",\"_i\",\"push\",\"_i2\",\"a\",\"adn\",\"add\",\"_i3\",\"_x\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]