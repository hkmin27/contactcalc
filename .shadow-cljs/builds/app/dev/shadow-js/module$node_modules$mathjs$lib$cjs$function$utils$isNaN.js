["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/isNaN.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$utils$isNaN=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createIsNaN=void 0;var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"isNaN\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"isNaN\",\n{number:_index.isNaNNumber,BigNumber:function(x){return x.isNaN()},Fraction:function(x){return!1},Complex:function(x){return x.isNaN()},Unit:function(x){return Number.isNaN(x.value)},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,Number.isNaN)}})});exports.createIsNaN=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$isNaN\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIsNaN = void 0;\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'isNaN';\nvar dependencies = ['typed'];\nvar createIsNaN = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3)                     // returns false\n   *    math.isNaN(NaN)                   // returns true\n   *    math.isNaN(0)                     // returns false\n   *    math.isNaN(math.bignumber(NaN))   // returns true\n   *    math.isNaN(math.bignumber(0))     // returns false\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\n   *    math.isNaN('-2')                  // returns false\n   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: _index.isNaNNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return false;\n    },\n    Complex: function Complex(x) {\n      return x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, Number.isNaN);\n    }\n  });\n});\nexports.createIsNaN = createIsNaN;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","value","number","BigNumber","Fraction","createIsNaN"]],"~:compiled-at",1619135262151,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$isNaN.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAE3B,KAAIC,YAAcP,OAAA,CAAQ,qDAAR,CAEdQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAEf,KAAIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA6B,CAAC,CAAA,CAAGE,MAASE,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CACrFC,IAAAA,CAAQD,IAAKC,CAAAA,KA+BjB,OAAOA,KAAA,CAlCEH,OAkCF;AAAY,CACjBI,OAAQN,MAAOO,CAAAA,WADE,CAEjBC,UAAWA,QAAkB,CAACC,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,KAAF,EADwB,CAFhB,CAKjBC,SAAUA,QAAiB,CAACF,CAAD,CAAI,CAC7B,MAAO,CAAA,CADsB,CALd,CAQjBG,QAASA,QAAgB,CAACH,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,KAAF,EADoB,CARZ,CAWjBG,KAAMA,QAAa,CAACJ,CAAD,CAAI,CACrB,MAAOK,OAAOJ,CAAAA,KAAP,CAAaD,CAAEb,CAAAA,KAAf,CADc,CAXN,CAcjB,iBAAkBmB,QAAoB,CAACN,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGX,WAAYkB,CAAAA,OAAhB,EAAyBP,CAAzB,CAA4BK,MAAOJ,CAAAA,KAAnC,CADiC,CAdzB,CAAZ,CAhCkF,CAA1D,CAmDjCjB,QAAQI,CAAAA,WAAR,CAAsBA,OAnE8F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/isNaN.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$utils$isNaN\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createIsNaN = void 0;\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'isNaN';\\nvar dependencies = ['typed'];\\nvar createIsNaN = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Test whether a value is NaN (not a number).\\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\\n   *\\n   * The function is evaluated element-wise in case of Array or Matrix input.\\n   *\\n   * Syntax:\\n   *\\n   *     math.isNaN(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.isNaN(3)                     // returns false\\n   *    math.isNaN(NaN)                   // returns true\\n   *    math.isNaN(0)                     // returns false\\n   *    math.isNaN(math.bignumber(NaN))   // returns true\\n   *    math.isNaN(math.bignumber(0))     // returns false\\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\\n   *    math.isNaN('-2')                  // returns false\\n   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]\\n   *\\n   * See also:\\n   *\\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\\n   *\\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\\n   * @return {boolean}  Returns true when `x` is NaN.\\n   *                    Throws an error in case of an unknown data type.\\n   */\\n  return typed(name, {\\n    number: _index.isNaNNumber,\\n    BigNumber: function BigNumber(x) {\\n      return x.isNaN();\\n    },\\n    Fraction: function Fraction(x) {\\n      return false;\\n    },\\n    Complex: function Complex(x) {\\n      return x.isNaN();\\n    },\\n    Unit: function Unit(x) {\\n      return Number.isNaN(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, Number.isNaN);\\n    }\\n  });\\n});\\nexports.createIsNaN = createIsNaN;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createIsNaN\",\"_collection\",\"_factory\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"isNaNNumber\",\"BigNumber\",\"x\",\"isNaN\",\"Fraction\",\"Complex\",\"Unit\",\"Number\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]