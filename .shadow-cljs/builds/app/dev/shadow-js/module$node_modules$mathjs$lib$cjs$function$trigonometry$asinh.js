["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createAsinh=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\"),_index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"asinh\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"asinh\",\n{number:_index.asinhNumber,Complex:function(x){return x.asinh()},BigNumber:function(x){return x.asinh()},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this,!0)}})});exports.createAsinh=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsinh = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'asinh';\nvar dependencies = ['typed'];\nvar createAsinh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n   */\n  return typed('asinh', {\n    number: _index.asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAsinh = createAsinh;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","value","number","BigNumber","createAsinh"]],"~:compiled-at",1619135262316,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CACrFC,IAAAA,CAAQD,IAAKC,CAAAA,KAuBjB,OAAOA,KAAA,CAAM,OAAN;AAAe,CACpBC,OAAQN,MAAOO,CAAAA,WADK,CAEpBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,KAAF,EADoB,CAFT,CAKpBC,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,KAAF,EADwB,CALb,CAQpB,iBAAkBE,QAAoB,CAACH,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYc,CAAAA,OAAhB,EAAyBJ,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CARtB,CAAf,CAxBkF,CAA1D,CAsCjChB,QAAQI,CAAAA,WAAR,CAAsBA,OAtDqG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$trigonometry$asinh\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAsinh = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'asinh';\\nvar dependencies = ['typed'];\\nvar createAsinh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Calculate the hyperbolic arcsine of a value,\\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.asinh(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.asinh(0.5)       // returns 0.48121182505960347\\n   *\\n   * See also:\\n   *\\n   *    acosh, atanh\\n   *\\n   * @param {number | Complex | Array | Matrix} x  Function input\\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\\n   */\\n  return typed('asinh', {\\n    number: _index.asinhNumber,\\n    Complex: function Complex(x) {\\n      return x.asinh();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.asinh();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since asinh(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    }\\n  });\\n});\\nexports.createAsinh = createAsinh;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAsinh\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"asinhNumber\",\"Complex\",\"x\",\"asinh\",\"BigNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]