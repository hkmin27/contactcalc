["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryMinus=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createUnaryMinus=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\"),_index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"unaryMinus\",[\"typed\"],function(_ref){_ref=_ref.typed;\nreturn _ref(\"unaryMinus\",{number:_index.unaryMinusNumber,Complex:function(x){return x.neg()},BigNumber:function(x){return x.neg()},Fraction:function(x){return x.neg()},Unit:function(x){var res=x.clone();res.value=this(x.value);return res},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this,!0)}})});exports.createUnaryMinus=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryMinus\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryMinus = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nvar createUnaryMinus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: _index.unaryMinusNumber,\n    Complex: function Complex(x) {\n      return x.neg();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.neg();\n    },\n    Fraction: function Fraction(x) {\n      return x.neg();\n    },\n    Unit: function Unit(x) {\n      var res = x.clone();\n      res.value = this(x.value);\n      return res;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    } // TODO: add support for string\n\n  });\n});\nexports.createUnaryMinus = createUnaryMinus;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","createUnaryMinus","__esModule","value","number","BigNumber","Fraction"]],"~:compiled-at",1619135262166,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryMinus.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAE5BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAAkC,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAF3BC,YAE2B,CADnBC,CAAC,OAADA,CACmB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAC1FC,IAAAA,CAAQD,IAAKC,CAAAA,KAyBjB;MAAOA,KAAA,CA5BEH,YA4BF,CAAY,CACjBI,OAAQN,MAAOO,CAAAA,gBADE,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEC,CAAAA,GAAF,EADoB,CAFZ,CAKjBC,UAAWA,QAAkB,CAACF,CAAD,CAAI,CAC/B,MAAOA,EAAEC,CAAAA,GAAF,EADwB,CALhB,CAQjBE,SAAUA,QAAiB,CAACH,CAAD,CAAI,CAC7B,MAAOA,EAAEC,CAAAA,GAAF,EADsB,CARd,CAWjBG,KAAMA,QAAa,CAACJ,CAAD,CAAI,CACrB,IAAIK,IAAML,CAAEM,CAAAA,KAAF,EACVD,IAAIlB,CAAAA,KAAJ,CAAY,IAAA,CAAKa,CAAEb,CAAAA,KAAP,CACZ,OAAOkB,IAHc,CAXN,CAgBjB,iBAAkBE,QAAoB,CAACP,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYkB,CAAAA,OAAhB,EAAyBR,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAhBzB,CAAZ,CA1BuF,CAA1D,CAiDtChB,QAAQI,CAAAA,gBAAR,CAA2BA,OAjEmG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$arithmetic$unaryMinus\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createUnaryMinus = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'unaryMinus';\\nvar dependencies = ['typed'];\\nvar createUnaryMinus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Inverse the sign of a value, apply a unary minus operation.\\n   *\\n   * For matrices, the function is evaluated element wise. Boolean values and\\n   * strings will be converted to a number. For complex numbers, both real and\\n   * complex value are inverted.\\n   *\\n   * Syntax:\\n   *\\n   *    math.unaryMinus(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.unaryMinus(3.5)      // returns -3.5\\n   *    math.unaryMinus(-4.2)     // returns 4.2\\n   *\\n   * See also:\\n   *\\n   *    add, subtract, unaryPlus\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\\n   */\\n  return typed(name, {\\n    number: _index.unaryMinusNumber,\\n    Complex: function Complex(x) {\\n      return x.neg();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.neg();\\n    },\\n    Fraction: function Fraction(x) {\\n      return x.neg();\\n    },\\n    Unit: function Unit(x) {\\n      var res = x.clone();\\n      res.value = this(x.value);\\n      return res;\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since unaryMinus(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    } // TODO: add support for string\\n\\n  });\\n});\\nexports.createUnaryMinus = createUnaryMinus;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createUnaryMinus\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"unaryMinusNumber\",\"Complex\",\"x\",\"neg\",\"BigNumber\",\"Fraction\",\"Unit\",\"res\",\"clone\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]