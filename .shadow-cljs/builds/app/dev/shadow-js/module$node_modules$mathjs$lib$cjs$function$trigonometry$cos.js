["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/cos.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$trigonometry$cos=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createCos=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\");require=(0,global.factory)(\"cos\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"cos\",{number:Math.cos,Complex:function(x){return x.cos()},BigNumber:function(x){return x.cos()},\nUnit:function(x){if(!x.hasBase(x.constructor.BASE_UNITS.ANGLE))throw new TypeError(\"Unit in function cos is no angle\");return this(x.value)},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this)}})});exports.createCos=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$cos\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCos = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar name = 'cos';\nvar dependencies = ['typed'];\nvar createCos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n   */\n  return typed(name, {\n    number: Math.cos,\n    Complex: function Complex(x) {\n      return x.cos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.cos();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cos is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return (0, _collection.deepMap)(x, this);\n    }\n  });\n});\nexports.createCos = createCos;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Unit","Complex","__esModule","createCos","value","number","BigNumber"]],"~:compiled-at",1619135262318,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$cos.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAErBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAIdM,QAAAA,CAA2B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFpBC,KAEoB,CADZC,CAAC,OAADA,CACY,CAA0C,QAAS,CAACC,IAAD,CAAO,CACnFC,IAAAA,CAAQD,IAAKC,CAAAA,KA4BjB,OAAOA,KAAA,CA/BEH,KA+BF,CAAY,CACjBI,OAAQC,IAAKC,CAAAA,GADI,CAEjBC,QAASA,QAAgB,CAACC,CAAD,CAAI,CAC3B,MAAOA,EAAEF,CAAAA,GAAF,EADoB,CAFZ,CAKjBG,UAAWA,QAAkB,CAACD,CAAD,CAAI,CAC/B,MAAOA,EAAEF,CAAAA,GAAF,EADwB,CALhB;AAQjBI,KAAMA,QAAa,CAACF,CAAD,CAAI,CACrB,GAAI,CAACA,CAAEG,CAAAA,OAAF,CAAUH,CAAEI,CAAAA,WAAYC,CAAAA,UAAWC,CAAAA,KAAnC,CAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,kCAAd,CAAN,CAGF,MAAO,KAAA,CAAKP,CAAEb,CAAAA,KAAP,CALc,CARN,CAejB,iBAAkBqB,QAAoB,CAACR,CAAD,CAAI,CACxC,MAAO,CAAC,CAAA,CAAGV,WAAYmB,CAAAA,OAAhB,EAAyBT,CAAzB,CAA4B,IAA5B,CADiC,CAfzB,CAAZ,CA7BgF,CAA1D,CAiD/BhB,QAAQI,CAAAA,SAAR,CAAoBA,OA/DqG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/cos.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$trigonometry$cos\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createCos = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar name = 'cos';\\nvar dependencies = ['typed'];\\nvar createCos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Calculate the cosine of a value.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.cos(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.cos(2)                      // returns number -0.4161468365471422\\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\\n   *\\n   *    const angle = 0.2\\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\\n   *\\n   * See also:\\n   *\\n   *    cos, tan\\n   *\\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\\n   */\\n  return typed(name, {\\n    number: Math.cos,\\n    Complex: function Complex(x) {\\n      return x.cos();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.cos();\\n    },\\n    Unit: function Unit(x) {\\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\\n        throw new TypeError('Unit in function cos is no angle');\\n      }\\n\\n      return this(x.value);\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      return (0, _collection.deepMap)(x, this);\\n    }\\n  });\\n});\\nexports.createCos = createCos;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createCos\",\"_factory\",\"_collection\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"number\",\"Math\",\"cos\",\"Complex\",\"x\",\"BigNumber\",\"Unit\",\"hasBase\",\"constructor\",\"BASE_UNITS\",\"ANGLE\",\"TypeError\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]