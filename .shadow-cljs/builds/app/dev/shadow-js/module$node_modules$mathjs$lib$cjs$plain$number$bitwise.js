["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/plain/number/bitwise.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$plain$number$bitwise=function(global,require,module,exports){function bitAndNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function bitAnd\");return x&y}function bitNotNumber(x){if(!(0,_number.isInteger)(x))throw Error(\"Integer expected in function bitNot\");return~x}function bitOrNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function bitOr\");\nreturn x|y}function bitXorNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function bitXor\");return x^y}function leftShiftNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function leftShift\");return x<<y}function rightArithShiftNumber(x,y){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function rightArithShift\");return x>>y}function rightLogShiftNumber(x,\ny){if(!(0,_number.isInteger)(x)||!(0,_number.isInteger)(y))throw Error(\"Integers expected in function rightLogShift\");return x>>>y}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.bitAndNumber=bitAndNumber;exports.bitNotNumber=bitNotNumber;exports.bitOrNumber=bitOrNumber;exports.bitXorNumber=bitXorNumber;exports.leftShiftNumber=leftShiftNumber;exports.rightArithShiftNumber=rightArithShiftNumber;exports.rightLogShiftNumber=rightLogShiftNumber;var _number=require(\"module$node_modules$mathjs$lib$cjs$utils$number\");\nbitAndNumber.signature=\"number, number\";bitNotNumber.signature=\"number\";bitOrNumber.signature=\"number, number\";bitXorNumber.signature=\"number, number\";leftShiftNumber.signature=\"number, number\";rightArithShiftNumber.signature=\"number, number\";rightLogShiftNumber.signature=\"number, number\"}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$plain$number$bitwise\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitAndNumber = bitAndNumber;\nexports.bitNotNumber = bitNotNumber;\nexports.bitOrNumber = bitOrNumber;\nexports.bitXorNumber = bitXorNumber;\nexports.leftShiftNumber = leftShiftNumber;\nexports.rightArithShiftNumber = rightArithShiftNumber;\nexports.rightLogShiftNumber = rightLogShiftNumber;\n\nvar _number = require(\"../../utils/number.js\");\n\nvar n1 = 'number';\nvar n2 = 'number, number';\n\nfunction bitAndNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  return x & y;\n}\n\nbitAndNumber.signature = n2;\n\nfunction bitNotNumber(x) {\n  if (!(0, _number.isInteger)(x)) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  return ~x;\n}\n\nbitNotNumber.signature = n1;\n\nfunction bitOrNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  return x | y;\n}\n\nbitOrNumber.signature = n2;\n\nfunction bitXorNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  return x ^ y;\n}\n\nbitXorNumber.signature = n2;\n\nfunction leftShiftNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  return x << y;\n}\n\nleftShiftNumber.signature = n2;\n\nfunction rightArithShiftNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  return x >> y;\n}\n\nrightArithShiftNumber.signature = n2;\n\nfunction rightLogShiftNumber(x, y) {\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\n    throw new Error('Integers expected in function rightLogShift');\n  }\n\n  return x >>> y;\n}\n\nrightLogShiftNumber.signature = n2;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$number"]],"~:properties",["^5",["bitOrNumber","bitXorNumber","__esModule","rightArithShiftNumber","value","rightLogShiftNumber","leftShiftNumber","signature","bitAndNumber","bitNotNumber"]],"~:compiled-at",1619135262138,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$plain$number$bitwise.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/plain/number/bitwise.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$plain$number$bitwise\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.bitAndNumber = bitAndNumber;\\nexports.bitNotNumber = bitNotNumber;\\nexports.bitOrNumber = bitOrNumber;\\nexports.bitXorNumber = bitXorNumber;\\nexports.leftShiftNumber = leftShiftNumber;\\nexports.rightArithShiftNumber = rightArithShiftNumber;\\nexports.rightLogShiftNumber = rightLogShiftNumber;\\n\\nvar _number = require(\\\"../../utils/number.js\\\");\\n\\nvar n1 = 'number';\\nvar n2 = 'number, number';\\n\\nfunction bitAndNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function bitAnd');\\n  }\\n\\n  return x & y;\\n}\\n\\nbitAndNumber.signature = n2;\\n\\nfunction bitNotNumber(x) {\\n  if (!(0, _number.isInteger)(x)) {\\n    throw new Error('Integer expected in function bitNot');\\n  }\\n\\n  return ~x;\\n}\\n\\nbitNotNumber.signature = n1;\\n\\nfunction bitOrNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function bitOr');\\n  }\\n\\n  return x | y;\\n}\\n\\nbitOrNumber.signature = n2;\\n\\nfunction bitXorNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function bitXor');\\n  }\\n\\n  return x ^ y;\\n}\\n\\nbitXorNumber.signature = n2;\\n\\nfunction leftShiftNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function leftShift');\\n  }\\n\\n  return x << y;\\n}\\n\\nleftShiftNumber.signature = n2;\\n\\nfunction rightArithShiftNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function rightArithShift');\\n  }\\n\\n  return x >> y;\\n}\\n\\nrightArithShiftNumber.signature = n2;\\n\\nfunction rightLogShiftNumber(x, y) {\\n  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {\\n    throw new Error('Integers expected in function rightLogShift');\\n  }\\n\\n  return x >>> y;\\n}\\n\\nrightLogShiftNumber.signature = n2;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"bitAndNumber\",\"x\",\"y\",\"_number\",\"isInteger\",\"Error\",\"bitNotNumber\",\"bitOrNumber\",\"bitXorNumber\",\"leftShiftNumber\",\"rightArithShiftNumber\",\"rightLogShiftNumber\",\"Object\",\"defineProperty\",\"value\",\"signature\",\"n2\",\"n1\"]\n}\n"]