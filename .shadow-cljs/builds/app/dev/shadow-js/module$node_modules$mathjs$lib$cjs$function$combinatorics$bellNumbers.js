["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/combinatorics/bellNumbers.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$combinatorics$bellNumbers=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createBellNumbers=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"bellNumbers\",[\"typed\",\"addScalar\",\"isNegative\",\"isInteger\",\"stirlingS2\"],function(_ref){var typed=_ref.typed,addScalar=_ref.addScalar,isNegative=_ref.isNegative,isInteger=_ref.isInteger,stirlingS2=\n_ref.stirlingS2;return typed(\"bellNumbers\",{\"number | BigNumber\":function(n){if(!isInteger(n)||isNegative(n))throw new TypeError(\"Non-negative integer value expected in function bellNumbers\");for(var result=0,i=0;i<=n;i++)result=addScalar(result,stirlingS2(n,i));return result}})});exports.createBellNumbers=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$combinatorics$bellNumbers\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBellNumbers = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'bellNumbers';\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\nvar createBellNumbers = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      stirlingS2 = _ref.stirlingS2;\n\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3) // returns 5\n   *    math.bellNumbers(8) // returns 4140\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      } // Sum (k=0, n) S(n,k).\n\n\n      var result = 0;\n\n      for (var i = 0; i <= n; i++) {\n        result = addScalar(result, stirlingS2(n, i));\n      }\n\n      return result;\n    }\n  });\n});\nexports.createBellNumbers = createBellNumbers;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createBellNumbers","__esModule","value"]],"~:compiled-at",1619135262558,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$combinatorics$bellNumbers.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EAE7BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAmC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF5BC,aAE4B,CADpBC,CAAC,OAADA,CAAU,WAAVA,CAAuB,YAAvBA,CAAqC,WAArCA,CAAkD,YAAlDA,CACoB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC3FC,MAAQD,IAAKC,CAAAA,KAD8E,CAE3FC,UAAYF,IAAKE,CAAAA,SAF0E,CAG3FC,WAAaH,IAAKG,CAAAA,UAHyE,CAI3FC,UAAYJ,IAAKI,CAAAA,SAJ0E,CAK3FC;AAAaL,IAAKK,CAAAA,UAuBtB,OAAOJ,MAAA,CA9BEH,aA8BF,CAAY,CACjB,qBAAsBQ,QAAwB,CAACC,CAAD,CAAI,CAChD,GAAI,CAACH,SAAA,CAAUG,CAAV,CAAL,EAAqBJ,UAAA,CAAWI,CAAX,CAArB,CACE,KAAM,KAAIC,SAAJ,CAAc,6DAAd,CAAN,CAMF,IAFA,IAAIC,OAAS,CAAb,CAESC,EAAI,CAAb,CAAgBA,CAAhB,EAAqBH,CAArB,CAAwBG,CAAA,EAAxB,CACED,MAAA,CAASP,SAAA,CAAUO,MAAV,CAAkBJ,UAAA,CAAWE,CAAX,CAAcG,CAAd,CAAlB,CAGX,OAAOD,OAZyC,CADjC,CAAZ,CA5BwF,CAA1D,CA6CvClB,QAAQI,CAAAA,iBAAR,CAA4BA,MAzDsG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/combinatorics/bellNumbers.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$combinatorics$bellNumbers\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createBellNumbers = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'bellNumbers';\\nvar dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];\\nvar createBellNumbers = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      addScalar = _ref.addScalar,\\n      isNegative = _ref.isNegative,\\n      isInteger = _ref.isInteger,\\n      stirlingS2 = _ref.stirlingS2;\\n\\n  /**\\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\\n   * bellNumbers only takes integer arguments.\\n   * The following condition must be enforced: n >= 0\\n   *\\n   * Syntax:\\n   *\\n   *   math.bellNumbers(n)\\n   *\\n   * Examples:\\n   *\\n   *    math.bellNumbers(3) // returns 5\\n   *    math.bellNumbers(8) // returns 4140\\n   *\\n   * See also:\\n   *\\n   *    stirlingS2\\n   *\\n   * @param {Number | BigNumber} n    Total number of objects in the set\\n   * @return {Number | BigNumber}     B(n)\\n   */\\n  return typed(name, {\\n    'number | BigNumber': function numberBigNumber(n) {\\n      if (!isInteger(n) || isNegative(n)) {\\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\\n      } // Sum (k=0, n) S(n,k).\\n\\n\\n      var result = 0;\\n\\n      for (var i = 0; i <= n; i++) {\\n        result = addScalar(result, stirlingS2(n, i));\\n      }\\n\\n      return result;\\n    }\\n  });\\n});\\nexports.createBellNumbers = createBellNumbers;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createBellNumbers\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"addScalar\",\"isNegative\",\"isInteger\",\"stirlingS2\",\"numberBigNumber\",\"n\",\"TypeError\",\"result\",\"i\"]\n}\n"]