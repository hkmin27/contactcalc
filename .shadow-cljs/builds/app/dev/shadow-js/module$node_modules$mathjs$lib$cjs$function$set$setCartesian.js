["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/set/setCartesian.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$set$setCartesian=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createSetCartesian=void 0;var _array=require(\"module$node_modules$mathjs$lib$cjs$utils$array\");global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"setCartesian\",\"typed size subset compareNatural Index DenseMatrix\".split(\" \"),function(_ref){var typed=_ref.typed,size=_ref.size,subset=\n_ref.subset,compareNatural=_ref.compareNatural,Index=_ref.Index,DenseMatrix=_ref.DenseMatrix;return typed(\"setCartesian\",{\"Array | Matrix, Array | Matrix\":function(a1,a2){var result=[];if(0!==subset(size(a1),new Index(0))&&0!==subset(size(a2),new Index(0))){var b1=(0,_array.flatten)(Array.isArray(a1)?a1:a1.toArray()).sort(compareNatural),b2=(0,_array.flatten)(Array.isArray(a2)?a2:a2.toArray()).sort(compareNatural);result=[];for(var i=0;i<b1.length;i++)for(var j=0;j<b2.length;j++)result.push([b1[i],\nb2[j]])}return Array.isArray(a1)&&Array.isArray(a2)?result:new DenseMatrix(result)}})});exports.createSetCartesian=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$set$setCartesian\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSetCartesian = void 0;\n\nvar _array = require(\"../../utils/array.js\");\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nvar createSetCartesian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});\nexports.createSetCartesian = createSetCartesian;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["createSetCartesian","__esModule","value"]],"~:compiled-at",1619135262323,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$set$setCartesian.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAElC,KAAIC,OAASP,OAAA,CAAQ,gDAAR,CAETQ,OAAAA,CAAWR,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAoC,CAAC,CAAA,CAAGE,MAASC,CAAAA,OAAb,EAF7BC,cAE6B,CADrBC,oDAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CACqB,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IAC5FC,MAAQD,IAAKC,CAAAA,KAD+E,CAE5FC,KAAOF,IAAKE,CAAAA,IAFgF,CAG5FC;AAASH,IAAKG,CAAAA,MAH8E,CAI5FC,eAAiBJ,IAAKI,CAAAA,cAJsE,CAK5FC,MAAQL,IAAKK,CAAAA,KAL+E,CAM5FC,YAAcN,IAAKM,CAAAA,WAsBvB,OAAOL,MAAA,CA9BEH,cA8BF,CAAY,CACjB,iCAAkCS,QAA+B,CAACC,EAAD,CAAKC,EAAL,CAAS,CACxE,IAAIC,OAAS,EAEb,IAAuC,CAAvC,GAAIP,MAAA,CAAOD,IAAA,CAAKM,EAAL,CAAP,CAAiB,IAAIH,KAAJ,CAAU,CAAV,CAAjB,CAAJ,EAA+E,CAA/E,GAA4CF,MAAA,CAAOD,IAAA,CAAKO,EAAL,CAAP,CAAiB,IAAIJ,KAAJ,CAAU,CAAV,CAAjB,CAA5C,CAAkF,CAEhF,IAAIM,GAAK,CAAC,CAAA,CAAGhB,MAAOiB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcN,EAAd,CAAA,CAAoBA,EAApB,CAAyBA,EAAGO,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEZ,cAAhE,CAAT,CACIa,GAAK,CAAC,CAAA,CAAGtB,MAAOiB,CAAAA,OAAX,EAAoBC,KAAMC,CAAAA,OAAN,CAAcL,EAAd,CAAA,CAAoBA,EAApB,CAAyBA,EAAGM,CAAAA,OAAH,EAA7C,CAA2DC,CAAAA,IAA3D,CAAgEZ,cAAhE,CACTM,OAAA,CAAS,EAET,KAAK,IAAIQ,EAAI,CAAb,CAAgBA,CAAhB,CAAoBP,EAAGQ,CAAAA,MAAvB,CAA+BD,CAAA,EAA/B,CACE,IAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,EAAGE,CAAAA,MAAvB,CAA+BC,CAAA,EAA/B,CACEV,MAAOW,CAAAA,IAAP,CAAY,CAACV,EAAA,CAAGO,CAAH,CAAD;AAAQD,EAAA,CAAGG,CAAH,CAAR,CAAZ,CAR4E,CAclF,MAAIP,MAAMC,CAAAA,OAAN,CAAcN,EAAd,CAAJ,EAAyBK,KAAMC,CAAAA,OAAN,CAAcL,EAAd,CAAzB,CACSC,MADT,CAKO,IAAIJ,WAAJ,CAAgBI,MAAhB,CAtBiE,CADzD,CAAZ,CA5ByF,CAA1D,CAuDxCpB,QAAQI,CAAAA,kBAAR,CAA6BA,MArE4F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/set/setCartesian.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$set$setCartesian\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createSetCartesian = void 0;\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'setCartesian';\\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\\nvar createSetCartesian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      size = _ref.size,\\n      subset = _ref.subset,\\n      compareNatural = _ref.compareNatural,\\n      Index = _ref.Index,\\n      DenseMatrix = _ref.DenseMatrix;\\n\\n  /**\\n   * Create the cartesian product of two (multi)sets.\\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\\n   *\\n   * Syntax:\\n   *\\n   *    math.setCartesian(set1, set2)\\n   *\\n   * Examples:\\n   *\\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\\n   *\\n   * See also:\\n   *\\n   *    setUnion, setIntersect, setDifference, setPowerset\\n   *\\n   * @param {Array | Matrix}    a1  A (multi)set\\n   * @param {Array | Matrix}    a2  A (multi)set\\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\\n   */\\n  return typed(name, {\\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\\n      var result = [];\\n\\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\\n        // if any of them is empty, return empty\\n        var b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\\n        var b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\\n        result = [];\\n\\n        for (var i = 0; i < b1.length; i++) {\\n          for (var j = 0; j < b2.length; j++) {\\n            result.push([b1[i], b2[j]]);\\n          }\\n        }\\n      } // return an array, if both inputs were arrays\\n\\n\\n      if (Array.isArray(a1) && Array.isArray(a2)) {\\n        return result;\\n      } // return a matrix otherwise\\n\\n\\n      return new DenseMatrix(result);\\n    }\\n  });\\n});\\nexports.createSetCartesian = createSetCartesian;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createSetCartesian\",\"_array\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"size\",\"subset\",\"compareNatural\",\"Index\",\"DenseMatrix\",\"ArrayMatrixArrayMatrix\",\"a1\",\"a2\",\"result\",\"b1\",\"flatten\",\"Array\",\"isArray\",\"toArray\",\"sort\",\"b2\",\"i\",\"length\",\"j\",\"push\"]\n}\n"]