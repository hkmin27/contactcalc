["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/utils/typeOf.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$utils$typeOf=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createTypeOf=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _is=require(\"module$node_modules$mathjs$lib$cjs$utils$is\");require=(0,global.factory)(\"typeOf\",[\"typed\"],function(_ref){_ref=_ref.typed;return _ref(\"typeOf\",{any:_is.typeOf})});exports.createTypeOf=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$utils$typeOf\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTypeOf = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _is = require(\"../../utils/is.js\");\n\nvar name = 'typeOf';\nvar dependencies = ['typed'];\nvar createTypeOf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeOf` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeOf(null)`\n   * number                 | `'number'`    | `math.typeOf(3.5)`\n   * boolean                | `'boolean'`   | `math.typeOf(true)`\n   * string                 | `'string'`    | `math.typeOf('hello world')`\n   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeOf(new Date())`\n   * Function               | `'Function'`  | `math.typeOf(function () {})`\n   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeOf(undefined)`\n   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`\n   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`\n   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`\n   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\n   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`\n   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`\n   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`\n   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\\nb=3'))`\n   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`\n   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`\n   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`\n   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`\n   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`\n   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`\n   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`\n   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`\n   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`\n   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`\n   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`\n   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`\n   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`\n   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`\n   *\n   * Syntax:\n   *\n   *    math.typeOf(x)\n   *\n   * Examples:\n   *\n   *    math.typeOf(3.5)                     // returns 'number'\n   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'\n   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'\n   *    math.typeOf('hello world')           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  return typed(name, {\n    any: _is.typeOf\n  });\n});\nexports.createTypeOf = createTypeOf;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$is","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","any","value","createTypeOf"]],"~:compiled-at",1619135262151,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$utils$typeOf.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,IAAMR,OAAA,CAAQ,6CAAR,CAINM,QAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASE,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CACtFC,IAAAA,CAAQD,IAAKC,CAAAA,KA4DjB,OAAOA,KAAA,CA/DEH,QA+DF,CAAY,CACjBI,IAAKN,GAAIO,CAAAA,MADQ,CAAZ,CA7DmF,CAA1D,CAiElCb,QAAQI,CAAAA,YAAR,CAAuBA,OA/E8F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/utils/typeOf.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$utils$typeOf\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createTypeOf = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _is = require(\\\"../../utils/is.js\\\");\\n\\nvar name = 'typeOf';\\nvar dependencies = ['typed'];\\nvar createTypeOf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed;\\n\\n  /**\\n   * Determine the type of a variable.\\n   *\\n   * Function `typeOf` recognizes the following types of objects:\\n   *\\n   * Object                 | Returns       | Example\\n   * ---------------------- | ------------- | ------------------------------------------\\n   * null                   | `'null'`      | `math.typeOf(null)`\\n   * number                 | `'number'`    | `math.typeOf(3.5)`\\n   * boolean                | `'boolean'`   | `math.typeOf(true)`\\n   * string                 | `'string'`    | `math.typeOf('hello world')`\\n   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`\\n   * Date                   | `'Date'`      | `math.typeOf(new Date())`\\n   * Function               | `'Function'`  | `math.typeOf(function () {})`\\n   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`\\n   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`\\n   * undefined              | `'undefined'` | `math.typeOf(undefined)`\\n   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`\\n   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`\\n   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`\\n   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`\\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\\n   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`\\n   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`\\n   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`\\n   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`\\n   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\\\\nb=3'))`\\n   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`\\n   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`\\n   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`\\n   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`\\n   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`\\n   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`\\n   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`\\n   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`\\n   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`\\n   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`\\n   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`\\n   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`\\n   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`\\n   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`\\n   *\\n   * Syntax:\\n   *\\n   *    math.typeOf(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.typeOf(3.5)                     // returns 'number'\\n   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'\\n   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'\\n   *    math.typeOf('hello world')           // returns 'string'\\n   *\\n   * @param {*} x     The variable for which to test the type.\\n   * @return {string} Returns the name of the type. Primitive types are lower case,\\n   *                  non-primitive types are upper-camel-case.\\n   *                  For example 'number', 'string', 'Array', 'Date'.\\n   */\\n  return typed(name, {\\n    any: _is.typeOf\\n  });\\n});\\nexports.createTypeOf = createTypeOf;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createTypeOf\",\"_factory\",\"_is\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"any\",\"typeOf\"]\n}\n"]