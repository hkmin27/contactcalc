["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/matrix/column.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$matrix$column=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createColumn=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _object=require(\"module$node_modules$mathjs$lib$cjs$utils$object\"),_array=require(\"module$node_modules$mathjs$lib$cjs$utils$array\");require=(0,global.factory)(\"column\",[\"typed\",\"Index\",\"matrix\",\"range\"],function(_ref){function _column(value,\ncolumn){if(2!==value.size().length)throw Error(\"Only two dimensional matrix is supported\");(0,_array.validateIndex)(column,value.size()[1]);var rowRange=range(0,value.size()[0]);column=new Index(rowRange,column);return value.subset(column)}var typed=_ref.typed,Index=_ref.Index,matrix=_ref.matrix,range=_ref.range;return typed(\"column\",{\"Matrix, number\":_column,\"Array, number\":function(value,column){return _column(matrix((0,_object.clone)(value)),column).valueOf()}})});exports.createColumn=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$matrix$column\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createColumn = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _object = require(\"../../utils/object.js\");\n\nvar _array = require(\"../../utils/array.js\");\n\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nvar createColumn = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a column from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.column(value, index)\n   *\n   * Example:\n   *\n   *     // get a column\n   *     const d = [[1, 2], [3, 4]]\n   *     math.column(d, 1) // returns [[2], [4]]\n   *\n   * See also:\n   *\n   *     row\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} column           The index of the column\n   * @return {Array | Matrix}         The retrieved column\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function ArrayNumber(value, column) {\n      return _column(matrix((0, _object.clone)(value)), column).valueOf();\n    }\n  });\n  /**\n   * Retrieve a column of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} column  The index of the column\n   * @return {Matrix}        The retrieved column\n   */\n\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    (0, _array.validateIndex)(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    return value.subset(index);\n  }\n});\nexports.createColumn = createColumn;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$array","~$module$node_modules$mathjs$lib$cjs$utils$object","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createColumn"]],"~:compiled-at",1619135262207,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$matrix$column.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAExBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,QAAUR,OAAA,CAAQ,iDAAR,CAAd,CAEIS,OAAST,OAAA,CAAQ,gDAAR,CAITM,QAAAA,CAA8B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFvBC,QAEuB,CADfC,CAAC,OAADA,CAAU,OAAVA,CAAmB,QAAnBA,CAA6B,OAA7BA,CACe,CAA0C,QAAS,CAACC,IAAD,CAAO,CAwC1FC,QAASA,QAAO,CAACT,KAAD;AAAQU,MAAR,CAAgB,CAE9B,GAA4B,CAA5B,GAAIV,KAAMW,CAAAA,IAAN,EAAaC,CAAAA,MAAjB,CACE,KAAUC,MAAJ,CAAU,0CAAV,CAAN,CAGF,CAAC,CAAA,CAAGT,MAAOU,CAAAA,aAAX,EAA0BJ,MAA1B,CAAkCV,KAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAAlC,CACA,KAAII,SAAWC,KAAA,CAAM,CAAN,CAAShB,KAAMW,CAAAA,IAAN,EAAA,CAAa,CAAb,CAAT,CACXM,OAAAA,CAAQ,IAAIC,KAAJ,CAAUH,QAAV,CAAoBL,MAApB,CACZ,OAAOV,MAAMmB,CAAAA,MAAN,CAAaF,MAAb,CATuB,CAxC0D,IACtFG,MAAQZ,IAAKY,CAAAA,KADyE,CAEtFF,MAAQV,IAAKU,CAAAA,KAFyE,CAGtFG,OAASb,IAAKa,CAAAA,MAHwE,CAItFL,MAAQR,IAAKQ,CAAAA,KAuBjB,OAAOI,MAAA,CA7BEd,QA6BF,CAAY,CACjB,iBAAkBG,OADD,CAEjB,gBAAiBa,QAAoB,CAACtB,KAAD,CAAQU,MAAR,CAAgB,CACnD,MAAOD,QAAA,CAAQY,MAAA,CAAO,CAAC,CAAA,CAAGlB,OAAQoB,CAAAA,KAAZ,EAAmBvB,KAAnB,CAAP,CAAR,CAA2CU,MAA3C,CAAmDc,CAAAA,OAAnD,EAD4C,CAFpC,CAAZ,CA3BmF,CAA1D,CAoDlC3B,QAAQI,CAAAA,YAAR,CAAuBA,OApE+F;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/matrix/column.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$matrix$column\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createColumn = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _object = require(\\\"../../utils/object.js\\\");\\n\\nvar _array = require(\\\"../../utils/array.js\\\");\\n\\nvar name = 'column';\\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\\nvar createColumn = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      Index = _ref.Index,\\n      matrix = _ref.matrix,\\n      range = _ref.range;\\n\\n  /**\\n   * Return a column from a Matrix.\\n   *\\n   * Syntax:\\n   *\\n   *     math.column(value, index)\\n   *\\n   * Example:\\n   *\\n   *     // get a column\\n   *     const d = [[1, 2], [3, 4]]\\n   *     math.column(d, 1) // returns [[2], [4]]\\n   *\\n   * See also:\\n   *\\n   *     row\\n   *\\n   * @param {Array | Matrix } value   An array or matrix\\n   * @param {number} column           The index of the column\\n   * @return {Array | Matrix}         The retrieved column\\n   */\\n  return typed(name, {\\n    'Matrix, number': _column,\\n    'Array, number': function ArrayNumber(value, column) {\\n      return _column(matrix((0, _object.clone)(value)), column).valueOf();\\n    }\\n  });\\n  /**\\n   * Retrieve a column of a matrix\\n   * @param {Matrix } value  A matrix\\n   * @param {number} column  The index of the column\\n   * @return {Matrix}        The retrieved column\\n   */\\n\\n  function _column(value, column) {\\n    // check dimensions\\n    if (value.size().length !== 2) {\\n      throw new Error('Only two dimensional matrix is supported');\\n    }\\n\\n    (0, _array.validateIndex)(column, value.size()[1]);\\n    var rowRange = range(0, value.size()[0]);\\n    var index = new Index(rowRange, column);\\n    return value.subset(index);\\n  }\\n});\\nexports.createColumn = createColumn;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createColumn\",\"_factory\",\"_object\",\"_array\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_column\",\"column\",\"size\",\"length\",\"Error\",\"validateIndex\",\"rowRange\",\"range\",\"index\",\"Index\",\"subset\",\"typed\",\"matrix\",\"ArrayNumber\",\"clone\",\"valueOf\"]\n}\n"]