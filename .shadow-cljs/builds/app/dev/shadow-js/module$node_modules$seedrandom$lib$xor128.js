["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/seedrandom/lib/xor128.js"],"~:js","shadow$provide.module$node_modules$seedrandom$lib$xor128=function(global$jscomp$0,require,module$jscomp$0,exports){(function(global,module,define){function XorGen(seed){var me=this,strseed=\"\";me.x=0;me.y=0;me.z=0;me.w=0;me.next=function(){var t=me.x^me.x<<11;me.x=me.y;me.y=me.z;me.z=me.w;return me.w=me.w^me.w>>>19^t^t>>>8};seed===(seed|0)?me.x=seed:strseed+=seed;for(seed=0;seed<strseed.length+64;seed++)me.x^=strseed.charCodeAt(seed)|0,me.next()}function copy(f,t){t.x=f.x;t.y=f.y;t.z=f.z;t.w=f.w;return t}\nfunction impl(seed,opts){var xg=new XorGen(seed);seed=opts&&opts.state;opts=function(){return(xg.next()>>>0)/4294967296};opts.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296;top=(top+bot)/2097152}while(0===top);return top};opts.int32=xg.next;opts.quick=opts;seed&&(\"object\"==typeof seed&&copy(seed,xg),opts.state=function(){return copy(xg,{})});return opts}module&&module.exports?module.exports=impl:define&&define.amd?define(function(){return impl}):this.xor128=impl})(this,\n\"object\"==typeof module$jscomp$0&&module$jscomp$0,\"function\"==typeof define&&define)}","~:source","shadow$provide[\"module$node_modules$seedrandom$lib$xor128\"] = function(global,require,module,exports) {\n// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["z","w","next","xor128","int32","x","quick","y","state","double"]],"~:compiled-at",1619135262546,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$seedrandom$lib$xor128.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/seedrandom/lib/xor128.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$seedrandom$lib$xor128\\\"] = function(global,require,module,exports) {\\n// A Javascript implementaion of the \\\"xor128\\\" prng algorithm by\\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\\n\\n(function(global, module, define) {\\n\\nfunction XorGen(seed) {\\n  var me = this, strseed = '';\\n\\n  me.x = 0;\\n  me.y = 0;\\n  me.z = 0;\\n  me.w = 0;\\n\\n  // Set up generator function.\\n  me.next = function() {\\n    var t = me.x ^ (me.x << 11);\\n    me.x = me.y;\\n    me.y = me.z;\\n    me.z = me.w;\\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\\n  };\\n\\n  if (seed === (seed | 0)) {\\n    // Integer seed.\\n    me.x = seed;\\n  } else {\\n    // String seed.\\n    strseed += seed;\\n  }\\n\\n  // Mix in string seed, then discard an initial batch of 64 values.\\n  for (var k = 0; k < strseed.length + 64; k++) {\\n    me.x ^= strseed.charCodeAt(k) | 0;\\n    me.next();\\n  }\\n}\\n\\nfunction copy(f, t) {\\n  t.x = f.x;\\n  t.y = f.y;\\n  t.z = f.z;\\n  t.w = f.w;\\n  return t;\\n}\\n\\nfunction impl(seed, opts) {\\n  var xg = new XorGen(seed),\\n      state = opts && opts.state,\\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\\n  prng.double = function() {\\n    do {\\n      var top = xg.next() >>> 11,\\n          bot = (xg.next() >>> 0) / 0x100000000,\\n          result = (top + bot) / (1 << 21);\\n    } while (result === 0);\\n    return result;\\n  };\\n  prng.int32 = xg.next;\\n  prng.quick = prng;\\n  if (state) {\\n    if (typeof(state) == 'object') copy(state, xg);\\n    prng.state = function() { return copy(xg, {}); }\\n  }\\n  return prng;\\n}\\n\\nif (module && module.exports) {\\n  module.exports = impl;\\n} else if (define && define.amd) {\\n  define(function() { return impl; });\\n} else {\\n  this.xor128 = impl;\\n}\\n\\n})(\\n  this,\\n  (typeof module) == 'object' && module,    // present in node.js\\n  (typeof define) == 'function' && define   // present with an AMD loader\\n);\\n\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"define\",\"XorGen\",\"seed\",\"me\",\"strseed\",\"x\",\"y\",\"z\",\"w\",\"next\",\"me.next\",\"t\",\"k\",\"length\",\"charCodeAt\",\"copy\",\"f\",\"impl\",\"opts\",\"xg\",\"state\",\"prng\",\"double\",\"prng.double\",\"top\",\"bot\",\"result\",\"int32\",\"quick\",\"prng.state\",\"amd\",\"xor128\"]\n}\n"]