["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/relational/deepEqual.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$relational$deepEqual=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createDeepEqual=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");global=(0,global.factory)(\"deepEqual\",[\"typed\",\"equal\"],function(_ref){function _deepEqual(x,y){if(Array.isArray(x)){if(Array.isArray(y)){var len=x.length;if(len!==y.length)return!1;for(var i=0;i<len;i++)if(!_deepEqual(x[i],y[i]))return!1;\nreturn!0}return!1}return Array.isArray(y)?!1:equal(x,y)}var typed=_ref.typed,equal=_ref.equal;return typed(\"deepEqual\",{\"any, any\":function(x,y){return _deepEqual(x.valueOf(),y.valueOf())}})});exports.createDeepEqual=global}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$relational$deepEqual\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDeepEqual = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nvar createDeepEqual = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equal = _ref.equal;\n\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});\nexports.createDeepEqual = createDeepEqual;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["__esModule","value","createDeepEqual"]],"~:compiled-at",1619135262279,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$relational$deepEqual.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE3BC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAIXM,OAAAA,CAAiC,CAAC,CAAA,CAAGC,MAASC,CAAAA,OAAb,EAF1BC,WAE0B,CADlBC,CAAC,OAADA,CAAU,OAAVA,CACkB,CAA0C,QAAS,CAACC,IAAD,CAAO,CA6C7FC,QAASA,WAAU,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACxB,GAAIC,KAAMC,CAAAA,OAAN,CAAcH,CAAd,CAAJ,CAAsB,CACpB,GAAIE,KAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAJ,CAAsB,CACpB,IAAIG,IAAMJ,CAAEK,CAAAA,MAEZ,IAAID,GAAJ,GAAYH,CAAEI,CAAAA,MAAd,CACE,MAAO,CAAA,CAGT,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,GAApB,CAAyBE,CAAA,EAAzB,CACE,GAAI,CAACP,UAAA,CAAWC,CAAA,CAAEM,CAAF,CAAX,CAAiBL,CAAA,CAAEK,CAAF,CAAjB,CAAL,CACE,MAAO,CAAA,CAIX;MAAO,CAAA,CAba,CAepB,MAAO,CAAA,CAhBW,CAmBpB,MAAIJ,MAAMC,CAAAA,OAAN,CAAcF,CAAd,CAAJ,CACS,CAAA,CADT,CAGSM,KAAA,CAAMP,CAAN,CAASC,CAAT,CAvBa,CA7CmE,IACzFO,MAAQV,IAAKU,CAAAA,KAD4E,CAEzFD,MAAQT,IAAKS,CAAAA,KA+BjB,OAAOC,MAAA,CAnCEZ,WAmCF,CAAY,CACjB,WAAYa,QAAe,CAACT,CAAD,CAAIC,CAAJ,CAAO,CAChC,MAAOF,WAAA,CAAWC,CAAEU,CAAAA,OAAF,EAAX,CAAwBT,CAAES,CAAAA,OAAF,EAAxB,CADyB,CADjB,CAAZ,CAjCsF,CAA1D,CAyErCrB,QAAQI,CAAAA,eAAR,CAA0BA,MArFmG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/relational/deepEqual.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$relational$deepEqual\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createDeepEqual = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar name = 'deepEqual';\\nvar dependencies = ['typed', 'equal'];\\nvar createDeepEqual = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      equal = _ref.equal;\\n\\n  /**\\n   * Test element wise whether two matrices are equal.\\n   * The function accepts both matrices and scalar values.\\n   *\\n   * Strings are compared by their numerical value.\\n   *\\n   * Syntax:\\n   *\\n   *    math.deepEqual(x, y)\\n   *\\n   * Examples:\\n   *\\n   *    math.deepEqual(2, 4)   // returns false\\n   *\\n   *    a = [2, 5, 1]\\n   *    b = [2, 7, 1]\\n   *\\n   *    math.deepEqual(a, b)   // returns false\\n   *    math.equal(a, b)       // returns [true, false, true]\\n   *\\n   * See also:\\n   *\\n   *    equal, unequal\\n   *\\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\\n   */\\n  return typed(name, {\\n    'any, any': function anyAny(x, y) {\\n      return _deepEqual(x.valueOf(), y.valueOf());\\n    }\\n  });\\n  /**\\n   * Test whether two arrays have the same size and all elements are equal\\n   * @param {Array | *} x\\n   * @param {Array | *} y\\n   * @return {boolean} Returns true if both arrays are deep equal\\n   */\\n\\n  function _deepEqual(x, y) {\\n    if (Array.isArray(x)) {\\n      if (Array.isArray(y)) {\\n        var len = x.length;\\n\\n        if (len !== y.length) {\\n          return false;\\n        }\\n\\n        for (var i = 0; i < len; i++) {\\n          if (!_deepEqual(x[i], y[i])) {\\n            return false;\\n          }\\n        }\\n\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    } else {\\n      if (Array.isArray(y)) {\\n        return false;\\n      } else {\\n        return equal(x, y);\\n      }\\n    }\\n  }\\n});\\nexports.createDeepEqual = createDeepEqual;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createDeepEqual\",\"_factory\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"_deepEqual\",\"x\",\"y\",\"Array\",\"isArray\",\"len\",\"length\",\"i\",\"equal\",\"typed\",\"anyAny\",\"valueOf\"]\n}\n"]