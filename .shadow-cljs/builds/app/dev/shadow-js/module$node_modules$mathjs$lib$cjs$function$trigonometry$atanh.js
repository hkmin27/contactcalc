["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mathjs/lib/cjs/function/trigonometry/atanh.js"],"~:js","shadow$provide.module$node_modules$mathjs$lib$cjs$function$trigonometry$atanh=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.createAtanh=void 0;global=require(\"module$node_modules$mathjs$lib$cjs$utils$factory\");var _collection=require(\"module$node_modules$mathjs$lib$cjs$utils$collection\"),_index=require(\"module$node_modules$mathjs$lib$cjs$plain$number$index\");require=(0,global.factory)(\"atanh\",[\"typed\",\"config\",\"Complex\"],function(_ref){var typed=\n_ref.typed,config=_ref.config,Complex=_ref.Complex;return typed(\"atanh\",{number:function(x){return 1>=x&&-1<=x||config.predictable?(0,_index.atanhNumber)(x):(new Complex(x,0)).atanh()},Complex:function(x){return x.atanh()},BigNumber:function(x){return x.atanh()},\"Array | Matrix\":function(x){return(0,_collection.deepMap)(x,this,!0)}})});exports.createAtanh=require}","~:source","shadow$provide[\"module$node_modules$mathjs$lib$cjs$function$trigonometry$atanh\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtanh = void 0;\n\nvar _factory = require(\"../../utils/factory.js\");\n\nvar _collection = require(\"../../utils/collection.js\");\n\nvar _index = require(\"../../plain/number/index.js\");\n\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createAtanh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5)       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return (0, _index.atanhNumber)(x);\n      }\n\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since atanh(0) = 0\n      return (0, _collection.deepMap)(x, this, true);\n    }\n  });\n});\nexports.createAtanh = createAtanh;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mathjs$lib$cjs$plain$number$index","~$shadow.js","~$module$node_modules$mathjs$lib$cjs$utils$collection","~$module$node_modules$mathjs$lib$cjs$utils$factory"]],"~:properties",["^5",["Complex","__esModule","createAtanh","value","number","BigNumber"]],"~:compiled-at",1619135262318,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mathjs$lib$cjs$function$trigonometry$atanh.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAWP,OAAA,CAAQ,kDAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,uDAAR,CAITM,QAAAA,CAA6B,CAAC,CAAA,CAAGC,MAASG,CAAAA,OAAb,EAFtBC,OAEsB,CADdC,CAAC,OAADA,CAAU,QAAVA,CAAoB,SAApBA,CACc,CAA0C,QAAS,CAACC,IAAD,CAAO,CAAA,IACrFC;AAAQD,IAAKC,CAAAA,KADwE,CAErFC,OAASF,IAAKE,CAAAA,MAFuE,CAGrFC,QAAUH,IAAKG,CAAAA,OAuBnB,OAAOF,MAAA,CA5BEH,OA4BF,CAAY,CACjBM,OAAQA,QAAe,CAACC,CAAD,CAAI,CACzB,MAAS,EAAT,EAAIA,CAAJ,EAAmB,EAAnB,EAAcA,CAAd,EAAyBH,MAAOI,CAAAA,WAAhC,CACS,CAAC,CAAA,CAAGV,MAAOW,CAAAA,WAAX,EAAwBF,CAAxB,CADT,CAIyBG,CAAlB,IAAIL,OAAJ,CAAYE,CAAZ,CAAe,CAAf,CAAkBG,EAAAA,KAAlB,EALkB,CADV,CAQjBL,QAASA,QAAgB,CAACE,CAAD,CAAI,CAC3B,MAAOA,EAAEG,CAAAA,KAAF,EADoB,CARZ,CAWjBC,UAAWA,QAAkB,CAACJ,CAAD,CAAI,CAC/B,MAAOA,EAAEG,CAAAA,KAAF,EADwB,CAXhB,CAcjB,iBAAkBE,QAAoB,CAACL,CAAD,CAAI,CAExC,MAAO,CAAC,CAAA,CAAGV,WAAYgB,CAAAA,OAAhB,EAAyBN,CAAzB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAFiC,CAdzB,CAAZ,CA1BkF,CAA1D,CA8CjChB,QAAQI,CAAAA,WAAR,CAAsBA,OA9DqG;\",\n\"sources\":[\"node_modules/mathjs/lib/cjs/function/trigonometry/atanh.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mathjs$lib$cjs$function$trigonometry$atanh\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.createAtanh = void 0;\\n\\nvar _factory = require(\\\"../../utils/factory.js\\\");\\n\\nvar _collection = require(\\\"../../utils/collection.js\\\");\\n\\nvar _index = require(\\\"../../plain/number/index.js\\\");\\n\\nvar name = 'atanh';\\nvar dependencies = ['typed', 'config', 'Complex'];\\nvar createAtanh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\\n  var typed = _ref.typed,\\n      config = _ref.config,\\n      Complex = _ref.Complex;\\n\\n  /**\\n   * Calculate the hyperbolic arctangent of a value,\\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\\n   *\\n   * For matrices, the function is evaluated element wise.\\n   *\\n   * Syntax:\\n   *\\n   *    math.atanh(x)\\n   *\\n   * Examples:\\n   *\\n   *    math.atanh(0.5)       // returns 0.5493061443340549\\n   *\\n   * See also:\\n   *\\n   *    acosh, asinh\\n   *\\n   * @param {number | Complex | Array | Matrix} x  Function input\\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\\n   */\\n  return typed(name, {\\n    number: function number(x) {\\n      if (x <= 1 && x >= -1 || config.predictable) {\\n        return (0, _index.atanhNumber)(x);\\n      }\\n\\n      return new Complex(x, 0).atanh();\\n    },\\n    Complex: function Complex(x) {\\n      return x.atanh();\\n    },\\n    BigNumber: function BigNumber(x) {\\n      return x.atanh();\\n    },\\n    'Array | Matrix': function ArrayMatrix(x) {\\n      // deep map collection, skip zeros since atanh(0) = 0\\n      return (0, _collection.deepMap)(x, this, true);\\n    }\\n  });\\n});\\nexports.createAtanh = createAtanh;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"createAtanh\",\"_factory\",\"_collection\",\"_index\",\"factory\",\"name\",\"dependencies\",\"_ref\",\"typed\",\"config\",\"Complex\",\"number\",\"x\",\"predictable\",\"atanhNumber\",\"atanh\",\"BigNumber\",\"ArrayMatrix\",\"deepMap\"]\n}\n"]